<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">The bash shell</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-11-06">11/06/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/bash.gif" width="300" height="300" alt="bash command" class="floatRight"><p class="intro">Short for &quot;Bourne-Again Shell,&quot; <b>bash</b> is a <a href="/jargon/u/unix.htm">Unix</a> <a href="/jargon/s/shell.htm">shell</a>. Originally released in <a href="/history/1989.htm">1989</a> as a free replacement for the <a href="/jargon/b/bourne.htm">Bourne Shell</a>, <b>bash</b> is part of the <a href="/jargon/g/gnu.htm">GNU project</a>.</p>
<p>Bash is the default shell in <a href="/jargon/m/macosx.htm">macOS</a>, <a href="/jargon/w/wsl.htm">Windows Subsystem for Linux</a>, and the majority of <a href="/jargon/l/linux.htm">Linux</a> operating systems.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#desc">Description</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#files">Files</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#relatedcommands">Related commands</a></li>
<li><a href="#relatedpages">Related information</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="desc">Description</h2>
<p class="tab"><b>bash</b> is a <a href="/jargon/s/sh.htm">sh</a>-compatible command language <a href="/jargon/i/interpre.htm">interpreter</a> that executes commands read from the <a href="/jargon/s/stdin.htm">standard input</a> or from a file. <b>bash</b> also incorporates useful features from the <a href="/jargon/k/korn.htm">Korn</a> and <a href="/jargon/c/c.htm">C</a> <a href="/jargon/s/shell.htm">shells</a> (<a href="/unix/uksh.htm">ksh</a> and <a href="/unix/ucsh.htm">csh</a>).</p>
<p class="tab"><b>bash</b> is intended to be a conformant implementation of the Shell and Utilities portion of the <a href="/jargon/i/ieee.htm">IEEE</a> <a href="/jargon/p/posix.htm">POSIX</a> specification (IEEE Standard 1003.1). <b>bash</b> can be configured to be POSIX-conformant by default.</p>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">bash [<i>options</i>] [<i>file</i>]</pre>
<h2>Options</h2>
<p class="tab">All the single-<a href="/jargon/c/charact.htm">character</a> shell options documented in the description of the <a href="/unix/uset.htm"><b>set</b></a> builtin command can be used as options when invoking <b>bash</b>.</p>
<p class="tab">The following options are also available:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>-c</b> <i>string</i></td>
<td>If the <b>-c</b> option is present, then commands are read from <i>string</i>. If there are <a href="/jargon/a/argument.htm">arguments</a> after the string, they are assigned to the positional <a href="/jargon/p/paramete.htm">parameters</a>, starting with <b>$0</b>.</td>
</tr>
<tr class="tcw">
<td><b>-i</b></td>
<td>If the <b>-i</b> option is present, the shell is interactive. For more information about interactive shells, see <a href="#invocation">invocation</a>, below.</td>
</tr>
<tr class="tcw">
<td><b>-l</b></td>
<td>Make <b>bash</b> act as if it had been invoked as a <a href="/jargon/l/login.htm">login</a> shell. See the &quot;<a href="#invocation">Invocation</a>&quot; section below for more details.</td>
</tr>
<tr class="tcw">
<td><b>-r</b></td>
<td>If the <b>-r</b> option is present, the shell becomes restricted (see the &quot;<a href="#restricted-shell">Restricted Shell</a>&quot; section below for more details.</td>
</tr>
<tr class="tcw">
<td><b>-s</b></td>
<td>If the <b>-s</b> option is present, or if no arguments remain after option processing, then commands are read from the <a href="/jargon/s/stdin.htm">standard input</a>. This option allows the positional parameters to be set when invoking an interactive shell.</td>
</tr>
<tr class="tcw">
<td><b>-D</b></td>
<td>A list of all double-quoted strings preceded by <b>$</b> is printed on the standard output. These are the strings that are subject to language translation when the current locale is not C or POSIX. This implies the <b>-n</b> option; no commands are executed.</td>
</tr>
<tr class="tcw">
<td>[<b>-+</b>]<b>O</b> [<i>shopt_option</i>]</td>
<td><i>shopt_option</i> is one of the shell options accepted by the <b>shopt</b> builtin (see the section &quot;<a href="#28A">Shell Builtin Commands</a>&quot; for details). If <i>shopt_option</i> is present, <b>-O</b> sets the value of that option; <b>+O</b> unsets it. If <i>shopt_option</i> is not supplied, the names and values of the shell options accepted by shopt are printed on the standard output. If the invocation option is <i>+O</i>, the output is displayed in a format reused as input.</td>
</tr>
<tr class="tcw">
<td><b>--</b></td>
<td>A <b>--</b> signals the end of options and disables further option processing. Any arguments after the <b>--</b> are treated as file names and arguments. An argument of <b>-</b> is equivalent to <b>--</b>.</td>
</tr>
</table>
<p class="tab"><b>bash</b> also interprets some multi-character options. These options must appear on the command line before the single-character options to be recognized:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>--debugger</b></td>
<td>Arrange for the debugger profile to be executed before the shell starts. Turns on extended debugging mode (see the description of the <b>extdebug</b> option to the <b>shopt</b> builtin below).</td>
</tr>
<tr class="tcw">
<td><b>--dump-po-strings</b></td>
<td>Equivalent to <b>-D</b>, but the output is in the <a href="/jargon/g/gnu.htm">GNU</a> <b>gettext po</b> (portable object) file format.</td>
</tr>
<tr class="tcw">
<td><b>--dump-strings</b></td>
<td>Equivalent to <b>-D</b>.</td>
</tr>
<tr class="tcw">
<td><b>--help</b></td>
<td>Display a usage message and exit.</td>
</tr>
<tr class="tcw">
<td><b>--initfile</b> <i>file</i>, <b>--rcfile</b> <i>file</i></td>
<td>Execute commands from <i>file</i> instead of the system-wide initialization file <b>/etc/bash.bashrc</b> and the standard personal initialization file <b>~/.bashrc</b> if the shell is interactive (see the &quot;<a href="#invocation">Invocation</a>&quot; section below for details).</td>
</tr>
<tr class="tcw">
<td><b>--login</b></td>
<td>Equivalent to <b>-l</b></td>
</tr>
<tr class="tcw">
<td><b>--noediting</b></td>
<td>Do not use the GNU <b>readline</b> library to read command lines when the shell is interactive.</td>
</tr>
<tr class="tcw">
<td><b>--noprofile</b></td>
<td>Do not read either the system-wide startup file <b>/etc/profile</b> or any of the personal initialization files <b>~/.bash_profile</b>, <b>~/.bash_login</b>, or <b>~/.profile</b>. By default, <b>bash</b> reads these files when it is invoked as a login shell (see the &quot;<a href="#invocation">Invocation</a>&quot; section below for details).</td>
</tr>
<tr class="tcw">
<td><b>--norc</b></td>
<td>Do not read and execute the system-wide initialization file <b>/etc/bash.bashrc</b> and the personal initialization file <b>~/.bashrc</b> if the shell is interactive. This option is on by default if the shell is invoked as <b>sh</b>.</td>
</tr>
<tr class="tcw">
<td><b>--posix</b></td>
<td>Change the behavior of <b>bash</b> where the default operation differs from the POSIX standard to match the standard.</td>
</tr>
<tr class="tcw">
<td><b>--restricted</b></td>
<td>The shell becomes restricted (see the &quot;<a href="#restricted-shell">Restricted Shell</a>&quot; section below for details).</td>
</tr>
<tr class="tcw">
<td><b>--verbose</b></td>
<td>Equivalent to <b>-v</b>.</td>
</tr>
<tr class="tcw">
<td><b>--version</b></td>
<td>Show version information for this instance of <b>bash</b> and exit.</td>
</tr>
</table>
<h2 id="3A">Arguments</h2>
<p class="tab">If arguments remain after option processing, and neither the <b>-c</b> nor the <b>-s</b> option is supplied, the first argument is assumed to be the name of a file containing shell commands. If <b>bash</b> is invoked in this fashion, <b>$0</b> is set to the name of the file, and the positional parameters are set to the remaining arguments. <b>bash</b> reads and executes commands from this file, then exits. <b>bash</b>'s exit status is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. An attempt is first made to open the file in the current directory, and if no file is found, the shell searches the directories in <b>PATH</b> for the script.</p>
<h2 id="invocation">Invocation</h2>
<p class="tab">A login shell is one whose first character of argument zero is a <b>-</b>, or one started with the <b>--login</b> option.</p>
<p class="tab">An interactive shell is one started without non-option arguments and without the <b>-c</b> option whose standard input and error are both connected to terminals (as determined by <b>isatty</b>), or one started with the <b>-i</b> option. <b>PS1</b> (<a href="/jargon/c/commprom.htm">command prompt</a> string) is set and <b>$-</b> includes <b>i</b> if <b>bash</b> is interactive, allowing a shell script or a startup file to test this state.</p>
<p class="tab">The following paragraphs describe how <b>bash</b> executes its startup files. If any of the files exist but cannot be read, <b>bash</b> reports an error. Tildes are expanded in file names as described below under &quot;<a href="#tilde-expansion">Tilde Expansion</a>&quot; in the &quot;<a href="#expansion">Expansion</a>&quot; section.</p>
<p class="tab">When <b>bash</b> is invoked as an interactive login shell, or as a non-interactive shell with the <b>--login</b> option, it first reads and executes commands from the file <b>/etc/profile</b>, if that file exists. After reading that file, it looks for <b>~/.bash_profile</b>, <b>~/.bash_login</b>, and <b>~/.profile</b>, in that order, and reads and executes commands from the first one that exists and is readable. The <b>--noprofile</b> option may be used when the shell is started to inhibit this behavior.</p>
<p class="tab">When a login shell exits, <b>bash</b> reads and executes commands from the file <b>~/.bash_logout</b>, if it exists.</p>
<p class="tab">When an interactive shell that is not a login shell is started, <b>bash</b> reads and executes commands from <b>/etc/bash.bashrc</b> and <b>~/.bashrc</b>, if these files exist. This may be inhibited using the <b>--norc</b> option. The <b>--rcfile</b> file option forces <b>bash</b> to read and execute commands from file instead of <b>/etc/bash.bashrc</b> and <b>~/.bashrc</b>.</p>
<p class="tab">When <b>bash</b> is started non-interactively, to run a shell <a href="/jargon/s/script.htm">script</a>, for example, it looks for the variable <b>BASH_ENV</b> in the environment, expands its value if it appears there, and uses the expanded value as the name of a file to read and execute. <b>Bash</b> behaves as if the following command were executed:</p>
<pre class="tab tcy">if [ -n &quot;$BASH_ENV&quot; ]; then . &quot;$BASH_ENV&quot;; fi</pre>
<p class="tab">but the value of the <b>PATH</b> variable is not used to search for the file name.</p>
<p class="tab">If <b>bash</b> is invoked with the name <b>sh</b>, it tries to mimic the startup behavior of historical versions of <b>sh</b> as closely as possible, while conforming to the <a href="/jargon/p/posix.htm">POSIX</a> standard as well. When invoked as an interactive login shell, or a non-interactive shell with the <b>--login</b> option, it first attempts to read and execute commands from <b>/etc/profile</b> and <b>~/.profile</b>, in that order. The <b>--noprofile</b> option may be used to inhibit this behavior. When invoked as an interactive shell with the name <b>sh</b>, <b>bash</b> looks for the variable <b>ENV</b>, expands its value if it's defined, and uses the expanded value as the name of a file to read and execute. Since a shell invoked as <b>sh</b> does not attempt to read and execute commands from any other startup files, the <b>--rcfile</b> option has no effect. A non-interactive shell invoked with the name <b>sh</b> does not attempt to read any other startup files. When invoked as <b>sh</b>, <b>bash</b> enters posix mode after the startup files are read.</p>
<p class="tab">When <b>bash</b> is started in posix mode, as with the <b>--posix</b> command line option, it follows the POSIX standard for startup files. In this mode, interactive shells expand the <b>ENV</b> variable and commands are read and executed from the file whose name is the expanded value. No other startup files are read.</p>
<p class="tab"><b>Bash</b> attempts to determine when it is running with its standard input connected to a network connection, as when executed by the <a href="/unix/ursh.htm">remote shell</a> <a href="/jargon/d/daemon.htm">daemon</a>, usually <b>rshd</b>, or the <a href="/jargon/s/ssh.htm">secure shell</a> daemon <b>sshd</b>. If <b>bash</b> determines it is running in this fashion, it reads and executes commands from <b>~/.bashrc</b> and <b>~/.bashrc</b>, if these files exist and are readable. It does not do this if invoked as <b>sh</b>. The <b>--norc</b> option may be used to inhibit this behavior, and the <b>--rcfile</b> option may be used to force another file to be read, but <b>rshd</b> does not generally invoke the shell with those options or allow them to be specified.</p>
<p class="tab">If the shell is started with the effective user (or group) id not equal to the real user (or group) id, and the <b>-p</b> option is not supplied, no startup files are read, shell functions are not inherited from the environment, the <b>SHELLOPTS</b>, <b>BASHOPTS</b>, <b>CDPATH</b>, and <b>GLOBIGNORE</b> variables, if they appear in the environment, are ignored, and the effective user id is set to the real user id. If the <b>-p</b> option is supplied at invocation, the startup behavior is the same, but the effective user id is not reset.</p>
<h2 id="5A">Definitions</h2>
<p class="tab">In the following sections, these terms are defined as follows:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:170px"><b>blank</b></td>
<td>A blank space or tab.</td>
</tr>
<tr class="tcw">
<td><b>word</b></td>
<td>A sequence of characters considered as a single unit by the shell. Also known as a <b>token.</b></td>
</tr>
<tr class="tcw">
<td><b>name</b></td>
<td>A <b>word</b> consisting only of <a href="/jargon/a/alphanum.htm">alphanumeric</a> characters and underscores, and beginning with alphabetic character or an underscore. Also referred to as an <b>identifier</b>.</td>
</tr>
<tr class="tcw">
<td><b>metacharacter</b></td>
<td>A character that, when unquoted, separates words. A <b>bash</b> metacharacter is one of the following: <b>|</b>, <b>&amp;</b>, <b>;</b>, <b>(</b>, <b>)</b>, <b>&lt;</b>, <b>&gt;</b>, <b>space</b>, or <b>tab</b>.</td>
 </tr>
<tr class="tcw">
<td><b>control operator</b></td>
<td>A <b>token</b> that performs a control function. It is one of the following symbols: <b>||</b>, <b>&amp;</b>, <b>&amp;&amp;</b>, <b>;</b>, <b>;;</b>, <b>(</b>, <b>)</b>, <b>|</b>, <b>|&amp;</b>, or a newline.</td>
</tr>
</table>
<h2 id="reserved-words">Reserved words</h2>
<p class="tab"><i>Reserved words</i> are words that have special meaning to the shell. The following words are recognized as reserved when unquoted and either the first word or a simple command (see the &quot;<a href="#shell-grammar">Shell Grammar</a>&quot; section below), or the third word of a <b>case</b> or <b>for</b> command:</p>
<pre class="tab">!
case
do
done
elif
else
esac
fi
for
function
if
in
select
then
until
while
{
}
time
[[
]]</pre>
<h2 id="shell-grammar">Shell grammar</h2>
<p class="tabb" id="7A1">Simple Commands</p>
<p class="tab">A <i>simple command</i> is an optional sequence of variable assignments followed by blank-separated words and redirections, and terminated by a control operator. The first word specifies the command to be executed, and is passed as argument zero. The remaining words are passed as arguments to the invoked command.</p>
<p class="tab">The return value of a simple command is its exit status, or <b>128+n</b> if the command is terminated by signal <b>n</b>.</p>
<p class="tabb" id="pipelines">Pipelines</p>
<p class="tab">A <i>pipeline</i> is a sequence of one or more commands separated by one of the control operators <b>|</b> or <b>|&amp;</b>. The format for a pipeline is:</p>
<pre class="tab tcy">[ <b>time</b> [ <b>-p</b> ]] [ <b>!</b> ] <i>command</i> [[ <b>|</b> &#9130;  <b>|&amp;</b> ] <i>command2</i> ... ]</pre>
<p class="tab">The standard output of <b>command</b> connects via a pipe to the standard input of <b>command2</b>. This connection is performed before any redirections specified by the command (see the &quot;<a href="#redirection">Redirection</a>&quot; section below for details). If <b>|&amp;</b> is used, the standard error of <b>command</b> connects to <b>command2</b>'s standard input through the pipe; it is shorthand for <b>2&gt;&amp;1 |</b>. This implicit redirection of the standard error is performed after any redirections specified by the command.</p>
<p class="tab">The return status of a pipeline is the exit status of the last command, unless the <b>pipefail</b> option is enabled. If <b>pipefail</b> is enabled, the pipeline's return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit successfully. If the reserved word <b>!</b> precedes a pipeline, the exit status of that pipeline is the logical negation of the exit status as described above. The shell waits for all commands in the pipeline to terminate before returning a value.</p>
<p class="tab">If the <b>time</b> reserved word precedes a pipeline, the elapsed, user, and system time consumed by its execution are reported when the pipeline terminates. The <b>-p</b> option changes the output format to that specified by POSIX. When the shell is in posix mode, it does not recognize <b>time</b> as a reserved word if the next token begins with a '<b>-</b>'. The <b>TIMEFORMAT</b> variable may be set to a format string that specifies how the timing information should be displayed; see the description of <b>TIMEFORMAT</b> in the &quot;<a href="#shell-variables">Shell Variables</a>&quot; section below for details.</p>
<p class="tab">When the shell is in posix mode, <b>time</b> may be followed by a newline. In this case, the shell displays the total user and system time consumed by the shell and its children. The <b>TIMEFORMAT</b> variable may be used to specify the format of the time information.</p>
<p class="tab">Each command in a pipeline is executed as a separate process (a subshell).</p>
<p class="tabb" id="7A3">Lists</p>
<p class="tab">A <i>list</i> is a sequence of one or more pipelines separated by one of the operators <b>;</b>, <b>&amp;</b>, <b>&amp;&amp;</b>, or <b>||</b>, and optionally terminated by one of <b>;</b>, <b>&amp;</b>, or <b>&lt;newline&gt;</b>.</p>
<p class="tab">Of these list operators, <b>&amp;&amp;</b> and <b>||</b> have equal precedence, followed by <b>;</b> and <b>&amp;</b>, which have equal precedence.</p>
<p class="tab">A sequence of one or more newlines may appear in a list instead of a semicolon to delimit commands.</p>
<p class="tab">If a command is terminated by the control operator <b>&amp;</b>, the shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0. Commands separated by a <b>;</b> are executed sequentially; the shell waits for each command to terminate in turn. The return status is the exit status of the last command executed.</p>
<p class="tab"><b>AND</b> and <b>OR</b> lists are sequences of one of more pipelines separated by the <b>&amp;&amp;</b> and <b>||</b> control operators, respectively. <b>AND</b> and <b>OR</b> lists are executed with left associativity. An <b>AND</b> list has the form</p>
<pre class="tab tcy"><i>command1</i> &amp;&amp; <i>command2</i></pre>
<p class="tab"><i>command2</i> is executed if, and only if, <i>command1</i> returns an exit status of zero.</p>
<p class="tab">An <b>OR</b> list has the form</p>
<pre class="tab tcy"><i>command1</i> || <i>command2</i></pre>
<p class="tab"><i>command2</i> is executed if and only if <i>command1</i> returns a non-zero exit status. The return status of <b>AND</b> and <b>OR</b> lists is the exit status of the last command executed in the list.</p>
<p class="tabb" id="compound-commands">Compound Commands</p>
<p class="tab">A <i>compound command</i> is one of the following:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>(</b><i>list</i><b>)</b></td>
<td><i>list</i> is executed in a subshell environment (see the &quot;<a href="#command-exec-environment">Command Execution Environment</a>&quot; section below for details). Variable assignments and builtin commands that affect the shell's environment do not remain in effect after the command completes. The return status is the exit status of list.</td>
</tr>
<tr class="tcw">
<td><b>{</b> <i>list</i><b>; }</b></td>
<td><i>list</i> is executed in the current shell environment. The <i>list</i> must be terminated with a newline or semicolon. This is known as a <i>group command</i>. The return status is the exit status of <i>list</i>. Note that unlike the metacharacters <b>(</b> and <b>)</b>, <b>{</b> and <b>}</b> are reserved words and must occur where a reserved word is permitted to be recognized. Since they do not cause a word break, they must be separated from list by whitespace or another shell metacharacter.</td>
</tr>
<tr class="tcw">
<td><b>((</b><i>expression</i><b>))</b></td>
<td>The <i>expression</i> is evaluated according to the rules described below in the section &quot;<a href="#15A">Arithmetic Evaluation</a>&quot;. If the value of the expression is non-zero, the return status is 0; otherwise the return status is 1. This is exactly equivalent to <b>let &quot;</b><i>expression</i><b>&quot;</b>.</td>
</tr>
<tr class="tcw">
<td id="double-bracket-conditional-evaluation"><b>[[</b> <i>expression</i> <b>]]</b></td>
<td>Return a status of 0 or 1 depending on the evaluation of the conditional expression <i>expression</i>. Expressions are composed of the primaries described below under the section "<a href="#conditional-expressions">Conditional Expressions</a>." Word splitting and <a href="/jargon/p/path.htm">pathname</a> expansion are not performed on the words between the <b>[[</b> and <b>]]</b>; tilde expansion, parameter and variable expansion, arithmetic expansion, command substitution, process substitution, and quote removal are performed. Conditional operators such as <b>-f</b> must be unquoted to be recognized as primaries.<br><br>When used with <b>[[</b>, the <b>&lt;</b> and <b>&gt;</b> operators sort lexicographically using the current locale.</td>
</tr>
</table>
<p class="tab">See the description of the <a href="/unix/test.htm">test</a> builtin command (in the section &quot;<a href="#28A">Shell Builtin Commands</a>&quot; below) for the handling of parameters (i.e., missing parameters).</p>
<p class="tab">When the <b>==</b> and <b>!=</b> operators are used, the string to the right of the operator is considered a pattern and matched according to the rules described below under Pattern Matching. If the shell option <b>nocasematch</b> is enabled, the match is performed without regard to the case of alphabetic characters. The return value is 0 if the string matches (<b>==</b>) or does not match (<b>!=</b>) the pattern, and 1 otherwise. Any part of the pattern may be quoted to force it to be matched as a string.</p>
<p class="tab">An additional binary operator, <b>=~</b>, is available, with the same precedence as <b>==</b> and <b>!=</b>. When it is used, the string to the right of the operator is considered an extended regular expression and matched accordingly (as in <a href="/jargon/r/regex.htm">regex</a>). The return value is 0 if the string matches the pattern, and 1 otherwise. If the regular expression is syntactically incorrect, the conditional expression's return value is 2. If the shell option <b>nocasematch</b> is enabled, the match is performed without regard to the case of alphabetic characters. Any part of the pattern may be quoted to force it to be matched as a string. Substrings matched by parenthesized subexpressions in the regular expression are saved in the array variable <b>BASH_REMATCH</b>. The element of BASH_REMATCH with index 0 is the portion of the string matching the entire regular expression. The element of BASH_REMATCH with index <b>n</b> is the portion of the string matching the <b>n</b>th parenthesized subexpression.</p>
<p class="tab">Expressions may be combined using the following operators, listed in decreasing order of precedence:</p>
<pre class="tab tcy">( <i>expression</i> )</pre>
<p class="tab">Returns the value of <i>expression</i>. This may be used to override the normal precedence of operators.</p>
<pre class="tab tcy">! <i>expression</i></pre>
<p class="tab">True if <i>expression</i> is false.</p>
<pre class="tab tcy"><i>expression1</i> &amp;&amp; <i>expression2</i></pre>
<p class="tab">True if both <i>expression1</i> and <i>expression2</i> are true.</p>
<pre class="tab tcy"><i>expression1</i> || <i>expression2</i></pre>
<p class="tab">True if either <i>expression1</i> or <i>expression2</i> is true.</p>
<p class="tab">The <b>&amp;&amp;</b> and <b>||</b> operators do not evaluate <i>expression2</i> if the value of <i>expression1</i> is sufficient to determine the return value of the entire conditional expression.</p>
<pre class="tab tcy" id="for">for <i>name</i> [ [ in [ <i>word</i> ... ] ] ; ] do <i>list</i> ; done</pre>
<p class="tab">The list of <i>word</i>s following <b>in</b> is expanded, generating a list of items. The variable <i>name</i> is set to each element of this list in turn, and <b>list</b> is executed each time. If the <b>in</b> word is omitted, the <b>for</b> command executes <i>list</i> once for each positional parameter that is set (see the &quot;<a href="#parameters">Parameters</a>&quot; section below). The return status is the exit status of the last command that executes. If the expansion of the items following <b>in</b> results in an empty list, no commands are executed, and the return status is <b>0</b>.</p>
<pre class="tab tcy">for (( <i>expr1</i> ; <i>expr2</i> ; <i>expr3</i> )) ; do <i>list</i> ; done</pre>
<p class="tab">First, the arithmetic expression <i>expr1</i> is evaluated according to the rules described below under &quot;<a href="#11A5">Arithmetic Expansion</a>&quot;. The arithmetic expression <i>expr2</i> is then evaluated repeatedly until it evaluates to zero. Each time <i>expr2</i> evaluates to a non-zero value, <i>list</i> is executed and the arithmetic expression <i>expr3</i> is evaluated. If any expression is omitted, it behaves as if it evaluates to 1. The return value is the exit status of the last command in <i>list</i> that is executed, or false if any of the expressions is invalid.</p>
<pre class="tab tcy">select <i>name</i> [ in <i>word</i> ] ; do <i>list</i> ; done</pre>
<p class="tab">The list of <i>word</i>s following <b>in</b> is expanded, generating a list of items. The set of expanded words is printed on the standard error, each preceded by a number. If the <b>in</b> word is omitted, the positional parameters are printed (see the &quot;<a href="#parameters">Parameters</a>&quot; section below). The <b>PS3</b> prompt is then displayed and a line read from the standard input. If the line consists of a number corresponding to one of the displayed words, then the value of <i>name</i> is set to that word. If the line is empty, the words and prompt are displayed again. If <b>EOF</b> is read, the command completes. Any other value read causes name to be set to <a href="/jargon/n/null.htm">null</a>. The line read is saved in the variable <b>REPLY</b>. The list is executed after each selection until a <a href="/jargon/b/break.htm">break</a> command is executed. The exit status of <b>select</b> is the exit status of the last command executed in <i>list</i>, or zero if no commands were executed.</p>
<pre class="tab tcy">case <i>word</i> in [ [(] <i>pattern</i> [ | <i>pattern</i> ] ... ) <i>list</i> ;; ] ... esac</pre>
<p class="tab">A <b>case</b> command first expands <i>word</i>, and tries to match it against each <i>pattern</i> in turn, using the same matching rules as for pathname expansion (see the &quot;<a href="#pathname-expansion">Pathname Expansion</a>&quot; section, below). The <i>word</i> is expanded using tilde expansion, parameter and variable expansion, arithmetic substitution, command substitution, process substitution and quote removal. Each pattern examined is expanded using tilde expansion, parameter and variable expansion, arithmetic substitution, command substitution, and process substitution. If the shell option <b>nocasematch</b> is enabled, the match is performed without regard to the case of alphabetic characters. When a match is found, the corresponding <i>list</i> is executed. If the <b>;;</b> operator is used, no subsequent matches are attempted after the first pattern match. Using <b>;&amp;</b> in place of <b>;;</b> causes execution to continue with the <i>list</i> associated with the next set of <i>pattern</i>s. Using <b>;;&amp;</b> in place of <b>;;</b> causes the shell to test the next <i>pattern list</i> in the statement, if any, and execute any associated <i>list</i> on a successful match. The exit status is zero if no <i>pattern</i> matches. Otherwise, it is the exit status of the last command executed in <i>list</i>.</p>
<pre class="tab tcy" id="if">if <i>list</i>; then <i>list</i>; [ elif <i>list</i>; then <i>list</i>; ] ... [ else <i>list</i>; ] fi</pre>
<p class="tab">The <b>if</b> <i>list</i> is executed. If its exit status is zero, the <b>then</b> <i>list</i> is executed. Otherwise, each <b>elif</b> <i>list</i> is executed in turn, and if its exit status is zero, the corresponding <b>then</b> <i>list</i> is executed and the command completes. Otherwise, the <b>else</b> <i>list</i> is executed, if present. The exit status is the exit status of the last command executed, or zero if no condition tested true.</p>
<pre class="tab tcy" id="while">while <i>list-1</i>; do <i>list-2</i>; done</pre>
<pre class="tab tcy" id="until">until <i>list-1</i>; do <i>list-2</i>; done</pre>
<p class="tab">The <b>while</b> command continuously executes the list <i>list-2</i> as long as the last command in the list <i>list-1</i> returns an exit status of zero. The <b>until</b> command is identical to the <b>while</b> command, except that the test is negated; <i>list-2</i> is executed as long as the last command in <i>list-1</i> returns a non-zero exit status. The exit status of the <b>while</b> and <b>until</b> commands is the exit status of the last command executed in <i>list-2</i>, or zero if none was executed.</p>
<p class="tabb" id="7A5">Coprocesses</p>
<p class="tab">A &quot;coprocess&quot; is a shell command preceded by the <b>coproc</b> reserved word. A <b>coprocess</b> is executed asynchronously in a subshell, as if the command had been terminated with the <b>&amp;</b> control operator, with a two-way pipe established between the executing shell and the coprocess.</p>
<p class="tab">The format for a coprocess is:</p>
<pre class="tab tcy">coproc [<i>NAME</i>] <i>command</i> [<i>redirections</i>]</pre>
<p class="tab">This creates a coprocess named <i>NAME</i>. If <i>NAME</i> is not supplied, the default name is <b>COPROC</b>. The <i>NAME</i> must not be supplied if <i>command</i> is a simple command (see <a href="#7A1">above</a>); otherwise, it is interpreted as the first word of the simple command. When the <b>coproc</b> is executed, the shell creates an array variable (see the &quot;<a href="#arrays">Arrays</a>&quot; section below) named <i>NAME</i> in the context of the executing shell. The standard output of <i>command</i> connects via a pipe to a file descriptor in the executing shell, and that file descriptor is assigned to <i>NAME</i>[0]. The standard input of <i>command</i> connects via a pipe to a file descriptor in the executing shell, and that file descriptor is assigned to <i>NAME</i>[1]. This pipe is established before any redirections specified by the command (see the &quot;<a href="#redirection">Redirection</a>&quot; section below). The file descriptors can be utilized as arguments to shell commands and redirections using standard word expansions. The <a href="/jargon/p/pid.htm">process ID</a> of the shell spawned to execute the coprocess is available as the value of the variable <b>NAME_PID</b>. The <a href="/unix/uwait.htm">wait</a> builtin command may be used to wait for the coprocess to terminate.</p>
<p class="tab">The return status of a coprocess is the exit status of command.</p>
<p class="tabb" id="shell-function-definitions">Shell Function Definitions</p>
<p class="tab">A <i>shell function</i> is an object that is called like a simple command and executes a <i>compound command</i> with a new set of positional parameters. Shell functions are declared as follows:</p>
<pre class="tab tcy">name () <i>compound-command</i> [<i>redirection</i>]</pre>
<pre class="tab tcy">function name [()] <i>compound-command</i> [<i>redirection</i>]</pre>
<p class="tab">This defines a function named <i>name</i>. The reserved word <b>function</b> is optional. If the <b>function</b> reserved word is supplied, the parentheses are optional. The body of the function is the compound command <i>compound-command</i> (see "<a href="#compound-commands">Compound Commands</a>" section above). That command is usually a list of commands between <b>{</b> and <b>}</b>, but may be any command listed under Compound Commands above. The <b>compound-command</b> is executed whenever <i>name</i> is specified as the name of a simple command. Any redirections (see "<a href="#redirection">Redirection</a>" section below) specified when a function is defined are performed when the function is executed. The exit status of a function definition is zero unless a syntax error occurs or a readonly function with the same name already exists. When executed, the exit status of a function is the exit status of the last command executed in the body. See "<a href="#functions">Functions</a>" section below.</p>
<h2 id="comments">Comments</h2>
<p class="tab">In a non-interactive shell, or an interactive shell where the <b>interactive_comments</b> option to the <b>shopt</b> builtin is enabled (see &quot;<a href="#28A">Shell Builtin Commands</a>&quot; section below), a word beginning with <b>#</b> causes that word and all remaining characters on that line to be ignored. An interactive shell without the <b>interactive_comments</b> option enabled does not allow comments. The <b>interactive_comments</b> option is on by default in interactive shells.</p>
<h2 id="9A">Quoting</h2>
<p class="tab"><i>Quoting</i> is used to remove the special meaning of certain characters or words to the shell. Quoting can disable special treatment for special characters, to prevent reserved words from being recognized as such, and to prevent parameter expansion.</p>
<p class="tab">Each of the metacharacters listed above under the "<a href="#5A">Definitions</a>" section has special meaning to the shell and must be quoted if it's to represent itself.</p>
<p class="tab">When the command history expansion facilities are used (see the "<a href="#history-expansion">History Expansion</a>" section below), the history expansion character, usually <b>!</b>, must be quoted to prevent history expansion.</p>
<p class="tab">There are three quoting mechanisms: the escape character, single quotes, and double quotes.</p>
<p class="tab">A non-quoted backslash (<b>\</b>) is the escape character. It preserves the literal value of the next character that follows, except for <b>&lt;newline&gt;</b>. If a <b>\&lt;newline&gt;</b> pair appears, and the backslash is not itself quoted, the <b>\&lt;newline&gt;</b> is treated as a line continuation (that is, it is removed from the input stream and effectively ignored).</p>
<p class="tab">Enclosing characters in single quotes preserves the literal value of each character in the quotes. A single quote may not occur between single quotes, even when preceded by a backslash.</p>
<p class="tab">Enclosing characters in double quotes preserves the literal value of all characters in the quotes, except for <b>$</b>, <b>&#96;</b>, <b>\</b>, and, when history expansion is enabled, <b>!</b>. The characters <b>$</b> and <b>&#96;</b> retain their special meaning within double quotes. The backslash retains its special meaning only when followed by one of the following characters: <b>$</b>, <b>&#96;</b>, <b>"</b>, <b>\</b>, or <b>&lt;newline&gt;</b>. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion is performed unless an <b>!</b> appearing in double quotes is escaped using a backslash. The backslash preceding the <b>!</b> is not removed.</p>
<p class="tab">The special parameters <b>*</b> and <b>@</b> have special meaning when in double quotes (see the section "<a href="#parameters">Parameters</a>" below).</p>
<p class="tab" id="expand-string-interpret-escapes">Words of the form <b>$'string'</b> are treated specially. The word expands to string, with backslash-escaped characters replaced as specified by the <a href="/jargon/a/ansi.htm">ANSI</a> C standard. Backslash escape sequences, if present, are decoded as follows:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>\a</b></td>
<td>alert (bell)</td>
</tr>
<tr class="tcw">
<td><b>\b</b></td>
<td>backspace</td>
</tr>
<tr class="tcw">
<td><b>\e</b>, <b>\E</b></td>
<td>an escape character</td>
</tr>
<tr class="tcw">
<td><b>\f</b></td>
<td>form feed</td>
</tr>
<tr class="tcw">
<td><b>\n</b></td>
<td>new line</td>
</tr>
<tr class="tcw">
<td><b>\r</b></td>
<td>carriage return</td>
</tr>
<tr class="tcw">
<td><b>\t</b></td>
<td>horizontal tab</td>
</tr>
<tr class="tcw">
<td><b>\v</b></td>
<td>vertical tab</td>
</tr>
<tr class="tcw">
<td><b>\\</b></td>
<td>backslash</td>
</tr>
<tr class="tcw">
<td><b>\'</b></td>
<td>single quote</td>
</tr>
<tr class="tcw">
<td><b>\"</b></td>
<td>double quote</td>
</tr>
<tr class="tcw">
<td><b>\</b><i>nnn</i></td>
<td>the eight-bit character whose value is the <a href="/jargon/o/octal.htm">octal</a> value <i>nnn</i> (one to three digits)</td>
</tr>
<tr class="tcw">
<td><b>\x</b><i>HH</i></td>
<td>the eight-bit character whose value is the <a href="/jargon/h/hex.htm">hexadecimal</a> value <i>HH</i> (one or two hex digits)</td>
</tr>
<tr class="tcw">
<td><b>\u</b><i>HHHH</i></td>
<td>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value <i>HHHH</i> (one to four hex digits)</td>
</tr>
<tr class="tcw">
<td><b>\U</b><i>HHHHHHHH</i></td>
<td>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value <i>HHHHHHHH</i> (one to eight hex digits)</td>
</tr>
<tr class="tcw">
<td><b>\c</b><i>x</i></td>
<td>a control-<i>x</i> character</td>
</tr>
</table>
<p class="tab">The expanded result is single-quoted, as if the dollar sign had not been present.</p>
<p class="tab">A double-quoted string preceded by a dollar sign (<b>$"string"</b>) causes the string to be translated according to the current locale. If the current locale is <b>C</b> or <b>POSIX</b>, the dollar sign is ignored. If the string is translated and replaced, the replacement is double-quoted.</p>
<h2 id="parameters">Parameters</h2>
<p class="tab">A <i>parameter</i> is an entity that stores values. It can be a name, a number, or one of the special characters listed below under Special Parameters. A variable is a parameter denoted by a name. A variable has a value and zero or more attributes. Attributes are assigned using the <b>declare</b> builtin command (see <b>declare</b> below in the &quot;<a href="#28A">Shell Builtin Commands</a>&quot; section). A parameter is set if it's assigned a value. The null string is a valid value. Once a variable is set, it may be unset only using the <b>unset</b> builtin command (also documented in the &quot;<a href="#28A">Shell Builtin Commands</a>&quot; section).</p>
<p class="tab">A variable may be assigned by a statement of the form:</p>
<pre class="tab tcy"><i>name</i>=[<i>value</i>]</pre>
<p class="tab">If <i>value</i> is not given, the variable is assigned the null string. All values undergo tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and quote removal (see the section "<a href="#expansion">Expansion</a>" below). If the variable has its integer attribute set, then value is evaluated as an arithmetic expression even if the <b>$((...))</b> expansion is not used (see the section "<a href="#11A5">Arithmetic Expansion</a>" below). Word splitting is not performed, except for "<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cce88c">[email&#160;protected]</a></b>" as explained below under <a href="#special-parameters">Special Parameters</a>. Pathname expansion is not performed. Assignment statements may also appear as arguments to the <b>alias</b>, <b>declare</b>, <b>typeset</b>, <b>export</b>, <b>readonly</b>, and <b>local</b> builtin commands.</p>
<p class="tab">In the context where an assignment statement is assigning a value to a shell variable or array index, the <b>+=</b> operator can append to or add to the variable's previous value. When <b>+=</b> is applied to a variable for which the integer attribute is set, <i>value</i> is evaluated as an arithmetic expression and added to the variable's current value, which is also evaluated. When <b>+=</b> is applied to an array variable using compound assignment (see "<a href="#arrays">Arrays</a>" below), the variable's value is not unset (as it is when using <b>=</b>), and new values are appended to the array beginning at one greater than the array's maximum index (for indexed arrays) or added as additional key-value pairs in an associative array. When applied to a string-valued variable, value is expanded and appended to the variable's value.</p>
<p class="tabb" id="10A1">Positional parameters</p>
<p class="tab">A <i>positional parameter</i> is a parameter denoted by one or more digits, other than the single digit 0. Positional parameters are assigned from the shell's arguments when it is invoked, and may be reassigned using the <b>set</b> builtin command. Positional parameters may not be assigned to with assignment statements. The positional parameters are temporarily replaced when a shell function is executed (see the section "<a href="#functions">Functions</a>" below).</p>
<p class="tab">When a positional parameter consisting of more than a single digit is expanded, it must be enclosed in braces (see the section "<a href="#expansion">Expansion</a>" below).</p>
<p class="tabb" id="special-parameters">Special parameters</p>
<p class="tab">The shell treats several parameters specially. These parameters may only be referenced; assignment to them is not allowed.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>*</b></td>
<td>Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the IFS special variable. That is, "<b>$*</b>" is equivalent to "<b>$1c$2c...</b>", where <b>c</b> is the first character of the value of the <b>IFS</b> variable. If IFS is unset, the parameters are separated by spaces. If IFS is null, the parameters are joined without intervening separators. The <b>@</b> Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, each parameter expands to a separate word. That is, "<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a581e5">[email&#160;protected]</a></b>" is equivalent to "<b>$1</b>" "<b>$2</b>" ... If the double-quoted expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined with the last part of the original word. When there are no positional parameters, "<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3a1e7a">[email&#160;protected]</a></b>" and <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d6f296">[email&#160;protected]</a></b> expand to nothing (i.e., they are removed).</td>
</tr>
<tr class="tcw">
<td><b>#</b></td>
<td>Expands to the number of positional parameters in decimal.</td>
</tr>
<tr class="tcw" id="special-parameter-?">
<td><b>?</b></td>
<td>Expands to the exit status of the most recently executed foreground pipeline.</td>
</tr>
<tr class="tcw">
<td><b>-</b></td>
<td>Expands to the current option flags as specified upon invocation, by the <b>set</b> builtin command, or those set by the shell itself (such as the <b>-i</b> option). The <b>$</b> Expands to the process ID of the shell. In a <b>()</b> subshell, it expands to the process ID of the current shell, not the subshell.</td>
</tr>
<tr class="tcw">
<td><b>!</b></td>
<td>Expands to the process ID of the most recently executed background (asynchronous) command.</td>
</tr>
<tr class="tcw" id="special-parameter-0">
<td><b>0</b></td>
<td>Expands to the name of the shell or shell script. This is set at shell initialization. If <b>bash</b> is invoked with a file of commands, <b>$0</b> is set to the name of that file. If bash is started with the <b>-c</b> option, then <b>$0</b> is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</td>
</tr>
<tr class="tcw">
<td><b>_</b></td>
<td>At shell startup, set to the absolute pathname used to invoke the shell or shell script being executed as passed in the environment or argument list. Subsequently, expands to the last argument to the previous command, after expansion. Also set to the full pathname used to invoke each command executed and placed in the environment exported to that command. When checking mail, this parameter holds the name of the mail file currently being checked.</td>
</tr>
</table>
<p class="tabb" id="shell-variables">Shell variables</p>
<p class="tab">The following variables are set by the shell:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>BASH</b></td>
<td>Expands to the full file name used to invoke this instance of bash.</td>
</tr>
<tr class="tcw">
<td><b>BASHOPTS</b></td>
<td>A colon-separated list of enabled shell options. Each word in the list is a valid argument for the <b>-s</b> option to the <b>shopt</b> builtin command (see the section "<a href="#28A">Shell Builtin Commands</a>" below). The options appearing in <b>BASHOPTS</b> are those reported as on by <b>shopt</b>. If this variable is in the environment when bash starts up, each shell option in the list is enabled before reading any startup files. This variable is read-only.</td>
</tr>
<tr class="tcw">
<td><b>BASHPID</b></td>
<td>Expands to the process ID of the current bash process. This differs from <b>$$</b> under certain circumstances, such as subshells that do not require bash to be re-initialized.</td>
</tr>
<tr class="tcw">
<td><b>BASH_ALIASES</b></td>
<td>Associative array variable whose members correspond to the internal list of aliases as maintained by the alias builtin. Elements added to this array appear in the alias list; <b>unset</b>ting array elements cause aliases to be removed from the alias list.</td>
</tr>
<tr class="tcw">
<td id="BASH_ARGC"><p><b>BASH_ARGC</b></p></td>
<td>Array variable whose values are the number of parameters in each frame of the current bash execution call stack. The number of parameters to the current subroutine (shell function or script executed with . or source) is at the top of the stack. When a subroutine is executed, the number of parameters passed is pushed onto <b>BASH_ARGC</b>. The shell sets <b>BASH_ARGC</b> only when in extended debugging mode (see the description of the <b>extdebug</b> option to the <b>shopt</b> builtin below)</td>
</tr>
<tr class="tcw">
<td><b>BASH_ARGV</b></td>
<td>Array variable containing all the parameters in the current bash execution call stack. The final parameter of the last subroutine call is at the top of the stack; the first parameter of the initial call is at the bottom. When a subroutine is executed, the parameters supplied are pushed onto <b>BASH_ARGV</b>. The shell sets <b>BASH_ARGV</b> only when in extended debugging mode (see the description of the <b>extdebug</b> option to the <b>shopt</b> builtin below)</td>
</tr>
<tr class="tcw">
<td><b>BASH_CMDS</b></td>
<td>Associative array variable whose members correspond to the internal hash table of commands as maintained by the <b>hash</b> builtin. Elements added to this array appear in the hash table; <b>unset</b>ting array elements cause commands to be removed from the hash table.</td>
</tr>
<tr class="tcw">
<td><b>BASH_COMMAND</b></td>
<td>The command currently being executed or about to be executed, unless the shell is executing a command as the result of a trap, where it is the command executing at the time of the trap.</td>
</tr>
<tr class="tcw">
<td><b>BASH_EXECUTION_STRING</b></td>
<td>The command argument to the <b>-c</b> invocation option.</td>
</tr>
<tr class="tcw">
<td><b>BASH_LINENO</b></td>
<td>Array variable whose members are the line numbers in source files where each corresponding member of <b>FUNCNAME</b> was invoked. The <b>${BASH_LINENO[$i]}</b> is the line number in the source file (<b>${BASH_SOURCE[$i+1]}</b>) where <b>${FUNCNAME[$i]}</b> was called (or <b>${BASH_LINENO[$i-1]}</b> if referenced within another shell function). Use <b>LINENO</b> to obtain the current line number.</td>
</tr>
<tr class="tcw">
<td><b>BASH_REMATCH</b></td>
<td>Array variable whose members are assigned by the <b>=~</b> binary operator to the <b>[[</b> conditional command. The element with index 0 is the portion of the string matching the entire regular expression. The element with index <b>n</b> is the portion of the string matching the nth parenthesized subexpression. This variable is read-only.</td>
</tr>
<tr class="tcw">
<td><b>BASH_SOURCE</b></td>
<td>Array variable whose members are the source file names where the corresponding shell function names in the <b>FUNCNAME</b> array variable are defined. The shell function <b>${FUNCNAME[$i]}</b> is defined in the file <b>${BASH_SOURCE[$i]}</b> and called from <b>${BASH_SOURCE[$i+1]}.</b></td>
</tr>
<tr class="tcw">
<td><b>BASH_SUBSHELL</b></td>
<td>Incremented by one each time a subshell or subshell environment is spawned. The initial value is 0.</td>
</tr>
<tr class="tcw">
<td><b>BASH_VERSINFO</b></td>
<td>Read-only array variable whose members hold version information for this instance of bash. The values assigned to the array members are as follows:<br><br><b>BASH_VERSINFO[0]</b>: The major version number (the release).<br><br><b>BASH_VERSINFO[1]</b>: The minor version number (the version).<br><br><b>BASH_VERSINFO[2]</b>: The patch level.<br><br><b>BASH_VERSINFO[3]</b>: The build version.<br><br><b>BASH_VERSINFO[4]</b>: The release status (e.g., beta1).<br><br><b>BASH_VERSINFO[5]</b>: The value of MACHTYPE.</td>
</tr>
<tr class="tcw">
<td><b>BASH_VERSION</b></td>
<td>Expands to a string describing the version of this instance of bash.</td>
</tr>
<tr class="tcw">
<td><b>COMP_CWORD</b></td>
<td>An index into <b>${COMP_WORDS}</b> of the word containing the current cursor position. This variable is available only in shell functions invoked by the programmable completion facilities (see "<a href="#programmable-completion">Programmable Completion</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>COMP_KEY</b></td>
<td>The key (or final key of a key sequence) used to invoke the current completion function.</td>
</tr>
<tr class="tcw">
<td><b>COMP_LINE</b></td>
<td>The current command line. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see "<a href="#programmable-completion">Programmable Completion</a> below).</td>
</tr>
<tr class="tcw">
<td><b>COMP_POINT</b></td>
<td>The index of the current cursor position relative to the beginning of the current command. If the current cursor position is at the end of the current command, the value of this variable is equal to <b>${#COMP_LINE}</b>. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see the section "<a href="#programmable-completion">Programmable Completion</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>COMP_TYPE</b></td>
<td>Set to an integer value corresponding to the type of completion attempted that caused a completion function to be called: <b>TAB</b>, for normal completion, <b>?</b>, for listing completions after successive tabs, <b>!</b>, for listing alternatives on partial word completion, <b>@</b>, to list completions if the word is not unmodified, or <b>%</b>, for menu completion. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see the section "<a href="#programmable-completion">Programmable Completion</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>COMP_WORDBREAKS</b></td>
<td>The set of characters that the readline library treats as word separators when performing word completion. If <b>COMP_WORDBREAKS</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>COMP_WORDS</b></td>
<td>Array variable (see "<a href="#arrays">Arrays</a>" below) consisting of the individual words in the current command line. The line is split into words as <b>readline</b> would split it, using <b>COMP_WORDBREAKS</b> as described above. This variable is available only in shell functions invoked by the programmable completion facilities (see the section "<a href="#programmable-completion">Programmable Completion</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>COPROC</b></td>
<td>Array variable (see "<a href="#arrays">Arrays</a>" below) created to hold the file descriptors for output from and input to an unnamed coprocess (see the section "<a href="#7A5">Coprocesses</a>" above).</td>
</tr>
<tr class="tcw">
<td><b>DIRSTACK</b></td>
<td>Array variable (see the section "<a href="#arrays">Arrays</a>" below) containing the current contents of the directory stack. Directories appear in the stack in the order they are displayed by the <b>dirs</b> builtin. Assigning to members of this array variable may be used to modify directories already in the stack, but the <b>pushd</b> and <b>popd</b> builtins must be used to add and remove directories. Assignment to this variable does not change the current directory. If <b>DIRSTACK</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>EUID</b></td>
<td>Expands to the effective user ID of the current user, initialized at shell startup. This variable is readonly.</td>
</tr>
<tr class="tcw">
<td><b>FUNCNAME</b></td>
<td>Array variable containing the names of all shell functions currently in the execution call stack. The element with index 0 is the name of any currently-executing shell function. The bottom-most element (the one with the highest index) is "main". This variable exists only when a shell function is executing. Assignments to <b>FUNCNAME</b> have no effect and return an error status. If <b>FUNCNAME</b> is unset, it loses its special properties, even if it's subsequently reset. This variable can be used with <b>BASH_LINENO</b> and <b>BASH_SOURCE</b>. Each element of <b>FUNCNAME</b> has corresponding elements in <b>BASH_LINENO</b> and <b>BASH_SOURCE</b> to describe the call stack. For instance, <b>${FUNCNAME[$i]}</b> was called from the file <b>${BASH_SOURCE[$i+1]}</b> at line number <b>${BASH_LINENO[$i]}</b>. The <b>caller</b> builtin displays the current call stack using this information.</td>
</tr>
<tr class="tcw">
<td><b>GROUPS</b></td>
<td>Array variable containing the list of groups of which the current user is a member. Assignments to <b>GROUPS</b> have no effect and return an error status. If <b>GROUPS</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>HISTCMD</b></td>
<td>The history number, or index in the history list, of the current command. If <b>HISTCMD</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>HOSTNAME</b></td>
<td>Automatically set to the name of the current host.</td>
</tr>
<tr class="tcw">
<td><b>HOSTTYPE</b></td>
<td>Automatically set to a string that uniquely describes the type of machine on which bash is executing. The default is system-dependent.</td>
</tr>
<tr class="tcw">
<td><b>LINENO</b></td>
<td>Each time this parameter is referenced, the shell substitutes a decimal number representing the current sequential line number (starting with 1) within a script or function. When not in a script or function, the value substituted is not guaranteed to be meaningful. If <b>LINENO</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>ACHTYPE</b></td>
<td>Automatically set to a string that fully describes the system type on which bash is executing, in the standard GNU cpu-company-system format. The default is system-dependent.</td>
</tr>
<tr class="tcw">
<td><b>MAPFILE</b></td>
<td>Array variable (see the "<a href="#arrays">Arrays</a>" section below) created to hold the text read by the <b>mapfile</b> builtin when no variable name is supplied.</td>
</tr>
<tr class="tcw">
<td><b>OLDPWD</b></td>
<td>The previous working directory as set by the <a href="/unix/ucd.htm">cd</a> command.</td>
</tr>
<tr class="tcw">
<td><b>OPTARG</b></td>
<td>The value of the last option argument processed by the <b>getopts</b> builtin command (see the section "<a href="#28A">Shell Builtin Commands</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>OPTIND</b></td>
<td>The index of the next argument to be processed by the <b>getopts</b> builtin command (see the section "<a href="#28A">Shell Builtin Commands</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>OSTYPE</b></td>
<td>Automatically set to a string that describes the operating system on which bash is executing. The default is system dependent.</td>
</tr>
<tr class="tcw">
<td><b>PIPESTATUS</b></td>
<td>Array variable (see the section "<a href="#arrays">Arrays</a>" below) containing a list of exit status values from the processes in the most-recently-executed foreground pipeline (which may contain only a single command).</td>
</tr>
<tr class="tcw">
<td><b>PPID</b></td>
<td>The process ID of the shell's parent. This variable is readonly.</td>
</tr>
<tr class="tcw">
<td><b>PWD</b></td>
<td>The current working directory as set by the <b>cd</b> command.</td>
</tr>
<tr class="tcw">
<td><b>RANDOM</b></td>
<td>Each time this parameter is referenced, a random integer between 0 and 32767 is generated. The sequence of random numbers may be initialized by assigning a value to <b>RANDOM</b>. If <b>RANDOM</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>READLINE_LINE</b></td>
<td>The contents of the <b>readline</b> line buffer, for use with "<b>bind -x</b>" (see the section "<a href="#28A">Shell Builtin Commands</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>READLINE_POINT</b></td>
<td>The position of the insertion point in the <b>readline</b> line buffer, for use with "<b>bind -x</b>" (see the section "<a href="#28A">Shell Builtin Commands</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>REPLY</b></td>
<td>Set to the line of input read by the read builtin command when no arguments are supplied.</td>
</tr>
<tr class="tcw">
<td><b>SECONDS</b></td>
<td>Each time this parameter is referenced, the number of seconds since shell invocation is returned. If a value is assigned to <b>SECONDS</b>, the value returned upon subsequent references is the number of seconds since the assignment plus the value assigned. If <b>SECONDS</b> is unset, it loses its special properties, even if it's subsequently reset.</td>
</tr>
<tr class="tcw">
<td><b>SHELLOPTS</b></td>
<td>A colon-separated list of enabled shell options. Each word in the list is a valid argument for the <b>-o</b> option to the <b>set</b> builtin command (see the section "<a href="#28A">Shell Builtin Commands</a>" below). The options appearing in <b>SHELLOPTS</b> are those reported as on by set <b>-o</b>. If this variable is in the environment when bash starts up, each shell option in the list is enabled before reading any startup files. This variable is read-only.</td>
</tr>
<tr class="tcw">
<td><b>SHLVL</b></td>
<td>Incremented by one each time an instance of bash is started.</td>
</tr>
<tr class="tcw">
<td><b>UID</b></td>
<td>Expands to the user ID of the current user, initialized at shell startup. This variable is readonly.</td>
</tr>
</table>
<p class="tab">The following variables are used by the shell. In some cases, bash assigns a default value to a variable; these cases are noted below.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>BASH_ENV</b></td>
<td>If this parameter is set when bash is executing a shell script, its value is interpreted as a file name containing commands to initialize the shell, as in <b>~/.bashrc</b>. The value of <b>BASH_ENV</b> is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a file name. <b>PATH</b> is not used to search for the resultant file name.</td>
</tr>
<tr class="tcw">
<td><b>BASH_XTRACEFD</b></td>
<td>If set to an integer corresponding to a valid file descriptor, bash writes the trace output generated when set <b>-x</b> is enabled to that file descriptor. The file descriptor is closed when <b>BASH_XTRACEFD</b> is unset or assigned a new value. <b>Unset</b>ting <b>BASH_XTRACEFD</b> or assigning it the empty string causes the trace output to be sent to the standard error. Note that setting <b>BASH_XTRACEFD</b> to 2 (the standard error file descriptor) and then <b>unset</b>ting it results in the standard error being closed.</td>
</tr>
<tr class="tcw">
<td><b>CDPATH</b></td>
<td>The search path for the <b>cd</b> command. This is a colon-separated list of directories where the shell looks for destination directories specified by the <b>cd</b> command. A sample value is "<b>.:~:/usr</b>".</td>
</tr>
<tr class="tcw">
<td><b>COLUMNS</b></td>
<td>Used by the select compound command to determine the terminal width when printing selection lists. Automatically set upon receipt of a <b>SIGWINCH</b>.</td>
</tr>
<tr class="tcw">
<td><b>COMPREPLY</b></td>
<td>Array variable from which bash reads the possible completions generated by a shell function invoked by the programmable completion facility (see "<a href="#programmable-completion">Programmable Completion</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>EMACS</b></td>
<td>If bash finds this variable in the environment when the shell starts with value "<b>t</b>", it assumes that the shell is running in an Emacs shell buffer and disables line editing.</td>
</tr>
<tr class="tcw">
<td><b>ENV</b></td>
<td>Similar to <b>BASH_ENV</b>; used when the shell is invoked in POSIX mode.</td>
</tr>
<tr class="tcw">
<td><b>FCEDIT</b></td>
<td>The default editor for the <b>fc</b> builtin command.</td>
</tr>
<tr class="tcw">
<td><b>FIGNORE</b></td>
<td>A colon-separated list of suffixes to ignore when performing file name completion (see the section "<a href="#25A">Readline</a>" below). A file name whose suffix matches one of the entries in <b>FIGNORE</b> is excluded from the list of matched file names. A sample value is "<b>.o:~</b>" (Quoting is needed when assigning a value to this variable, which contains tildes).</td>
</tr>
<tr class="tcw">
<td><b>FUNCNEST</b></td>
<td>If set to a numeric value greater than 0, defines a maximum function nesting level. Function invocations that exceed this nesting level cause the current command to abort.</td>
</tr>
<tr class="tcw">
<td><b>GLOBIGNORE</b></td>
<td>A colon-separated list of patterns defining the set of file names to be ignored by pathname expansion. If a file name matched by a pathname expansion pattern also matches one of the patterns in <b>GLOBIGNORE</b>, it is removed from the list of matches.</td>
</tr>
<tr class="tcw">
<td><b>HISTCONTROL</b></td>
<td>A colon-separated list of values controlling how commands are saved on the history list. If the list of values includes <b>ignorespace</b>, lines which begin with a space character are not saved in the history list. A value of <b>ignoredups</b> causes lines matching the previous history entry to not be saved. A value of <b>ignoreboth</b> is shorthand for <b>ignorespace</b> and <b>ignoredups</b>. A value of <b>erasedups</b> causes all previous lines matching the current line to be removed from the history list before that line is saved. Any value not in the above list is ignored. If <b>HISTCONTROL</b> is unset, or does not include a valid value, all lines read by the shell parser are saved on the history list, subject to the value of <b>HISTIGNORE</b>. The second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of <b>HISTCONTROL</b>.</td>
</tr>
<tr class="tcw">
<td><b>HISTFILE</b></td>
<td>The name of the file where command history is saved (see the section "<a href="#history">History</a>" below). The default value is <b>~/.bash_history</b>. If unset, the command history is not saved when an interactive shell exits.</td>
</tr>
<tr class="tcw">
<td><b>HISTFILESIZE</b></td>
<td>The maximum number of lines contained in the history file. When this variable is assigned a value, the history file is truncated, if necessary, by removing the oldest entries, to contain no more than that number of lines. The default value is 500. The history file is also truncated to this size after writing it when an interactive shell exits.</td>
</tr>
<tr class="tcw">
<td><b>HISTIGNORE</b></td>
<td>A colon-separated list of patterns used to decide which command lines should be saved on the history list. Each pattern is anchored at the beginning of the line and must match the complete line (no implicit '<b>*</b>' is appended). Each pattern is tested against the line after the checks specified by <b>HISTCONTROL</b> are applied. In addition to the normal shell pattern matching characters, '<b>&amp;</b>' matches the previous history line. '<b>&amp;</b>' may be escaped using a backslash; the backslash is removed before attempting a match. The second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of <b>HISTIGNORE</b>.</td>
</tr>
<tr class="tcw">
<td><b>HISTSIZE</b></td>
<td>The number of commands to remember in the command history (see the section "<a href="#history">History</a>" below). The default value is 500.</td>
</tr>
<tr class="tcw">
<td><b>HISTTIMEFORMAT</b></td>
<td>If this variable is set and not null, its value is used as a format string for <b>strftime</b> to print the timestamp associated with each history entry displayed by the <b>history</b> builtin. If this variable is set, timestamps are written to the history file so they may be preserved across shell sessions. This uses the history comment character to distinguish timestamps from other history lines.</td>
</tr>
<tr class="tcw">
<td><b>HOME</b></td>
<td>The home directory of the current user; the default argument for the <b>cd</b> builtin command. The value of this variable is also used when performing tilde expansion.</td>
</tr>
<tr class="tcw">
<td><b>HOSTFILE</b></td>
<td>Contains the name of a file in the same format as <b>/etc/hosts</b> that should be read when the shell needs to complete a <a href="/jargon/h/hostname.htm">hostname</a>. The list of possible hostname completions may be changed while the shell is running; the next time hostname completion is attempted after the value is changed, bash adds the contents of the new file to the existing list. If <b>HOSTFILE</b> is set, but has no value, or does not name a readable file, bash attempts to read <b>/etc/hosts</b> to obtain the list of possible hostname completions. When <b>HOSTFILE</b> is unset, the <b>hostname</b> list is cleared.</td>
</tr>
<tr class="tcw">
<td><b>IFS</b></td>
<td>The Internal Field Separator that is used for word splitting after expansion and to split lines into words with the <b>read</b> builtin command. The default value is "<b>&lt;space&gt;&lt;tab&gt;&lt;newline&gt;</b>".</td>
</tr>
<tr class="tcw">
<td><b>IGNOREEOF</b></td>
<td>Controls the action of an interactive shell on receipt of an EOF character as the sole input. If set, the value is the number of consecutive EOF characters which must be typed as the first characters on an input line before bash exits. If the variable exists but does not have a numeric value, or has no value, the default value is 10. If it does not exist, EOF signifies the end of input to the shell.</td>
</tr>
<tr class="tcw">
<td><b>INPUTRC</b></td>
<td>The file name for the <b>readline</b> startup file, overriding the default of <b>~/.inputrc</b> (see the section "<a href="#25A">Readline</a>" below).</td>
</tr>
<tr class="tcw">
<td><b>LANG</b></td>
<td>Used to determine the locale category for any category not specifically selected with a variable starting with <b>LC_</b>.</td>
</tr>
<tr class="tcw">
<td><b>LC_ALL</b></td>
<td>This variable overrides the value of <b>LANG</b> and any other <b>LC_</b> variable specifying a locale category.</td>
</tr>
<tr class="tcw">
<td><b>LC_COLLATE</b></td>
<td>This variable determines the collation order used when sorting the results of pathname expansion, and determines the behavior of range expressions, equivalence classes, and collating sequences within pathname expansion and pattern matching.</td>
</tr>
<tr class="tcw">
<td><b>LC_CTYPE</b></td>
<td>This variable determines the interpretation of characters and the behavior of character classes within pathname expansion and pattern matching.</td>
</tr>
<tr class="tcw">
<td><b>LC_MESSAGES</b></td>
<td>This variable determines the locale used to translate double-quoted strings preceded by a <b>$</b>.</td>
</tr>
<tr class="tcw">
<td><b>LC_NUMERIC</b></td>
<td>This variable determines the locale category used for number formatting.</td>
</tr>
<tr class="tcw">
<td><b>LINES</b></td>
<td>Used by the select compound command to determine the column length for printing selection lists. Automatically set upon receipt of a <b>SIGWINCH</b>.</td>
</tr>
<tr class="tcw">
<td><b>MAIL</b></td>
<td>If this parameter is set to a file or directory name and the <b>MAILPATH</b> variable is not set, bash informs the user of the arrival of mail in the specified file or Maildir-format directory.</td>
</tr>
<tr class="tcw">
<td><b>MAILCHECK</b></td>
<td>Specifies how often (in seconds) bash checks for mail. The default is 60 seconds. When it is time to check for mail, the shell does so before displaying the primary prompt. If this variable is unset, or set to a value that is not a number greater than or equal to zero, the shell disables mail checking.</td>
</tr>
<tr class="tcw">
<td><b>MAILPATH</b></td>
<td>A colon-separated list of file names to be checked for mail. The message to be printed when mail arrives in a particular file may be specified by separating the file name from the message with a '<b>?</b>'. When used in the text of the message, <b>$_</b> expands to the name of the current <b>mailfile</b>. Example:<br><br><b>MAILPATH='/var/mail/bfox?"You have mail":~/shell-mail?"$_ has mail!"'</b><br><br> Bash supplies a default value for this variable, but the location of the user mail files that it uses is system dependent (e.g., <b>/var/mail/$USER</b>).</td>
</tr>
<tr class="tcw">
<td><b>OPTERR</b></td>
<td>If set to the value 1, bash displays error messages generated by the <b>getopts</b> builtin command (see the section "<a href="#28A">Shell Builtin Commands</a>" below). <b>OPTERR</b> is initialized to 1 each time the shell is invoked or a shell script is executed. <b>PATH</b> The search path for commands. It is a colon-separated list of directories where the shell looks for commands (see the section "<a href="#18A">Command Execution</a>" below). A zero-length (null) directory name in the value of <b>PATH</b> indicates the current directory. A null directory name may appear as two adjacent colons, or as an initial or trailing colon. The default path is system-dependent, and is set by the administrator who installs bash. A common value is "<b>/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin</b>".</td>
</tr>
<tr class="tcw">
<td><b>POSIXLY_CORRECT</b></td>
<td>If this variable is in the environment when bash starts, the shell enters posix mode before reading the startup files, as if the <b>--posix</b> invocation option had been supplied. If it's set while the shell is running, bash enables posix mode, as if the command set <b>-o posix</b> had been executed.</td>
</tr>
<tr class="tcw">
<td><b>PROMPT_COMMAND</b></td>
<td>If set, the value is executed as a command before issuing each primary prompt.</td>
</tr>
<tr class="tcw">
<td><b>PROMPT_DIRTRIM</b></td>
<td>If set to a number greater than zero, the value is used as the number of trailing directory components to retain when expanding the <b>\w</b> and <b>\W</b> prompt string escapes (see the section "<a href="#prompting">Prompting</a>" below). Characters removed are replaced with an ellipsis.</td>
</tr>
<tr class="tcw">
<td><b>PS1</b></td>
<td>The value of this parameter is expanded (see "<a href="#prompting">Prompting</a>" below) and used as the primary prompt string. The default value is "<b>\s-\v\$</b> ".</td>
</tr>
<tr class="tcw">
<td><b>PS2</b></td>
<td>The value of this parameter is expanded as with <b>PS1</b> and used as the secondary prompt string. The default is "<b>&gt;</b> ".</td>
</tr>
<tr class="tcw">
<td><b>PS3</b></td>
<td>The value of this parameter is used as the prompt for the select command (see the section "<a href="#shell-grammar">Shell Grammar</a>" above).</td>
</tr>
<tr class="tcw">
<td><b>PS4</b></td>
<td>The value of this parameter is expanded as with <b>PS1</b> and the value is printed before each command bash displays during an execution trace. The first character of <b>PS4</b> is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is "<b>+</b> ".</td>
</tr>
<tr class="tcw">
<td><b>SHELL</b></td>
<td>The full pathname to the shell is kept in this environment variable. If it's not set when the shell starts, bash assigns to it the full pathname of the current user's login shell.</td>
</tr>
<tr class="tcw">
<td><b>TIMEFORMAT</b></td>
<td>The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed with the time reserved word should be displayed. The <b>%</b> character introduces an escape sequence that is expanded to a time value or other information. The escape sequences and their meanings are as follows; the braces denote optional portions.<br><br><b>%%</b>: A literal <b>%</b>.<br><br><b>%[p][l]R</b>: The elapsed time in seconds.<br><br><b>%[p][l]U</b>: The number of CPU seconds spent in user mode.<br><br><b>%[p][l]S</b>: The number of CPU seconds spent in system mode.<br><br><b>%P</b>: The CPU percentage, computed as (<b>%U</b> + <b>%S</b>) / <b>%R</b>.<br><br>The optional <b>p</b> is a digit specifying the precision, the number of fractional digits after a decimal point. A value of 0 causes no decimal point or fraction to be output. At most three places after the decimal point may be specified; values of <b>p</b> greater than 3 are changed to 3. If <b>p</b> is not specified, the value 3 is used.<br><br>The optional <b>l</b> specifies a longer format, including minutes, of the form <b>MMmSS.FFs</b>. The value of <b>p</b> determines whether or not the fraction is included.<br><br>If this variable is not set, bash acts as if it had the value <b>$'\nreal\t%3lR\nuser\t%3lU\nsys%3lS'</b>. If the value is null, no timing information is displayed. A trailing newline is added when the format string is displayed.</td>
</tr>
<tr class="tcw">
<td><b>TMOUT</b></td>
<td>If set to a value greater than zero, <b>TMOUT</b> is treated as the default timeout for the <b>read</b> builtin. The select command terminates if input does not arrive after <b>TMOUT</b> seconds when input is coming from a terminal. In an interactive shell, the value is interpreted as the number of seconds to wait for input after issuing the primary prompt. Bash terminates after waiting for that number of seconds if input does not arrive.</td>
</tr>
<tr class="tcw">
<td><b>TMPDIR</b></td>
<td>If set, bash uses its value as the name of a directory where bash creates temporary files for the shell's use.</td>
</tr>
<tr class="tcw">
<td><b>auto_resume</b></td>
<td>This variable controls how the shell interacts with the user and job control. If this variable is set, single word simple commands without redirections are treated as candidates for resumption of an existing stopped job. There is no ambiguity allowed; if there is more than one job beginning with the string typed, the job most recently accessed is selected. The name of a stopped job, in this context, is the command line used to start it. If set to the value exact, the string supplied must match the name of a stopped job exactly; if set to substring, the string supplied needs to match a substring of the name of a stopped job. The substring value provides functionality analogous to the <b>%?</b> job identifier (see the section "<a href="#job-control">Job Control</a>" below). If set to any other value, the supplied string must be a prefix of a stopped job's name; this provides functionality analogous to the <b>%</b><i>string</i> job identifier.</td>
</tr>
<tr class="tcw">
<td><b>histchars</b></td>
<td>The two or three characters which control history expansion and tokenization (see the section "<a href="#history-expansion">History Expansion</a>" below). The first character is the history expansion character, the character that signals the start of a history expansion, normally '<b>!</b>'. The second character is the quick substitution character, which is used as shorthand for re-running the previous command entered, substituting one string for another in the command. The default is '<b>^</b>'. The optional third character is the character that indicates that the remainder of the line is a comment when found as the first character of a word, normally '<b>#</b>'. The history comment character causes history substitution to be skipped for the remaining words on the line. It does not necessarily cause the shell parser to treat the rest of the line as a comment.</td>
</tr>
</table>
<h2 id="arrays">Arrays</h2>
<p class="tab">Bash provides one-dimensional indexed and associative <a href="/jargon/a/array.htm">array</a> variables. Any variable may be used as an indexed array; the <b>declare</b> builtin explicitly declares an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions) and are zero-based; associative arrays are referenced using arbitrary strings.</p>
<p class="tab">An indexed array is created automatically if any variable is assigned to using the syntax <i>name</i><b>[</b><i>subscript</i><b>]=</b><i>value</i>. The subscript is treated as an arithmetic expression that must evaluate to a number. If subscript evaluates to a number less than zero, it is used as an offset from one greater than the array's maximum index (so a subscript of <b>-1</b> refers to the last element of the array). To explicitly declare an indexed array, use declare <b>-a</b> name (see the section "<a href="#28A">Shell Builtin Commands</a>" below). <b>declare -a</b> <i>name</i><b>[</b><i>subscript</i><b>]</b> is also accepted; the subscript is ignored.</p>
<p class="tab">Associative arrays are created using declare <b>-A</b> name.</p>
<p class="tab">Attributes may be specified for an array variable using the <b>declare</b> and <b>readonly</b> builtins. Each attribute applies to all members of an array.</p>
<p class="tab">Arrays are assigned to using compound assignments of the form <i>name</i><b>=(</b><i>value1</i> ... <i>valuen</i><b>)</b>, where each value is of the form <b>[</b><i>subscript</i><b>]=</b><i>string</i>. Indexed array assignments do not require the bracket and subscript. When assigning to indexed arrays, if the optional brackets and subscript are supplied, that index is assigned-to; otherwise the index of the element assigned is the last index assigned to by the statement plus one. Indexing starts at zero.</p>
<p class="tab">When assigning to an associative array, the subscript is required.</p>
<p class="tab">This syntax is also accepted by the <b>declare</b> builtin. Individual array elements may be assigned to using the <i>name</i><b>[</b><i>subscript</i><b>]=</b><i>value</i> syntax introduced above.</p>
<p class="tab" id="referencing-array-elements">Any element of an array may be referenced using <b>${</b><i>name</i><b>[</b><i>subscript</i><b>]}</b>. The braces are required to avoid conflicts with pathname expansion. If subscript is <b>@</b> or <b>*</b>, the word expands to all members of name. These subscripts differ only when the word appears within double quotes. If the word is double-quoted, <b>${</b><i>name</i><b>[*]}</b> expands to a single word with the value of each array member separated by the first character of the <b>IFS</b> special variable, and <b>${</b><i>name</i><b>[@]}</b> expands each element of name to a separate word. When there are no array members, <b>${</b><i>name</i><b>[@]}</b> expands to nothing. If the double-quoted expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined with the last part of the original word. This is analogous to the expansion of the special parameters <b>*</b> and <b>@</b> (see the section "<a href="#special-parameters">Special Parameters</a>" above). <b>${#</b><i>name</i><b>[</b><i>subscript</i><b>]}</b> expands to the length of <b>${</b><i>name</i><b>[</b><i>subscript</i><b>]}</b>. If <i>subscript</i> is <b>*</b> or <b>@</b>, the expansion is the number of elements in the array. Referencing an array variable without a subscript is equivalent to referencing the array with a subscript of 0.</p>
<p class="tab">An array variable is considered set if a subscript is assigned a value. The null string is a valid value.</p>
<p class="tab">The <b>unset</b> builtin is used to destroy arrays. <b>unset</b> <i>name</i><b>[</b><i>subscript</i><b>]</b> destroys the array element at index <i>subscript</i>. Care must be taken to avoid unwanted side effects caused by pathname expansion. <b>unset</b> <i>name</i>, where <i>name</i> is an array, or <b>unset</b> <i>name</i><b>[</b><i>subscript</i><b>]</b>, where <i>subscript</i> is <b>*</b> or <b>@</b>, removes the entire array.</p>
<p class="tab">The <b>declare</b>, <b>local</b>, and <b>readonly</b> builtins each accept a <b>-a</b> option to specify an indexed array and a <b>-A</b> option to specify an associative array. If both options are supplied, <b>-A</b> takes precedence. The <b>read</b> builtin accepts a <b>-a</b> option to assign a list of words read from the standard input to an array. The <b>set</b> and <b>declare</b> builtins display array values in a way that allows them to be reused as assignments.</p>
<h2 id="expansion">Expansion</h2>
<p class="tab"><i>Expansion</i> is performed on the command line after it is split into words. There are seven kinds of expansion performed: brace expansion, tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, word splitting, and pathname expansion.</p>
<p class="tab">The order of expansions is: brace expansion, tilde expansion, parameter, variable and arithmetic expansion and command substitution (done in a left-to-right fashion), word splitting, and pathname expansion.</p>
<p class="tab">On systems that support it, there is an additional expansion available: process substitution.</p>
<p class="tab">Only brace expansion, word splitting, and pathname expansion can change the number of words of the expansion; other expansions expand a single word to a single word. The only exceptions to this are the expansions of "<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bf9bff">[email&#160;protected]</a></b>" and "<b>${</b><i>name</i><b>[@]}</b>" as explained above (see the section "<a href="#parameters">Parameters</a>").</p>
<h2 id="11A1">Brace expansion</h2>
<p class="tab">Brace expansion is a mechanism by which arbitrary strings may be generated. This mechanism is similar to pathname expansion, but the file names generated need not exist. Patterns to be brace expanded take the form of an optional preamble, followed by either a series of comma-separated strings or a sequence expression between a pair of braces, followed by an optional postscript. The preamble is prefixed to each string contained in the braces, and the postscript is then appended to each resulting string, expanding left to right.</p>
<p class="tab">Brace expansions may be nested. The results of each expanded string are not sorted; left to right order is preserved. For example, <b>a{d,c,b}e</b> expands into '<b>ade ace abe</b>'.</p>
<p class="tab">A sequence expression takes the form <b>{</b><i>x</i>..<i>y</i>[..<i>incr</i>]<b>}</b>, where <i>x</i> and <i>y</i> are either integers or single characters, and <i>incr</i>, an optional increment, is an integer. When integers are supplied, the expression expands to each number between <i>x</i> and <i>y</i>, inclusive. Supplied integers may be prefixed with 0 to force each term to have the same width. When either <i>x</i> or <i>y</i> begins with a zero, the shell attempts to force all generated terms to contain the same number of digits, zero-padding where necessary. When characters are supplied, the expression expands to each character lexicographically between <i>x</i> and <i>y</i>, inclusive. Note that both <i>x</i> and <i>y</i> must be of the same type. When the increment is supplied, it is used as the difference between each term. The default increment is 1 or -1 as appropriate.</p>
<p class="tab">Brace expansion is performed before any other expansions, and any characters special to other expansions are preserved in the result. It is strictly textual. Bash does not apply any syntactic interpretation to the context of the expansion or the text between the braces.</p>
<p class="tab">A correctly-formed brace expansion must contain unquoted opening and closing braces, and at least one unquoted comma or a valid sequence expression. Any incorrectly formed brace expansion is left unchanged. A <b>{</b> or <b>,</b> may be quoted with a backslash to prevent its being considered part of a brace expression. To avoid conflicts with parameter expansion, the string <b>${</b> is not considered eligible for brace expansion.</p>
<p class="tab">This construct is often used as shorthand when the common prefix of the strings to be generated is longer than in the above example:</p>
<pre class="tab tcy">mkdir /usr/local/src/bash/{old,new,dist,bugs}</pre>
<p class="tab">or</p>
<pre class="tab tcy">chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}</pre>
<p class="tab">Brace expansion introduces a slight incompatibility with historical versions of <a href="/unix/ush.htm"><b>sh</b></a>. <b>sh</b> does not treat opening or closing braces specially when they appear as part of a word, and preserves them in the output. Bash removes braces from words as a consequence of brace expansion. For example, a word entered to sh as <b>file{1,2}</b> appears identically in the output. The same word is output as <b>file1 file2</b> after expansion by bash. If strict compatibility with <b>sh</b> is desired, start bash with the <b>+B</b> option or disable brace expansion with the <b>+B</b> option to the set command (see the section "<a href="#28A">Shell Builtin Commands</a>" below).</p>
<h2 id="tilde-expansion">Tilde expansion</h2>
<p class="tab">If a word begins with an unquoted tilde character ('<b>~</b>'), all the characters preceding the first unquoted slash (or all characters, if there is no unquoted slash) are considered a tilde-prefix. If none of the characters in the tilde-prefix are quoted, the characters in the tilde-prefix following the tilde are treated as a possible login name. If this login name is the null string, the tilde is replaced with the value of the shell parameter <b>HOME</b>. If <b>HOME</b> is unset, the home directory of the user executing the shell is substituted instead. Otherwise, the tilde-prefix is replaced with the home directory associated with the specified login name.</p>
<p class="tab">If the tilde-prefix is a '<b>~+</b>', the value of the shell variable <b>PWD</b> replaces the tilde-prefix. If the tilde-prefix is a '<b>~-</b>', the value of the shell variable <b>OLDPWD</b>, if it's set, is substituted. If the characters following the tilde in the tilde-prefix consist of a number <b>N</b>, optionally prefixed by a '<b>+</b>' or a '<b>-</b>', the tilde-prefix is replaced with the corresponding element from the directory stack, as it would be displayed by the <b>dirs</b> builtin invoked with the tilde-prefix as an argument. If the characters following the tilde in the tilde-prefix consist of a number without a leading '<b>+</b>' or '<b>-</b>', '<b>+</b>' is assumed.</p>
<p class="tab">If the login name is invalid, or the tilde expansion fails, the word is unchanged.</p>
<p class="tab">Each variable assignment is checked for unquoted tilde-prefixes immediately following a <b>:</b> or the first <b>=</b>. In these cases, tilde expansion is also performed. Consequently, one may use file names with tildes in assignments to <b>PATH</b>, <b>MAILPATH</b>, and <b>CDPATH</b>, and the shell assigns the expanded value.</p>
<h2 id="parameter-expansion">Parameter expansion</h2>
<p class="tab">The '<b>$</b>' character introduces parameter expansion, command substitution, or arithmetic expansion. The parameter name or symbol to be expanded may be enclosed in braces, which are optional but serve to protect the variable to be expanded from characters immediately following it which could be interpreted as part of the name.</p>
<p class="tab">When braces are used, the matching ending brace is the first '<b>}</b>' not escaped by a backslash or within a quoted string, and not within an embedded arithmetic expansion, command substitution, or parameter expansion.</p>
<p class="tab">Here is table briefly describing each bash parameter expansion form, and how it behaves depending on the value of <i>parameter</i>.</p>
<table class="mtable3 tab">
<tr>
<th style="width:210px">Form</th>
<th><i>parameter</i> is Set, and<br>not Null</th>
<th><i>parameter</i> is Set, but<br>Null</th>
<th><i>parameter</i> is Unset</th>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:-</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand to <i>word</i></td>
<td>expand to <i>word</i></td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>-</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand to Null</td>
<td>expand to <i>word</i></td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:=</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand <i>word</i>,<br>assign to <i>parameter</i>,<br>expand to <i>parameter</i></td>
<td>expand <i>word</i>,<br>assign to <i>parameter</i>,<br>expand to <i>parameter</i></td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>=</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand to Null</td>
<td>expand <i>word</i>,<br>assign to <i>parameter</i>,<br>expand to <i>parameter</i></td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:?</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>return an Error,<br>terminate command</td>
<td>return an Error,<br>terminate command</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>?</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand to Null</td>
<td>return an Error,<br>terminate command</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:+</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand to Null</td>
<td>expand to Null</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>+</b><i>word</i><b>}</b></td>
<td>expand to <i>parameter</i></td>
<td>expand to <i>word</i></td>
<td>expand to Null</td>
</tr>
</table>
<p class="tab">As you can see, if the expansion form includes a colon ("<b>:</b>"), there is an alternate behavior when <i>parameter</i> is set, but its value is NULL (which is equivalent to the single-quoted empty string, <b>''</b>). If <i>parameter</i> is not set at all, behavior is the same with or without a colon.</p>
<p class="tab">The following descriptions go into a bit more detail:</p>
<pre class="tab tcy">${<i>parameter</i>}</pre>
<p class="tab">Here, the value of <i>parameter</i> is substituted. The braces are required when <i>parameter</i> is a positional parameter with more than one digit, or when <i>parameter</i> is followed by a character that is not to be interpreted as part of its name.</p>
<p class="tab" id="variable-indirection">If the first character of <i>parameter</i> is an exclamation point (<b>!</b>), a level of variable indirection is introduced. Bash uses the value of the variable formed from the rest of <i>parameter</i> as the name of the variable; this variable is then expanded and that value is used in the rest of the substitution, rather than the value of <i>parameter</i> itself. This is known as <b>indirect expansion</b>. The exceptions to this are the expansions of <b>${!</b><i>prefix</i><b>*}</b> and <b>${!</b><i>name</i><b>[@]}</b> described below. The exclamation point must immediately follow the left brace to introduce indirection.</p>
<p class="tab">In each of the cases below, <i>word</i> is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.</p>
<p class="tab">When not performing substring expansion, using the forms documented below, bash tests for a parameter that is unset or null. Omitting the colon results in a test only for a parameter that is unset, bypassing the test if the parameter is null.</p>
<pre class="tab tcy">${<i>parameter</i>:-<i>word</i>}</pre>
<p class="tab">Use Default Values. If <i>parameter</i> is unset or null, the expansion of <i>word</i> is substituted. Otherwise, the value of <i>parameter</i> is substituted.</p>
<pre class="tab tcy">${<i>parameter</i>:=<i>word</i>}</pre>
<p class="tab">Assign Default Values. If <i>parameter</i> is unset or null, the expansion of <i>word</i> is assigned to <i>parameter</i>. The value of <i>parameter</i> is then substituted. Positional parameters and special parameters may not be assigned to in this way.</p>
<pre class="tab tcy">${<i>parameter</i>:?<i>word</i>}</pre>
<p class="tab">Display Error if Null or Unset. If <i>parameter</i> is null or unset, the expansion of <i>word</i> (or a message to that effect if <i>word</i> is not present) is written to the standard error and the shell, if it's not interactive, exits. Otherwise, the value of <i>parameter</i> is substituted.</p>
<pre class="tab tcy" id="expansion-with-alternate-value">${<i>parameter</i>:+<i>word</i>}</pre>
<p class="tab">Use Alternate Value. If <i>parameter</i> is null or unset, nothing is substituted, otherwise the expansion of <i>word</i> is substituted.</p>
<pre class="tab tcy">${<i>parameter</i>:<i>offset</i>}</pre>
<pre class="tab tcy">${<i>parameter</i>:<i>offset</i>:<i>length</i>}</pre>
<p class="tab">Substring Expansion. Expands to up to <i>length</i> characters of <i>parameter</i> starting at the character specified by <i>offset</i>. If <i>length</i> is omitted, expands to the substring of <i>parameter</i> starting at the character specified by <i>offset</i>. The <i>length</i> and <i>offset</i> are arithmetic expressions (see the section "<a href="#15A">Arithmetic Evaluation</a>" below). If <i>offset</i> evaluates to a number less than zero, the value is used as an offset from the end of the value of <i>parameter</i>. Arithmetic expressions starting with a <b>-</b> must be separated by whitespace from the preceding <b>:</b> to be distinguished from the Use Default Values expansion. If length evaluates to a number less than zero, and parameter is not <b>@</b> and not an indexed or associative array, it is interpreted as an offset from the end of the value of parameter rather than some characters, and the expansion is the characters between the two offsets. If <i>parameter</i> is <b>@</b>, the result is <i>length</i> positional parameters beginning at <i>offset</i>. If <i>parameter</i> is an indexed array name subscripted by <b>@</b> or <b>*</b>, the result is the <i>length</i> members of the array beginning with <b>${</b><i>parameter</i>[<i>offset</i>]<b>}</b>. A negative offset is taken relative to one greater than the maximum index of the specified array. Substring expansion applied to an associative array produces undefined results. Note that a negative offset must be separated from the colon by at least one space to avoid being confused with the <b>:-</b> expansion. Substring indexing is zero-based unless the positional parameters are used, where case the indexing starts at 1 by default. If offset is 0, and the positional parameters are used, <b>$0</b> is prefixed to the list.</p>
<pre class="tab tcy">${!<i>prefix</i>*}</pre>
<pre class="tab tcy">${!<i>prefix</i>@}</pre>
<p class="tab">Names matching <i>prefix</i>. Expands to the names of variables whose names begin with <i>prefix</i>, separated by the first character of the <b>IFS</b> special variable. When <b>@</b> is used and the expansion appears within double quotes, each variable name expands to a separate word.</p>
<pre class="tab tcy">${!<i>name</i>[@]}</pre>
<pre class="tab tcy">${!<i>name</i>[*]}</pre>
<p class="tab">List of array keys. If <i>name</i> is an array variable, expands to the list of array indices (keys) assigned in name. If <i>name</i> is not an array, expands to 0 if name is set and null otherwise. When <b>@</b> is used and the expansion appears within double quotes, each key expands to a separate word.</p>
<pre class="tab tcy">${#<i>parameter</i>}</pre>
<p class="tab">Parameter length. The length in characters of the value of <i>parameter</i> is substituted. If parameter is <b>*</b> or <b>@</b>, the value substituted is the number of positional parameters. If <i>parameter</i> is an array name subscripted by <b>*</b> or <b>@</b>, the value substituted is the number of elements in the array.</p>
<pre class="tab tcy">${<i>parameter</i>#<i>word</i>}</pre>
<pre class="tab tcy">${<i>parameter</i>##<i>word</i>}</pre>
<p class="tab">Remove matching prefix pattern. The <i>word</i> is expanded to produce a pattern as in pathname expansion. If the pattern matches the beginning of the value of <i>parameter</i>, then the result of the expansion is the expanded value of parameter with the shortest matching pattern (the "<b>#</b>" case) or the longest matching pattern (the "<b>##</b>" case) deleted. If parameter is <b>@</b> or <b>*</b>, the pattern removal operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with <b>@</b> or <b>*</b>, the pattern removal operation is applied to each member of the array in turn, and the expansion is the resultant list.</p>
<pre class="tab tcy">${<i>parameter</i>%<i>word</i>}</pre>
<pre class="tab tcy">${<i>parameter</i>%%<i>word</i>}</pre>
<p class="tab">Remove matching suffix pattern. The <i>word</i> is expanded to produce a pattern as in pathname expansion. If the pattern matches a trailing portion of the expanded value of <i>parameter</i>, then the result of the expansion is the expanded value of <i>parameter</i> with the shortest matching pattern (the "<b>%</b>" case) or the longest matching pattern (the "<b>%%</b>" case) deleted. If parameter is <b>@</b> or <b>*</b>, the pattern removal operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with <b>@</b> or <b>*</b>, the pattern removal operation is applied to each member of the array in turn, and the expansion is the resultant list.</p>
<pre class="tab tcy">${<i>parameter</i>/<i>pattern</i>/<i>string</i>}</pre>
<p class="tab">Pattern substitution. The <i>pattern</i> is expanded to produce a pattern as in pathname expansion. The <i>Parameter</i> is expanded and the longest match of <i>pattern</i> against its value is replaced with string. If <i>pattern</i> begins with <b>/</b>, all matches of <i>pattern</i> are replaced with <i>string</i>. Normally only the first match is replaced. If <i>pattern</i> begins with <b>#</b>, it must match at the beginning of the expanded value of <i>parameter</i>. If <i>pattern</i> begins with <b>%</b>, it must match at the end of the expanded value of <i>parameter</i>. If <i>string</i> is null, matches of <i>pattern</i> are deleted and the <b>/</b> following pattern may be omitted. If <i>parameter</i> is <b>@</b> or <b>*</b>, the substitution operation is applied to each positional parameter in turn, and the expansion is the resultant list. If <i>parameter</i> is an array variable subscripted with <b>@</b> or <b>*</b>, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant list.</p>
<pre class="tab tcy">${<i>parameter</i>^<i>pattern</i>}</pre>
<pre class="tab tcy">${<i>parameter</i>^^<i>pattern</i>}</pre>
<pre class="tab tcy">${<i>parameter</i>,<i>pattern</i>}</pre>
<pre class="tab tcy">${<i>parameter</i>,,<i>pattern</i>}</pre>
<p class="tab">Case modification. This expansion modifies the case of alphabetic characters in <i>parameter</i>. The <i>pattern</i> is expanded to produce a pattern as in pathname expansion. The <b>^</b> operator converts lowercase letters matching pattern to uppercase; the <b>,</b> operator converts matching uppercase letters to lowercase. The <b>^^</b> and <b>,,</b> expansions convert each matched character in the expanded value; the <b>^</b> and <b>,</b> expansions match and convert only the first character in the expanded value. If <i>pattern</i> is omitted, it is treated like a <b>?</b>, which matches every character. If <i>parameter</i> is <b>@</b> or <b>*</b>, the case modification operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with <b>@</b> or <b>*</b>, the case modification operation is applied to each member of the array in turn, and the expansion is the resultant list.</p>
<h2 id="command-substitution">Command substitution</h2>
<p class="tab"><i>Command substitution</i> allows the output of a command to replace the command name. There are two forms:</p>
<pre class="tab tcy">$(<i>command</i>)</pre>
<p class="tab">or</p>
<pre class="tab tcy">&#96;<i>command</i>&#96;</pre>
<p class="tab">Bash performs the expansion by executing <i>command</i> and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting. The command substitution <b>$(cat file)</b> can be replaced by the equivalent but faster <b>$(&lt; file)</b>.</p>
<p class="tab">When the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by <b>$</b>, <b>&#96;</b>, or <b>\</b>. The first backquote not preceded by a backslash terminates the command substitution. When using the <b>$(</b><i>command</i><b>)</b> form, all characters between the parentheses make up the command; none are treated specially.</p>
<p class="tab">Command substitutions may be nested. To nest when using the backquoted form, escape the inner backquotes with backslashes.</p>
<p class="tab">If the substitution appears within double quotes, word splitting and pathname expansion are not performed on the results.</p>
<h2 id="11A5">Arithmetic expansion</h2>
<p class="tab"><i>Arithmetic expansion</i> allows the evaluation of an arithmetic expression and the substitution of the result. The format for arithmetic expansion is:</p>
<pre class="tab tcy">$((<i>expression</i>))</pre>
<p class="tab">The old format <b>$[</b><i>expression</i><b>]</b> is deprecated and wis removed in upcoming versions of bash.</p>
<p class="tab">The <i>expression</i> is treated as if it were within double quotes, but a double quote inside the parentheses is not treated specially. All tokens in the expression undergo parameter expansion, string expansion, command substitution, and quote removal. Arithmetic expansions may be nested.</p>
<p class="tab">The evaluation is performed according to the rules listed below under the section "<a href="#15A">Arithmetic Evaluation</a>." If <i>expression</i> is invalid, bash prints a message indicating failure and no substitution occurs.</p>
<h2 id="process-substitution">Process substitution</h2>
<p class="tab">Process substitution is supported on systems that support named pipes (<a href="/jargon/f/fifo.htm">FIFO</a>s) or the <b>/dev/fd</b> method of naming open files. It takes the form of <b>&lt;(</b><i>list</i><b>)</b> or <b>&gt;(</b><i>list</i><b>)</b>. The process <i>list</i> is run with its input or output connected to a FIFO or some file in <b>/dev/fd</b>. The name of this file is passed as an argument to the current command as the result of the expansion. If the <b>&gt;(</b><i>list</i><b>)</b> form is used, writing to the file provides input for list. If the <b>&lt;(</b><i>list</i><b>)</b> form is used, the file passed as an argument should be read to obtain the output of list.</p>
<p class="tab">When available, process substitution is performed simultaneously with parameter and variable expansion, command substitution, and arithmetic expansion.</p>
<h2 id="word-splitting">Word splitting</h2>
<p class="tab">The shell scans the results of parameter expansion, command substitution, and arithmetic expansion that did not occur within double quotes for word splitting.</p>
<p class="tab">The shell treats each character of <b>IFS</b> as a <a href="/jargon/d/delimite.htm">delimiter</a>, and splits the results of the other expansions into words on these characters. If <b>IFS</b> is unset, or its value is exactly <b>&lt;space&gt;&lt;tab&gt;&lt;newline&gt;</b>, the default, then sequences of <b>&lt;space&gt;</b>, <b>&lt;tab&gt;</b>, and <b>&lt;newline&gt;</b> at the beginning and end of the results of the previous expansions are ignored, and any sequence of IFS characters not at the beginning or end serves to delimit words. If IFS has a value other than the default, then sequences of the whitespace characters space and tab are ignored at the beginning and end of the word, as long as the whitespace character is in the value of IFS (an IFS whitespace character). Any character in IFS that is not IFS whitespace, along with any adjacent IFS whitespace characters, delimits a field. A sequence of IFS whitespace characters is also treated as a delimiter. If the value of IFS is null, no word splitting occurs.</p>
<p class="tab">Explicit null arguments (<b>&quot;&quot;</b> or <b>''</b>) are retained. Unquoted implicit null arguments, resulting from the expansion of parameters that have no values, are removed. If a parameter with no value is expanded within double quotes, a null argument results and is retained.</p>
<p class="tab">Note that if no expansion occurs, no splitting is performed.</p>
<h2 id="pathname-expansion">Pathname expansion</h2>
<p class="tab">After word splitting, unless the <b>-f</b> option is set, bash scans each word for the characters <b>*</b>, <b>?</b>, and <b>[</b>. If one of these characters appears, then the word is regarded as a pattern, and replaced with an alphabetically sorted list of file names matching the pattern. If no matching file names are found, and the shell option <b>nullglob</b> is not enabled, the word is left unchanged. If the <b>nullglob</b> option is set, and no matches are found, the word is removed. If the <b>failglob</b> shell option is set, and no matches are found, an error message is printed and the command is not executed. If the shell option <b>nocaseglob</b> is enabled, the match is performed without regard to the case of alphabetic characters. Note that when using range expressions like <b>[a-z]</b> (see the next section, "<a href="#11A10">Pattern Matching</a>"), letters of the other case may be included, depending on the setting of <b>LC_COLLATE</b>. When a pattern is used for pathname expansion, the character "<b>.</b>" at the start of a name or immediately following a slash must be matched explicitly, unless the shell option <b>dotglob</b> is set. When matching a pathname, the slash character must always be matched explicitly. In other cases, the "<b>.</b>" character is not treated specially. See the description of <b>shopt</b> below under the section "<a href="#28A">Shell Builtin Commands</a>" for a description of the <b>nocaseglob</b>, <b>nullglob</b>, <b>failglob</b>, and <b>dotglob</b> shell options.</p>
<p class="tab">The <b>GLOBIGNORE</b> shell variable may be used to restrict the set of file names matching a pattern. If <b>GLOBIGNORE</b> is set, each matching file name that also matches one of the patterns in <b>GLOBIGNORE</b> is removed from the list of matches. The file names "<b>.</b>" and "<b>..</b> are always ignored when <b>GLOBIGNORE</b> is set and not null. However, setting <b>GLOBIGNORE</b> to a non-null value has the effect of enabling the <b>dotglob</b> shell option, so all other file names beginning with a "<b>.</b>" match. To get the old behavior of ignoring file names beginning with a "<b>.</b>", make "<b>.*</b>" one of the patterns in <b>GLOBIGNORE</b>. The <b>dotglob</b> option is disabled when <b>GLOBIGNORE</b> is unset.</p>
<h2 id="11A10">Pattern matching</h2>
<p class="tab">Any character that appears in a pattern, other than the special pattern characters described below, matches itself. The <b>NUL</b> character may not occur in a pattern. A backslash escapes the following character; the escaping backslash is discarded when matching. The special pattern characters must be quoted if they are to be matched literally.</p>
<p class="tab">The special pattern characters have the following meanings:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>*</b></td>
<td>Matches any string, including the null string. When the <b>globstar</b> shell option is enabled, and <b>*</b> is used in a pathname expansion context, two adjacent <b>*</b>s used as a single pattern match all files and zero or more directories and subdirectories. If followed by a <b>/</b>, two adjacent <b>*</b>s match only directories and subdirectories.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>Matches any single character.</td>
</tr>
<tr class="tcw">
<td><b>[...]</b></td>
<td>Matches any one of the enclosed characters. A pair of characters separated by a hyphen denotes a range expression; any character that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched. If the first character following the <b>[</b> is a <b>!</b> or a <b>^</b> then any character not enclosed is matched. The sorting order of characters in range expressions is determined by the current locale and the value of the <b>LC_COLLATE</b> shell variable, if set. A <b>-</b> may be matched by including it as the first or last character in the set. A <b>]</b> may be matched by including it as the first character in the set.<br><br>Within <b>[</b> and <b>]</b>, character classes can be specified using the syntax <b>[:</b><i>class</i><b>:]</b>, where <i>class</i> is one of the following classes defined in the POSIX standard:<br><br><b>alnum alpha ascii blank cntrl digit graph lower print punct space upper word xdigit</b><br><br>A character class matches any character belonging to that class. The word character class matches letters, digits, and the character <b>_</b>.<br><br>Within <b>[</b> and <b>]</b>, an equivalence class can be specified using the syntax <b>[=c=]</b>, which matches all characters with the same collation weight (as defined by the current locale) as the character <b>c</b>.<br><br>Within <b>[</b> and <b>]</b>, the syntax <b>[.</b><i>symbol</i><b>.]</b> matches the collating symbol <i>symbol</i>.</td>
</tr>
</table>
<p class="tab">If the <b>extglob</b> shell option is enabled using the <b>shopt</b> builtin, several extended pattern matching operators are recognized. In the following description, a <i>pattern-list</i> is a list of one or more patterns separated by a <b>|</b>. Composite patterns may be formed using one or more of the following sub-patterns:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:140px"><b>?(</b><i>pattern-list</i><b>)</b></td>
<td>Matches zero or one occurrence of the given patterns</td>
</tr>
<tr class="tcw">
<td><b>*(</b><i>pattern-list</i><b>)</b></td>
<td>Matches zero or more occurrences of the given patterns</td>
</tr>
<tr class="tcw">
<td><b>+(</b><i>pattern-list</i><b>)</b></td>
<td>Matches one or more occurrences of the given patterns</td>
</tr>
<tr class="tcw">
<td><b>@(</b><i>pattern-list</i><b>)</b></td>
<td>Matches one of the given patterns</td>
</tr>
<tr class="tcw">
<td><b>!(</b><i>pattern-list</i><b>)</b></td>
<td>Matches anything except one of the given patterns</td>
</tr>
</table>
<h2 id="11A9">Quote removal</h2>
<p class="tab">After the preceding expansions, all unquoted occurrences of the characters <b>\</b>, <b>'</b>, and <b>"</b> that did not result from one of the above expansions are removed.</p>
<h2 id="redirection">Redirection</h2>
<p class="tab">Before a command is executed, its input and output may be <i>redirected</i> using a special notation interpreted by the shell. Redirection may also be used to open and close files for the current shell execution environment. The following redirection operators may precede or appear anywhere within a simple command or may follow a command. Redirections are processed in the order they appear, from left to right.</p>
<p class="tab">Each redirection preceded by a file descriptor number may instead be preceded by a word of the form <b>{</b><i>varname</i><b>}</b>. In this case, for each redirection operator except <b>&gt;&amp;-</b> and <b>&lt;&amp;-</b>, the shell allocates a file descriptor greater than 10 and assign it to <i>varname</i>. If <b>&gt;&amp;-</b> or <b>&lt;&amp;-</b> is preceded by <b>{</b><i>varname</i><b>}</b>, the value of <i>varname</i> defines the file descriptor to close.</p>
<p class="tab">In the following descriptions, if the file descriptor number is omitted, and the first character of the redirection operator is <b>&lt;</b>, the redirection refers to the standard input (file descriptor 0). If the first character of the redirection operator is <b>&gt;</b>, the redirection refers to the standard output (file descriptor 1).</p>
<p class="tab">The word following the redirection operator in the following descriptions, unless otherwise noted, is subjected to brace expansion, tilde expansion, parameter expansion, command substitution, arithmetic expansion, quote removal, pathname expansion, and word splitting. If it expands to more than one word, bash reports an error.</p>
<p class="tab">Note that the order of redirections is significant. For example, the command</p>
<pre class="tab tcy">ls &gt; dirlist 2&gt;&amp;1</pre>
<p class="tab">Directs both standard output and standard error to the file <b>dirlist</b>, while the command</p>
<pre class="tab tcy">ls 2&gt;&amp;1 &gt; dirlist</pre>
<p class="tab">Directs only the standard output to file <b>dirlist</b>, because the standard error was duplicated from the standard output before the standard output was redirected to <b>dirlist</b>.</p>
<p class="tab">Bash handles several file names specially when they are used in redirections, as described in the following table:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>/dev/fd/fd</b></td>
<td>If <b>fd</b> is a valid integer, file descriptor <b>fd</b> is duplicated.</td>
</tr>
<tr class="tcw">
<td><b>/dev/stdin</b></td>
<td>File descriptor 0 is duplicated.</td>
</tr>
<tr class="tcw">
<td><b>/dev/stdout</b></td>
<td>File descriptor 1 is duplicated.</td>
</tr>
<tr class="tcw">
<td><b>/dev/stderr</b></td>
<td>File descriptor 2 is duplicated.</td>
</tr>
<tr class="tcw">
<td><b>/dev/tcp/host/port</b></td>
<td>If <b>host</b> is a valid hostname or Internet address, and port is an integer port number or service name, bash attempts to open a <a href="/jargon/t/tcpip.htm">TCP</a> connection to the corresponding socket.</td>
</tr>
<tr class="tcw">
<td><b>/dev/udp/host/port</b></td>
<td>If <b>host</b> is a valid hostname or Internet address, and port is an integer port number or service name, bash attempts to open a <a href="/jargon/u/udp.htm">UDP</a> connection to the corresponding socket.</td>
</tr>
</table>
<p class="tab">A failure to open or create a file causes the redirection to fail.</p>
<p class="tab">Redirections using file descriptors greater than 9 should be used with care, as they may conflict with file descriptors the shell uses internally.</p>
<p class="tab">Note that the exec builtin command can make redirections take effect in the current shell.</p>
<h2 id="12A1">Redirecting input</h2>
<p class="tab">Redirection of input causes the file whose name results from the expansion of <i>word</i> to be opened for reading on file descriptor <i>n</i>, or the standard input (file descriptor 0) if <i>n</i> is not specified.</p>
<p class="tab">The general format for redirecting input is:</p>
<pre class="tab tcy">[<i>n</i>]&lt;<i>word</i></pre>
<h2 id="12A2">Redirecting output</h2>
<p class="tab">Redirection of output causes the file whose name results from the expansion of <i>word</i> to be opened for writing on file descriptor <i>n</i>, or the standard output (file descriptor 1) if <i>n</i> is not specified. If the file does not exist it is created; if it does exist it is truncated to zero size.</p>
<p class="tab">The general format for redirecting output is:</p>
<pre class="tab tcy">[<i>n</i>]&gt;<i>word</i></pre>
<p class="tab">If the redirection operator is <b>&gt;</b>, and the <b>noclobber</b> option to the <b>set</b> builtin is enabled, the redirection fails if the file whose name results from the expansion of <i>word</i> exists and is a regular file. If the redirection operator is <b>&gt;|</b>, or the redirection operator is <b>&gt;</b> and the <b>noclobber</b> option to the <b>set</b> builtin command is not enabled, the redirection is attempted even if the file named by word exists.</p>
<h2 id="12A3">Appending redirected output</h2>
<p class="tab">Redirection of output in this fashion causes the file whose name results from the expansion of <i>word</i> to be opened for appending on file descriptor <i>n</i>, or the standard output (file descriptor 1) if <i>n</i> is not specified. If the file does not exist it is created.</p>
<p class="tab">The general format for appending output is:</p>
<pre class="tab tcy">[<i>n</i>]&gt;&gt;<i>word</i></pre>
<h2 id="12A4">Redirecting standard output and standard error</h2>
<p class="tab">This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be redirected to the file whose name is the expansion of <i>word</i>.</p>
<p class="tab">There are two formats for redirecting standard output and standard error:</p>
<pre class="tab tcy">&amp;&gt;<i>word</i></pre>
<p class="tab">and</p>
<pre class="tab tcy">&gt;&amp;<i>word</i></pre>
<p class="tab">Of the two forms, the first is preferred. This is semantically equivalent to</p>
<pre class="tab tcy">&gt;<i>word</i> 2&gt;&amp;1</pre>
<h2 id="12A6">Appending standard output and standard error</h2>
<p class="tab">This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be appended to the file whose name is the expansion of <i>word</i>.</p>
<p class="tab">The format for appending standard output and standard error is:</p>
<pre class="tab tcy">&amp;&gt;&gt;<i>word</i></pre>
<p class="tab">This is semantically equivalent to</p>
<pre class="tab tcy">&gt;&gt;<i>word</i> 2&gt;&amp;1</pre>
<h2 id="12A7">Here documents</h2>
<p class="tab">This type of redirection instructs the shell to read input from the current source until a line containing only delimiter (with no trailing blanks) is seen. All the lines read up to that point are then used as the standard input for a command.</p>
<p class="tab">The format of here-documents is:</p>
<pre class="tab tcy">&lt;&lt;[-]<i>word</i> <i>here-document</i> <i>delimiter</i></pre>
<p class="tab">No parameter expansion, command substitution, arithmetic expansion, or pathname expansion is performed on word. If any characters in word are quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded. If word is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. In the latter case, the character sequence <b>\&lt;newline&gt;</b> is ignored, and <b>\</b> must be used to quote the characters <b>\</b>, <b>$</b>, and <b>&#96;</b>.</p>
<p class="tab">If the redirection operator is <b>&lt;&lt;-</b>, then all leading tab characters are stripped from input lines and the line containing delimiter. This allows here-documents within shell scripts to be indented in a natural fashion.</p>
<h2 id="12A8">Here strings</h2>
<p class="tab">A variant of here documents, the format is:</p>
<pre class="tab tcy">&lt;&lt;&lt;<i>word</i></pre>
<p class="tab">The word is expanded and supplied to the command on its standard input.</p>
<h2 id="12A9">Duplicating file descriptors</h2>
<p class="tab">The redirection operator</p>
<pre class="tab tcy">[<i>n</i>]&lt;&amp;<i>word</i></pre>
<p class="tab">Is used to duplicate input file descriptors. If <i>word</i> expands to one or more digits, the file descriptor denoted by <i>n</i> is made to be a copy of that file descriptor. If the digits in word do not specify a file descriptor open for input, a redirection error occurs. If <i>word</i> evaluates to <b>-</b>, file descriptor <i>n</i> is closed. If <i>n</i> is not specified, the standard input (file descriptor 0) is used.</p>
<p class="tab">The operator</p>
<pre class="tab tcy">[<i>n</i>]&gt;&amp;<i>word</i></pre>
<p class="tab">Is used similarly to duplicate output file descriptors. If <i>n</i> is not specified, the standard output (file descriptor 1) is used. If the digits in <i>word</i> do not specify a file descriptor open for output, a redirection error occurs. As a special case, if <i>n</i> is omitted, and word does not expand to one or more digits, the standard output and standard error are redirected as described previously.</p>
<h2 id="12A10">Moving file descriptors</h2>
<p class="tab">The redirection operator</p>
<pre class="tab tcy">[<i>n</i>]&lt;&amp;<i>digit</i>-</pre>
<p class="tab">Moves the file descriptor <i>digit</i> to file descriptor <i>n</i>, or the standard input (file descriptor 0) if <i>n</i> is not specified. The <i>digit</i> is closed after being duplicated to <i>n</i>.</p>
<p class="tab">Similarly, the redirection operator</p>
<pre class="tab tcy">[<i>n</i>]&gt;&amp;<i>digit</i>-</pre>
<p class="tab">Moves the file descriptor digit to file descriptor <i>n</i>, or the standard output (file descriptor 1) if <i>n</i> is not specified.</p>
<h2 id="opening-file-descriptors">Opening file descriptors for reading and writing</h2>
<p class="tab">The redirection operator</p>
<pre class="tab tcy">[<i>n</i>]&lt;&gt;<i>word</i></pre>
<p class="tab">Causes the file whose name is the expansion of <i>word</i> to be opened for both reading and writing on file descriptor <i>n</i>, or on file descriptor 0 if <i>n</i> is not specified. If the file does not exist, it is created.</p>
<h2 id="aliases">Aliases</h2>
<p class="tab"><i>Aliases</i> allow a string to be substituted for a word when it is used as the first word of a simple command. The shell maintains a list of aliases set and unset with the <b>alias</b> and <b>unalias</b> builtin commands (see the section "<a href="#28A">Shell Builtin Commands</a>" for details). The first word of each simple command, if unquoted, is checked to see if it has an alias. If so, that word is replaced by the text of the alias. The characters <b>/</b>, <b>$</b>, <b>&#96;</b>, and <b>=</b> and any of the shell metacharacters or quoting characters listed above may not appear in an alias name. The replacement text may contain any valid shell input, including shell metacharacters. The first word of the replacement text is tested for aliases, but a word that is identical to an alias being expanded is not expanded a second time. This means that one may alias <b>ls</b> to <b>ls -F</b>, for instance, and bash does not try to recursively expand the replacement text. If the last character of the alias value is a blank, then the next command word following the alias is also checked for alias expansion.</p>
<p class="tab">Aliases are created and listed with the <b>alias</b> command, and removed with the <b>unalias</b> command.</p>
<p class="tab">There is no mechanism for using arguments in the replacement text. If arguments are needed, a shell function should be used (see the section "<a href="#functions">Functions</a>" below).</p>
<p class="tab">Aliases are not expanded when the shell is not interactive, unless the <b>expand_aliases</b> shell option is set using <b>shopt</b> (see the description of <b>shopt</b> under the section "<a href="#28A">Shell Builtin Commands</a>" below).</p>
<p class="tab">The rules concerning the definition and use of aliases are somewhat confusing. Bash always reads at least one complete line of input before executing any of the commands on that line. Aliases are expanded when a command is read, not when it is executed. Therefore, an alias definition appearing on the same line as another command does not take effect until the next line of input is read. The commands following the alias definition on that line are not affected by the new alias. This behavior is also an issue when functions are executed. Aliases are expanded when a function definition is read, not when the function is executed, because a function definition is itself a compound command. As a consequence, aliases defined in a function are not available until after that function is executed. To be safe, always put alias definitions on a separate line, and do not use alias in compound commands.</p>
<p class="tab">For almost every purpose, aliases are superseded by shell functions.</p>
<h2 id="functions">Functions</h2>
<p class="tab">A <i>shell function</i>, defined as described above under the section "<a href="#shell-grammar">Shell Grammar</a>", stores a series of commands for later execution. When the name of a shell function is used as a simple command name, the list of commands associated with that function name is executed. Functions are executed in the context of the current shell; no new process is created to interpret them (contrast this with the execution of a shell script). When a function is executed, the arguments to the function become the positional parameters during its execution. The special parameter <b>#</b> is updated to reflect the change. Special parameter 0 is unchanged. The first element of the <b>FUNCNAME</b> variable is set to the name of the function while the function is executing.</p>
<p class="tab">All other aspects of the shell execution environment are identical between a function and its caller with these exceptions: the <b>DEBUG</b> and <b>RETURN</b> traps (see the description of the <b>trap</b> builtin under the section "<a href="#28A">Shell Builtin Commands</a>" below) are not inherited unless the function is given the <b>trace</b> attribute (see the description of the <b>declare</b> builtin below) or the <b>-o functrace</b> shell option is enabled with the <b>set</b> builtin (where all functions inherit the <b>DEBUG</b> and <b>RETURN</b> traps), and the <b>ERR</b> trap is not inherited unless the <b>-o errtrace</b> shell option is enabled.</p>
<p class="tab">Variables local to the function may be declared with the <b>local</b> builtin command. Ordinarily, variables and their values are shared between the function and its caller.</p>
<p class="tab">The <b>FUNCNEST</b> variable, if set to a numeric value greater than 0, defines a maximum function nesting level. Function invocations that exceed the limit cause the entire command to abort.</p>
<p class="tab">If the builtin command <b>return</b> is executed in a function, the function completes and execution resumes with the next command after the function call. Any command associated with the <b>RETURN</b> trap is executed before execution resumes. When a function completes, the values of the positional parameters and the special parameter <b>#</b> are restored to the values they had before the function's execution.</p>
<p class="tab">Function names and definitions may be listed with the <b>-f</b> option to the <b>declare</b> or <b>typeset</b> builtin commands. The <b>-F</b> option to <b>declare</b> or <b>typeset</b> lists the function names only (and optionally the source file and line number, if the <b>extdebug</b> shell option is enabled). Functions may be exported so that subshells automatically have them defined with the <b>-f</b> option to the <b>export</b> builtin. A function definition may be deleted using the <b>-f</b> option to the <b>unset</b> builtin. Note that shell functions and variables with the same name may result in multiple identically-named entries in the environment passed to the shell's children. Care should be taken in cases where this may cause a problem.</p>
<p class="tab">Functions may be recursive. The <b>FUNCNEST</b> variable may be used to limit the depth of the function call stack and restrict the number of function invocations. By default, no limit is imposed on the number of recursive calls.</p>
<h2 id="15A">Arithmetic evaluation</h2>
<p class="tab">The shell allows <i>arithmetic expressions</i> to be <i>evaluated</i>, under certain circumstances (see the <b>let</b> and <b>declare</b> builtin commands and the section "<a href="#11A5">Arithmetic Expansion</a>"). Evaluation is done in fixed-width integers with no check for overflow, though division by 0 is trapped and flagged as an error. The operators and their precedence, associativity, and values are the same as in the <a href="/jargon/c/c.htm">C language</a>. The following list of operators is grouped into levels of equal-precedence operators. The levels are listed in order of decreasing precedence.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><i>id</i><b>++</b>, <i>id</i><b>--</b></td>
<td>variable post-increment and post-decrement</td>
</tr>
<tr class="tcw">
<td><b>++</b><i>id</i>, <b>--</b><i>id</i></td>
<td>variable pre-increment and pre-decrement</td>
</tr>
<tr class="tcw">
<td><b>-</b>, <b>+</b></td>
<td>unary minus and plus</td>
</tr>
<tr class="tcw">
<td><b>!</b>, <b>~</b></td>
<td>logical and bitwise negation</td>
</tr>
<tr class="tcw">
<td><b>**</b></td>
<td>exponentiation</td>
</tr>
<tr class="tcw">
<td><b>*</b>, <b>/</b>, <b>%</b></td>
<td>multiplication, division, remainder</td>
</tr>
<tr class="tcw">
<td><b>+</b>, <b>-</b></td>
<td>addition, subtraction</td>
</tr>
<tr class="tcw">
<td><b>&lt;&lt;</b>, <b>&gt;&gt;</b></td>
<td>left and right bitwise shifts</td>
</tr>
<tr class="tcw">
<td><b>&lt;=</b>, <b>&gt;=</b>, <b>&lt;</b>, <b>&gt;</b></td>
<td>comparison</td>
</tr>
<tr class="tcw">
<td><b>==</b>, <b>!=</b></td>
<td>equality and inequality</td>
</tr>
<tr class="tcw">
<td><b>&amp;</b></td>
<td>bitwise AND</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>bitwise exclusive OR</td>
</tr>
<tr class="tcw">
<td><b>|</b></td>
<td>bitwise OR</td>
</tr>
<tr class="tcw">
<td><b>&amp;&amp;</b></td>
<td>logical AND</td>
</tr>
<tr class="tcw">
<td><b>||</b></td>
<td>logical OR</td>
</tr>
<tr class="tcw">
<td><i>expr</i><b>?</b><i>expr</i><b>:</b><i>expr</i></td>
<td>conditional operator</td>
</tr>
<tr class="tcw">
<td><b>=</b>, <b>*=</b>, <b>/=</b>, <b>%=</b>, <b>+=</b>, <b>-=</b>, <b>&lt;&lt;=</b>, <b>&gt;&gt;=</b>, <b>&amp;=</b>, <b>^=</b>, <b>|=</b></td>
<td>assignment</td>
</tr>
<tr class="tcw">
<td><i>expr1</i><b>,</b> <i>expr2</i></td>
<td>comma</td>
</tr>
</table>
<p class="tab">Shell variables are allowed as operands; parameter expansion is performed before the expression is evaluated. Within an expression, shell variables may also be referenced by name without using the parameter expansion syntax. A shell variable that is null or unset evaluates to 0 when referenced by name without using the parameter expansion syntax. The value of a variable is evaluated as an arithmetic expression when it is referenced, or when a variable which is given the integer attribute using <b>declare -i</b> is assigned a value. A null value evaluates to 0. A shell variable need not have its integer attribute turned on to be used in an expression.</p>
<p class="tab">Constants with a leading 0 are interpreted as octal numbers. A leading <b>0x</b> or <b>0X</b> denotes hexadecimal. Otherwise, numbers take the form <b>[base#]n</b>, where the optional base is a decimal number between 2 and 64 representing the arithmetic base, and <b>n</b> is a number in that base. If <b>base#</b> is omitted, then base 10 is used. The digits greater than 9 are represented by the lowercase letters, the uppercase letters, <b>@</b>, and <b>_</b>, in that order. If base is less than or equal to 36, lowercase and uppercase letters may be used interchangeably to represent numbers between 10 and 35.</p>
<p class="tab">Operators are evaluated in order of precedence. Sub-expressions in parentheses are evaluated first and may override the precedence rules above.</p>
<h2 id="conditional-expressions">Conditional expressions</h2>
<p class="tab">Conditional expressions are used by the <b>[[</b> compound command and the <b>test</b> and <b>[</b> builtin commands to test file attributes and perform string and arithmetic comparisons. Expressions are formed from the following unary or binary primaries. If any file argument to one of the primaries is of the form <b>/dev/fd/n</b>, then file descriptor <b>n</b> is checked. If the file argument to one of the primaries is one of <b>/dev/stdin</b>, <b>/dev/stdout</b>, or <b>/dev/stderr</b>, file descriptor 0, 1, or 2, respectively, is checked.</p>
<p class="tab">Unless otherwise specified, primaries that operate on files follow <a href="/jargon/s/symblink.htm">symbolic links</a> and operate on the target of the link, rather than the link itself.</p>
<p class="tab">When used with <b>[[</b>, the <b>&lt;</b> and <b>&gt;</b> operators sort lexicographically using the current locale. The test command sorts using <a href="/jargon/a/ascii.htm">ASCII</a> ordering.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>-a</b> <i>file</i></td>
<td>True if <i>file</i> exists.</td>
</tr>
<tr class="tcw">
<td><b>-b</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a block special file.</td>
</tr>
<tr class="tcw">
<td><b>-c</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a character special file.</td>
</tr>
<tr class="tcw">
<td><b>-d</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a directory.</td>
</tr>
<tr class="tcw">
<td><b>-e</b> <i>file</i></td>
<td>True if <i>file</i> exists.</td>
</tr>
<tr class="tcw">
<td><b>-f</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a regular file.</td>
</tr>
<tr class="tcw">
<td><b>-g</b> <i>file</i></td>
<td>True if <i>file</i> exists and is set-group-id.</td>
</tr>
<tr class="tcw">
<td><b>-h</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a symbolic link.</td>
</tr>
<tr class="tcw">
<td><b>-k</b> <i>file</i></td>
<td>True if <i>file</i> exists and its "sticky" bit is set.</td>
</tr>
<tr class="tcw">
<td><b>-p</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a named pipe (FIFO).</td>
</tr>
<tr class="tcw">
<td><b>-r</b> <i>file</i></td>
<td>True if <i>file</i> exists and is readable.</td>
</tr>
<tr class="tcw">
<td><b>-s</b> <i>file</i></td>
<td>True if <i>file</i> exists and has a size greater than zero.</td>
</tr>
<tr class="tcw">
<td><b>-t</b> <i>fd</i></td>
<td>True if file descriptor <i>fd</i> is open and refers to a terminal.</td>
</tr>
<tr class="tcw">
<td><b>-u</b> <i>file</i></td>
<td>True if <i>file</i> exists and its set-user-id bit is set.</td>
</tr>
<tr class="tcw">
<td><b>-w</b> <i>file</i></td>
<td>True if <i>file</i> exists and is writable.</td>
</tr>
<tr class="tcw">
<td><b>-x</b> <i>file</i></td>
<td>True if <i>file</i> exists and is executable.</td>
</tr>
<tr class="tcw">
<td><b>-G</b> <i>file</i></td>
<td>True if <i>file</i> exists and is owned by the effective group id.</td>
</tr>
<tr class="tcw">
<td><b>-L</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a symbolic link.</td>
</tr>
<tr class="tcw">
<td><b>-N</b> <i>file</i></td>
<td>True if <i>file</i> exists and was modified since it was last read.</td>
</tr>
<tr class="tcw">
<td><b>-O</b> <i>file</i></td>
<td>True if <i>file</i> exists and is owned by the effective user id.</td>
</tr>
<tr class="tcw">
<td><b>-S</b> <i>file</i></td>
<td>True if <i>file</i> exists and is a socket.</td>
</tr>
<tr class="tcw">
<td><i>file1</i> <b>-ef</b> <i>file2</i></td>
<td>True if <i>file1</i> and <i>file2</i> refer to the same device and <i>inode</i> numbers.</td>
</tr>
<tr class="tcw">
<td><i>file1</i> <b>-nt</b> <i>file2</i></td>
<td>True if <i>file1</i> is newer (according to modification date) than <i>file2</i>, or if <i>file1</i> exists and <i>file2</i> does not.</td>
</tr>
<tr class="tcw">
<td><i>file1</i> <b>-ot</b> <i>file2</i></td>
<td>True if <i>file1</i> is older than <i>file2</i>, or if <i>file2</i> exists and <i>file1</i> does not.</td>
</tr>
<tr class="tcw">
<td><b>-o</b> <i>optname</i></td>
<td>True if the shell option <i>optname</i> is enabled. See the list of options under the description of the <b>-o</b> option to the <b>set</b> builtin below.</td>
</tr>
<tr class="tcw">
<td><b>-v</b> <i>varname</i></td>
<td>True if the shell variable <i>varname</i> is set (is assigned a value).</td>
</tr>
<tr class="tcw">
<td><b>-z</b> <i>string</i></td>
<td>True if the length of <i>string</i> is zero.</td>
</tr>
<tr class="tcw">
<td><i>string</i>, <b>-n</b> <i>string</i></td>
<td>True if the length of <i>string</i> is non-zero.</td>
</tr>
<tr class="tcw">
<td><i>string1</i> <b>==</b> <i>string2</i>, <i>string1</i> <b>=</b> <i>string2</i></td>
<td>True if the strings are equal. <b>=</b> should be used with the <b>test</b> command for POSIX conformance.</td>
</tr>
<tr class="tcw">
<td><i>string1</i> <b>!=</b> <i>string2</i></td>
<td>True if the strings are not equal.</td>
</tr>
<tr class="tcw">
<td><i>string1</i> <b>&lt;</b> <i>string2</i></td>
<td>True if <i>string1</i> sorts before <i>string2</i> lexicographically.</td>
</tr>
<tr class="tcw">
<td><i>string1</i> <b>&gt;</b> <i>string2</i></td>
<td>True if <i>string1</i> sorts after <i>string2</i> lexicographically.</td>
</tr>
<tr class="tcw">
<td><i>arg1</i> <b>OP</b> <i>arg2</i></td>
<td><b>OP</b> is one of <b>-eq</b>, <b>-ne</b>, <b>-lt</b>, <b>-le</b>, <b>-gt</b>, or <b>-ge</b>. These arithmetic binary operators return true if <i>arg1</i> is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to <i>arg2</i>, respectively. The <i>Arg1</i> and <i>arg2</i> may be positive or negative integers.</td>
</tr>
</table>
<h2 id="17A">Simple command expansion</h2>
<p class="tab">When a <i>simple command</i> is executed, the shell performs the following expansions, assignments, and redirections, from left to right.</p>
<ol>
<li>The words that the parser has marked as variable assignments (those preceding the command name) and redirections are saved for later processing.</li>
<li>The words that are not variable assignments or redirections are expanded. If any words remain after expansion, the first word is taken to be the name of the command and the remaining words are the arguments.</li>
<li>Redirections are performed as described above under REDIRECTION.</li>
<li>The text after the = in each variable assignment undergoes tilde expansion, parameter expansion, command substitution, arithmetic expansion, and quote removal before being assigned to the variable.</li>
</ol>
<p class="tab">If no command name results, the variable assignments affect the current shell environment. Otherwise, the variables are added to the environment of the executed command and do not affect the current shell environment. If any of the assignments attempts to assign a value to a readonly variable, an error occurs, and the command exits with a non-zero status.</p>
<p class="tab">If no command name results, redirections are performed, but do not affect the current shell environment. A redirection error causes the command to exit with a non-zero status.</p>
<p class="tab">If there is a command name left after expansion, execution proceeds as described below. Otherwise, the command exits. If one of the expansions contained a command substitution, the exit status of the command is the exit status of the last command substitution performed. If there were no command substitutions, the command exits with a status of zero.</p>
<h2 id="18A">Command execution</h2>
<p class="tab">After a command is split into words, if it results in a simple command and an optional list of arguments, the following actions are taken.</p>
<p class="tab">If the command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, that function is invoked as described above in the section "<a href="#functions">Functions</a>." If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.</p>
<p class="tab">If the name is neither a shell function nor a builtin, and contains no slashes, bash searches each element of the PATH for a directory containing an executable file by that name. Bash uses a hash table to remember the full pathnames of executable files (see <b>hash</b> under the section "<a href="#28A">Shell Builtin Commands</a>" below). A full search of the directories in PATH is performed only if the command is not found in the hash table. If the search is unsuccessful, the shell searches for a defined shell function named <b>command_not_found_handle</b>. If that function exists, it is invoked with the original command and the original command's arguments as its arguments, and the function's exit status becomes the exit status of the shell. If that function is not defined, the shell prints an error message and returns an exit status of 127.</p>
<p class="tab">If the search is successful, or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the name given, and the remaining arguments to the command are set to the arguments given, if any.</p>
<p class="tab">If this execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a shell script, a file containing shell commands. A subshell is spawned to execute it. This subshell reinitializes itself, so that the effect is as if a new shell had been invoked to handle the script, with the exception that the locations of commands remembered by the parent (see <b>hash</b> below under the section "<a href="#28A">Shell Builtin Commands</a>") are retained by the child.</p>
<p class="tab">If the program is a file beginning with <b>#!</b>, the remainder of the first line specifies an interpreter for the program. The shell executes the specified interpreter on operating systems that do not handle this executable format themselves. The arguments to the interpreter consist of a single optional argument following the interpreter name on the first line of the program, followed by the name of the program, followed by the command arguments, if any.</p>
<h2 id="command-exec-environment">Command execution environment</h2>
<p class="tab">The shell has an <i>execution environment</i>, which consists of the following:</p>
<ul>
<li>open files inherited by the shell at invocation, as modified by redirections supplied to the <b>exec</b> builtin</li>
<li>the current working directory as set by <b>cd</b>, <b>pushd</b>, or <b>popd</b>, or inherited by the shell at invocation</li>
<li>the file creation mode mask as set by <a href="/unix/uumask.htm">umask</a> or inherited from the shell's parent</li>
<li>current traps set by <b>trap</b></li>
<li>shell parameters that are set by variable assignment or with set or inherited from the shell's parent in the environment</li>
<li>shell functions defined during execution or inherited from the shell's parent in the environment</li>
<li>options enabled at invocation (either by default or with command-line arguments) or by <b>set</b></li>
<li>options enabled by <b>shopt</b></li>
<li>shell aliases defined with <b>alias</b></li>
<li>various process IDs, including those of background jobs, the value of <b>$$</b>, and the value of <b>PPID</b></li>
</ul>
<p class="tab">When a simple command other than a builtin or shell function is to be executed, it is invoked in a separate execution environment that consists of the following. Unless otherwise noted, the values are inherited from the shell.</p>
<ul>
<li>the shell's open files, plus any modifications and additions specified by redirections to the command</li>
<li>the current working directory</li>
<li>the file creation mode mask</li>
<li>shell variables and functions marked for export, along with variables exported for the command, passed in the environment</li>
<li>traps caught by the shell are reset to the values inherited from the shell's parent, and traps ignored by the shell are ignored</li>
</ul>
<p class="tab">A command invoked in this separate environment cannot affect the shell's execution environment.</p>
<p class="tab" id="command-exec-env-subshell">Command substitution, commands grouped with parentheses, and asynchronous commands are invoked in a subshell environment that is a duplicate of the shell environment, except that traps caught by the shell are reset to the values that the shell inherited from its parent at invocation. Builtin commands that are invoked as part of a pipeline are also executed in a subshell environment. Changes made to the subshell environment cannot affect the shell's execution environment.</p>
<p class="tab">Subshells spawned to execute command substitutions inherit the value of the <b>-e</b> option from the parent shell. When not in posix mode, bash clears the <b>-e</b> option in such subshells.</p>
<p class="tab">If a command is followed by a <b>&amp;</b> and job control is not active, the default standard input for the command is the empty file <b>/dev/null</b>. Otherwise, the invoked command inherits the file descriptors of the calling shell as modified by redirections.</p>
<h2 id="20A">Environment</h2>
<p class="tab">When a program is invoked it is given an array of strings called the <i>environment</i>. This is a list of name-value pairs, of the form <b>name=value</b>.</p>
<p class="tab">The shell provides several ways to manipulate the environment. On invocation, the shell scans its own environment and creates a parameter for each name found, automatically marking it for export to child processes. Executed commands inherit the environment. The <b>export</b> and <b>declare -x</b> commands allow parameters and functions to be added to and deleted from the environment. If the value of a parameter in the environment is modified, the new value becomes part of the environment, replacing the old. The environment inherited by any executed command consists of the shell's initial environment, whose values may be modified in the shell, less any pairs removed by the unset command, plus any additions via the <b>export</b> and <b>declare -x</b> commands.</p>
<p class="tab">The environment for any simple command or function may be augmented temporarily by prefixing it with parameter assignments, as described above in the section "<a href="#parameters">Parameters</a>." These assignment statements affect only the environment seen by that command.</p>
<p class="tab">If the <b>-k</b> option is set (see the <b>set</b> builtin command below), then all parameter assignments are placed in the environment for a command, not only those that precede the command name.</p>
<p class="tab">When <b>bash</b> invokes an external command, the variable <b>_</b> is set to the full file name of the command and passed to that command in its environment.</p>
<h2 id="21A">Exit Status</h2>
<p class="tab">The <i>exit status</i> of an executed command is the value returned by the <b>waitpid</b> system call or equivalent function. Exit statuses fall between 0 and 255, though, as explained below, the shell may use values above 125 specially. Exit statuses from shell builtins and compound commands are also limited to this range. Under certain circumstances, the shell uses special values to indicate specific failure modes.</p>
<p class="tab">For the shell's purposes, a command which exits with a zero exit status has succeeded. An exit status of zero indicates success. A non-zero exit status indicates failure. When a command terminates on a fatal signal <b>N</b>, bash uses the value of <b>128+N</b> as the exit status.</p>
<p class="tab">If a command is not found, the child process created to execute it returns a status of 127. If a command is found but is not executable, the return status is 126.</p>
<p class="tab">If a command fails because of an error during expansion or redirection, the exit status is greater than zero.</p>
<p class="tab">Shell builtin commands return a status of 0 (true) if successful, and non-zero (false) if an error occurs while they execute. All builtins return an exit status of 2 to indicate incorrect usage.</p>
<p class="tab">Bash itself returns the exit status of the last command executed, unless a syntax error occurs, where it exits with a non-zero value. See also the exit builtin command below.</p>
<h2 id="signals">Signals</h2>
<p class="tab">When bash is interactive, in the absence of any traps, it ignores <b>SIGTERM</b> (so that kill 0 does not kill an interactive shell), and <b>SIGINT</b> is caught and handled (so that the wait builtin is interruptible). In all cases, bash ignores <b>SIGQUIT</b>. If job control is in effect, bash ignores <b>SIGTTIN</b>, <b>SIGTTOU</b>, and <b>SIGTSTP</b>.</p>
<p class="tab">Non-builtin commands run by bash have signal handlers set to the values inherited by the shell from its parent. When job control is not in effect, asynchronous commands ignore <b>SIGINT</b> and <b>SIGQUIT</b> in addition to these inherited handlers. Commands run as a result of command substitution ignore the keyboard-generated job control signals <b>SIGTTIN</b>, <b>SIGTTOU</b>, and <b>SIGTSTP</b>.</p>
<p class="tab">The shell exits by default upon receipt of a <b>SIGHUP</b>. Before exiting, an interactive shell resends the <b>SIGHUP</b> to all jobs, running or stopped. Stopped jobs are sent <b>SIGCONT</b> to ensure that they receive the <b>SIGHUP</b>. To prevent the shell from sending the signal to a particular job, it should be removed from the jobs table with the <b>disown</b> builtin (see the section "<a href="#28A">Shell Builtin Commands</a>" below) or marked to not receive <b>SIGHUP</b> using <b>disown -h</b>.</p>
<p class="tab">If the <b>huponexit</b> shell option is set with <b>shopt</b>, bash sends a <b>SIGHUP</b> to all jobs when an interactive login shell exits.</p>
<p class="tab">If bash is waiting for a command to complete and receives a signal for which a trap is set, the trap is not executed until the command completes. When bash is waiting for an asynchronous command via the <b>wait</b> builtin, the reception of a signal for which a trap is set causes the wait builtin to return immediately with an exit status greater than 128, immediately after which the trap is executed.</p>
<h2 id="job-control">Job control</h2>
<p class="tab"><i>Job control</i> refers to the ability to selectively stop (suspend) the execution of processes and continue (resume) their execution at a later point. A user often employs this facility via an interactive interface supplied jointly by the operating system <a href="/jargon/k/kernel.htm">kernel</a>'s terminal driver and bash.</p>
<p class="tab">The shell associates a job with each pipeline. It keeps a table of currently executing jobs, which may be listed with the <b>jobs</b> command. When bash starts a job asynchronously (in the background), it prints a line that looks like:</p>
<pre class="tab">[1] 25647</pre>
<p class="tab">Indicating that this job is job number <b>1</b> and that the process ID of the last process in the pipeline associated with this job is <b>25647</b>. All the processes in a single pipeline are members of the same job. Bash uses the job abstraction as the basis for job control.</p>
<p class="tab">To facilitate the implementation of the user interface to job control, the operating system maintains the notion of a current terminal process group ID. Members of this process group (processes whose process group ID is equal to the current terminal process group ID) receive keyboard-generated signals such as <b>SIGINT</b>. These processes are said to be in the foreground. Background processes are those whose process group ID differs from the terminal's; such processes are immune to keyboard-generated signals. Only foreground processes are allowed to read from or, if the user so specifies with stty tostop, write to the terminal. Background processes which attempt to read from (write to when stty tostop is in effect) the terminal are sent a <b>SIGTTIN</b> (<b>SIGTTOU</b>) signal by the kernel's terminal driver, which, unless caught, suspends the process.</p>
<p class="tab">If the operating system on which bash is running supports job control, bash contains facilities to use it. Typing the suspend character (<b>^Z</b>, <b>Control-Z</b>) while a process is running causes that process to be stopped and returns control to bash. Typing the delayed suspend character (<b>^Y</b>, <b>Control-Y</b>) causes the process to be stopped when it attempts to read input from the terminal, and control to be returned to bash. The user may then manipulate the state of this job, using the <b>bg</b> command to continue it in the background, the <b>fg</b> command to continue it in the foreground, or the <a href="/unix/ukill.htm">kill</a> command to kill it. A <b>^Z</b> takes effect immediately, and has the additional side effect of causing pending output and typeahead to be discarded.</p>
<p class="tab">There are many ways to refer to a job in the shell. The character <b>%</b> introduces a job specification (<b>jobspec</b>). Job number <b>n</b> may be referred to as <b>%n</b>. A job may also be referred to using a prefix of the name used to start it, or using a substring that appears in its command line. For example, <b>%ce</b> refers to a stopped <b>ce</b> job. If a prefix matches more than one job, bash reports an error. Using <b>%?ce</b>, on the other hand, refers to any job containing the string <b>ce</b> in its command line. If the substring matches more than one job, bash reports an error. The symbols <b>%%</b> and <b>%+</b> refer to the shell's notion of the current job, which is the last job stopped while it was in the foreground or started in the background. The previous job may be referenced using <b>%-</b>. If there is only a single job, <b>%+</b> and <b>%-</b> can refer to that job. In output for jobs (e.g., the output of the <b>jobs</b> command), the current job is always flagged with a <b>+</b>, and the previous job with a <b>-</b>. A single <b>%</b> (with no accompanying job specification) also refers to the current job.</p>
<p class="tab">Naming a job can bring it into the foreground: <b>%1</b> is a synonym for "fg %1", bringing job 1 from the background into the foreground. Similarly, "<b>%1 &amp;</b>" resumes job 1 in the background, equivalent to "<b>bg %1</b>".</p>
<p class="tab">The shell learns immediately whenever a job changes state. Normally, bash waits until it is about to print a prompt before reporting changes in a job's status so as to not interrupt any other output. If the <b>-b</b> option to the <b>set</b> builtin command is enabled, bash reports such changes immediately. Any trap on <b>SIGCHLD</b> is executed for each child that exits.</p>
<p class="tab">If an attempt to exit bash is made while jobs are stopped (or, if the <b>checkjobs</b> shell option is enabled using the <b>shopt</b> builtin, running), the shell prints a warning message, and, if the <b>checkjobs</b> option is enabled, lists the jobs and their statuses. The jobs command may then be used to inspect their status. If a second attempt to exit is made without an intervening command, the shell does not print another warning, and any stopped jobs are terminated.</p>
<h2 id="prompting">Prompting</h2>
<p class="tab">When executing interactively, bash displays the primary prompt <b>PS1</b> when it is ready to read a command, and the secondary prompt <b>PS2</b> when it needs more input to complete a command. Bash allows these prompt strings to be customized by inserting backslash-escaped special characters that are decoded as follows:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>\a</b></td>
<td>ASCII bell character (07).</td>
</tr>
<tr class="tcw">
<td><b>\d</b></td>
<td>Date in "Weekday Month Date" format (e.g., "Tue May 26").</td>
</tr>
<tr class="tcw">
<td><b>\D{</b><i>format</i><b>}</b></td>
<td>The format is passed to <b>strftime</b> and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required.</td>
</tr>
<tr class="tcw">
<td><b>\e</b></td>
<td>ASCII escape character (033).</td>
</tr>
<tr class="tcw">
<td><b>\h</b></td>
<td>The hostname up to the first '.'</td>
</tr>
<tr class="tcw">
<td><b>\H</b></td>
<td>The hostname.</td>
</tr>
<tr class="tcw">
<td><b>\j</b></td>
<td>The number of jobs currently managed by the shell.</td>
</tr>
<tr class="tcw">
<td><b>\l</b></td>
<td>The <a href="/unix/ubasenam.htm">basename</a> of the shell's terminal device name.</td>
</tr>
<tr class="tcw">
<td><b>\n</b></td>
<td><a href="/jargon/n/newline.htm">newline</a></td>
</tr>
<tr class="tcw">
<td><b>\r</b></td>
<td><a href="/jargon/c/cr.htm">carriage return</a></td>
</tr>
<tr class="tcw">
<td><b>\s</b></td>
<td>Name of the shell, the <b>basename</b> of <b>$0</b> (the portion following the final slash).</td>
</tr>
<tr class="tcw">
<td><b>\t</b></td>
<td>Current time in 24-hour <b>HH:MM:SS</b> format.</td>
</tr>
<tr class="tcw">
<td><b>\T</b></td>
<td>Current time in 12-hour <b>HH:MM:SS</b> format.</td>
</tr>
<tr class="tcw">
<td><b>\@</b></td>
<td>Current time in 12-hour am/pm format.</td>
</tr>
<tr class="tcw">
<td><b>\A</b></td>
<td>Current time in 24-hour <b>HH:MM</b> format.</td>
</tr>
<tr class="tcw">
<td><b>\u</b></td>
<td>Username of the current user.</td>
</tr>
<tr class="tcw">
<td><b>\v</b></td>
<td>The version of bash (e.g., 2.00).</td>
</tr>
<tr class="tcw">
<td><b>\V</b></td>
<td>The release of bash, version + patch level (e.g., 2.00.0).</td>
</tr>
<tr class="tcw">
<td><b>\w</b></td>
<td>Current working directory, with <b>$HOME</b> abbreviated with a tilde (uses the value of the <b>PROMPT_DIRTRIM</b> variable).</td>
</tr>
<tr class="tcw">
<td><b>\W</b></td>
<td>The <b>basename</b> of the current working directory, with <b>$HOME</b> abbreviated with a tilde.</td>
</tr>
<tr class="tcw">
<td><b>\!</b></td>
<td>The history number of this command.</td>
</tr>
<tr class="tcw">
<td><b>\#</b></td>
<td>The command number of this command.</td>
</tr>
<tr class="tcw">
<td><b>\$</b></td>
<td>If the effective UID is 0, a <b>#</b>, otherwise a <b>$</b>.</td>
</tr>
<tr class="tcw">
<td><b>\nnn</b></td>
<td>The character corresponding to the octal number <b>nnn</b>.</td>
</tr>
<tr class="tcw">
<td><b>\\</b></td>
<td>A backslash.</td>
</tr>
<tr class="tcw">
<td><b>\[</b></td>
<td>Begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt.</td>
</tr>
<tr class="tcw">
<td><b>\]</b></td>
<td>End a sequence of non-printing characters.</td>
</tr>
</table>
<p class="tab">The command number and the history number are usually different: the <b>history number</b> of a command is its position in the history list, which may include commands restored from the history file (see the section "<a href="#history">History</a>", below), while the <b>command number</b> is the position in the sequence of commands executed during the current shell session. After the string is decoded, it is expanded via parameter expansion, command substitution, arithmetic expansion, and quote removal, subject to the value of the <b>promptvars</b> shell option (see the description of the <b>shopt</b> command under "<a href="#28A">Shell Builtin Commands</a>" section below).</p>
<h2 id="25A">Readline</h2>
<p class="tab">This is the library that handles reading input when using an interactive shell, unless the <b>--noediting</b> option is given at shell invocation. Line editing is also used when using the <b>-e</b> option to the <b>read</b> builtin. By default, the line editing commands are similar to those of <a href="/unix/uemacs.htm">Emacs</a>. A <a href="/unix/uvi.htm">vi</a>-style line editing interface is also available. Line editing can be enabled at any time using the <b>-o emacs</b> or <b>-o vi</b> options to the <b>set</b> builtin (see the section "<a href="#28A">Shell Builtin Commands</a>" below). To turn off line editing after the shell is running, use the <b>+o emacs</b> or <b>+o vi</b> options to the <b>set</b> builtin.</p>
<h2 id="25A1">Readline notation</h2>
<p class="tab">In this section, the <a href="/unix/uemacs.htm">Emacs</a>-style notation is used to denote keystrokes. Control keys are denoted by <b>C</b>-key, e.g., <b>C-n</b> means <b>Control-N</b>. Similarly, meta keys are denoted by <b>M</b>-key, so <b>M-x</b> means <b>Meta-X</b>. On keyboards without a meta key, <b>M-x</b> means <b>ESC x</b>, i.e., press the <b>Escape</b> key then the <b>x</b> key. This makes <b>ESC</b> the meta prefix. The combination <b>M-C-x</b> means <b>ESC-Control-x</b>, or press the <b>Escape</b> key then hold the <b>Control</b> key while pressing the <b>x</b> key.</p>
<p class="tab"><b>Readline</b> commands may be given numeric arguments, which normally act as a repeat count. Sometimes, however, it is the sign of the argument that is significant. Passing a negative argument to a command that acts in the forward direction (e.g., <b>kill-line</b>) causes that command to act in a backward direction. Commands whose behavior with arguments deviates from this are noted below.</p>
<p class="tab">When a command is described as killing text, the text deleted is saved for possible future retrieval (yanking). The killed text is saved in a kill ring. Consecutive kills cause the text to be accumulated into one unit, which can be yanked all at once. Commands which do not kill text separate the chunks of text on the kill ring.</p>
<h2 id="25A2">Readline initialization</h2>
<p class="tab">Readline is customized by putting commands in an initialization file (the <b>inputrc</b> file). The name of this file is taken from the value of the <b>INPUTRC</b> variable. If that variable is unset, the default is <b>~/.inputrc</b>. When a program which uses the <b>readline</b> library starts up, the initialization file is read, and the key bindings and variables are set. There are only a few basic constructs allowed in the <b>readline</b> initialization file. Blank lines are ignored. Lines beginning with a <b>#</b> are comments. Lines beginning with a <b>$</b> indicate conditional constructs. Other lines denote key bindings and variable settings.</p>
<p class="tab">The default key-bindings may be changed with an <b>inputrc</b> file. Other programs that use this library may add their own commands and bindings.</p>
<p class="tab">For example, placing</p>
<pre class="tab tcy">M-Control-u: <i>universal-argument</i></pre>
<p class="tab">or</p>
<pre class="tab tcy">C-Meta-u: <i>universal-argument</i></pre>
<p class="tab">In the <b>inputrc</b> would make <b>M-C-u</b> execute the <b>readline</b> command <i>universal-argument</i>.</p>
<p class="tab">The following symbolic character names are recognized: <b>RUBOUT, DEL, ESC, LFD, NEWLINE, RET, RETURN, SPC, SPACE,</b> and <b>TAB</b>.</p>
<p class="tab">In addition to command names, <b>readline</b> allows keys to be bound to a string that is inserted when the key is pressed (a <a href="/jargon/m/macro.htm">macro</a>).</p>
<h2 id="25A3">Readline key bindings</h2>
<p class="tab">The syntax for controlling key bindings in the <b>inputrc</b> file is simple. All that is required is the name of the command or the text of a macro and a key sequence that it should be bound. The name may be specified in one of two ways: as a symbolic key name, possibly with <b>Meta-</b> or <b>Control-</b> prefixes, or as a key sequence.</p>
<p class="tab">When using the form <b>keyname:function-name</b> or macro, <b>keyname</b> is the name of a key spelled out in English. For example:</p>
<pre class="tab tcy">Control-u: universal-argument Meta-Rubout: backward-kill-word Control-o: "&gt; output"</pre>
<p class="tab">In the example above, <b>C-u</b> is bound to the function universal-argument, <b>M-DEL</b> is bound to the function <b>backward-kill-word</b>, and <b>C-o</b> is bound to run the macro expressed on the right side (that is, to insert the text "<b>&gt; output</b>" into the line).</p>
<p class="tab">In the second form, <b>"keyseq":function-name or macro</b>, <b>keyseq</b> differs from <b>keyname</b> above in that strings denoting an entire key sequence may be specified by placing the sequence within double quotes. Some <a href="/jargon/g/gnu.htm">GNU</a> Emacs style key escapes can be used, as in the following example, but the symbolic character names are not recognized.</p>
<pre class="tab tcy">"\C-u": universal-argument "\C-x\C-r": re-read-init-file "\e[11~": "Function Key 1"</pre>
<p class="tab">In this example, <b>C-u</b> is again bound to the function universal-argument. <b>C-x C-r</b> is bound to the function <b>re-read-init-file</b>, and <b>ESC [ 1 1 ~</b> is bound to insert the text "<b>Function Key 1</b>".</p>
<p class="tab">The full set of GNU Emacs style escape sequences is</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>\C-</b></td>
<td>control prefix</td>
</tr>
<tr class="tcw">
<td><b>\M-</b></td>
<td>meta prefix</td>
</tr>
<tr class="tcw">
<td><b>\e</b></td>
<td>an escape character</td>
</tr>
<tr class="tcw">
<td><b>\\</b></td>
<td>backslash</td>
</tr>
<tr class="tcw">
<td><b>\"</b></td>
<td>literal <b>"</b></td>
</tr>
<tr class="tcw">
<td><b>\'</b></td>
<td>literal <b>'</b></td>
</tr>
</table>
<p class="tab">In addition to the GNU Emacs style escape sequences, a second set of backslash escapes is available:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>\a</b></td>
<td>alert (bell)</td>
</tr>
<tr class="tcw">
<td><b>\b</b></td>
<td>backspace</td>
</tr>
<tr class="tcw">
<td><b>\d</b></td>
<td>delete</td>
</tr>
<tr class="tcw">
<td><b>\f</b></td>
<td>form feed</td>
</tr>
<tr class="tcw">
<td><b>\n</b></td>
<td>newline</td>
</tr>
<tr class="tcw">
<td><b>\r</b></td>
<td>carriage return</td>
</tr>
<tr class="tcw">
<td><b>\t</b></td>
<td>horizontal tab</td>
</tr>
<tr class="tcw">
<td><b>\v</b></td>
<td>vertical tab</td>
</tr>
<tr class="tcw">
<td><b>\nnn</b></td>
<td>the eight-bit character whose value is the octal value <b>nnn</b> (one to three digits)</td>
</tr>
<tr class="tcw">
<td><b>\xHH</b></td>
<td>the eight-bit character whose value is the hexadecimal value <b>HH</b> (one or two hex digits)</td>
</tr>
</table>
<p class="tab">When entering the text of a <a href="/jargon/m/macro.htm">macro</a>, single or double quotes must indicate a macro definition. Unquoted text is assumed to be a function name. In the macro body, the backslash escapes described above are expanded. Backslash quotes any other character in the macro text, including <b>&quot;</b> and <b>'</b>.</p>
<p class="tab">Bash allows the current <b>readline</b> key bindings to be displayed or modified with the <b>bind</b> builtin command. The editing mode may be switched during interactive use using the <b>-o</b> option to the <b>set</b> builtin command (see the section &quot;<a href="#28A">Shell Builtin Commands</a>&quot; below).</p>
<h2 id="25A4">Readline variables</h2>
<p class="tab"><b>Readline</b> has variables that further customize its behavior. A variable may be set in the <b>inputrc</b> file with a statement of the form.</p>
<pre class="tab tcy">set <i>variable-name value</i></pre>
<p class="tab">Except where noted, <b>readline</b> variables can take the values <b>On</b> or <b>Off</b> (without regard to case). Unrecognized variable names are ignored. When a variable value is read, empty or null values, &quot;<b>on</b>&quot; (case-insensitive), and &quot;<b>1</b>&quot; are equivalent to <b>On</b>. All other values are equivalent to <b>Off</b>. The variables and their default values are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:280px"><b>bell-style</b></td>
<td style="width:90px">audible</td>
<td>Controls what happens when readline wants to ring the terminal bell. If set to <b>none</b>, readline never rings the bell. If set to <b>visible</b>, readline uses a visible bell if one is available. If set to <b>audible</b>, readline attempts to ring the terminal's bell.</td>
</tr>
<tr class="tcw">
<td><b>bind-tty-special-chars</b></td>
<td>On</td>
<td>If set to <b>On</b>, readline attempts to bind the control characters treated specially by the kernel's terminal driver to their readline equivalents.</td>
</tr>
<tr class="tcw">
<td><b>comment-begin</b></td>
<td>"#"</td>
<td>The string that is inserted when the readline insert-comment command is executed. This command is bound to <b>M-#</b> in emacs mode and to <b>#</b> in vi command mode.</td>
</tr>
<tr class="tcw">
<td><b>completion-ignore-case</b></td>
<td>Off</td>
<td>If set to <b>On</b>, readline performs file name matching and completion in a case-insensitive fashion.</td>
</tr>
<tr class="tcw">
<td><b>completion-prefix-display-length</b></td>
<td>0</td>
<td>The length in characters of the common prefix of a list of possible completions that is displayed without modification. When set to a value greater than zero, common prefixes longer than this value are replaced with an ellipsis when displaying possible completions.</td>
</tr>
<tr class="tcw">
<td><b>completion-query-items</b></td>
<td>100</td>
<td>This determines when the user is queried about viewing the number of possible completions generated by the possible-completions command. It may be set to any integer value greater than or equal to zero. If the number of possible completions is greater than or equal to the value of this variable, the user is asked whether or not he wishes to view them; otherwise they are listed on the terminal.</td>
</tr>
<tr class="tcw">
<td><b>convert-meta</b></td>
<td>On</td>
<td>If set to <b>On</b>, readline converts characters with the eighth bit set to an <a href="/jargon/a/ascii.htm">ASCII</a> key sequence by stripping the eighth bit and prefixing an escape character (in effect, using escape as the meta prefix).</td>
</tr>
<tr class="tcw">
<td><b>disable-completion</b></td>
<td>Off</td>
<td>If set to <b>On</b>, readline inhibits word completion. Completion characters are inserted into the line as if they had been mapped to self-insert.</td>
</tr>
<tr class="tcw">
<td><b>editing-mode</b></td>
<td>emacs</td>
<td>Controls whether readline begins with a set of key bindings similar to Emacs or vi. <b>editing-mode</b> can be set to either <b>emacs</b> or <b>vi</b>.</td>
</tr>
<tr class="tcw">
<td><b>echo-control-characters</b></td>
<td>On</td>
<td>When set to <b>On</b>, on operating systems that indicate they support it, readline echoes a character corresponding to a signal generated from the keyboard.</td>
</tr>
<tr class="tcw">
<td><b>enable-keypad</b></td>
<td>Off</td>
<td>When set to <b>On</b>, readline tries to enable the application keypad when it is called. Some systems need this to enable the arrow keys.</td>
</tr>
<tr class="tcw">
<td><b>enable-meta-key</b></td>
<td>On</td>
<td>When set to <b>On</b>, readline tries to enable any meta modifier key the terminal claims to support when it is called. On many terminals, the meta key is used to send eight-bit characters.</td>
</tr>
<tr class="tcw">
<td><b>expand-tilde</b></td>
<td>Off</td>
<td>If set to <b>On</b>, tilde expansion is performed when readline attempts word completion.</td>
</tr>
<tr class="tcw">
<td><b>history-preserve-point</b></td>
<td>Off</td>
<td>If set to <b>On</b>, the history code attempts to place point at the same location on each history line retrieved with <b>previous-history</b> or <b>next-history</b>.</td>
</tr>
<tr class="tcw">
<td><b>history-size</b></td>
<td>0</td>
<td>Set the maximum number of history entries saved in the history list. If set to zero, the number of entries in the history list is not limited.</td>
</tr>
<tr class="tcw">
<td><b>horizontal-scroll-mode</b></td>
<td>Off</td>
<td>When set to <b>On</b>, makes readline use a single line for display, scrolling the input horizontally on a single screen line when it becomes longer than the screen width rather than wrapping to a new line.</td>
</tr>
<tr class="tcw">
<td><b>input-meta</b></td>
<td>Off</td>
<td>If set to <b>On</b>, readline enables eight-bit input (that is, it does not strip the high bit from the characters it reads), regardless of what the terminal claims it can support. The name meta-flag is a synonym for this variable.</td>
</tr>
<tr class="tcw">
<td><b>isearch-terminators</b></td>
<td>"C-[C-J"</td>
<td>The string of characters that should terminate an incremental search without subsequently executing the character as a command. If this variable has not been given a value, the characters <b>ESC</b> and <b>C-J</b> terminates an incremental search.</td>
</tr>
<tr class="tcw">
<td><b>keymap</b></td>
<td>emacs</td>
<td>Set the current readline keymap. The set of valid keymap names is <b>emacs</b>, <b>emacs-standard</b>, <b>emacs-meta</b>, <b>emacs-ctlx</b>, <b>vi</b>, <b>vi-command</b>, and <b>vi-insert</b>. <b>vi</b> is equivalent to <b>vi-command</b>; <b>emacs</b> is equivalent to <b>emacs-standard</b>. The default value is <b>emacs</b>; the value of <b>editing-mode</b> also affects the default keymap.</td>
</tr>
<tr class="tcw">
<td><b>mark-directories</b></td>
<td>On</td>
<td>If set to <b>On</b>, completed directory names have a slash appended.</td>
</tr>
<tr class="tcw">
<td><b>mark-modified-lines</b></td>
<td>Off</td>
<td>If set to <b>On</b>, history lines that were modified are displayed with a preceding asterisk (<b>*</b>).</td>
</tr>
<tr class="tcw">
<td><b>mark-symlinked-directories</b></td>
<td>Off</td>
<td>If set to <b>On</b>, completed names that are symbolic links to directories have a slash appended (subject to the value of mark-directories).</td>
</tr>
<tr class="tcw">
<td><b>match-hidden-files</b></td>
<td>On</td>
<td>This variable, when set to <b>On</b>, causes readline to match files whose names begin with a '<b>.</b>' (hidden files) when performing file name completion. If set to <b>Off</b>, the leading '<b>.</b>' must be supplied by the user in the file name to be completed.</td>
</tr>
<tr class="tcw">
<td><b>menu-complete-display-prefix</b></td>
<td>Off</td>
<td>If set to <b>On</b>, menu completion displays the common prefix of the list of possible completions (which may be empty) before cycling through the list.</td>
</tr>
<tr class="tcw">
<td><b>output-meta</b></td>
<td>Off</td>
<td>If set to <b>On</b>, readline displays characters with the eighth bit set directly rather than as a meta-prefixed escape sequence.</td>
</tr>
<tr class="tcw">
<td><b>page-completions</b></td>
<td>On</td>
<td>If set to <b>On</b>, readline uses an internal more-like pager to display a screenful of possible completions at a time.</td>
</tr>
<tr class="tcw">
<td><b>print-completions-horizontally</b></td>
<td>Off</td>
<td>If set to <b>On</b>, readline displays completions with matches sorted horizontally in alphabetical order, rather than down the screen.</td>
</tr>
<tr class="tcw">
<td><b>revert-all-at-newline</b></td>
<td>Off</td>
<td>If set to <b>On</b>, readline undoes all changes to history lines before returning when accept-line is executed. By default, history lines may be modified and retain individual undo lists across calls to readline.</td>
</tr>
<tr class="tcw">
<td><b>show-all-if-ambiguous</b></td>
<td>Off</td>
<td>This alters the default behavior of the completion functions. If set to <b>On</b>, words which have more than one possible completion cause the matches to be listed immediately instead of ringing the bell.</td>
</tr>
<tr class="tcw">
<td><b>show-all-if-unmodified</b></td>
<td>Off</td>
<td>This alters the default behavior of the completion functions in a fashion similar to <b>show-all-if-ambiguous</b>. If set to <b>On</b>, words which have more than one possible completion without any possible partial completion (the possible completions don't share a common prefix) cause the matches to be listed immediately instead of ringing the bell.</td>
</tr>
<tr class="tcw">
<td><b>skip-completed-text</b></td>
<td>Off</td>
<td>If set to <b>On</b>, this alters the default completion behavior when inserting a single match into the line. It's only active when performing completion in the middle of a word. If enabled, readline does not insert characters from the completion that match characters after point in the word being completed, so portions of the word following the cursor are not duplicated.</td>
</tr>
<tr class="tcw">
<td><b>visible-stats</b></td>
<td>Off</td>
<td>If set to <b>On</b>, a character denoting a file's type as reported by <a href="/jargon/s/stat.htm">stat</a> is appended to the file name when listing possible completions.</td>
</tr>
</table>
<h2 id="25A5">Readline conditional constructs</h2>
<p class="tab">Readline implements a facility similar in spirit to the conditional compilation features of the C preprocessor that allows key bindings and variable settings to be performed as the result of tests. There are four parser directives used.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>$if</b></td>
<td>The <b>$if</b> construct allows bindings to be made based on the editing mode, the terminal used, or the application using readline. The text of the test extends to the end of the line; no characters are required to isolate it.<br> <br><b>mode</b><br> <br>The <b>mode=</b> form of the <b>$if</b> directive is used to test whether readline is in <b>emacs</b> or <b>vi</b> mode. This may be used in conjunction with the set keymap command, for instance, to set bindings in the <b>emacs-standard</b> and <b>emacs-ctlx</b> keymaps only if readline is starting out in emacs mode.<br> <br><b>term</b><br> <br>The <b>term=</b> form may be used to include terminal-specific key bindings, perhaps to bind the key sequences output by the terminal's function keys. The word on the right side of the <b>=</b> is tested against the both full name of the terminal and the portion of the terminal name before the first <b>-</b>. This allows <b>sun</b> to match both <b>sun</b> and <b>sun-cmd</b>, for instance.<br> <br><b>application</b><br> <br>The <b>application</b> construct is used to include application-specific settings. Each program using the readline library sets the application name, and an initialization file can test for a particular value. This could be used to bind key sequences to functions useful for a specific program. For instance, the following command adds a key sequence that quotes the current or previous word in bash:<br><br> <pre class="tcy">$if Bash # Quote the current or previous word "\C-xq": "\eb\"\ef\"" $endif</pre> </td>
</tr>
<tr class="tcw">
<td><b>$endif</b></td>
<td>This command, as seen in the previous example, terminates an <b>$if</b> command.</td>
</tr>
<tr class="tcw">
<td><b>$else</b></td>
<td>Commands in this branch of the <b>$if</b> directive are executed if the test fails.</td>
</tr>
<tr class="tcw">
<td><b>$include</b></td>
<td>This directive takes a single file name as an argument and reads commands and bindings from that file. For example, the following directive would read <b>/etc/inputrc:</b><br><br> <pre class="tcy">$include /etc/inputrc</pre></td>
</tr>
</table>
<h2 id="25A6">Searching</h2>
<p class="tab"><b>Readline</b> provides commands for searching through the command history (see section "<a href="#history">History</a>" below) for lines containing a specified string. There are two search modes: <i>incremental</i> and <i>non-incremental.</i></p>
<p class="tab"><i>Incremental searches</i> begin before the user has finished typing the search string. As each character of the search string is typed, <b>readline</b> displays the next entry from the history matching the string typed so far. An incremental search requires only as many characters as needed to find the desired history entry. The characters present in the value of the isearch-terminators variable are used to terminate an incremental search. If that variable is not assigned a value, the <b>Escape</b> and <b>Control-J</b> characters terminate an incremental search. <b>Control-G</b> aborts an incremental search and restore the original line. When the search is terminated, the history entry containing the search string becomes the current line.</p>
<p class="tab">To find other matching entries in the history list, type <b>Control-S</b> or <b>Control-R</b> as appropriate. This searches backward or forward in the history for the next entry matching the search string typed so far. Any other key sequence bound to a <b>readline</b> command terminates the search and execute that command. For instance, a <a href="/jargon/n/newline.htm">newline</a> terminates the search and accept the line, thereby executing the command from the history list.</p>
<p class="tab"><b>Readline</b> remembers the last incremental search string. If two <b>Control-R</b>s are typed without any intervening characters defining a new search string, any remembered search string is used.</p>
<p class="tab">Non-incremental searches read the entire search string before starting to search for matching history lines. The search string may be typed by the user or be part of the contents of the current line.</p>
<h2 id="25A7">Readline command names</h2>
<p class="tab">The following is a list of the names of the commands and the default key sequences that they are bound. Command names without an accompanying key sequence are unbound by default. In the following descriptions, <b>point</b> refers to the current cursor position, and <b>mark</b> refers to a cursor position saved by the <b>set-mark</b> command. The text between the <b>point</b> and <b>mark</b> is referred to as the <b>region</b>.</p>
<h2 id="25A8">Commands for moving</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:190px">beginning-of-line</td>
<td style="width:40px">C-a</td>
<td>Move to the start of the current line.</td>
</tr>
<tr class="tcw">
<td>end-of-line</td>
<td>C-e</td>
<td>Move to the end of the line.</td>
</tr>
<tr class="tcw">
<td>forward-char</td>
<td>C-f</td>
<td>Move forward a character.</td>
</tr>
<tr class="tcw">
<td>backward-char</td>
<td>C-b</td>
<td>Move back a character.</td>
</tr>
<tr class="tcw">
<td>forward-word</td>
<td>M-f</td>
<td>Move forward to the end of the next word. Words are composed of alphanumeric characters (letters and digits).</td>
</tr>
<tr class="tcw">
<td>backward-word</td>
<td>M-b</td>
<td>Move back to the start of the current or previous word. Words are composed of alphanumeric characters (letters and digits).</td>
</tr>
<tr class="tcw">
<td>shell-forward-word</td>
<td></td>
<td>Move forward to the end of the next word. Words are delimited by non-quoted shell metacharacters.</td>
</tr>
<tr class="tcw">
<td>shell-backward-word</td>
<td></td>
<td>Move back to the start of the current or previous word. Words are delimited by non-quoted shell metacharacters.</td>
</tr>
<tr class="tcw">
<td>clear-screen</td>
<td>C-l</td>
 <td>Clear the screen leaving the current line at the top of the screen. With an argument, refresh the current line without clearing the screen.</td>
</tr>
<tr class="tcw">
<td>redraw-current-line</td>
<td></td>
<td>Refresh the current line.</td>
</tr>
</table>
<h2 id="25A9">Commands for manipulating the history</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:230px">accept-line</td>
<td style="width:80px">Newline, Return</td>
<td>Accept the line regardless of where the cursor is. If this line is non-empty, add it to the history list according to the state of the <b>HISTCONTROL</b> variable. If the line is a modified history line, then restore the history line to its original state.</td>
</tr>
<tr class="tcw">
<td>previous-history</td>
<td>C-p</td>
<td>Fetch the previous command from the history list, moving back in the list.</td>
</tr>
<tr class="tcw">
<td>next-history</td>
<td>C-n</td>
<td>Fetch the next command from the history list, moving forward in the list.</td>
</tr>
<tr class="tcw">
<td>beginning-of-history</td>
<td>M-&lt;</td>
<td>Move to the first line in the history.</td>
</tr>
<tr class="tcw">
<td>end-of-history</td>
<td>M-&gt;</td>
<td>Move to the end of the input history, i.e., the line currently being entered.</td>
</tr>
<tr class="tcw">
<td>reverse-search-history</td>
<td>C-r</td>
<td>Search backward starting at the current line and moving 'up' through the history as necessary. This is an incremental search.</td>
</tr>
<tr class="tcw">
<td>forward-search-history</td>
<td>C-s</td>
<td>Search forward starting at the current line and moving 'down' through the history as necessary. This is an incremental search.</td>
</tr>
<tr class="tcw">
<td>non-incremental-reverse-search-history</td>
<td>M-p</td>
<td>Search backward through the history starting at the current line using a non-incremental search for a string supplied by the user.</td>
</tr>
<tr class="tcw">
<td>non-incremental-forward-search-history</td>
<td>M-n</td>
<td>Search forward through the history using a non-incremental search for a string supplied by the user.</td>
</tr>
<tr class="tcw">
<td>history-search-forward</td>
<td></td>
<td>Search forward through the history for the string of characters between the start of the current line and the point. This is a non-incremental search.</td>
</tr>
<tr class="tcw">
<td>history-search-backward</td>
<td></td>
<td>Search backward through the history for the string of characters between the start of the current line and the point. This is a non-incremental search.</td>
</tr>
<tr class="tcw">
<td>yank-nth-arg</td>
<td>M-C-y</td>
<td>Insert the first argument to the previous command (usually the second word on the previous line) at point. With an argument <b>n</b>, insert the <b>n</b>th word from the previous command (the words in the previous command begin with word 0). A negative argument inserts the nth word from the end of the previous command. Once the argument <b>n</b> is computed, the argument is extracted as if the "<b>!n</b>" history expansion had been specified.</td>
</tr>
<tr class="tcw">
<td>yank-last-arg</td>
<td>M-., M-_</td>
<td>Insert the last argument to the previous command (the last word of the previous history entry). With a numeric argument, behave exactly like <b>yank-nth-arg</b>. Successive calls to <b>yank-last-arg</b> move back through the history list, inserting the last word (or the word specified by the argument to the first call) of each line in turn. Any numeric argument supplied to these successive calls determines the direction to move through the history. A negative argument switches the direction through the history (back or forward). The history expansion facilities are used to extract the last argument, as if the "<b>!$</b>" history expansion had been specified.</td>
</tr>
<tr class="tcw">
<td>shell-expand-line</td>
<td>M-C-e</td>
<td>Expand the line as the shell does. This performs alias and history expansion, and all the shell word expansions. See the section "<a href="#history-expansion">History Expansion</a>" below for a description of history expansion.</td>
</tr>
<tr class="tcw">
<td>history-expand-line</td>
<td>M-^</td>
<td>Perform history expansion on the current line. See the section "<a href="#history-expansion">History Expansion</a>" below for a description of history expansion.</td>
</tr>
<tr class="tcw">
<td>magic-space</td>
<td></td>
<td>Perform history expansion on the current line and insert a space. See the section "<a href="#history-expansion">History Expansion</a>" below for a description of history expansion.</td>
</tr>
<tr class="tcw">
<td>alias-expand-line</td>
<td></td>
<td>Perform alias expansion on the current line. See the section "<a href="#aliases">Aliases</a>" above for a description of alias expansion.</td>
</tr>
<tr class="tcw">
<td>history-and-alias-expand-line</td>
<td></td>
<td>Perform history and alias expansion on the current line.</td>
</tr>
<tr class="tcw">
<td>insert-last-argument</td>
<td>M-., M-_</td>
<td>A synonym for <b>yank-last-arg</b>.</td>
</tr>
<tr class="tcw">
<td>operate-and-get-next</td>
<td>C-o</td>
<td>Accept the current line for execution and fetch the next line relative to the current line from the history for editing. Any argument is ignored.</td>
</tr>
<tr class="tcw">
<td>edit-and-execute-command</td>
<td>C-xC-e</td>
<td>Invoke an editor on the current command line, and execute the result as shell commands. Bash attempts to invoke <b>$VISUAL</b>, <b>$EDITOR</b>, and <b>emacs</b> as the editor, in that order.</td>
</tr>
</table>
<h2 id="25A10">Commands for changing text</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:200px">delete-char</td>
<td style="width:80px">C-d</td>
<td>Delete the character at <b>point</b>. If <b>point</b> is at the beginning of the line, there are no characters in the line, and the last character typed was not bound to <b>delete-char</b>, then return EOF.</td>
</tr>
<tr class="tcw">
<td>backward-delete-char</td>
<td>Rubout</td>
<td>Delete the character behind the cursor. When given a numeric argument, save the deleted text on the kill ring.</td>
</tr>
<tr class="tcw">
<td>forward-backward-delete-char</td>
<td></td>
<td>Delete the character under the cursor, unless the cursor is at the end of the line, where the character behind the cursor is deleted.</td>
</tr>
<tr class="tcw">
<td>quoted-insert</td>
<td>C-q, C-v</td>
<td>Add the next character typed to the line verbatim. This is how to insert characters like C-q, for example.</td>
</tr>
<tr class="tcw">
<td>tab-insert</td>
<td>C-v TAB</td>
<td>Insert a tab character.</td>
</tr>
<tr class="tcw">
<td>self-insert</td>
<td>a, b, A, 1, !, ...</td>
<td>Insert the character typed.</td>
</tr>
<tr class="tcw">
<td>transpose-chars</td>
<td>C-t</td>
<td>Drag the character before <b>point</b> forward over the character at <b>point</b>, moving <b>point</b> forward as well. If <b>point</b> is at the end of the line, then this transposes the two characters before <b>point</b>. Negative arguments have no effect.</td>
</tr>
<tr class="tcw">
<td>transpose-words</td>
<td>M-t</td>
<td>Drag the word before <b>point</b> past the word after <b>point</b>, moving <b>point</b> over that word as well. If <b>point</b> is at the end of the line, this transposes the last two words on the line.</td>
</tr>
<tr class="tcw">
<td>upcase-word</td>
<td>M-u</td>
<td>Uppercase the current (or following) word. With a negative argument, uppercase the previous word, but do not move <b>point</b>.</td>
</tr>
<tr class="tcw">
<td>downcase-word</td>
<td>M-l</td>
<td>Lowercase the current (or following) word. With a negative argument, lowercase the previous word, but do not move <b>point</b>.</td>
</tr>
<tr class="tcw">
<td>capitalize-word</td>
<td>M-c</td>
<td>Capitalize the current (or following) word. With a negative argument, capitalize the previous word, but do not move <b>point</b>.</td>
</tr>
<tr class="tcw">
<td>overwrite-mode</td>
<td></td>
<td>Toggle overwrite mode. With an explicit positive numeric argument, switches to overwrite mode. With an explicit non-positive numeric argument, switches to insert mode. This command affects only emacs mode; vi mode does overwrite differently. Each call to readline() starts in insert mode. In overwrite mode, characters bound to self-insert replace the text at point rather than pushing the text to the right. Characters bound to <b>backward-delete-char</b> replace the character before <b>point</b> with a space. By default, this command is unbound.</td>
</tr>
</table>
<h2 id="25A11">Killing and yanking</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:230px">kill-line</td>
<td style="width:110px">C-k</td>
<td>Kill the text from <b>point</b> to the end of the line.</td>
</tr>
<tr class="tcw">
<td>backward-kill-line</td>
<td>C-x Rubout</td>
<td>Kill backward to the beginning of the line.</td>
</tr>
<tr class="tcw">
<td>unix-line-discard</td>
<td>C-u</td>
<td>Kill backward from <b>point</b> to the beginning of the line. The killed text is saved on the kill-ring.</td>
</tr>
<tr class="tcw">
<td>kill-whole-line</td>
<td></td>
<td>Kill all characters on the current line, no matter where point is.</td>
</tr>
<tr class="tcw">
<td>kill-word</td>
<td>M-d</td>
<td>Kill from point to the end of the current word, or if between words, to the end of the next word. Word boundaries are the same as those used by forward-word.</td>
</tr>
<tr class="tcw">
<td>backward-kill-word</td>
<td>M-Rubout</td>
<td>Kill the word behind <b>point</b>. Word boundaries are the same as those used by backward-word.</td>
</tr>
<tr class="tcw">
<td>shell-kill-word</td>
<td>M-d</td>
<td>Kill from <b>point</b> to the end of the current word, or if between words, to the end of the next word. Word boundaries are the same as those used by <b>shell-forward-word</b>.</td>
</tr>
<tr class="tcw">
<td>shell-backward-kill-word</td>
<td>M-Rubout</td>
<td>Kill the word behind <b>point</b>. Word boundaries are the same as those used by <b>shell-backward-word</b>.</td>
</tr>
<tr class="tcw">
<td>unix-word-rubout</td>
<td>C-w</td>
<td>Kill the word behind <b>point</b>, using white space as a word boundary. The killed text is saved on the kill-ring.</td>
</tr>
<tr class="tcw">
<td>unix-filename-rubout</td>
<td></td>
<td>Kill the word behind <b>point</b>, using white space and the slash character as the word boundaries. The killed text is saved on the kill-ring.</td>
</tr>
<tr class="tcw">
<td>delete-horizontal-space</td>
<td>M-\</td>
<td>Delete all spaces and tabs around <b>point</b>.</td>
</tr>
<tr class="tcw">
<td>kill-region</td>
<td></td>
<td>Kill the text in the current region.</td>
</tr>
<tr class="tcw">
<td>copy-region-as-kill</td>
<td></td>
<td>Copy the text in the region to the kill buffer.</td>
</tr>
<tr class="tcw">
<td>copy-backward-word</td>
<td></td>
<td>Copy the word before <b>point</b> to the kill buffer. The word boundaries are the same as <b>backward-word</b>.</td>
</tr>
<tr class="tcw">
<td>copy-forward-word</td>
<td></td>
<td>Copy the word following <b>point</b> to the kill buffer. The word boundaries are the same as <b>forward-word</b>.</td>
</tr>
<tr class="tcw">
<td>yank</td>
<td>C-y</td>
<td>Yank the top of the kill ring into the buffer at <b>point</b>.</td>
</tr>
<tr class="tcw">
<td>yank-pop</td>
<td>M-y</td>
<td>Rotate the kill ring, and yank the new top. Only works following <b>yank</b> or <b>yank-pop</b>.</td>
</tr>
</table>
<h2 id="25A12">Numeric arguments</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:190px">digit-argument</td>
<td style="width:90px">M-0, M-1, ..., M--</td>
<td>Add this digit to the argument already accumulating, or start a new argument. M-- starts a negative argument.</td>
</tr>
<tr class="tcw">
<td>universal-argument</td>
<td></td>
<td>This is another way to specify an argument. If this command is followed by one or more digits, optionally with a leading minus sign, those digits define the argument. If the command is followed by digits, executing <b>universal-argument</b> again ends the numeric argument, but is otherwise ignored. As a special case, if this command is immediately followed by a character that is neither a digit or minus sign, the argument count for the next command is multiplied by four. The argument count is initially one, so executing this function the first time makes the argument count four, a second time makes the argument count sixteen, etc.</td>
</tr>
</table>
<h2 id="completion">Completing</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:200px">complete</td>
<td style="width:60px">TAB</td>
<td>Attempt to perform completion on the text before <b>point</b>. Bash attempts completion treating the text as a variable (if the text begins with <b>$</b>), username (if the text begins with <b>~</b>), hostname (if the text begins with <b>@</b>), or command (including aliases and functions) in turn. If none of these produces a match, file name completion is attempted.</td>
</tr>
<tr class="tcw">
<td>possible-completions</td>
<td>M-?</td>
<td>List the possible completions of the text before point.</td>
</tr>
<tr class="tcw">
<td>insert-completions</td>
<td>M-*</td>
<td>Insert all completions of the text before <b>point</b> that would be generated by possible-completions.</td>
</tr>
<tr class="tcw">
<td>menu-complete</td>
<td></td>
<td>Similar to <b>complete</b>, but replaces the word to be completed with a single match from the list of possible completions. Repeated execution of <b>menu-complete</b> steps through the list of possible completions, inserting each match in turn. At the end of the list of completions, the bell is rung (subject to the setting of bell-style) and the original text is restored. An argument of <b>n</b> moves <b>n</b> positions forward in the list of matches; a negative argument may be used to move backward through the list. This command is intended to be bound to <b>TAB</b>, but is unbound by default.</td>
</tr>
<tr class="tcw">
<td>menu-complete-backward</td>
<td></td>
<td>Identical to <b>menu-complete</b>, but moves backward through the list of possible completions, as if <b>menu-complete</b> had been given a negative argument. This command is unbound by default.</td>
</tr>
<tr class="tcw">
<td>delete-char-or-list</td>
<td></td>
<td>Deletes the character under the cursor if not at the beginning or end of the line (like <b>delete-char</b>). If at the end of the line, behaves identically to <b>possible-completions</b>. This command is unbound by default.</td>
</tr>
<tr class="tcw">
<td>complete-filename</td>
<td>M-/</td>
<td>Attempt file name completion on the text before point.</td>
</tr>
<tr class="tcw">
<td>possible-filename-completions</td>
<td>C-x /</td>
<td>List the possible completions of the text before <b>point</b>, treating it as a file name.</td>
</tr>
<tr class="tcw">
<td>complete-username</td>
<td>M-~</td>
<td>Attempt completion on the text before <b>point</b>, treating it as a username.</td>
</tr>
<tr class="tcw">
<td>possible-username-completions</td>
<td>C-x ~</td>
<td>List the possible completions of the text before <b>point</b>, treating it as a username.</td>
</tr>
<tr class="tcw">
<td>complete-variable</td>
<td>M-$</td>
<td>Attempt completion on the text before <b>point</b>, treating it as a shell variable.</td>
</tr>
<tr class="tcw">
<td>possible-variable-completions</td>
<td>C-x $</td>
<td>List the possible completions of the text before point, treating it as a shell variable.</td>
</tr>
<tr class="tcw">
<td>complete-hostname</td>
<td><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9dd0b0dd">[email&#160;protected]</a></td>
<td>Attempt completion on the text before <b>point</b>, treating it as a hostname.</td>
</tr>
<tr class="tcw">
<td>possible-hostname-completions</td>
<td>C-x @</td>
<td>List the possible completions of the text before <b>point</b>, treating it as a hostname.</td>
</tr>
<tr class="tcw">
<td>complete-command</td>
<td>M-!</td>
<td>Attempt completion on the text before <b>point</b>, treating it as a command name. Command completion attempts to match the text against aliases, reserved words, shell functions, shell builtins, and finally executable file names, in that order.</td>
</tr>
<tr class="tcw">
<td>possible-command-completions</td>
<td>C-x !</td>
<td>List the possible completions of the text before <b>point</b>, treating it as a command name.</td>
</tr>
<tr class="tcw">
<td>dynamic-complete-history</td>
<td>M-TAB</td>
<td>Attempt completion on the text before <b>point</b>, comparing the text against lines from the history list for possible completion matches.</td>
</tr>
<tr class="tcw">
<td>dabbrev-expand</td>
<td></td>
<td>Attempt menu completion on the text before point, comparing the text against lines from the history list for possible completion matches.</td>
</tr>
<tr class="tcw">
<td>complete-into-braces</td>
<td>M-{</td>
<td>Perform file name completion and insert the list of possible completions enclosed within braces so the list is available to the shell (see the section "<a href="#11A1">Brace Expansion</a>" above).</td>
</tr>
</table>
<h2 id="25A14">Keyboard macros</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:180px">start-kbd-macro</td>
<td style="width:60px">C-x (</td>
<td>Begin saving the characters typed into the current keyboard macro.</td>
</tr>
<tr class="tcw">
<td>end-kbd-macro</td>
<td>C-x )</td>
<td>Stop saving the characters typed into the current keyboard macro and store the definition.</td>
</tr>
<tr class="tcw">
<td>call-last-kbd-macro</td>
<td>C-x e</td>
<td>Re-execute the last keyboard macro defined, by making the characters in the macro appear as if typed at the keyboard.</td>
</tr>
</table>
<h2 id="25A15">Miscellaneous</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px">re-read-init-file</td>
<td style="width:160px">C-x C-r</td>
<td>Read in the contents of the <b>inputrc</b> file, and incorporate any bindings or variable assignments found there.</td>
</tr>
<tr class="tcw">
<td>abort</td>
<td>C-g</td>
<td>Abort the current editing command and ring the terminal's bell (subject to the setting of bell-style).</td>
</tr>
<tr class="tcw">
<td>do-uppercase-version</td>
<td>M-a, M-b, M-x, ...</td>
<td>If the metafied character <b>x</b> is lowercase, run the command that is bound to the corresponding uppercase character.</td>
</tr>
<tr class="tcw">
<td>prefix-meta</td>
<td>ESC</td>
<td>Metafy the next character typed. <b>ESC f</b> is equivalent to <b>Meta-f</b>.</td>
</tr>
<tr class="tcw">
<td>undo</td>
<td>C-_, C-x C-u</td>
<td>Incremental undo, separately remembered for each line.</td>
</tr>
<tr class="tcw">
<td>revert-line</td>
<td>M-r</td>
<td>Undo all changes made to this line. This is like executing the <b>undo</b> command enough times to return the line to its initial state.</td>
</tr>
<tr class="tcw">
<td>tilde-expand</td>
<td>M-&amp;</td>
<td>Perform tilde expansion on the current word.</td>
</tr>
<tr class="tcw">
<td>set-mark</td>
<td><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1a59375a">[email&#160;protected]</a>, M-&lt;space&gt;</td>
<td>Set the mark to the point. If a numeric argument is supplied, the mark is set to that position.</td>
</tr>
<tr class="tcw">
<td>exchange-point-and-mark</td>
<td>C-x C-x</td>
<td>Swap the point with the mark. The current cursor position is set to the saved position, and the old cursor position is saved as the mark.</td>
</tr>
<tr class="tcw">
<td>character-search</td>
<td>(C-]</td>
<td>A character is read and <b>point</b> is moved to the next occurrence of that character. A negative count searches for previous occurrences.</td>
</tr>
<tr class="tcw">
<td>character-search-backward</td>
<td>M-C-]</td>
<td>A character is read and <b>point</b> is moved to the previous occurrence of that character. A negative count searches for subsequent occurrences.</td>
</tr>
<tr class="tcw">
<td>skip-csi-sequence</td>
<td></td>
<td>Read enough characters to consume a multi-key sequence such as those defined for keys like <b>Home</b> and <b>End</b>. Such sequences begin with a Control Sequence Indicator (CSI), usually <b>ESC-[</b>. If this sequence is bound to "<b>\[</b>", keys producing such sequences have no effect unless explicitly bound to a readline command, instead of inserting stray characters into the editing buffer. This is unbound by default, but usually bound to <b>ESC-[</b>.</td>
</tr>
<tr class="tcw">
<td>insert-comment</td>
<td>M-#</td>
<td>Without a numeric argument, the value of the readline comment-begin variable is inserted at the beginning of the current line. If a numeric argument is supplied, this command acts as a toggle: if the characters at the beginning of the line do not match the value of <b>comment-begin</b>, the value is inserted, otherwise the characters in <b>comment-begin</b> are deleted from the beginning of the line. In either case, the line is accepted as if a newline had been typed. The default value of <b>comment-begin</b> causes this command to make the current line a shell comment. If a numeric argument causes the comment character to be removed, the line is executed by the shell.</td>
</tr>
<tr class="tcw">
<td>glob-complete-word</td>
<td>M-g</td>
<td>The word before <b>point</b> is treated as a pattern for pathname expansion, with an asterisk implicitly appended. This pattern is used to generate a list of matching file names for possible completions.</td>
</tr>
<tr class="tcw">
<td>glob-expand-word</td>
<td>C-x *</td>
<td>The word before <b>point</b> is treated as a pattern for pathname expansion, and the list of matching file names is inserted, replacing the word. If a numeric argument is supplied, an asterisk is appended before pathname expansion.</td>
</tr>
<tr class="tcw">
<td>glob-list-expansions</td>
<td>C-x g</td>
<td>The list of expansions that would be generated by <b>glob-expand-word</b> is displayed, and the line is redrawn. If a numeric argument is supplied, an asterisk is appended before pathname expansion.</td>
</tr>
<tr class="tcw">
<td>dump-functions</td>
<td></td>
<td>Print all the functions and their key bindings to the readline output stream. If a numeric argument is supplied, the output is formatted in such a way that it can be made part of an <b>inputrc</b> file.</td>
</tr>
<tr class="tcw">
<td>dump-variables</td>
<td></td>
<td>Print all the <b>set</b>-able readline variables and their values to the readline output stream. If a numeric argument is supplied, the output is formatted in such a way that it can be made part of an <b>inputrc</b> file.</td>
</tr>
<tr class="tcw">
<td>dump-macros</td>
<td></td>
<td>Print all the readline key sequences bound to macros and the strings they output. If a numeric argument is supplied, the output is formatted in such a way that it can be made part of an <b>inputrc</b> file.</td>
</tr>
<tr class="tcw">
<td>display-shell-version</td>
<td>C-x C-v</td>
<td>Display version information about the current instance of bash.</td>
</tr>
</table>
<h2 id="programmable-completion">Programmable completion</h2>
<p class="tab">When word completion is attempted for an argument to a command for which a completion specification (a <b>compspec</b>) is defined using the <b>complete</b> builtin (see the section "<a href="#28A">Shell Builtin Commands</a>" below), the programmable completion facilities are invoked.</p>
<p class="tab">First, the command name is identified. If the command word is the empty string (completion attempted at the beginning of an empty line), any <b>compspec</b> defined with the <b>-E</b> option to complete is used. If a <b>compspec</b> is defined for that command, the <b>compspec</b> is used to generate the list of possible completions for the word. If the command word is a full pathname, a <b>compspec</b> for the full pathname is searched for first. If no <b>compspec</b> is found for the full pathname, an attempt is made to find a <b>compspec</b> for the portion following the final slash. If those searches do not result in a <b>compspec</b>, any <b>compspec</b> defined with the <b>-D</b> option to complete is used as the default.</p>
<p class="tab">Once a <b>compspec</b> is found, it is used to generate the list of matching words. If a <b>compspec</b> is not found, the default bash completion as described above under Completing is performed.</p>
<p class="tab">First, the actions specified by the <b>compspec</b> are used. Only matches which are prefixed by the word being completed are returned. When the <b>-f</b> or <b>-d</b> option is used for file name or directory name completion, the shell variable <b>FIGNORE</b> is used to filter the matches.</p>
<p class="tab">Any completions specified by a pathname expansion pattern to the <b>-G</b> option are generated next. The words generated by the pattern need not match the word being completed. The <b>GLOBIGNORE</b> shell variable is not used to filter the matches, but the <b>FIGNORE</b> variable is used.</p>
<p class="tab">Next, the string specified as the argument to the <b>-W</b> option is considered. The string is first split using the characters in the <b>IFS</b> special variable as delimiters. Shell quoting is honored. Each word is then expanded using brace expansion, tilde expansion, parameter and variable expansion, command substitution, and arithmetic expansion, as described above under the section "<a href="#expansion">Expansion</a>." The results are split using the rules described above under the section "<a href="#word-splitting">Word Splitting</a>." The results of the expansion are prefix-matched against the word being completed, and the matching words become the possible completions.</p>
<p class="tab">After these matches are generated, any shell function or command specified with the <b>-F</b> and <b>-C</b> options is invoked. When the command or function is invoked, the <b>COMP_LINE</b>, <b>COMP_POINT</b>, <b>COMP_KEY</b>, and <b>COMP_TYPE</b> variables are assigned values as described above under the section "<a href="#shell-variables">Shell Variables</a>." If a shell function is being invoked, the <b>COMP_WORDS</b> and <b>COMP_CWORD</b> variables are also set. When the function or command is invoked, the first argument is the name of the command whose arguments are being completed, the second argument is the word being completed, and the third argument is the word preceding the word being completed on the current command line. No filtering of the generated completions against the word being completed is performed; the function or command has complete freedom in generating the matches.</p>
<p class="tab">Any function specified with <b>-F</b> is invoked first. The function may use any of the shell facilities, including the <b>compgen</b> builtin described below, to generate the matches. It must put the possible completions in the <b>COMPREPLY</b> array variable.</p>
<p class="tab">Next, any command specified with the <b>-C</b> option is invoked in an environment equivalent to command substitution. It should print a list of completions, one per line, to the standard output. Backslash may be used to escape a newline, if necessary.</p>
<p class="tab">After all the possible completions are generated, any filter specified with the <b>-X</b> option is applied to the list. The filter is a pattern as used for pathname expansion; a &amp; in the pattern is replaced with the text of the word being completed. A literal <b>&amp;</b> may be escaped with a backslash; the backslash is removed before attempting a match. Any completion that matches the pattern is removed from the list. A leading <b>!</b> negates the pattern; in this case, any completion not matching the pattern is removed.</p>
<p class="tab">Finally, any prefix and suffix specified with the <b>-P</b> and <b>-S</b> options are added to each member of the completion list, and the result is returned to the readline completion code as the list of possible completions.</p>
<p class="tab">If the previously-applied actions do not generate any matches, and the <b>-o dirnames</b> option was supplied to complete when the <b>compspec</b> was defined, directory name completion is attempted.</p>
<p class="tab">If the <b>-o plusdirs</b> option was supplied to complete when the <b>compspec</b> was defined, directory name completion is attempted and any matches are added to the results of the other actions.</p>
<p class="tab">By default, if a <b>compspec</b> is found, whatever it generates is returned to the completion code as the full set of possible completions. The default bash completions are not attempted, and the readline default of file name completion is disabled. If the <b>-o</b> <b>bashdefault</b> option was supplied to complete when the <b>compspec</b> was defined, the bash default completions are attempted if the <b>compspec</b> generates no matches. If the <b>-o</b> default option was supplied to complete when the <b>compspec</b> was defined, readline's default completion is performed if the <b>compspec</b> (and, if attempted, the default bash completions) generate no matches.</p>
<p class="tab">When a <b>compspec</b> indicates that directory name completion is desired, the programmable completion functions force readline to append a slash to completed names which are symbolic links to directories, subject to the value of the mark-directories readline variable, regardless of the setting of the <b>mark-symlinked-directories</b> readline variable.</p>
<p class="tab">There is some support for dynamically modifying completions. This is most useful when used in combination with a default completion specified with <b>complete -D</b>. It's possible for shell functions executed as completion handlers to indicate that completion should be retried by returning an exit status of 124. If a shell function returns 124, and changes the <b>compspec</b> associated with the command on which completion is being attempted (supplied as the first argument when the function is executed), programmable completion restarts from the beginning, with an attempt to find a new <b>compspec</b> for that command. This allows a set of completions to be built dynamically as completion is attempted, rather than being loaded all at once.</p>
<p class="tab">For instance, assuming that there is a library of <b>compspecs</b>, each kept in a file corresponding to the name of the command, the following default completion function would load completions dynamically:</p>
<pre class="tab tcy">_completion_loader()
{
     . "/etc/bash_completion.d/$1.sh" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; return 124
}
complete -D -F _completion_loader</pre>
<h2 id="history">History</h2>
<p class="tab">When the <b>-o</b> history option to the <b>set</b> builtin is enabled, the shell provides access to the command history, the list of commands previously typed. The value of the <b>HISTSIZE</b> variable is used as the number of commands to save in a history list. The text of the last <b>HISTSIZE</b> commands (default 500) is saved. The shell stores each command in the history list before parameter and variable expansion (see the section "<a href="#expansion">Expansion</a>" above) but after history expansion is performed, subject to the values of the shell variables <b>HISTIGNORE</b> and <b>HISTCONTROL</b>.</p>
<p class="tab">On startup, the history is initialized from the file named by the variable <b>HISTFILE</b> (default <b>~/.bash_history</b>). The file named by the value of <b>HISTFILE</b> is truncated, if necessary, to contain no more than the number of lines specified by the value of <b>HISTFILESIZE</b>. When the history file is read, lines beginning with the history comment character followed immediately by a digit are interpreted as timestamps for the preceding history line. These timestamps are optionally displayed depending on the value of the <b>HISTTIMEFORMAT</b> variable. When an interactive shell exits, the last <b>$HISTSIZE</b> lines are copied from the history list to <b>$HISTFILE</b>. If the <b>histappend</b> shell option is enabled (see the description of <b>shopt</b> under the section "<a href="#28A">Shell Builtin Commands</a>" below), the lines are appended to the history file, otherwise the history file is overwritten. If <b>HISTFILE</b> is unset, or if the history file is unwritable, the history is not saved. If the <b>HISTTIMEFORMAT</b> variable is set, timestamps are written to the history file, marked with the history comment character, so they may be preserved across shell sessions. This uses the history comment character to distinguish timestamps from other history lines. After saving the history, the history file is truncated to contain no more than <b>HISTFILESIZE</b> lines. If <b>HISTFILESIZE</b> is not set, no truncation is performed.</p>
<p class="tab">The builtin command <b>fc</b> (see the "<a href="#28A">Shell Builtin Commands</a>" section below) may be used to list or edit and re-execute a portion of the history list. The <b>history</b> builtin may be used to display or modify the history list and manipulate the history file. When using command-line editing, search commands are available in each editing mode that access the history list.</p>
<p class="tab">The shell allows control over which commands are saved on the history list. The <b>HISTCONTROL</b> and <b>HISTIGNORE</b> variables may be set to cause the shell to save only a subset of the commands entered. The <b>cmdhist</b> shell option, if enabled, causes the shell to attempt to save each line of a multi-line command in the same history entry, adding semicolons where necessary to preserve syntactic correctness. The <b>lithist</b> shell option causes the shell to save the command with embedded newlines instead of semicolons. See the description of the <b>shopt</b> builtin below under the section "<a href="#28A">Shell Builtin Commands</a>" for information on <b>set</b>ting and <b>unset</b>ting shell options.</p>
<h2 id="history-expansion">History expansion</h2>
<p class="tab">The shell supports a history expansion feature that is similar to the history expansion in <b>csh</b>. This section describes what syntax features are available. This feature is enabled by default for interactive shells, and can be disabled using the <b>+H</b> option to the <b>set</b> builtin command (see the section "<a href="#28A">Shell Builtin Commands</a>" below). Non-interactive shells do not perform history expansion by default.</p>
<p class="tab">History expansions introduce words from the history list into the input stream, making it easy to repeat commands, insert the arguments to a previous command into the current input line, or fix errors in previous commands quickly.</p>
<p class="tab">History expansion is performed immediately after a complete line is read, before the shell breaks it into words. It takes place in two parts. The first is to determine which line from the history list to use during substitution. The second is to select portions of that line for inclusion into the current one. The line selected from the history is the event, and the portions of that line that are acted upon are words. Various modifiers are available to manipulate the selected words. The line is broken into words in the same fashion as when reading input, so that several metacharacter-separated words surrounded by quotes are considered one word. History expansions are introduced by the appearance of the history expansion character, which is <b>!</b> by default. Only backslash (<b>\</b>) and single quotes can quote the history expansion character.</p>
<p class="tab">Several characters inhibit history expansion if found immediately following the history expansion character, even if it's unquoted: <b>space</b>, <b>tab</b>, <b>newline</b>, <b>carriage return</b>, and <b>=</b>. If the <b>extglob</b> shell option is enabled, <b>(</b> also inhibits expansion.</p>
<p class="tab">Several shell options settable with the <b>shopt</b> builtin may be used to tailor the behavior of history expansion. If the <b>histverify</b> shell option is enabled (see the description of the <b>shopt</b> builtin below), and readline is used, history substitutions are not immediately passed to the shell parser. Instead, the expanded line is reloaded into the readline editing buffer for further modification. If readline is used, and the <b>histreedit</b> shell option is enabled, a failed history substitution is reloaded into the readline editing buffer for correction. The <b>-p</b> option to the history builtin command may be used to see what a history expansion does before using it. The <b>-s</b> option to the history builtin may be used to add commands to the end of the history list without actually executing them, so that they are available for subsequent recall.</p>
<p class="tab">The shell allows control of the various characters used by the history expansion mechanism (see the description of <b>histchars</b> above under the section "<a href="#shell-variables">Shell Variables</a>"). The shell uses the history comment character to mark history timestamps when writing the history file.</p>
<h2 id="event-designators">Event designators</h2>
<p class="tab">An event designator is a reference to a command line entry in the history list. Unless the reference is absolute, events are relative to the current position in the history list.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>!</b></td>
<td>Start a history substitution, except when followed by a <b>blank</b>, <b>newline</b>, <b>carriage return</b>, <b>=</b> or <b>(</b> (when the <b>extglob</b> shell option is enabled using the <b>shopt</b> builtin).</td>
</tr>
<tr class="tcw">
<td><b>!n</b></td>
<td>Refer to command line <b>n</b>.</td>
</tr>
<tr class="tcw">
<td><b>!-n</b></td>
<td>Refer to the current command minus <b>n</b>.</td>
</tr>
<tr class="tcw">
<td><b>!!</b></td>
<td>Refer to the previous command. This is a synonym for '<b>!-1</b>'.</td>
</tr>
<tr class="tcw">
<td><b>!string</b></td>
<td>Refer to the most recent command preceding the current position in the history list starting with string.</td>
</tr>
<tr class="tcw">
<td><b>!?string[?]</b></td>
<td>Refer to the most recent command preceding the current position in the history list containing string. The trailing <b>?</b> may be omitted if string is followed immediately by a newline.</td>
</tr>
<tr class="tcw">
<td><b>^string1^string2^</b></td>
<td>Quick substitution. Repeat the previous command, replacing <b>string1</b> with <b>string2</b>. Equivalent to "<b>!!:s/string1/string2/</b>" (see Modifiers below).</td>
</tr>
<tr class="tcw">
<td><b>!#</b></td>
<td>The entire command line typed so far.</td>
</tr>
</table>
<h2 id="27A2">Word designators</h2>
<p class="tab"><i>Word designators</i> are used to select desired words from the event. A <b>:</b> separates the event specification from the word designator. It may be omitted if the word designator begins with a <b>^</b>, <b>$</b>, <b>*</b>, <b>-</b>, or <b>%</b>. Words are numbered from the beginning of the line, with the first word being denoted by 0 (zero). Words are inserted into the current line separated by single spaces.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>0</b></td>
<td>The zeroth word. For the shell, this is the command word.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>The <b>n</b>th word.</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>The first argument. That is, word <b>1</b>.</td>
</tr>
<tr class="tcw">
<td><b>$</b></td>
<td>The last argument.</td>
</tr>
<tr class="tcw">
<td><b>%</b></td>
<td>The word matched by the most recent '<b>?string?</b>' search.</td>
</tr>
<tr class="tcw">
<td><b>x-y</b></td>
<td>A range of words; '<b>-y</b>' abbreviates '<b>0-y</b>'.</td>
</tr>
<tr class="tcw">
<td><b>*</b></td>
<td>All the words but the zeroth. This is a synonym for '<b>1-$</b>'. It is not an error to use <b>*</b> if there is only one word in the event; the empty string is returned in that case.</td>
</tr>
<tr class="tcw">
<td><b>x*</b></td>
<td>Abbreviates <b>x-$</b>.</td>
</tr>
<tr class="tcw">
<td><b>x-</b></td>
<td>Abbreviates <b>x-$</b> like <b>x*</b>, but omits the last word.</td>
</tr>
</table>
<p class="tab">If a word designator is supplied without an event specification, the previous command is used as the event.</p>
<h2 id="27A3">Modifiers</h2>
<p class="tab">After the optional word designator, there may appear a sequence of one or more of the following <i>modifiers</i>, each preceded by a '<b>:</b>'.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>h</b></td>
<td>Remove a trailing file name component, leaving only the head.</td>
</tr>
<tr class="tcw">
<td><b>t</b></td>
<td>Remove all leading file name components, leaving the tail.</td>
</tr>
<tr class="tcw">
<td><b>r</b></td>
<td>Remove a trailing suffix of the form <b>.xxx</b>, leaving the basename.</td>
</tr>
<tr class="tcw">
<td><b>e</b></td>
<td>Remove all but the trailing suffix.</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Print the new command but do not execute it.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Quote the substituted words, escaping further substitutions.</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Quote the substituted words as with <b>q</b>, but break into words at blanks and newlines.</td>
</tr>
<tr class="tcw">
<td><b>s/old/new/</b></td>
<td>Substitute <b>new</b> for the first occurrence of <b>old</b> in the event line. Any delimiter can be used in place of <b>/</b>. The final delimiter is optional if it's the last character of the event line. The delimiter may be quoted in <b>old</b> and <b>new</b> with a single backslash. If <b>&amp;</b> appears in <b>new</b>, it is replaced by <b>old</b>. A single backslash quotes the <b>&amp;</b>. If <b>old</b> is null, it is set to the last <b>old</b> substituted, or, if no previous history substitutions took place, the last string in a <b>!?string[?]</b> search.</td>
</tr>
<tr class="tcw">
<td><b>&amp;</b></td>
<td>Repeat the previous substitution.</td>
</tr>
<tr class="tcw">
<td><b>g</b></td>
<td>Cause changes to be applied over the entire event line. This is used in conjunction with '<b>:s</b>' (e.g., '<b>:gs/old/new/</b>') or '<b>:&amp;</b>'. If used with '<b>:s</b>', any delimiter can be used in place of <b>/</b>, and the final delimiter is optional if it's the last character of the event line. An <b>a</b> may be used as a synonym for <b>g</b>.</td>
</tr>
<tr class="tcw">
<td><b>G</b></td>
<td>Apply the following '<b>s</b>' modifier once to each word in the event line.</td>
</tr>
</table>
<h2 id="28A">Shell builtin commands</h2>
<p class="tab">Unless otherwise noted, each builtin command documented in this section as accepting options preceded by <b>-</b> accepts <b>--</b> to signify the end of the options. The <b>:</b>, <b>true</b>, <b>false</b>, and <b>test</b> builtins do not accept options and do not treat <b>--</b> specially. The <b>exit</b>, <b>logout</b>, <b>break</b>, <b>continue</b>, <b>let</b>, and <b>shift</b> builtins accept and process arguments beginning with <b>-</b> without requiring <b>--</b>. Other builtins that accept arguments but are not specified as accepting options interpret arguments beginning with <b>-</b> as invalid options and require <b>--</b> to prevent this interpretation.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>:</b> [<i>arguments</i>]</td>
<td>No effect; the command does nothing beyond expanding arguments and performing any specified redirections. A zero exit code is returned.</td>
</tr>
<tr class="tcw">
<td><p><b>.</b> <i>filename</i> [<i>arguments</i>]</p>
<p><b>source</b> <i>filename</i> [<i>arguments</i>]</p>
</td>
<td>Read and execute commands from <i>filename</i> in the current shell environment and return the exit status of the last command executed from <i>filename</i>. If <i>filename</i> does not contain a slash, file names in <b>PATH</b> are used to find the directory containing <i>filename</i>. The file searched for in <b>PATH</b> need not be executable. When bash is not in posix mode, the current directory is searched if no file is found in <b>PATH</b>. If the <b>sourcepath</b> option to the <b>shopt</b> builtin command is turned off, the <b>PATH</b> is not searched. If any arguments are supplied, they become the positional parameters when file name is executed. Otherwise the positional parameters are unchanged. The return status is the status of the last command exited in the script (0 if no commands are executed), and <b>false</b> if <i>filename</i> is not found or cannot be read.</td>
</tr>
<tr class="tcw">
<td><b>alias</b> [-p] [<b>name</b>[=<i>value</i>] ...]</td>
<td><b>Alias</b> with no arguments or with the <b>-p</b> option prints the list of aliases in the form alias <b>name=value</b> on standard output. When arguments are supplied, an alias is defined for each name whose value is given. A trailing space in value causes the next word to be checked for alias substitution when the alias is expanded. For each name in the argument list for which no value is supplied, the name and value of the alias is printed. Alias returns <b>true</b> unless a name is given for which no alias is defined.</td>
</tr>
<tr class="tcw">
<td><b>bg</b> [<i>jobspec</i> ...]</td>
<td>Resume each suspended job <b>jobspec</b> in the background, as if it had been started with <b>&amp;</b>. If <b>jobspec</b> is not present, the shell's notion of the current job is used. <b>bg jobspec</b> returns 0 unless run when job control is disabled or, when run with job control enabled, any specified <b>jobspec</b> was not found or was started without job control.</td>
</tr>
<tr class="tcw">
<td><b>bind</b> [<b>-m</b> <i>keymap</i>] [<b>-lpsvPSV</b>]<br><br><b>bind</b> [<b>-m</b> <i>keymap</i>] [<b>-q</b> <i>function</i>] [<b>-u</b> <i>function</i>] [<b>-r</b> <i>keyseq</i>]<br><br><b>bind</b> [<b>-m</b> <i>keymap</i>] <b>-f</b> <i>filename</i><br><br><b>bind</b> [<b>-m</b> <i>keymap</i>] <b>-x</b> <b><i>keyseq</i>:</b><i>shell-command</i><br><br><b>bind</b> [<b>-m</b> <i>keymap</i>] <b><i>keyseq</i>:</b><i>function-name</i><br><br><b>bind</b> <i>readline-command</i></td>
<td>Display current readline key and function bindings, bind a key sequence to a readline function or macro, or set a readline variable. Each non-option argument is a command as it would appear in <b>.inputrc</b>, but each binding or command must be passed as a separate argument; e.g., '<b>"\C-x\C-r": re-read-init-file</b>'. Options, if supplied, have the following meanings:<br><br><b>-m</b> <i>keymap</i><br><br>Use <i>keymap</i> as the keymap to be affected by the subsequent bindings. Acceptable <i>keymap</i> names are <b>emacs</b>, <b>emacs-standard</b>, <b>emacs-meta</b>, <b>emacs-ctlx</b>, <b>vi</b>, <b>vi-move</b>, <b>vi-command</b>, and <b>vi-insert</b>. <b>vi</b> is equivalent to <b>vi-command</b>; <b>emacs</b> is equivalent to <b>emacs-standard</b>.<br><br><b>-l</b><br><br>List the names of all readline functions.<br><br><b>-p</b><br><br>Display readline function names and bindings in such a way that they can be re-read.<br><br><b>-P</b><br><br>List current readline function names and bindings.<br><br><b>-s</b><br><br>Display readline key sequences bound to macros and the strings they output in such a way that they can be re-read.<br><br><b>-S</b><br><br>Display readline key sequences bound to macros and the strings they output.<br><br><b>-v</b><br><br>Display readline variable names and values in such a way that they can be re-read.<br><br><b>-V</b><br><br>List current readline variable names and values.<br><br><b>-f</b> <i>filename</i><br><br>Read key bindings from <i>filename</i>.<br><br><b>-q</b> <i>function</i><br><br>Query about which keys invoke the named function.<br><br><b>-u</b> <i>function</i><br><br>Unbind all keys bound to the named function.<br><br><b>-r</b> <i>keyseq</i><br><br>Remove any current binding for <i>keyseq</i>.<br><br><b>-x</b> <i>keyseq:shell-command</i><br><br>Cause shell-command to be executed whenever <i>keyseq</i> is entered. When <i>shell-command</i> is executed, the shell sets the <b>READLINE_LINE</b> variable to the contents of the readline line buffer and the <b>READLINE_POINT</b> variable to the current location of the insertion point. If the executed command changes the value of <b>READLINE_LINE</b> or <b>READLINE_POINT</b>, those new values are reflected in the editing state.<br><br>The return value is 0 unless an unrecognized option is given or an error occurred.</td>
</tr>
<tr class="tcw">
<td><b>break</b> [<i>n</i>]</td>
<td>Exit from within a <b>for</b>, <b>while</b>, <b>until</b>, or <b>select</b> loop. If <b>n</b> is specified, break <b>n</b> levels. <b>n</b> must be &ge; 1. If <b>n</b> is greater than the number of enclosing loops, all enclosing loops are exited. The return value is 0 unless <b>n</b> is not greater than or equal to 1.</td>
</tr>
<tr class="tcw">
<td><b>builtin</b> <i>shell-builtin</i> [<i>arguments</i>]</td>
<td>Execute the specified shell builtin, passing it arguments, and return its exit status. This is useful when defining a function whose name is the same as a shell builtin, retaining the functionality of the builtin in the function. The <b>cd</b> builtin is commonly redefined this way. The return status is <b>false</b> if shell-builtin is not a shell builtin command.</td>
</tr>
<tr class="tcw">
<td><b>caller</b> [<i>expr</i>]</td>
<td>Returns the context of any active subroutine call (a shell function or a script executed with the <b>.</b> or <b>source</b> builtins). Without <b>expr</b>, caller displays the line number and source file name of the current subroutine call. If a non-negative integer is supplied as <b>expr</b>, <b>caller</b> displays the line number, subroutine name, and source file corresponding to that position in the current execution call stack. This extra information may be used, for example, to print a stack trace. The current frame is frame 0. The return value is 0 unless the shell is not executing a subroutine call or <b>expr</b> does not correspond to a valid position in the call stack.</td>
</tr>
<tr class="tcw">
<td><b>cd</b> [<b>-L</b>|[<b>-P</b> [<b>-e</b>]]] [<i>dir</i>]</td>
<td>Change the current directory to <i>dir</i>. The variable <b>HOME</b> is the default dir. The variable <b>CDPATH</b> defines the search path for the directory containing <b>dir</b>. Alternative directory names in <b>CDPATH</b> are separated by a colon (<b>:</b>). A null directory name in <b>CDPATH</b> is the same as the current directory, i.e., "<b>.</b>". If <b>dir</b> begins with a slash (<b>/</b>), then <b>CDPATH</b> is not used. The <b>-P</b> option says to use the physical directory structure instead of following symbolic links (see also the <b>-P</b> option to the <b>set</b> builtin command); the <b>-L</b> option forces symbolic links to be followed. If the <b>-e</b> option is supplied with <b>-P</b>, and the current working directory cannot be successfully determined after a successful directory change, <b>cd</b> returns an unsuccessful status. An argument of <b>-</b> is equivalent to <b>$OLDPWD</b>. If a non-empty directory name from <b>CDPATH</b> is used, or if <b>-</b> is the first argument, and the directory change is successful, the absolute pathname of the new working directory is written to the standard output. The return value is true if the directory was successfully changed; false otherwise.</td>
</tr>
<tr class="tcw">
<td><p><b>command</b> [<b>-pVv</b>]</p>
<p><b>command</b> [<i>arg</i> ...]</p>
</td>
<td>Run <b>command</b> with <b>args</b> suppressing the normal shell function look up. Only builtin commands or commands found in the <b>PATH</b> are executed. If the <b>-p</b> option is given, the search for command is performed using a default value for <b>PATH</b> that is guaranteed to find all the standard utilities. If either the <b>-V</b> or <b>-v</b> option is supplied, a description of command is printed. The <b>-v</b> option causes a single word indicating the command or file name used to invoke command to be displayed; the <b>-V</b> option produces a more verbose description. If the <b>-V</b> or <b>-v</b> option is supplied, the exit status is 0 if command was found, and 1 if not. If neither option is supplied and an error occurred or command cannot be found, the exit status is 127. Otherwise, the exit status of the command builtin is the exit status of command.</td>
</tr>
<tr class="tcw">
<td><b>compgen</b> [<i>option</i>] [<i>word</i>]</td>
<td>Generate possible completion matches for <i>word</i> according to the options, which may be any option accepted by the <b>complete</b> builtin except for <b>-p</b> and <b>-r</b>, and write the matches to the standard output. When using the <b>-F</b> or <b>-C</b> options, the various shell variables set by the programmable completion facilities, while available, do not have useful values.<br><br>The matches are generated in the same way as if the programmable completion code had generated them directly from a completion specification with the same flags. If word is specified, only those completions matching word are displayed.<br><br>The return value is true unless an invalid option is supplied, or no matches were generated.</td>
</tr>
<tr class="tcw">
<td><br><b>complete</b> [<b>-abcdefgjksuv</b>] [<b>-o</b> <i>comp-option</i>] [<b>-DE</b>] [<b>-A</b> <i>action</i>] [<b>-G</b> <i>globpat</i>] [<b>-W</b> <i>wordlist</i>] [<b>-F</b> <i>function</i>] [<b>-C</b> <i>command</i>] [<b>-X</b> <i>filterpat</i>] [<b>-P</b> <i>prefix</i>] [<b>-S</b> <i>suffix</i>] <i>name</i> [<i>name</i> ...]<br><br><b>complete</b> <b>-pr</b> [<b>-DE</b>] [<i>name</i> ...]</td>
<td>Specify how arguments to each <b>name</b> should be completed. If the <b>-p</b> option is supplied, or if no options are supplied, existing completion specifications are printed in a way that allows them to be reused as input. The <b>-r</b> option removes a completion specification for each <b>name</b>, or, if no <b>name</b>s are supplied, all completion specifications. The <b>-D</b> option indicates that the remaining options and actions should apply to the "default" command completion; that is, completion attempted on a command for which no completion has previously been defined. The <b>-E</b> option indicates that the remaining options and actions should apply to "empty" command completion; that is, completion attempted on a blank line.<br><br>The process of applying these completion specifications when word completion is attempted is described above under the section "<a href="#programmable-completion">Programmable Completion</a>."<br><br>Other options, if specified, have the following meanings. The arguments to the <b>-G</b>, <b>-W</b>, and <b>-X</b> options (and, if necessary, the <b>-P</b> and <b>-S</b> options) should be quoted to protect them from expansion before the <b>complete</b> builtin is invoked.<br><br><b>-o</b> <i>comp-option</i><br><br>The <i>comp-option</i> controls several aspects of the compspec's behavior beyond the simple generation of completions. The <i>comp-option</i> may be one of:<br><br><b>bashdefault</b>: Perform the rest of the default bash completions if the compspec generates no matches.<br><br><b>default</b>: Use readline's default file name completion if the compspec generates no matches.<br><br><b>dirnames</b>: Perform directory name completion if the compspec generates no matches.<br><br><b>filenames</b>: Tell readline that the compspec generates file names, so it can perform any file name specific processing (like adding a slash to directory names, quoting special characters, or suppressing trailing spaces). Intended to be used with shell functions.<br><br><b>nospace</b>: Tell readline not to append a space (the default) to words completed at the end of the line.<br><br><b>plusdirs</b>: After any matches defined by the compspec are generated, directory name completion is attempted and any matches are added to the results of the other actions.<br><br><b>-A</b> <i>action</i><br><br>The <i>action</i> may be one of the following to generate a list of possible completions:<br><br><b>alias</b>: Alias names. May also be specified as <b>-a</b>.<br><b>arrayvar</b>: Array variable names.<br><b>binding</b>: Readline key binding names.<br><b>builtin</b>: Names of shell builtin commands. May also be specified as <b>-b</b>.<br><b>command</b>: Command names. May also be specified as <b>-c</b>.<br><b>directory</b>: Directory names. May also be specified as <b>-d</b>.<br><b>disabled</b>: Names of disabled shell builtins.<br><b>enabled</b>: Names of enabled shell builtins.<br><b>export</b>: Names of exported shell variables. May also be specified as <b>-e</b>.<br><b>file</b>: File names. May also be specified as <b>-f</b>.<br><b>function</b>: Names of shell functions.<br><b>group</b>: Group names. May also be specified as <b>-g</b>.<br><b>helptopic</b>: Help topics as accepted by the help builtin.<br><b>hostname</b>: Hostnames, as taken from the file specified by the HOSTFILE shell variable.<br><b>job</b>: Job names, if job control is active. May also be specified as <b>-j</b>.<br><b>keyword</b>: Shell reserved words. May also be specified as <b>-k</b>.<br><b>running</b>: Names of running jobs, if job control is active.<br><b>service</b>: Service names. May also be specified as <b>-s</b>.<br><b>setopt</b>: Valid arguments for the <b>-o</b> option to the set builtin.<br><b>shopt</b>: Shell option names as accepted by the <b>shopt</b> builtin.<br><b>signal</b>: Signal names.<br><b>stopped</b>: Names of stopped jobs, if job control is active.<br><b>user</b>: User names. May also be specified as <b>-u</b>.<br><b>variable</b>: Names of all shell variables. May also be specified as <b>-v</b>.<br><br><b>-C</b> <i>command</i><br><br><i>command</i> is executed in a subshell environment, and its output is used as the possible completions.<br><br><b>-F</b> <i>function</i><br><br>The shell function <i>function</i> is executed in the current shell environment. When it finishes, the possible completions are retrieved from the value of the <b>COMPREPLY</b> array variable.<br><br><b>-G</b> <i>globpat</i><br><br>The pathname expansion pattern <i>globpat</i> is expanded to generate the possible completions.<br><br><b>-P</b> <i>prefix</i><br><br><i>prefix</i> is added at the beginning of each possible completion after all other options are applied.<br><br><b>-S</b> <i>suffix</i><br><br><i>suffix</i> is appended to each possible completion after all other options are applied.<br><br><b>-W</b> <i>wordlist</i><br><br>The <i>wordlist</i> is split using the characters in the IFS special variable as delimiters, and each resultant word is expanded. The possible completions are the members of the resultant list which match the word being completed.<br><br><b>-X</b> <i>filterpat</i><br><br><i>filterpat</i> is a pattern as used for pathname expansion. It is applied to the list of possible completions generated by the preceding options and arguments, and each completion matching <i>filterpat</i> is removed from the list. A leading <b>!</b> in <i>filterpat</i> negates the pattern; in this case, any completion not matching <i>filterpat</i> is removed.<br><br>The return value is true unless an invalid option is supplied, an option other than <b>-p</b> or <b>-r</b> is supplied without a <b>name</b> argument, an attempt is made to remove a completion specification for a <b>name</b> for which no specification exists, or an error occurs adding a completion specification.</td>
</tr>
<tr class="tcw">
<td><b>compopt</b> [<b>-o</b> <i>option</i>] [<b>-DE</b>] [<b>+o</b> <i>option</i>] [<i>name</i>]</td>
<td>Modify completion options for each name according to the <i>options</i>, or for the currently-executing completion if no <i>names</i> are supplied. If no <i>options</i> are given, display the completion options for each name or the current completion. The possible values of <i>option</i> are those valid for the <b>complete</b> builtin described above. The <b>-D</b> option indicates that the remaining options should apply to the &quot;default&quot; command completion; that is, completion attempted on a command for which no completion has previously been defined. The <b>-E</b> option indicates that the remaining options should apply to &quot;empty&quot; command completion; that is, completion attempted on a blank line.<br><br>The return value is true unless an invalid option is supplied, an attempt is made to modify the options for a name for which no completion specification exists, or an output error occurs.</td>
</tr>
<tr class="tcw">
<td><b>continue</b> [<i>n</i>]</td>
<td>Resume the next iteration of the enclosing <b>for</b>, <b>while</b>, <b>until</b>, or <b>select</b> loop. If <b>n</b> is specified, resume at the <b>n</b>th enclosing loop. <b>n</b> must be &ge; 1. If <b>n</b> is greater than the number of enclosing loops, the last enclosing loop (the &quot;top-level&quot; loop) is resumed. The return value is 0 unless <b>n</b> is not greater than or equal to 1.</td>
</tr>
<tr class="tcw">
<td><b>declare</b> [<b>-aAfFgilrtux</b>] [<b>-p</b>] [<i>name</i>[=<i>value</i>] ...]<br><br><b>typeset</b> [<b>-aAfFgilrtux</b>] [<b>-p</b>] [<i>name</i>[=<i>value</i>] ...]</td>
<td>Declare variables and/or give them attributes. If no <b>names</b> are given then display the values of variables. The <b>-p</b> option displays the attributes and values of each <b>name</b>. When <b>-p</b> is used with <b>name</b> arguments, additional options are ignored. When <b>-p</b> is supplied without <b>name</b> arguments, it displays the attributes and values of all variables having the attributes specified by the additional options. If no other options are supplied with <b>-p</b>, <b>declare</b> displays the attributes and values of all shell variables. The <b>-f</b> option restricts the display to shell functions. The <b>-F</b> option inhibits the display of function definitions; only the function name and attributes are printed. If the extdebug shell option is enabled using shopt, the source file name and line number where the function is defined are displayed as well. The <b>-F</b> option implies <b>-f</b>. The <b>-g</b> option forces variables to be created or modified at the global scope, even when <b>declare</b> is executed in a shell function. It is ignored in all other cases. The following options can restrict output to variables with the specified attribute or to give variables attributes:<br><br><b>-a</b><br><br>Each name is an indexed array variable (see the section "<a href="#arrays">Arrays</a>" above).<br><br><b>-A</b><br><br>Each name is an associative array variable (see the section "<a href="#arrays">Arrays</a>" above).<br><br><b>-f</b><br><br>Use function names only.<br><br><b>-i</b><br><br>The variable is treated as an integer; arithmetic evaluation (see the section "<a href="#15A">Arithmetic Evaluation</a>" above) is performed when the variable is assigned a value.<br><br><b>-l</b><br><br>When the variable is assigned a value, all uppercase characters are converted to lowercase. The uppercase attribute is disabled.<br><br><b>-r</b><br><br>Make names readonly. These names cannot then be assigned values by subsequent assignment statements or unset.<br><br><b>-t</b><br><br>Give each name the trace attribute. Traced functions inherit the DEBUG and RETURN traps from the calling shell. The trace attribute has no special meaning for variables.<br><br><b>-u</b><br><br>When the variable is assigned a value, all lowercase characters are converted to uppercase. The lowercase attribute is disabled.<br><b>-x</b><br><br>Mark names for export to subsequent commands via the environment.<br><br>Using '+' instead of '-' turns off the attribute instead, with the exceptions that <b>+a</b> may not be used to destroy an array variable and <b>+r</b> does not remove the readonly attribute. When used in a function, makes each name local, as with the local command, unless the <b>-g</b> option is supplied, If a variable name is followed by <b>=value</b>, the value of the variable is set to <b>value</b>. The return value is 0 unless an invalid option is encountered, an attempt is made to define a function using "<b>-f foo=bar</b>", an attempt is made to assign a value to a readonly variable, an attempt is made to assign a value to an array variable without using the compound assignment syntax (see the section "<a href="#arrays">Arrays</a>" above), one of the names is not a valid shell variable name, an attempt is made to turn off readonly status for a readonly variable, an attempt is made to turn off array status for an array variable, or an attempt is made to display a non-existent function with <b>-f</b>.</td>
</tr>
<tr class="tcw">
<td><b>dirs</b> [<b>+n</b>] [<b>-n</b>] [<b>-clpv</b>]</td>
<td>Without options, displays the list of currently remembered directories. The default display is on a single line with directory names separated by spaces. Directories are added to the list with the <b>pushd</b> command; the <b>popd</b> command removes entries from the list.<br><br><b>+n</b><br><br>Displays the nth entry counting from the left of the list shown by <b>dirs</b> when invoked without options, starting with zero.<br><br><b>-n</b><br><br>Displays the nth entry counting from the right of the list shown by <b>dirs</b> when invoked without options, starting with zero.<br><br><b>-c</b><br><br>Clears the directory stack by deleting all the entries.<br><br><b>-l</b><br><br>Produces a longer listing; the default listing format uses a tilde to denote the home directory.<br><br><b>-p</b><br><br>Print the directory stack with one entry per line.<br><br><b>-v</b><br><br>Print the directory stack with one entry per line, prefixing each entry with its index in the stack.<br><br>The return value is 0 unless an invalid option is supplied or <b>n</b> indexes beyond the end of the directory stack.</td>
</tr>
<tr class="tcw">
<td><b>disown</b> [<b>-ar</b>] [<b>-h</b>] [<i>jobspec</i> ...]</td>
<td>Without options, each <i>jobspec</i> is removed from the table of active jobs. If <i>jobspec</i> is not present, and neither <b>-a</b> nor <b>-r</b> is supplied, the shell's notion of the current job is used. If the <b>-h</b> option is given, each <i>jobspec</i> is not removed from the table, but is marked so that <b>SIGHUP</b> is not sent to the job if the shell receives a <b>SIGHUP</b>. If no <i>jobspec</i> is present, and neither the <b>-a</b> nor the <b>-r</b> option is supplied, the current job is used. If no <i>jobspec</i> is supplied, the <b>-a</b> option means to remove or mark all jobs; the <b>-r</b> option without a <i>jobspec</i> argument restricts operation to running jobs. The return value is 0 unless a <i>jobspec</i> does not specify a valid job.</td>
</tr>
<tr class="tcw">
<td><b>echo</b> [<b>-neE</b>] [<i>arg</i> ...]</td>
<td>Output the <b>args</b>, separated by spaces, followed by a newline. The return status is always 0. If <b>-n</b> is specified, the trailing newline is suppressed. If the <b>-e</b> option is given, interpretation of the following backslash-escaped characters is enabled. The <b>-E</b> option disables the interpretation of these escape characters, even on systems where they are interpreted by default. The <b>xpg_echo</b> shell option may be used to dynamically determine whether or not <b>echo</b> expands these escape characters by default. <b>echo</b> does not interpret <b>--</b> to mean the end of options. <b>echo</b> interprets the following escape sequences:<br><br><b>\a</b>: alert (bell)<br><br><b>\b</b>: backspace<br><br><b>\c</b>: suppress further output<br><br><b>\e</b>, <b>\E</b>: an escape character<br><br><b>\f</b>: form feed<br><br><b>\n</b>: new line<br><br><b>\r</b>: carriage return<br><br><b>\t</b>: horizontal tab<br><br><b>\v</b>: vertical tab<br><br><b>\\</b>: backslash<br><br><b>\0nnn</b>: the eight-bit character whose value is the octal value nnn (zero to three octal digits)<br><br><b>\xHH</b>: the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)<br><br><b>\uHHHH</b>: the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHH (one to four hex digits)<br><br><b>\UHHHHHHHH</b>: the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to eight hex digits)</td>
</tr>
<tr class="tcw">
<td><b>enable</b> [<b>-a</b>] [<b>-dnps</b>] [<b>-f</b> <i>filename</i>] [<i>name</i> ...]</td>
<td>Enable and disable builtin shell commands. Disabling a builtin allows a disk command which has the same name as a shell builtin to be executed without specifying a full pathname, even though the shell normally searches for builtins before disk commands. If <b>-n</b> is used, each name is disabled; otherwise, names are enabled. For example, to use the test binary found via the PATH instead of the shell builtin version, run "enable <b>-n</b> test". The <b>-f</b> option means to load the new builtin command name from shared object 'filename', on systems that support dynamic loading. The <b>-d</b> option deletes a builtin previously loaded with <b>-f</b>. If no name arguments are given, or if the <b>-p</b> option is supplied, a list of shell builtins is printed. With no other option arguments, the list consists of all enabled shell builtins. If <b>-n</b> is supplied, only disabled builtins are printed. If <b>-a</b> is supplied, the list printed includes all builtins, with an indication of whether or not each is enabled. If <b>-s</b> is supplied, the output is restricted to the POSIX special builtins. The return value is 0 unless a name is not a shell builtin or there is an error loading a new builtin from a shared object.</td>
</tr>
<tr class="tcw">
<td><b>eval</b> [<i>arg</i> ...]</td>
<td>The <i>arg</i>s are read and concatenated together into a single command. This command is then read and executed by the shell, and its exit status is returned as the value of <b>eval</b>. If there are no <i>arg</i>s, or only null arguments, <b>eval</b> returns 0.</td>
</tr>
<tr class="tcw">
<td><b>exec</b> [<b>-cl</b>] [<b>-a</b> <i>name</i>] [<i>command</i> [<i>arguments</i>]]</td>
<td>If <i>command</i> is specified, it replaces the shell. No new process is created. The arguments become the arguments to <i>command</i>. If the <b>-l</b> option is supplied, the shell places a dash at the beginning of the zeroth argument passed to command. This is what <a href="/jargon/l/login.htm">login</a> does. The <b>-c</b> option causes command to be executed with an empty environment. If <b>-a</b> is supplied, the shell passes <i>name</i> as the zeroth argument to the executed command. If <i>command</i> cannot be executed for some reason, a non-interactive shell exits, unless the shell option <b>execfail</b> is enabled, where it returns failure. An interactive shell returns failure if the file cannot be executed. If <i>command</i> is not specified, any redirections take effect in the current shell, and the return status is 0. If there is a redirection error, the return status is 1.</td>
</tr>
<tr class="tcw">
<td><b>exit</b> [<i>n</i>]</td>
<td>Cause the shell to exit with a status of n. If n is omitted, the exit status is that of the last command executed. A trap on EXIT is executed before the shell terminates.</td>
</tr>
<tr class="tcw">
<td><p><b>export</b> [<b>-fn</b>] [<i>name</i>[=<i>word</i>]] ...</p>
<p><b>export</b> <b>-p</b></p>
</td>
<td>The supplied <i>name</i>s are marked for automatic export to the environment of subsequently executed commands. If the <b>-f</b> option is given, the names refer to functions. If no <i>name</i>s are given, or if the <b>-p</b> option is supplied, a list of all names that are exported in this shell is printed. The <b>-n</b> option causes the export property to be removed from each name. If a variable name is followed by <i>=word</i>, the value of the variable is set to <i>word</i>. <b>export</b> returns an exit status of 0 unless an invalid option is encountered, one of the <i>name</i>s is not a valid shell variable name, or <b>-f</b> is supplied with a <i>name</i> that is not a function.</td>
</tr>
<tr class="tcw">
<td><b>fc</b> [<b>-e</b> <i>ename</i>] [<b>-lnr</b>] [<i>first</i>] [<i>last</i>]<br><br><b>fc</b> <b>-s</b> [<i>pat</i>=<i>rep</i>] [<i>cmd</i>]</td>
<td>Fix Command. In the first form, a range of commands from <i>first</i> to <i>last</i> is selected from the history list. The <i>First</i> and <i>last</i> may be specified as a string (to locate the last command beginning with that string) or as a number (an index into the history list, where a negative number is used as an offset from the current command number). If <i>last</i> is not specified it is set to the current command for listing (so that "<b>fc -l -10</b>" prints the last 10 commands) and to <i>first</i> otherwise. If <i>first</i> is not specified it is set to the previous command for editing and -16 for listing.<br><br>The <b>-n</b> option suppresses the command numbers when listing. The <b>-r</b> option reverses the order of the commands. If the <b>-l</b> option is given, the commands are listed on standard output. Otherwise, the editor given by <i>ename</i> is invoked on a file containing those commands. If <i>ename</i> is not given, the value of the <b>FCEDIT</b> variable is used, and the value of <b>EDITOR</b> if <b>FCEDIT</b> is not set. If neither variable is set, <a href="/unix/uvi.htm">vi</a> is used. When editing is complete, the edited commands are echoed and executed.<br><br>In the second form, command is re-executed after each instance of <i>pat</i> is replaced by <i>rep</i>. A useful alias to use with this is "<b>r='fc -s'</b>", so that typing "<b>r cc</b>" runs the last command beginning with "<b>cc</b>" and typing "<b>r</b>" re-executes the last command.<br><br>If the first form is used, the return value is 0 unless an invalid option is encountered or first or last specify history lines out of range. If the <b>-e</b> option is supplied, the return value is the value of the last command executed or failure if an error occurs with the temporary file of commands. If the second form is used, the return status is that of the command re-executed, unless <b>cmd</b> does not specify a valid history line, where <b>fc</b> returns failure.</td>
</tr>
<tr class="tcw">
<td><b>fg</b> [<i>jobspec</i>]</td>
<td>Resume <i>jobspec</i> in the foreground, and make it the current job. If <i>jobspec</i> is not present, the shell's notion of the current job is used. The return value is that of the command placed into the foreground, or failure if run when job control is disabled or, when run with job control enabled, if <i>jobspec</i> does not specify a valid job or <i>jobspec</i> specifies a job that was started without job control.</td>
</tr>
<tr class="tcw">
<td><b>getopts</b> <i>optstring</i> <i>name</i> [<i>args</i>]</td>
<td><b>getopts</b> is used by shell procedures to parse positional parameters. The <i>optstring</i> contains the option characters to be recognized; if a character is followed by a colon, the option is expected to have an argument, which should be separated from it by white space. The colon and question mark characters may not be used as option characters. Each time it is invoked, <b>getopts</b> places the next option in the shell variable name, initializing name if it does not exist, and the index of the next argument to be processed into the variable <b>OPTIND</b>. <b>OPTIND</b> is initialized to 1 each time the shell or a shell script is invoked. When an option requires an argument, <b>getopts</b> places that argument into the variable <b>OPTARG</b>. The shell does not reset <b>OPTIND</b> automatically; it must be manually reset between multiple calls to <b>getopts</b> in the same shell invocation if a new set of parameters is to be used. When the end of options is encountered, <b>getopts</b> exits with a return value greater than zero. <b>OPTIND</b> is set to the index of the first non-option argument, and name is set to <b>?</b>.<br><br><b>getopts</b> normally parses the positional parameters, but if more arguments are given in <i>args</i>, <b>getopts</b> parses those instead.<br><br><b>getopts</b> can report errors in two ways. If the first character of <i>optstring</i> is a colon, silent error reporting is used. In normal operation diagnostic messages are printed when invalid options or missing option arguments are encountered. If the variable <b>OPTERR</b> is set to 0, no error messages are displayed, even if the first character of <i>optstring</i> is not a colon.<br><br>If an invalid option is seen, <b>getopts</b> places <b>?</b> into <i>name</i> and, if not silent, prints an error message and unsets <b>OPTARG</b>. If <b>getopts</b> is silent, the option character found is placed in <b>OPTARG</b> and no diagnostic message is printed.<br><br>If a required argument is not found, and <b>getopts</b> is not silent, a question mark (<b>?</b>) is placed in <i>name</i>, <b>OPTARG</b> is unset, and a diagnostic message is printed. If <b>getopts</b> is silent, then a colon (<b>:</b>) is placed in name and <b>OPTARG</b> is set to the option character found.<br><br><b>getopts</b> returns true if an option, specified or unspecified, is found. It returns false if the end of options is encountered or an error occurs.</td>
</tr>
<tr class="tcw">
<td><b>hash</b> [<b>-lr</b>] [<b>-p</b> <i>filename</i>] [<b>-dt</b>] [<i>name</i>]</td>
<td>Each time <b>hash</b> is invoked, the full pathname of the command name is determined by searching the directories in <b>$PATH</b> and remembered. Any previously-remembered pathname is discarded. If the <b>-p</b> option is supplied, no path search is performed, and 'filename' is used as the full file name of the command. The <b>-r</b> option causes the shell to forget all remembered locations. The <b>-d</b> option causes the shell to forget the remembered location of each name. If the <b>-t</b> option is supplied, the full pathname that each name corresponds is printed. If multiple name arguments are supplied with <b>-t</b>, the name is printed before the hashed full pathname. The <b>-l</b> option causes output to be displayed in a format reused as input. If no arguments are given, or if only <b>-l</b> is supplied, information about remembered commands is printed. The return status is true unless a name is not found or an invalid option is supplied.</td>
</tr>
<tr class="tcw">
<td><b>help</b> [<b>-dms</b>] [<i>pattern</i>]</td>
<td>Display helpful information about builtin commands. If <i>pattern</i> is specified, help gives detailed help on all commands matching <i>pattern</i>; otherwise help for all the builtins and shell control structures is printed. <b>-d</b> Display a short description of each pattern <b>-m</b> Display the description of each pattern in a <a href="/unix/uman.htm">manpage</a>-like format <b>-s</b> Display only a short usage synopsis for each pattern<br><br>The return status is 0 unless no command matches <i>pattern</i>.</td>
</tr>
<tr class="tcw">
<td><b>history</b> [<i>n</i>]<br><br><b>history</b> <b>-c</b><br><br><b>history</b> <b>-d</b> <i>offset</i><br><br><b>history</b> <b>-anrw</b> [<i>filename</i>]<br><br><b>history</b> <b>-p</b> <i>arg</i> [<i>arg</i> ...]<br><br><b>history</b> <b>-s</b> <i>arg</i> [<i>arg</i> ...]</td>
<td>With no options, display the command history list with line numbers. Lines listed with a <b>*</b> are modified. An argument of <i>n</i> lists only the last <i>n</i> lines. If the shell variable <b>HISTTIMEFORMAT</b> is set and not null, it is used as a format string for <a href="/unix/strftime.htm">strftime</a> to display the timestamp associated with each displayed history entry. No intervening blank is printed between the formatted timestamp and the history line. If 'filename' is supplied, it is used as the name of the history file; if not, the value of <b>HISTFILE</b> is used. Options, if supplied, have the following meanings:<br><br><b>-c</b>: Clear the history list by deleting all the entries.<br><br><b>-d</b> <i>offset</i>: Delete the history entry at position <i>offset</i>.<br><br><b>-a</b>: Append the "new" history lines (history lines entered since the beginning of the current bash session) to the history file.<br><br><b>-n</b>: Read the history lines not already read from the history file into the current history list. These are lines appended to the history file since the beginning of the current bash session.<br><br><b>-r</b>: Read the contents of the history file and use them as the current history.<br><br><b>-w</b>: Write the current history to the history file, overwriting the history file's contents.<br><br><b>-p</b>: Perform history substitution on the following <i>arg</i>s and display the result on the standard output. Does not store the results in the history list. Each arg must be quoted to disable normal history expansion.<br><br><b>-s</b>: Store the <i>arg</i>s in the history list as a single entry. The last command in the history list is removed before the <i>arg</i>s are added.<br><br>If the <b>HISTTIMEFORMAT</b> variable is set, the timestamp information associated with each history entry is written to the history file, marked with the history comment character. When the history file is read, lines beginning with the history comment character followed immediately by a digit are interpreted as timestamps for the previous history line. The return value is 0 unless an invalid option is encountered, an error occurs while reading or writing the history file, an invalid offset is supplied as an argument to <b>-d</b>, or the history expansion supplied as an argument to <b>-p</b> fails.</td>
</tr>
<tr class="tcw">
<td><b>jobs</b> [<b>-lnprs</b>] [ <i>jobspec</i> ... ]<br><br><b>jobs</b> <b>-x</b> <i>command</i> [ <i>args</i> ... ]</td>
<td>The first form lists the active jobs. The options have the following meanings:<br><br><b>-l</b>: List process IDs in addition to the normal information.<br><br><b>-n</b>: Display information only about jobs that have changed status since the user was last notified of their status.<br><br><b>-p</b>: List only the process ID of the job's process group leader.<br><br><b>-r</b>: Restrict output to running jobs.<br><br><b>-s</b>: Restrict output to stopped jobs.<br><br>If <i>jobspec</i> is given, output is restricted to information about that job. The return status is 0 unless an invalid option is encountered or an invalid <i>jobspec</i> is supplied.<br><br>If the <b>-x</b> option is supplied, jobs replaces any <i>jobspec</i> found in command or <i>arg</i>s with the corresponding process group ID, and executes command passing it <i>arg</i>s, returning its exit status.</td>
</tr>
<tr class="tcw">
<td><b>kill</b> [<b>-s</b> <i>sigspec</i> | <b>-n</b> <i>signum</i> | -<i>sigspec</i>] [<i>pid</i> | <i>jobspec</i>] ...<br><br><b>kill</b> <b>-l</b> [<i>sigspec</i> | <i>exit_status</i>]</td>
<td>Send the signal named by <i>sigspec</i> or <i>signum</i> to the processes named by pid or jobspec. The <i>sigspec</i> is either a case-insensitive signal name such as <b>SIGKILL</b> (with or without the SIG prefix) or a signal number; <i>signum</i> is a signal number. If <i>sigspec</i> is not present, then <b>SIGTERM</b> is assumed. An argument of <b>-l</b> lists the signal names. If any arguments are supplied when <b>-l</b> is given, the names of the signals corresponding to the arguments are listed, and the return status is 0. The <i>exit_status</i> argument to <b>-l</b> is a number specifying either a signal number or the exit status of a process terminated by a signal. The kill returns true if at least one signal was successfully sent, or false if an error occurs or an invalid option is encountered.</td>
</tr>
<tr class="tcw">
<td><b>let</b> <i>arg</i> [<i>arg</i> ...]</td>
<td>Each <i>arg</i> is an arithmetic expression to be evaluated (see the section "<a href="#15A">Arithmetic Evaluation</a>" above). If the last <i>arg</i> evaluates to <b>0</b>, let returns <b>1</b>; <b>0</b> is returned otherwise.</td>
</tr>
<tr class="tcw">
<td><b>local</b> [<i>option</i>] [<i>name</i>[=<i>value</i>] ...]</td>
<td>For each argument, a local variable named <i>name</i> is created, and assigned value. The <i>option</i> can be any of the options accepted by <b>declare</b>. When <b>local</b> is used within a function, it causes the variable <i>name</i> to have a visible scope restricted to that function and its children. With no operands, <b>local</b> writes a list of local variables to the standard output. It is an error to use <b>local</b> when not within a function. The return status is <b>0</b> unless <b>local</b> is used outside a function, an invalid <i>name</i> is supplied, or <i>name</i> is a readonly variable.</td>
</tr>
<tr class="tcw">
<td><b>logout</b></td>
<td>Exit a login shell.</td>
</tr>
<tr class="tcw">
<td><b>mapfile</b> [<b>-n</b> <i>count</i>] [<b>-O</b> <i>origin</i>] [<b>-s</b> <i>count</i>] [<b>-t</b>] [<b>-u</b> <i>fd</i>] [<b>-C</b> <i>callback</i>] [<b>-c</b> <i>quantum</i>] [<i>array</i>]<br><br><b>readarray</b> [<b>-n</b> <i>count</i>] [<b>-O</b> <i>origin</i>] [<b>-s</b> <i>count</i>] [<b>-t</b>] [<b>-u</b> <i>fd</i>] [<b>-C</b> <i>callback</i>] [<b>-c</b> <i>quantum</i>] [<i>array</i>]</td>
<td>Read lines from the standard input into the indexed array variable <i>array</i>, or from file descriptor fd if the <b>-u</b> option is supplied. The variable <b>MAPFILE</b> is the default <i>array</i>. Options, if supplied, have the following meanings:<br><br><b>-n</b>: Copy at most <i>count</i> lines. If <i>count</i> is 0, all lines are copied.<br><br><b>-O</b>: Begin assigning to <i>array</i> at index <i>origin</i>. The default index is 0.<br><br><b>-s</b>: Discard the first <i>count</i> lines read.<br><br><b>-t</b>: Remove a trailing newline from each line read.<br><br><b>-u</b>: Read lines from file descriptor fd instead of the standard input.<br><br><b>-C</b>: Evaluate <i>callback</i> each time <i>quantum</i> lines are read. The <b>-c</b> option specifies <i>quantum</i>.<br><br><b>-c</b>: Specify the number of lines read between each call to <i>callback</i>.<br><br>If <b>-C</b> is specified without <b>-c</b>, the default <i>quantum</i> is 5000. When <i>callback</i> is evaluated, it is supplied the index of the next <i>array</i> element to be assigned and the line to be assigned to that element as additional arguments. The <i>callback</i> is evaluated after the line is read but before the <i>array</i> element is assigned.<br><br>If not supplied with an explicit <i>origin</i>, <b>mapfile</b> clears <i>array</i> before assigning to it.<br><br><b>mapfile</b> returns successfully unless an invalid option or option argument is supplied, <i>array</i> is invalid or unassignable, or if <i>array</i> is not an indexed array.</td>
</tr>
<tr class="tcw">
<td><b>popd</b> [<b>-n</b>] [<b>+</b><i>n</i>] [<b>-</b><i>n</i>]</td>
<td>Removes entries from the directory stack. With no arguments, removes the top directory from the stack, and performs a <b>cd</b> to the new top directory. Arguments, if supplied, have the following meanings:<br><br><b>-n</b>: Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.<br><br><b>+</b><i>n</i> Removes the <i>n</i>th entry counting from the left of the list shown by <b>dirs</b>, starting with zero. For example: "<b>popd +0</b>" removes the first directory, "<b>popd +1</b>" the second.<br><br><b>-</b><i>n</i> Removes the <i>n</i>th entry counting from the right of the list shown by <b>dirs</b>, starting with zero. For example: "<b>popd -0</b>" removes the last directory, "<b>popd -1</b>" the next to last.<br><br>If the <b>popd</b> command is successful, a <b>dirs</b> is performed as well, and the return status is 0. <b>popd</b> returns false if an invalid option is encountered, the directory stack is empty, a non-existent directory stack entry is specified, or the directory change fails.</td>
</tr>
<tr class="tcw">
<td><b>printf</b> [<b>-v</b> <i>var</i>] <i>format</i> [<i>arguments</i>]</td>
<td>Write the formatted <i>arguments</i> to the standard output under the control of the <i>format</i>. The <b>-v</b> option causes the output to be assigned to the variable var rather than being printed to the standard output.<br><br>The format is a character string which contains three types of objects: plain characters, which are copied to standard output, character escape sequences, which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive argument. In addition to the <a href="/unix/uprintf.htm">standard printf</a> format specifications, <b>printf</b> interprets the following extensions:<br><br><b>%b</b> causes <b>printf</b> to expand backslash escape sequences in the corresponding argument (except that <b>\c</b> terminates output, backslashes in <b>\'</b>, <b>\"</b>, and <b>\?</b> are not removed, and <a href="/jargon/o/octal.htm">octal</a> escapes beginning with <b>\0</b> may contain up to four digits).<br><br><b>%q</b> causes <b>printf</b> to output the corresponding argument in a format that is reused as shell input.<br><br><b>%(</b><i>datefmt</i><b>)T</b> causes <b>printf</b> to output the date-time string resulting from using <i>datefmt</i> as a format string for <a href="/unix/strftime.htm">strftime</a>. The corresponding argument is an integer representing the number of seconds since the <a href="/jargon/e/epoch.htm">epoch</a>. Two special argument values may be used: <b>-1</b> represents the current time, and <b>-2</b> represents the time the shell was invoked.<br><br>Arguments to non-string format specifiers are treated as C constants, except that a leading plus or minus sign is allowed, and if the leading character is a single or double quote, the value is the ASCII value of the following character.<br><br>The format is reused as necessary to consume all the arguments. If the format requires more arguments than are supplied, the extra format specifications behave as if a zero value or null string, as appropriate, had been supplied. The return value is zero on success, non-zero on failure.</td>
</tr>
<tr class="tcw">
<td><b>pushd</b> [<b>-n</b>] [<b>+</b><i>n</i>] [<b>-</b><i>n</i>]<br><br><b>pushd</b> [<b>-n</b>] [<i>dir</i>]</td>
<td>Adds a directory to the top of the directory stack, or rotates the stack, making the new top of the stack the current working directory. With no arguments, exchanges the top two directories and returns 0, unless the directory stack is empty. Arguments, if supplied, have the following meanings:<br><br><b>-n</b>: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.<br><br><b>+</b><i>n</i>: Rotates the stack so that the nth directory (counting from the left of the list shown by <b>dirs</b>, starting with zero) is at the top.<br><br><b>-</b><i>n</i>: Rotates the stack so that the nth directory (counting from the right of the list shown by <b>dirs</b>, starting with zero) is at the top.<br><br><i>dir</i>: Adds <i>dir</i> to the directory stack at the top, making it the new current working directory.<br><br>If the <b>pushd</b> command is successful, a <b>dirs</b> is performed as well. If the first form is used, <b>pushd</b> returns 0 unless the <b>cd</b> to <i>dir</i> fails. With the second form, <b>pushd</b> returns 0 unless the directory stack is empty, a non-existent directory stack element is specified, or the directory change to the specified new current directory fails</td>
</tr>
<tr class="tcw">
<td><b>pwd</b> [<b>-LP</b>]</td>
<td>Print the <a href="/jargon/a/absopath.htm">absolute pathname</a> of the <a href="/jargon/c/currentd.htm">current working directory</a>. The pathname printed contains no <a href="/jargon/s/symblink.htm">symbolic links</a> if the <b>-P</b> option is supplied or the <b>-o</b> physical option to the <b>set</b> builtin command is enabled. If the <b>-L</b> option is used, the pathname printed may contain symbolic links. The return status is 0 unless an error occurs while reading the name of the current directory or an invalid option is supplied.</td>
</tr>
<tr class="tcw">
<td><b>read</b> [<b>-ers</b>] [<b>-a</b> <i>aname</i>] [<b>-d</b> <i>delim</i>] [<b>-i</b> <i>text</i>] [<b>-n</b> <i>nchars</i>] [<b>-N</b> <i>nchars</i>] [<b>-p</b> <i>prompt</i>] [<b>-t</b> <i>timeout</i>] [<b>-u</b> <i>fd</i>] [<i>name</i> ...]</td>
<td>One line is read from the standard input, or from the file descriptor <i>fd</i> supplied as an argument to the <b>-u</b> option, and the first word is assigned to the first name, the second word to the second name, and so on, with leftover words and their intervening separators assigned to the last name. If there are fewer words read from the input stream than names, the remaining names are assigned empty values. The characters in IFS are used to split the line into words. The backslash character (<b>\</b>) may be used to remove any special meaning for the next character read and for line continuation. Options, if supplied, have the following meanings:<br><br><b>-a</b> <i>aname</i>: The words are assigned to sequential indices of the array variable <i>aname</i>, starting at 0. The <i>aname</i> is unset before any new values are assigned. Other name arguments are ignored.<br><br><b>-d</b> <i>delim</i>: The first character of <i>delim</i> is used to terminate the input line, rather than newline.<br><br><b>-e</b>: If the standard input is coming from a terminal, readline (see "<a href="#25A">Readline"</a> above) is used to obtain the line. Readline uses the current (or default, if line editing was not previously active) editing settings.<br><br><b>-i</b> <i>text</i>: If readline is used to read the line, text is placed into the editing buffer before editing begins.<br><br><b>-n</b> <i>nchars</i>: read returns after reading <i>nchars</i> characters rather than waiting for a complete line of input, but honor a delimiter if fewer than <i>nchars</i> characters are read before the delimiter.<br><br><b>-N</b> <i>nchars</i>: read returns after reading exactly <i>nchars</i> characters rather than waiting for a complete line of input, unless EOF is encountered or read times out. Delimiter characters encountered in the input are not treated specially and do not cause read to return until <i>nchars</i> characters are read.<br><br><b>-p</b> <i>prompt</i>: Display prompt on standard error, without a trailing newline, before attempting to read any input. The prompt is displayed only if input is coming from a terminal.<br><br><b>-r</b>: Backslash does not act as an escape character. The backslash is considered to be part of the line. In particular, a backslash-newline pair may not be used as a line continuation.<br><br><b>-s</b>: Silent mode. If input is coming from a terminal, characters are not echoed.<br><br><b>-t</b> <i>timeout</i> Cause read to time out and return failure if a complete line of input is not read within timeout seconds. The timeout may be a decimal number with a fractional portion following the decimal point. This option is only effective if read is reading input from a terminal, pipe, or other special file; it has no effect when reading from regular files. If timeout is 0, read returns success if input is available on the specified file descriptor, failure otherwise. The exit status is greater than 128 if the timeout is exceeded.<br><br><b>-u</b> <i>fd</i>: Read input from file descriptor <i>fd</i>. If no names are supplied, the line read is assigned to the variable REPLY. The return code is zero, unless end-of-file is encountered, read times out (where the return code is greater than 128), or an invalid file descriptor is supplied as the argument to <b>-u</b>.</td>
</tr>
<tr class="tcw">
<td><b>readonly</b> [<b>-aAf</b>] [<b>-p</b>] [<i>name</i>[=<i>word</i>] ...]</td>
<td>The given <i>name</i>s are marked readonly; the values of these names may not be changed by subsequent assignment. If the <b>-f</b> option is supplied, the functions corresponding to the names are so marked. The <b>-a</b> option restricts the variables to indexed arrays; the <b>-A</b> option restricts the variables to associative arrays. If both options are supplied, <b>-A</b> takes precedence. If no <i>name</i> arguments are given, or if the <b>-p</b> option is supplied, a list of all readonly names is printed. The other options may be used to restrict the output to a subset of the set of readonly names. The <b>-p</b> option causes output to be displayed in a format reused as input. If a variable <i>name</i> is followed by =<i>word</i>, the value of the variable is set to <i>word</i>. The return status is 0 unless an invalid option is encountered, one of the <i>name</i>s is not a valid shell variable name, or <b>-f</b> is supplied with a <i>name</i> that is not a function.</td>
</tr>
<tr class="tcw">
<td><b>return</b> [<i>n</i>]</td>
<td>Causes a function to exit with the return value specified by <i>n</i>. If <i>n</i> is omitted, the return status is that of the last command executed in the function body. If used outside a function, but during execution of a script by the <b>.</b> (<b>source</b>) command, it causes the shell to stop executing that script and return either <i>n</i> or the exit status of the last command executed in the script as the exit status of the script. If used outside a function and not during execution of a script by <b>.</b>, the return status is false. Any command associated with the RETURN trap is executed before execution resumes after the function or script.</td>
</tr>
<tr class="tcw">
<td><b>set</b> [<b>--abefhkmnptuvxBCEHPT</b>] [<b>-o</b> <i>option-name</i>] [<i>arg</i> ...]<br><br><b>set</b> [<b>+abefhkmnptuvxBCEHPT</b>] [<b>+o</b> <i>option-name</i>] [<i>arg</i> ...]</td>
<td>Without options, the name and value of each shell variable are displayed in a format that is reused as input for setting or resetting the currently-set variables. Read-only variables cannot be reset. In posix mode, only shell variables are listed. The output is sorted according to the current locale. When options are specified, they set or unset shell attributes. Any arguments remaining after option processing are treated as values for the positional parameters and are assigned, in order, to <b>$1, $2, ... $n</b>. Options, if specified, have the following meanings:<br><br><b>-a</b>: Automatically mark variables and functions that are modified or created for export to the environment of subsequent commands.<br><br><b>-b</b>: Report the status of terminated background jobs immediately, rather than before the next primary prompt. This is effective only when job control is enabled.<br><br><b>-e</b> Exit immediately if a pipeline (which may consist of a single simple command), a subshell command enclosed in parentheses, or one of the commands executed as part of a command list enclosed by braces (see "<a href="#shell-grammar">Shell Grammar</a>" above) exits with a non-zero status. The shell does not exit if the command that fails is part of the command list immediately following a while or until keyword, part of the test following the <b>if</b> or <b>elif</b> reserved words, part of any command executed in a <b>&amp;&amp;</b> or <b>||</b> list except the command following the final <b>&amp;&amp;</b> or <b>||</b>, any command in a pipeline but the last, or if the command's return value is being inverted with <b>!</b>. A trap on ERR, if set, is executed before the shell exits. This option applies to the shell environment and each subshell environment separately (see the section "<a href="#command-exec-environment">Command Execution Environment</a>" above), and may cause subshells to exit before executing all the commands in the subshell.<br><br><b>-f</b>: Disable pathname expansion.<br><br><b>-h</b>: Remember the location of commands as they are looked up for execution. This is enabled by default.<br><br><b>-k</b>: All arguments in the form of assignment statements are placed in the environment for a command, not only those that precede the command name.<br><br><b>-m</b>: Monitor mode. Job control is enabled. This option is on by default for interactive shells on systems that support it (see "<a href="#job-control">Job Control</a>," above). Background processes run in a separate process group and a line containing their exit status is printed upon their completion.<br><br><b>-n</b>: Read commands but do not execute them. This may be used to check a shell script for syntax errors. This is ignored by interactive shells.<br><br><b>-o</b> <i>option-name</i>: The <i>option-name</i> can be one of the following:<br><br><b>allexport</b>: Same as <b>-a</b>.<br><br><b>braceexpand</b>: Same as <b>-B</b>.<br><br><b>emacs</b>: Use an emacs-style command line editing interface. This is enabled by default when the shell is interactive, unless the shell is started with the <b>--noediting</b> option. This also affects the editing interface used for read <b>-e</b>.<br><br><b>errexit</b>: Same as <b>-e</b>.<br><br><b>errtrace</b>: Same as <b>-E</b>.<br><br><b>functrace</b>: Same as <b>-T</b>.<br><br><b>hashall</b>: Same as <b>-h</b>.<br><br><b>histexpand</b>: Same as <b>-H</b>.<br><br><b>history</b>: Enable command history, as described above under HISTORY. This option is on by default in interactive shells.<br><br><b>ignoreeof</b>: The effect is as if the shell command "<b>IGNOREEOF=10</b>" had been executed (see "<a href="#shell-variables">Shell Variables</a>," above).<br><br><b>keyword</b>: Same as <b>-k</b>.<br><br><b>monitor</b>: Same as <b>-m</b>.<br><br><b>noclobber</b>: Same as <b>-C</b>.<br><br><b>noexec</b>: Same as <b>-n</b>.<br><br><b>noglob</b>: Same as <b>-f</b>.<br><br><b>nolog</b>: Currently ignored.<br><br><b>notify</b>: Same as <b>-b</b>.<br><br><b>nounset</b>: Same as <b>-u</b>.<br><br><b>onecmd</b>: Same as <b>-t</b>.<br><br><b>physical</b>: Same as <b>-P</b>.<br><br><b>pipefail</b>: If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully. This option is disabled by default. posix Change the behavior of bash where the default operation differs from the POSIX standard to match the standard (posix mode).<br><br><b>privileged</b>: Same as <b>-p</b>.<br><br><b>verbose</b>: Same as <b>-v</b>.<br><br><b>vi</b>: Use a vi-style command line editing interface. This also affects the editing interface used for read <b>-e</b>.<br><br><b>xtrace</b>: Same as <b>-x</b>.<br><br>If <b>-o</b> is supplied with no <i>option-name</i>, the values of the current options are printed. If <b>+o</b> is supplied with no <i>option-name</i>, a series of <b>set</b> commands to recreate the current option settings is displayed on the standard output.<br><br><b>-p</b>: Turn on privileged mode. In this mode, the <b>$ENV</b> and <b>$BASH_ENV</b> files are not processed, shell functions are not inherited from the environment, and the <b>SHELLOPTS</b>, <b>BASHOPTS</b>, <b>CDPATH</b>, and <b>GLOBIGNORE</b> variables, if they appear in the environment, are ignored. If the shell is started with the effective user (group) id not equal to the real user (group) id, and the <b>-p</b> option is not supplied, these actions are taken and the effective user id is set to the real user id. If the <b>-p</b> option is supplied at startup, the effective user id is not reset. Turning this option off causes the effective user and group ids to be set to the real user and group ids.<br><br><b>-t</b>: Exit after reading and executing one command.<br><br><b>-u</b>: Treat unset variables and parameters other than the special parameters &quot;<b>@</b>&quot; and &quot;<b>*</b>&quot; as an error when performing parameter expansion. If expansion is attempted on an unset variable or parameter, the shell prints an error message, and, if not interactive, exits with a non-zero status.<br><br><b>-v</b>: Print shell input lines as they are read.<br><br><b>-x</b>: After expanding each <a href="#7A1">simple command</a>, <b>for</b> command, <b>case</b> command, <b>select</b> command, or arithmetic <b>for</b> command, display the expanded value of <b>PS4</b>, followed by the command and its expanded arguments or associated word list.<br><br><b>-B</b>: The shell performs brace expansion (see <a href="#11A1">"Brace Expansion"</a> above). This is on by default.<br><br><b>-C</b>: If set, bash does not overwrite an existing file with the <b>&gt;</b>, <b>&gt;&amp;</b>, and <b>&lt;&gt;</b> redirection operators. This may be overridden when creating output files using the redirection operator <b>&gt;|</b> instead of <b>&gt;</b>.<br><br><b>-E</b>: If set, any trap on ERR is inherited by shell functions, command substitutions, and commands executed in a subshell environment. The ERR trap is normally not inherited in such cases.<br><br><b>-H</b>: Enable <b>!</b> style history substitution. This option is on by default when the shell is interactive.<br><br><b>-P</b>: If set, the shell does not follow symbolic links when executing commands such as <b>cd</b> that change the current working directory. It uses the physical directory structure instead. By default, bash follows the logical chain of directories when performing commands which change the current directory.<br><br><b>-T</b> If set, any traps on DEBUG and RETURN are inherited by shell functions, command substitutions, and commands executed in a subshell environment. The DEBUG and RETURN traps are normally not inherited in such cases.<br><br><b>--</b> If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters are set to the <i>args</i>, even if some of them begin with a <b>-</b>.<br><br><b>-</b> Signal the end of options, cause all remaining <i>args</i> to be assigned to the positional parameters. The <b>-x</b> and <b>-v</b> options are turned off. If there are no <i>args</i>, the positional parameters remain unchanged.<br><br>The options are off by default unless otherwise noted. Using <b>+</b> rather than <b>-</b> causes these options to be turned off. The options can also be specified as arguments to an invocation of the shell. The current set of options may be found in <b>$-</b>. The return status is always true unless an invalid option is encountered.</td>
</tr>
<tr class="tcw">
<td><b>shift</b> [<i>n</i>]</td>
<td>The positional parameters from <i>n</i>+1 ... are renamed to <b>$1</b> .... Parameters represented by the numbers <b>$#</b> down to <b>$#</b>-<i>n</i>+1 are unset. The <i>n</i> must be a non-negative number less than or equal to <b>$#</b>. If <i>n</i> is 0, no parameters are changed. If <i>n</i> is not given, it is assumed to be 1. If <i>n</i> is greater than <b>$#</b>, the positional parameters are not changed. The return status is greater than zero if <i>n</i> is greater than <b>$#</b> or less than zero; otherwise 0.</td>
</tr>
<tr class="tcw">
<td><b>shopt</b> [<b>-pqsu</b>] [<b>-o</b>] [<i>optname</i> ...]</td>
<td>Toggle the values of variables controlling optional shell behavior. With no options, or with the <b>-p</b> option, a list of all settable options is displayed, with an indication of whether or not each is set. The <b>-p</b> option causes output to be displayed in a form reused as input. Other options have the following meanings:<br><br><b>-s</b>: Enable (set) each <i>optname</i>.<br><br><b>-u</b>: Disable (unset) each <i>optname</i>.<br><br><b>-q</b>: Suppresses normal output (quiet mode); the return status indicates whether the <i>optname</i> is set or unset. If multiple <i>optname</i> arguments are given with <b>-q</b>, the return status is zero if all <i>optname</i>s are enabled; non-zero otherwise.<br><br><b>-o</b>: Restricts the values of <i>optname</i> to be those defined for the <b>-o</b> option to the set builtin.<br><br>If either <b>-s</b> or <b>-u</b> is used with no <i>optname</i> arguments, the display is limited to those options that are set or unset, respectively. Unless otherwise noted, the shopt options are disabled (unset) by default.<br><br>The return status when listing options is zero if all <i>optname</i>s are enabled, non-zero otherwise. When setting or unsetting options, the return status is zero unless an <i>optname</i> is not a valid shell option.<br><br>The list of <b>shopt</b> options is:<br><br><b>autocd</b>: If set, a command name that is the name of a directory is executed as if it were the argument to the <b>cd</b> command. This option is only used by interactive shells.<br><br><b>cdable_vars</b>: If set, an argument to the <b>cd</b> builtin command that is not a directory is assumed to be the name of a variable whose value is the directory to change to.<br><br><b>cdspell</b>: If set, minor errors in the spelling of a directory component in a <b>cd</b> command are corrected. The errors checked for are transposed characters, a missing character, and one character too many. If a correction is found, the corrected file name is printed, and the command proceeds. This option is only used by interactive shells.<br><br><b>checkhash</b>: If set, bash checks that a command found in the hash table exists before trying to execute it. If a hashed command no longer exists, a normal path search is performed.<br><br><b>checkjobs</b>: If set, bash lists the status of any stopped and running jobs before exiting an interactive shell. If any jobs are running, this causes the exit to be deferred until a second exit is attempted without an intervening command (see the section "<a href="#job-control">Job Control</a>"). The shell always postpones exiting if any jobs are stopped.<br><br><b>checkwinsize</b>: If set, bash checks the window size after each command and, if necessary, updates the values of LINES and COLUMNS.<br><br><b>cmdhist</b>: If set, bash attempts to save all lines of a multiple-line command in the same history entry. This allows easy re-editing of multi-line commands.<br><br><b>compat31</b>: If set, bash changes its behavior to that of version 3.1 with respect to quoted arguments to the <b>[[</b> conditional command's <b>=~</b> operator.<br><br><b>compat32</b>: If set, bash changes its behavior to that of version 3.2 with respect to locale-specific string comparison when using the <b>[[</b> conditional command's <b>&lt;</b> and <b>&gt;</b> operators. Bash versions before bash-4.1 use ASCII collation and <b>strcmp</b>; bash-4.1 and later use the current locale's collation sequence and <b>strcoll</b>.<br><br><b>compat40</b>: If set, bash changes its behavior to that of version 4.0 with respect to locale-specific string comparison when using the <b>[[</b> conditional command's <b>&lt;</b> and <b>&gt;</b> operators (see previous item) and the effect of interrupting a command list.<br><br><b>compat41</b>: If set, bash, when in posix mode, treats a single quote in a double-quoted parameter expansion as a special character. The single quotes must match (an even number) and the characters between the single quotes are considered quoted. This is the behavior of posix mode through version 4.1. The default bash behavior remains as in previous versions.<br><br><b>direxpand</b>: If set, bash replaces directory names with the results of word expansion when performing file name completion. This changes the contents of the readline editing buffer. If not set, bash attempts to preserve what the user typed.<br><br><b>dirspell</b>: If set, bash attempts spelling correction on directory names during word completion if the directory name initially supplied does not exist.<br><br><b>dotglob</b>: If set, bash includes file names beginning with a '<b>.</b>' in the results of pathname expansion.<br><br><b>execfail</b>: If set, a non-interactive shell does not exit if it cannot execute the file specified as an argument to the <b>exec</b> builtin command. An interactive shell does not exit if <b>exec</b> fails.<br><br><b>expand_aliases</b>: If set, aliases are expanded as described above under ALIASES. This option is enabled by default for interactive shells.<br><br><b>extdebug</b>: If set, behavior intended for use by <a href="/jargon/d/debug.htm">debuggers</a> is enabled:<br> <ol> <li>The <b>-F</b> option to the <b>declare</b> builtin displays the source file name and line number corresponding to each function name supplied as an argument.</li> <li>If the command run by the DEBUG trap returns a non-zero value, the next command is skipped and not executed.</li> <li>If the command run by the DEBUG trap returns a value of 2, and the shell is executing in a subroutine (a shell function or a shell script executed by the <b>.</b> or <b>source</b> builtins), a call to <b>return</b> is simulated.</li> <li><b>BASH_ARGC</b> and <b>BASH_ARGV</b> are updated as described in their descriptions above.</li> <li>Function tracing is enabled: command substitution, shell functions, and subshells invoked with <b>( command )</b> inherit the DEBUG and RETURN traps.</li> <li>Error tracing is enabled: command substitution, shell functions, and subshells invoked with <b>( command )</b> inherit the ERR trap.</li> </ol> <b>extglob</b>: If set, the extended pattern matching features described above under <a href="#pathname-expansion">Pathname Expansion</a> are enabled.<br><br><b>extquote</b>: If set, <b>$'string'</b> and <b>$"string"</b> quoting is performed within <b>${parameter}</b> expansions enclosed in double quotes. This option is enabled by default.<br><br><b>failglob</b>: If set, patterns which fail to match file names during pathname expansion result in an expansion error.<br><br><b>force_fignore</b>: If set, the suffixes specified by the FIGNORE shell variable cause words to be ignored when performing word completion even if the ignored words are the only possible completions. See "<a href="#shell-variables">Shell Variables</a>" above for a description of <b>FIGNORE</b>. This option is enabled by default.<br><br><b>globstar</b>: If set, the pattern <b>**</b> used in a pathname expansion context matches all files and zero or more directories and subdirectories. If the pattern is followed by a <b>/</b>, only directories and subdirectories match.<br><br><b>gnu_errfmt</b>: If set, shell error messages are written in the standard GNU error message format.<br><br><b>histappend</b>: If set, the history list is appended to the file named by the value of the <b>HISTFILE</b> variable when the shell exits, rather than overwriting the file.<br><br><b>histreedit</b>: If set, and readline is used, a user is given the opportunity to re-edit a failed history substitution.<br><br><b>histverify</b>: If set, and readline is used, the results of history substitution are not immediately passed to the shell parser. Instead, the resulting line is loaded into the readline editing buffer, allowing further modification.<br><br><b>hostcomplete</b>: If set, and readline is used, bash attempts to perform hostname completion when a word containing a <b>@</b> is being completed (see "<a href="#completion">Completing</a>" under "<a href="#25A">Readline</a>," above). This is enabled by default.<br><br><b>huponexit</b>: If set, bash sends <b>SIGHUP</b> to all jobs when an interactive login shell exits.<br><br><b>interactive_comments</b>: If set, allow a word beginning with <b>#</b> to cause that word and all remaining characters on that line to be ignored in an interactive shell (see "<a href="#comments">Comments</a>" above). This option is enabled by default.<br><br><b>lastpipe</b>: If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background in the current shell environment.<br><br><b>lithist</b>: If set, and the <b>cmdhist</b> option is enabled, multi-line commands are saved to the history with embedded newlines rather than using semicolon separators where possible.<br><br><b>login_shell</b>: The shell sets this option if it's started as a login shell (see "<a href="#invocation">Invocation</a>" above). The value may not be changed.<br><br><b>mailwarn</b>: If set, and a file that bash is checking for mail was accessed since the last time it was checked, the message "The mail in mailfile has been read" is displayed.<br><br><b>no_empty_cmd_completion</b>: If set, and readline is used, bash does not attempt to search the <b>PATH</b> for possible completions when completion is attempted on an empty line.<br><br><b>nocaseglob</b>: If set, bash matches file names in a case-insensitive fashion when performing pathname expansion (see "<a href="#pathname-expansion">Pathname Expansion</a>" above).<br><br><b>nocasematch</b>: If set, bash matches patterns in a case-insensitive fashion when performing matching while executing <b>case</b> or <b>[[</b> conditional commands.<br><br><b>nullglob</b>: If set, bash allows patterns which match no files (see "<a href="#pathname-expansion">Pathname Expansion</a>" above) to expand to a null string, rather than themselves.<br><br><b>progcomp</b>: If set, the programmable completion facilities (see "<a href="#programmable-completion">Programmable Completion</a>" above) are enabled. This option is enabled by default.<br><br><b>promptvars</b>: If set, prompt strings undergo parameter expansion, command substitution, arithmetic expansion, and quote removal after being expanded as described in "<a href="#prompting">Prompting</a>" above. This option is enabled by default.<br><br><b>restricted_shell</b>: The shell sets this option if it's started in restricted mode (see "<a href="#restricted-shell">Restricted Shell</a>" below). The value may not be changed. This is not reset when the startup files are executed, allowing the startup files to discover whether or not a shell is restricted.<br><br><b>shift_verbose</b>: If set, the <b>shift</b> builtin prints an error message when the shift count exceeds the number of positional parameters.<br><br><b>sourcepath</b>: If set, the <b>source</b> (<b>.</b>) builtin uses the value of PATH to find the directory containing the file supplied as an argument. This option is enabled by default.</td>
</tr>
<tr class="tcw">
<td><b>xpg_echo</b></td>
<td>If set, the <b>echo</b> builtin expands backslash-escape sequences by default.</td>
</tr>
<tr class="tcw">
<td><b>suspend</b> [<b>-f</b>]</td>
<td>Suspend the execution of this shell until it receives a <b>SIGCONT</b> signal. A login shell cannot be suspended; the <b>-f</b> option can override this and force the suspension. The return status is 0 unless the shell is a login shell and <b>-f</b> is not supplied, or if job control is not enabled.</td>
</tr>
<tr class="tcw">
<td><b>test</b> <i>expr</i><br><br><b>[</b> <i>expr</i> <b>]</b></td>
<td>Return a status of 0 or 1 depending on the evaluation of the conditional expression <i>expr</i>. Each operator and operand must be a separate argument. Expressions are composed of the primaries described above under "<a href="#conditional-expressions">Conditional Expressions</a>." <b>test</b> does not accept any options, nor does it accept and ignore an argument of <b>--</b> as signifying the end of options.<br><br>Expressions may be combined using the following operators, listed in decreasing order of precedence. The evaluation depends on the number of arguments; see below. Operator precedence is used when there are five or more arguments.<br><br><b>!</b> <i>expr</i>: True if <i>expr</i> is false.<br><br><b>(</b> <i>expr</i> <b>)</b>: Returns the value of <i>expr</i>. This may override the normal precedence of operators.<br><br><i>expr1</i> <b>-a</b> <i>expr2</i>: True if both <i>expr1</i> and <i>expr2</i> are true.<br><br><i>expr1</i> <b>-o</b> <i>expr2</i>: True if either <i>expr1</i> or <i>expr2</i> is true.<br><br><b>test</b> and <b>[</b> evaluate conditional expressions using a set of rules based on the number of arguments.<br><br><b>0 arguments</b>: The expression is false.<br><br><b>1 argument</b>: The expression is true if and only if the argument is not null.<br><br><b>2 arguments</b>: If the first argument is <b>!</b>, the expression is true if and only if the second argument is null. If the first argument is one of the unary conditional operators listed above under <a href="#conditional-expressions">Conditional Expressions</a>, the expression is true if the unary test is true. If the first argument is not a valid unary conditional operator, the expression is false.<br><br><b>3 arguments</b>: The following conditions are applied in the order listed. If the second argument is one of the binary conditional operators listed above under <a href="#conditional-expressions">Conditional Expressions</a>, the result of the expression is the result of the binary test using the first and third arguments as operands. The <b>-a</b> and <b>-o</b> operators are considered binary operators when there are three arguments. If the first argument is <b>!</b>, the value is the negation of the two-argument test using the second and third arguments. If the first argument is exactly ( and the third argument is exactly ), the result is the one-argument test of the second argument. Otherwise, the expression is false.<br><br><b>4 arguments</b>: If the first argument is <b>!</b>, the result is the negation of the three-argument expression composed of the remaining arguments. Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above.<br><br><b>5 or more arguments</b>: The expression is parsed and evaluated according to precedence using the rules listed above.<br><br>When used with <b>test</b> or <b>[</b>, the <b>&lt;</b> and <b>&gt;</b> operators sort lexicographically using ASCII ordering.</td>
</tr>
<tr class="tcw">
<td><b>times</b></td>
<td>Print the accumulated user and system times for the shell and for processes run from the shell. The return status is 0.</td>
</tr>
<tr class="tcw">
<td><b>trap</b> [<b>-lp</b>] [[<i>arg</i>] <i>sigspec</i> ...]</td>
<td>The command <i>arg</i> is to be read and executed when the shell receives signal(s) <i>sigspec</i>. If <i>arg</i> is absent (and there is a single <i>sigspec</i>) or <b>-</b>, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If <i>arg</i> is the null string the signal specified by each <i>sigspec</i> is ignored by the shell and by the commands it invokes. If <i>arg</i> is not present and <b>-p</b> is supplied, then the trap commands associated with each <i>sigspec</i> are displayed. If no arguments are supplied or if only <b>-p</b> is given, trap prints the list of commands associated with each signal. The <b>-l</b> option causes the shell to print a list of signal names and their corresponding numbers. Each <i>sigspec</i> is either a signal name defined in <b>&lt;signal.h&gt;</b>, or a signal number. Signal names are case insensitive and the <b>SIG</b> prefix is optional.<br><br>If a <i>sigspec</i> is EXIT (0) the command <i>arg</i> is executed on exit from the shell. If a <i>sigspec</i> is DEBUG, the command <i>arg</i> is executed before every simple command, for command, case command, select command, every arithmetic for command, and before the first command executes in a shell function (see "<a href="#shell-grammar">Shell Grammar</a>," above). Refer to the description of the <b>extdebug</b> option to the <b>shopt</b> builtin for details of its effect on the DEBUG trap. If a <i>sigspec</i> is RETURN, the command <i>arg</i> is executed each time a shell function or a script executed with the . or source builtins finishes executing.<br><br>If a <i>sigspec</i> is ERR, the command <i>arg</i> is executed whenever a simple command has a non-zero exit status, subject to the following conditions. The ERR trap is not executed if the failed command is part of the command list immediately following a while or until keyword, part of the test in an if statement, part of a command executed in a <b>&amp;&amp;</b> or <b>||</b> list, or if the command's return value is being inverted via <b>!</b>. These are the same conditions obeyed by the errexit option.<br><br>Signals ignored upon entry to the shell cannot be trapped or reset. Trapped signals that are not being ignored are reset to their original values in a subshell or subshell environment when one is created. The return status is false if any <i>sigspec</i> is invalid; otherwise trap returns true.</td>
</tr>
<tr class="tcw">
<td><b>type</b> [<b>-aftpP</b>] <i>name</i> [<i>name</i> ...]</td>
<td>With no options, indicate how each <i>name</i> would be interpreted if used as a command name. If the <b>-t</b> option is used, type prints a string that is one of alias, keyword, function, builtin, or file if <i>name</i> is an alias, shell reserved word, function, builtin, or disk file, respectively. If the <i>name</i> is not found, then nothing is printed, and an exit status of false is returned. If the <b>-p</b> option is used, type either returns the name of the disk file that would be executed if <i>name</i> were specified as a command name, or nothing if "<b>type -t name</b>" would not return file. The <b>-P</b> option forces a <b>PATH</b> search for each <i>name</i>, even if "<b>type -t name</b>" would not return file. If a command is hashed, <b>-p</b> and <b>-P</b> print the hashed value, not necessarily the file that appears first in <b>PATH</b>. If the <b>-a</b> option is used, type prints all the places that contain an executable named <i>name</i>. This includes aliases and functions, if and only if the <b>-p</b> option is not also used. The table of hashed commands is not consulted when using <b>-a</b>. The <b>-f</b> option suppresses shell function look up, as with the command builtin. <b>type</b> returns true if all the arguments are found, false if any are not found.</td>
</tr>
<tr class="tcw">
<td><b>ulimit</b> [<b>-HSTabcdefilmnpqrstuvx</b> [<i>limit</i>]]</td>
<td>Provides control over the resources available to the shell and to processes started by it, on systems that allow such control. The <b>-H</b> and <b>-S</b> options specify that the hard or soft <i>limit</i> is set for the given resource. A hard <i>limit</i> cannot be increased by a non-root user once it is set; a soft <i>limit</i> may be increased up to the value of the hard <i>limit</i>. If neither <b>-H</b> nor <b>-S</b> is specified, both the soft and hard <i>limit</i>s are set. The value of <i>limit</i> can be a number in the unit specified for the resource or one of the special values hard, soft, or unlimited, which stand for the current hard <i>limit</i>, the current soft <i>limit</i>, and no limit, respectively. If <i>limit</i> is omitted, the current value of the soft <i>limit</i> of the resource is printed, unless the <b>-H</b> option is given. When more than one resource is specified, the <i>limit</i> name and unit are printed before the value. Other options are interpreted as follows:<br><br><b>-a</b>: All current <i>limit</i>s are reported.<br><br><b>-b</b>: The maximum socket buffer size.<br><br><b>-c</b>: The maximum size of core files created.<br><br><b>-d</b>: The maximum size of a process's data segment.<br><br><b>-e</b>: The maximum scheduling priority ("<a href="/unix/unice.htm">nice</a>").<br><br><b>-f</b>: The maximum size of files written by the shell and its children.<br><br><b>-i</b>: The maximum number of pending signals.<br><br><b>-l</b>: The maximum size locked into memory.<br><br><b>-m</b>: The maximum resident set size (many systems do not honor this <i>limit</i>).<br><br><b>-n</b>: The maximum number of open file descriptors (most systems do not allow this value to be set).<br><br><b>-p</b>: The pipe size in 512-byte blocks (this may not be set).<br><br><b>-q</b>: The maximum number of bytes in POSIX message queues.<br><br><b>-r</b>: The maximum real-time scheduling priority.<br><br><b>-s</b>: The maximum stack size.<br><br><b>-t</b>: The maximum amount of cpu time in seconds.<br><br><b>-u</b>: The maximum number of processes available to a single user.<br><br><b>-v</b>: The maximum amount of virtual memory available to the shell and, on some systems, to its children.<br><br><b>-x</b>: The maximum number of file locks.<br><br><b>-T</b>: The maximum number of threads.<br><br>If <i>limit</i> is given, it is the new value of the specified resource (the <b>-a</b> option is display only). If no option is given, then <b>-f</b> is assumed. Values are in 1024-byte increments, except for <b>-t</b>, which is in seconds, <b>-p</b>, which is in units of 512-byte blocks, and <b>-T</b>, <b>-b</b>, <b>-n</b>, and <b>-u</b>, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new <i>limit</i>.</td>
</tr>
<tr class="tcw">
<td><b>umask</b> [<b>-p</b>] [<b>-S</b>] [<i>mode</i>]</td>
<td>The <a href="/unix/uumask.htm">user file-creation mask</a> is set to <i>mode</i>. If mode begins with a digit, it is interpreted as an octal number; otherwise it is interpreted as a symbolic mode mask similar to that accepted by <a href="/unix/uchmod.htm">chmod</a>. If mode is omitted, the current value of the mask is printed. The <b>-S</b> option causes the mask to be printed in symbolic form; the default output is an octal number. If the <b>-p</b> option is supplied, and mode is omitted, the output is in a form reused as input. The return status is 0 if the mode was successfully changed or if no mode argument was supplied, and false otherwise.</td>
</tr>
<tr class="tcw">
<td><b>unalias</b> [<b>-a</b>] [<i>name</i> ...]</td>
<td>Remove each <i>name</i> from the list of defined aliases. If <b>-a</b> is supplied, all alias definitions are removed. The return value is true unless a supplied <i>name</i> is not a defined alias.</td>
</tr>
<tr class="tcw">
<td><b>unset</b> [<b>-fv</b>] [<i>name</i> ...]</td>
<td>For each <i>name</i>, remove the corresponding variable or function. If no options are supplied, or the <b>-v</b> option is given, each <i>name</i> refers to a shell variable. Readonly variables may not be unset. If <b>-f</b> is specified, each <i>name</i> refers to a shell function, and the function definition is removed. Each unset variable or function is removed from the environment passed to subsequent commands. If any of <b>COMP_WORDBREAKS</b>, <b>RANDOM</b>, <b>SECONDS</b>, <b>LINENO</b>, <b>HISTCMD</b>, <b>FUNCNAME</b>, <b>GROUPS</b>, or <b>DIRSTACK</b> are unset, they lose their special properties, even if they are subsequently reset. The exit status is true unless a <i>name</i> is readonly.</td>
</tr>
<tr class="tcw">
<td><b>wait</b> [<i>n</i> ...]</td>
<td>Wait for each specified process and return its termination status. Each <i>n</i> may be a process ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited for termination. If <i>n</i> is not given, all currently active child processes are waited for termination, and the return status is zero. If <i>n</i> specifies a non-existent process or job, the return status is 127. Otherwise, the return status is the exit status of the last process or job waited for termination.</td>
</tr>
</table>
<h2 id="restricted-shell">Restricted shell</h2>
<p class="tab">If bash is started with the name <b>rbash</b>, or the <b>-r</b> option is supplied at invocation, the shell becomes <i>restricted</i>. A <i>restricted shell</i> is used to set up an environment more controlled than the standard shell. It behaves identically to bash with the exception that the following are disallowed or not performed:</p>
<ul>
<li>changing directories with <a href="/unix/ucd.htm">cd</a></li>
<li><a href="/unix/uset.htm">setting</a> or unsetting the values of <b>SHELL</b>, <b>PATH</b>, <b>ENV</b>, or <b>BASH_ENV</b></li>
<li>specifying command names containing <b>/</b></li>
<li>specifying a file name containing a <b>/</b> as an argument to the <b>.</b> builtin command</li>
<li>specifying a file name containing a slash as an argument to the <b>-p</b> option to the hash builtin command</li>
<li>importing function definitions from the shell environment at startup</li>
<li>parsing the value of <b>SHELLOPTS</b> from the shell environment at startup</li>
<li>redirecting output using the <b>&gt;</b>, <b>&gt;|</b>, <b>&lt;&gt;</b>, <b>&gt;&amp;</b>, <b>&amp;&gt;</b>, and <b>&gt;&gt;</b> redirection operators</li>
<li>using the exec builtin command to replace the shell with another command</li>
<li>adding or deleting builtin commands with the <b>-f</b> and <b>-d</b> options to the <b>enable</b> builtin command</li>
<li>using the <b>enable</b> <i>builtin</i> command to enable disabled shell builtins</li>
<li>specifying the <b>-p</b> option to the <b>command</b> builtin command</li>
<li>turning off restricted mode with <b>set +r</b> or <b>set +o</b> restricted.</li>
</ul>
<p class="tab">These restrictions are enforced after any startup files are read.</p>
<p class="tab">When a command that is a shell script is executed (see the section "<a href="#18A">Command Execution</a>" above), rbash turns off any restrictions in the shell spawned to execute the script.</p>
<h2 id="files">Files</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>/bin/bash</b></td>
<td>The bash executable.</td>
</tr>
<tr class="tcw">
<td><b>/etc/profile</b></td>
<td>The systemwide initialization file, executed for login shells.</td>
</tr>
<tr class="tcw">
<td><b>/etc/bash.bashrc</b></td>
<td>The systemwide per-interactive-shell startup file.</td>
</tr>
<tr class="tcw">
<td><b>/etc/bash.bash.logout</b></td>
<td>The systemwide login shell cleanup file, executed when a login shell exits.</td>
</tr>
<tr class="tcw">
<td><b>~/.bash_profile</b></td>
<td>The personal initialization file, executed for login shells.</td>
</tr>
<tr class="tcw">
<td><b>~/.bashrc</b></td>
<td>The individual per-interactive-shell startup file.</td>
</tr>
<tr class="tcw">
<td><b>~/.bash_logout</b></td>
<td>The individual login shell cleanup file, executed when a login shell exits.</td>
</tr>
<tr class="tcw">
<td><b>~/.inputrc</b></td>
<td>Individual readline initialization file.</td>
</tr>
</table>
<h2 id="examples">Examples</h2>
<pre class="tcy tab">bash</pre>
<p class="tab">Launches the bash command interpreter. The remainder of the examples assume you are at a bash prompt.</p>
<pre class="tcy tab">myvar="This is the value of my variable."</pre>
<p class="tab">Sets the value of variable <b>$myvar</b> to "This is the value of my variable."</p>
<pre class="tcy tab">echo $myvar</pre>
<p class="tab">Prints the value of <b>$myvar</b>.</p>
<pre class="tcy tab">echo text$myvar</pre>
<p class="tab">Prints "<b>textThis is the value of my variable.</b>"</p>
<pre class="tcy tab">echo text1${myvar}text2</pre>
<p class="tab">Prints "<b>text1This is the value of my variable.text2</b>".</p>
<pre class="tcy tab">export MYVAR="This is my variable."</pre>
<p class="tab">Environment variable <b>MYVAR</b> to "<b>This is my variable.</b>"</p>
<pre class="tcy tab">echo $MYVAR</pre>
<p class="tab">Prints the value of the environment variable <b>MYVAR</b>.</p>
<pre class="tcy tab">export MYVAR=abracadabra;echo ${MYVAR#*ab}${MYVAR##*ab}</pre>
<p class="tab">This one-line command prints "<b>racadabrara</b>". This command does a few things:</p>
<ol>
<li>Sets the value of the environment variable <b>MYVAR</b> to "<b>abracadabra</b>";</li>
<li>Takes the value of <b>MYVAR</b> and removes the <i>shortest possible</i> ("<b>#</b>") substring that matches the pattern <b>*ab</b>, which in this case is "ab", which results in the string "<b>racadabra</b>";</li>
<li>Takes the value of <b>MYVAR</b> and removes the <i>longest possible</i> ("<b>##</b>") substring that matches the pattern <b>*ab</b>, which in this case is "abracadab", which results in the strings "<b>ra</b>";</li>
<li>Prints the two results together, resulting in the concatenated string "<b>racadabrara</b>".</li>
</ol>
<pre class="tcy tab">myvar="12";echo $(( $myvar + 3 ))</pre>
<p class="tab">Prints "<b>15</b>".</p>
<pre class="tcy tab">myvar=0
while [ $myvar -ne 10 ]
do
 echo $myvar
 myvar=$(( $myvar + 1 ))
done</pre>
<p class="tab">Prints the following:</p>
<pre class="tab"><b>0 1 2 3 4 5 6 7 8 9</b></pre>
<h2 id="relatedcommands">Related commands</h2>
<p class="tab"><a href="/unix/ucsh.htm"><b>csh</b></a> &mdash; The C shell command interpreter.<br><a href="/unix/uksh.htm"><b>ksh</b></a> &mdash; The Korn shell command interpreter.<br><a href="/unix/ush.htm"><b>sh</b></a> &mdash; The Bourne shell command interpreter.</p>
<div class="relatedpages" id="relatedpages">
<h2 id="related">Related information</h2>
<ul>
<li><a href="/issues/ch001645.htm">How to customize the command prompt in bash.</a></li>
</ul>
</div>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a82b5d8bf84ec',m:'yeF3KynTh3GElvloWgZAEq_zH7ZLBsgklR6Ehn.dpBY-1661495340-0-AYZYxErq4hD6xu58iVsSfADaGYrKxAyXRRU264BfD/vQp2c63Jpjr/ef7UGE3v0z7tzH7/94YPdkAKIPhGz9DZS+VF3sqQp4e2B84M5PK7Ce0RrsSDr8Dg+mYLYZSZxn3g==',s:[0xb75ccf2875,0x25d88f0217],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>