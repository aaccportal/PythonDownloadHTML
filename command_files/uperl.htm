<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3999293766533555" data-ad-slot="7994873325" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Linux perl command overview</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-11-06">11/06/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/perl.gif" width="300" height="300" alt="perl command" class="floatRight">
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#about">About perl</a></li>
<li><a href="#desc">Description</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#Running-Perl">Running Perl</a></li>
<li><a href="#locations">Locations of Perl</a></li>
<li><a href="#Options">Options</a></li>
<li><a href="#Environment">Environment</a></li>
<li><a href="#related">Related commands</a></li>
<li><a href="/unix/perlsyn.htm">Syntax</a></li>
<li><a href="/unix/perldata.htm">Perl Data Types</a></li>
<li><a href="/unix/perlsub.htm">Perl Subroutines</a></li>
<li><a href="/unix/perlop.htm">Perl Operators</a></li>
<li><a href="/unix/perlfunc.htm">Perl Functions</a></li>
<li><a href="/unix/perlprag.htm">Perl Pragmas</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="about">About perl</h2>
<p class="intro tab">The <b>perl</b> command is the <a href="/jargon/i/interpre.htm">interpreter</a> of the <a href="/jargon/p/perl.htm">Perl</a> <a href="/jargon/p/programming-language.htm">programming language</a>.</p>
<h2 id="desc">Description</h2>
<p class="tab">&quot;Perl&quot; officially stands for &quot;Practical Extraction and Report Language.&quot; It was originally a language optimized for scanning arbitrary <a href="/jargon/t/textfile.htm">text files</a>, extracting information from those text files, and printing reports based on that information. It quickly became a good language for many system management tasks. Over the years, Perl has grown into a general-purpose programming language. It's widely used for everything from quick "one-liners" to full-scale <a href="/jargon/s/softdeve.htm">application development</a>.</p>
<p class="tab">The language is intended to be practical (easy to use, efficient, complete) rather than beautiful (tiny, elegant, minimal). It combines some of the best features of <a href="/unix/used.htm"><b>sed</b></a>, <a href="/unix/uawk.htm"><b>awk</b></a>, and <a href="/unix/ush.htm"><b>sh</b></a>, making it familiar and easy to use for <a href="/jargon/u/unix.htm">Unix</a> users to whip up quick solutions to annoying problems. Its general-purpose programming facilities support procedural, functional, and <a href="/jargon/o/objeorie.htm">object-oriented</a> programming paradigms, making Perl a comfortable language for major projects.</p>
<p class="tab">Perl's roots in text processing haven't been forgotten over the years. It still boasts some of the most powerful <a href="/jargon/r/regex.htm">regular expressions</a> to be found anywhere, and its support for <a href="/jargon/u/unicode.htm">Unicode</a> text is world-class. It handles all kinds of structured text, too, through an extensive collection of extensions. Those <a href="/jargon/l/library.htm">libraries</a>, collected in the <a href="/jargon/c/cpan.htm">CPAN</a>, provide ready-made solutions to an astounding array of problems.</p>
<p class="tab">The Perl motto is "There's more than one way to do it."</p>
<h2 id="Running-Perl">Running Perl</h2>
<p class="tab">The normal way to run a Perl program is by making it directly <a href="/jargon/e/execfile.htm">executable</a>, or else by passing the name of the <a href="/jargon/s/source.htm">source</a> file as an <a href="/jargon/a/argument.htm">argument</a> on the <a href="/jargon/c/commandi.htm">command line</a>. (An interactive Perl environment is also possible.) Upon startup, Perl looks for your program in one of the following places:</p>
<ol>
<li>Specified line by line via <b>-e</b> or <b>-E</b> switches on the command line.</li>
<li>Contained in the file specified by the first file name on the command line. (Note that systems supporting the <b>#!</b> notation, such as <a href="/unix/ubash.htm">bash</a>, invoke interpreters this way.)</li>
<li>Passed in implicitly via <a href="/jargon/s/stdin.htm">standard input</a>. This works only if there are no file name arguments--to pass arguments to a STDIN-read program you must explicitly specify a "<b>-</b>" for the program name.</li>
</ol>
<p class="tab">With methods 2 and 3, Perl starts parsing the input file from the beginning, unless you've specified a <b>-x</b> switch, in which case it scans for the first line starting with <b>#!</b> and containing the word "<b>perl</b>", and starts there instead. This is useful for running a program embedded in a larger message. (In this case you would indicate the end of the program using the <b>__END__</b> token.)</p>
<p class="tab">The <b>#!</b> line is always examined for switches as the line is being <a href="/jargon/p/parse.htm">parsed</a>. Thus, if you're on a machine that allows only one argument with the <b>#!</b> line, or worse, doesn't even recognize the <b>#!</b> line, you still can get consistent switch behaviour regardless of how Perl was invoked, even if <b>-x</b> was used to find the beginning of the program.</p>
<p class="tab">Because historically some operating systems silently chopped off <a href="/jargon/k/kernel.htm">kernel</a> interpretation of the <b>#!</b> line after 32 <a href="/jargon/c/charact.htm">characters</a>, some switches may be passed in on the command line, and some may not; you could even get a "<b>-</b>" without its letter, if you're not careful. You probably want to make sure that all your switches fall either before or after that 32-character boundary. Most switches don't actually care if they're processed redundantly, but getting a "<b>-</b>" instead of a complete switch could cause Perl to try to execute standard input instead of your program. And a partial <b>-I</b> switch could also cause odd results.</p>
<p class="tab">Some switches do care if they are processed twice, for instance combinations of <b>-l</b> and <b>-0</b>. Either put all the switches after the 32-character boundary (if applicable), or replace the use of <b>-0</b><i>digits</i> by <b>BEGIN{ $/ = "\0</b><i>digits</i><b>"; }</b>.</p>
<p class="tab">Parsing of the <b>#!</b> switches starts wherever "<b>perl</b>" is mentioned in the line. The sequences "<b>-*</b>" and "<b>-</b> " are specifically ignored.</p>
<p class="tab">If the <b>#!</b> line does not contain the word "<b>perl</b>" nor the word "<b>indir</b>" the program named after the <b>#!</b> is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do <b>#!</b>, because they can tell a program that their <b>SHELL</b> <a href="/jargon/e/envivari.htm">environment variable</a> is <b>/usr/bin/perl</b>, and Perl then dispatches the program to the correct interpreter for them.</p>
<p class="tab">After locating your program, Perl compiles the entire program to an internal form. If there are any compilation errors, execution of the program is not attempted. (This is unlike the typical shell <a href="/jargon/s/script.htm">script</a>, which might run part-way through before finding a syntax error.)</p>
<p class="tab">If the program is syntactically correct, it is executed. If the program runs off the end without hitting an <a href="/unix/perlfunc.htm#func:exit"><b>exit()</b></a> or <a href="/unix/perlfunc.htm#func:die"><b>die()</b></a> operator, an implicit <b>exit(0)</b> is provided to indicate successful completion.</p>
<h2 id="locations">Location of Perl</h2>
<p class="tab">Perl can be located wherever you choose, but it's best for both <b>/usr/bin/perl</b> and <b>/usr/local/bin/perl</b> to be <a href="/jargon/s/symblink.htm">symlinks</a> to the actual <a href="/jargon/b/binary.htm">binary</a>. If that can't be done, system administrators are strongly encouraged to put symlinks to <b>perl</b> and its accompanying <a href="/jargon/u/utility.htm">utilities</a> into a directory often found along a user's <b>PATH</b>, or in some other obvious and convenient place.</p>
<p class="tab">In this documentation, <b>#!/usr/bin/perl</b> on the first line of the program stands in for whatever method works on your system. You are advised to use a specific path if you care about a specific version:</p>
<pre class="tab tcy">#!/usr/local/bin/perl5.14</pre>
<p class="tab">or if you only want to be running (at least) a certain version, place a statement like this at the top of your program:</p>
<pre class="tab tcy">use 5.014;</pre>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">perl [ -sTtuUWX ] [ -hv ] [ -V[:<i>configvar</i>] ] [ -cw ] [ -d[t][:<i>debugger</i>] ] 
     [ -D[<i>number</i>/<i>list</i>] ] [ -pna ] [ -F<i>pattern</i> ] [ -l[<i>octal</i>] ] 
     [ -0[<i>octal</i>/<i>hexadecimal</i>] ] [ -I<i>dir</i> ] [ -m[-]<i>module</i> ] [ -M[-]'<i>module</i>...' ] 
     [ -f ] [ -C [<i>number</i>/<i>list</i>] ] [ -S ] [ -x[<i>dir</i>] ] [ -i[<i>extension</i>] ] 
     [ [-e|-E] '<i>command</i>' ] [ -- ] [ <i>programfile</i> ] [ <i>argument</i> ]...</pre>
<h3 class="tab" id="Options">Options</h3>
<p class="tab"><b>perl</b> accepts the following command-line arguments:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><pre><b>-0</b>[<i>octal</i>/<i>hexadecimal</i>]</pre></td>
<td>specifies the input record separator (<b>$/</b>) as an <a href="/jargon/o/octal.htm">octal</a> or <a href="/jargon/h/hex.htm">hexadecimal</a> number. If there are no <a href="/jargon/d/digit.htm">digits</a>, the <a href="/jargon/n/null.htm">null</a> character is the separator. Other switches may precede or follow the digits. For example, if you have a version of <a href="/unix/ufind.htm"><b>find</b></a> which can print file names terminated by the null character, you can say this:<br><br> <pre class="tcy">find . -name '*.orig' -print0 | perl -n0e unlink</pre> The special value <b>00</b> causes Perl to "slurp" files in paragraph mode. Any value <b>0400</b> or above causes Perl to slurp files whole, but by convention the value <b>0777</b> is the one normally used for this purpose.<br><br> You can also specify the separator character using hexadecimal notation: <b>-0x</b><i>HHH</i>..., where the <i>H</i> are valid hexadecimal digits. Unlike the octal form, this one may be used to specify any Unicode character, even those beyond <b>0xFF</b>. So if you really want a record separator of <b>0777</b>, specify it as <b>-0x1FF</b>. (This means that you cannot use the <b>-x</b> option with a directory name that consists of hexadecimal digits, or else Perl thinks you have specified a hex number to <b>-0</b>.)</td>
</tr>
<tr class="tcw">
<td><pre><b>-a</b></pre></td>
<td>turns on autosplit mode when used with a <b>-n</b> or <b>-p</b>. An implicit split command to the <b>@F</b> <a href="/jargon/a/array.htm">array</a> is done as the first thing inside the implicit <b>while</b> <a href="/jargon/l/loop.htm">loop</a> produced by the <b>-n</b> or <b>-p</b>.<br><br> <pre class="tcy">perl -ane 'print pop(@F), "\n";'</pre> is equivalent to<br><br> <pre class="tcy">while (&lt;&gt;) { @F = split(' '); print pop(@F), "\n";}</pre> An alternate <a href="/jargon/d/delimite.htm">delimiter</a> may be specified using <b>-F</b>. </td>
</tr>
<tr class="tcw">
<td><pre><b>-C</b> [<i>number</i>/<i>list</i>]</pre></td>
<td> The <b>-C</b> flag controls some of the Perl <a href="/jargon/u/unicode.htm">Unicode</a> features.<br><br> As of 5.8.1, the <b>-C</b> can be followed either by a number or a list of option letters. The letters, their numeric values, and effects are as follows; listing the letters is equal to summing the numbers.<br><br>
<table class="mtable3">
<tr class="tcy">
<th><b>letter</b></th>
<th style="width:120px"><b>number</b></th>
<th><b>description</b></th>
</tr>
<tr class="tcy">
<td><b>I</b></td>
<td><b>1</b></td>
<td>STDIN is assumed to be in UTF-8</td>
</tr>
<tr class="tcy">
<td><b>O</b></td>
<td><b>2</b></td>
<td>STDOUT is in UTF-8</td>
</tr>
<tr class="tcy">
<td><b>E</b></td>
<td><b>4</b></td>
<td>STDERR is in UTF-8</td>
</tr>
<tr class="tcy">
<td><b>S</b></td>
<td><b>7</b></td>
<td><b>I</b> + <b>O</b> + <b>E</b></td>
</tr>
<tr class="tcy">
<td><b>i</b></td>
<td><b>8</b></td>
<td>UTF-8 is the default PerlIO layer for input streams</td>
</tr>
<tr class="tcy">
<td><b>o</b></td>
<td><b>16</b></td>
<td>UTF-8 is the default PerlIO layer for output streams</td>
</tr>
<tr class="tcy">
<td><b>D</b></td>
<td><b>24</b></td>
<td><b>i</b> + <b>o</b></td>
</tr>
<tr class="tcy">
<td><b>A</b></td>
<td><b>32</b></td>
<td>the <b>@ARGV</b> elements are expected to be strings encoded in UTF-8</td>
</tr>
<tr class="tcy">
<td><b>L</b></td>
<td><b>64</b></td>
<td>normally the "<b>IOEioA</b>" are unconditional, the <b>L</b> makes them conditional on the locale environment variables (the <b>LC_ALL</b>, <b>LC_TYPE</b>, and <b>LANG</b>, in the order of decreasing precedence) -- if the variables indicate UTF-8, then the selected "<b>IOEioA</b>" are in effect</td>
</tr>
<tr class="tcy">
<td><b>a</b></td>
<td><b>256</b></td>
<td>Set <b>${^UTF8CACHE}</b> to <b>-1</b>, to run the UTF-8 caching code in <a href="/jargon/d/debug.htm">debugging</a> mode.</td>
</tr>
</table>
For example, <b>-COE</b> and <b>-C6</b> both turn on UTF-8-ness on both STDOUT and STDERR. Repeating letters is redundant, not cumulative nor toggling.<br>
<br>
The <b>io</b> options mean that any subsequent <a href="/unix/perlfunc.htm#func:open"><b>open()</b></a> (or similar <a href="/jargon/i/io.htm">I/O</a> operations) in the current file scope has the <b>:utf8</b> PerlIO layer implicitly applied to them, in other words, UTF-8 is expected from any input stream, and UTF-8 is produced to any output stream. This is only the default, with explicit layers in <b>open()</b> and with <a href="/unix/perlfunc.htm#func:binmode"><b>binmode()</b></a> one can manipulate streams as usual.<br>
<br>
<b>-C</b> on its own (not followed by any number or option list), or the empty string <b>""</b> for the <b>PERL_UNICODE</b> environment variable, has the same effect as <b>-CSDL</b>. In other words, the standard I/O handles and the default <b>open()</b> layer are UTF-8-fied but only if the locale environment variables indicate a UTF-8 locale. This behaviour follows the implicit (and problematic) UTF-8 behaviour of Perl 5.8.0. (See UTF-8 no longer default under UTF-8 locales in perl581delta.)<br>
<br>
You can use <b>-C0</b> (or "<b>0</b>" for <b>PERL_UNICODE</b> ) to explicitly disable all the above Unicode features.<br>
<br>
The read-only magic variable <b>${^UNICODE}</b> reflects the numeric value of this setting. This variable is set during Perl startup and is after that read-only. If you want runtime effects, use the three-arg <b>open()</b>, the two-arg <b>binmode()</b>, and the <b>open</b> pragma.<br>
<br>
(In Perls earlier than 5.8.1 the <b>-C</b> switch was a <a href="/jargon/w/windows.htm">Win32</a>-only switch that enabled the use of Unicode-aware "wide system call" Win32 APIs. This feature was practically unused, however, and the command line switch was therefore "recycled".)<br>
<br>
Note: Since perl 5.10.1, if the <b>-C</b> option is used on the <b>#!</b> line, it must be specified on the command line as well since the standard streams are already set up at this point in the execution of the perl interpreter. You can also use <b>binmode()</b> to set the encoding of an I/O stream.</td>
</tr>
<tr class="tcw">
<td><pre><b>-c</b></pre></td>
<td>causes Perl to check the syntax of the program and then exit without executing it. Actually, it executes and <b>BEGIN</b>, <b>UNITCHECK</b>, or <b>CHECK</b> blocks and any use statements: these are considered as occurring outside the execution of your program. <b>INIT</b> and <b>END</b> blocks, however, is skipped.</td>
</tr>
<tr class="tcw">
<td><pre><b>-d</b>, <b>-dt</b></pre></td>
<td>runs the program under the Perl debugger (<b>perldebug</b>). If <b>t</b> is specified, it indicates to the debugger that <a href="/jargon/t/thread.htm">threads</a> is used in the code being debugged.</td>
</tr>
<tr class="tcw">
<td><pre><b>-d:MOD</b>[<b>=</b><i>bar</i>,<i>baz</i>]<b>-dt:MOD</b>[<b>=</b><i>bar</i>,<i>baz</i>]</pre></td>
<td>runs the program under the control of a debugging, profiling, or tracing module installed as <b>Devel::MOD</b>. E.g., <b>-d:DProf</b> executes the program using the <b>Devel::DProf</b> profiler. As with the <b>-M</b> flag, options may be passed to the <b>Devel::MOD</b> package where they are received and interpreted by the <b>Devel::MOD::import</b> routine. Again, like <b>-M</b>, use <b>--d:-MOD</b> to call <b>Devel::MOD::unimport</b> instead of <b>import</b>. The comma-separated list of options must follow a "<b>=</b>" character. If <b>t</b> is specified, it indicates to the debugger that threads used in the code being debugged.</td>
</tr>
<tr class="tcw">
<td><pre><b>-D</b><i>letters</i><b>-D</b><i>number</i></pre></td>
<td>sets debugging flags. To watch how it executes your program, use <b>-Dtls</b>. (This works only if debugging is compiled into your Perl.) Another nice value is <b>-Dx</b>, which lists your compiled syntax tree. And <b>-Dr</b> displays compiled regular expressions; the format of the output is explained in <b>perldebguts</b>.<br><br> As an alternative, specify a number instead of list of letters (e.g., <b>-D14</b> is equivalent to <b>-Dtls</b>):<br><br>
<table class="mtable3">
<tr class="tcy">
<th style="width:120px"><b>number</b></th>
<th><b>letter</b></th>
<th><b>description</b></th>
</tr>
<tr class="tcy">
<td><b>1</b></td>
<td><b>p</b></td>
<td>Tokenizing and parsing (with <b>v</b>, displays parse <a href="/jargon/s/stack.htm">stack</a>)</td>
</tr>
<tr class="tcy">
<td><b>2</b></td>
<td><b>s</b></td>
<td>Stack snapshots (with <b>v</b>, displays all stacks)</td>
</tr>
<tr class="tcy">
<td><b>4</b></td>
<td><b>l</b></td>
<td>Context (loop) stack processing</td>
</tr>
<tr class="tcy">
<td><b>8</b></td>
<td><b>t</b></td>
<td>Trace execution</td>
</tr>
<tr class="tcy">
<td><b>16</b></td>
<td><b>o</b></td>
<td>Method and overloading resolution</td>
</tr>
<tr class="tcy">
<td><b>32</b></td>
<td><b>c</b></td>
<td>String/numeric conversions</td>
</tr>
<tr class="tcy">
<td><b>64</b></td>
<td><b>P</b></td>
 <td>Print profiling info, source file input state</td>
</tr>
<tr class="tcy">
<td><b>128</b></td>
<td><b>m</b></td>
<td>Memory and SV allocation</td>
</tr>
<tr class="tcy">
<td><b>256</b></td>
<td><b>f</b></td>
<td>Format processing</td>
</tr>
<tr class="tcy">
<td><b>512</b></td>
<td><b>r</b></td>
<td>Regular expression parsing and execution</td>
</tr>
<tr class="tcy">
<td><b>1024</b></td>
<td><b>x</b></td>
<td>Syntax tree dump</td>
</tr>
<tr class="tcy">
<td><b>2048</b></td>
<td><b>u</b></td>
<td>Tainting checks</td>
</tr>
<tr class="tcy">
<td><b>4096</b></td>
<td><b>U</b></td>
<td>Unofficial, User hacking (reserved for private, unreleased use)</td>
</tr>
<tr class="tcy">
<td><b>8192</b></td>
<td><b>H</b></td>
<td>Hash dump -- usurps <a href="/unix/perlfunc.htm#func:values"><b>values()</b></a></td>
</tr>
<tr class="tcy">
<td><b>16384</b></td>
<td><b>X</b></td>
<td>Scratchpad allocation</td>
</tr>
<tr class="tcy">
<td><b>32768</b></td>
<td><b>D</b></td>
<td>Cleaning up</td>
</tr>
<tr class="tcy">
<td><b>65536</b></td>
<td><b>S</b></td>
<td>Op slab allocation</td>
</tr>
<tr class="tcy">
<td><b>131072</b></td>
<td><b>T</b></td>
<td>Tokenizing</td>
</tr>
<tr class="tcy">
<td><b>262144</b></td>
<td><b>R</b></td>
<td>Include reference counts of dumped variables (eg when using <b>-Ds</b>)</td>
</tr>
<tr class="tcy">
<td><b>524288</b></td>
<td><b>J</b></td>
<td>show <b>s,t,P-debug</b> (don't Jump over) on opcodes within package DB</td>
</tr>
<tr class="tcy">
<td><b>1048576</b></td>
<td><b>v</b></td>
<td><a href="/jargon/v/verbose.htm">Verbose</a>: use in conjunction with other flags</td>
</tr>
<tr class="tcy">
<td><b>2097152</b></td>
<td><b>C</b></td>
<td>Copy On Write</td>
</tr>
<tr class="tcy">
<td><b>4194304</b></td>
<td><b>A</b></td>
<td>Consistency checks on internal structures</td>
</tr>
<tr class="tcy">
<td><b>8388608</b></td>
<td><b>q</b></td>
<td>quiet - currently only suppresses the "<b>EXECUTING</b>" message</td>
</tr>
<tr class="tcy">
<td><b>16777216</b></td>
<td><b>M</b></td>
<td>trace smart match resolution</td>
</tr>
<tr class="tcy">
<td><b>33554432</b></td>
<td><b>B</b></td>
<td>dump subroutine definitions, including special blocks like <b>BEGIN</b></td>
</tr>
</table>
All these flags require <b>-DDEBUGGING</b> when you compile the Perl executable (but see <b>:opd</b> in <b>Devel::Peek</b> or '<b>debug</b>' mode in re which may change this). See the <b>INSTALL</b> file in the Perl source distribution for how to do this. This flag is automatically set if you include <b>-g</b> option when Configure asks you about optimizer/debugger flags.<br>
<br>
If you're only trying to get a print out of each line of Perl code as it executes, the way that <b>sh -x</b> provides for shell scripts, you can't use Perl's <b>-D</b> switch. Instead do this:<br>
<br>
<pre class="tcy"># If you have "env" utility
env PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program
# Bourne shell syntax
PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program
# csh syntax
(setenv PERLDB_OPTS "NonStop=1 AutoTrace=1 frame=2"; perl -dS program)
</pre>
</td>
</tr>
<tr class="tcw">
<td><pre><b>-e</b> <i>commandline</i></pre></td>
<td>may be used to enter one line of program. If <b>-e</b> is given, Perl won't look for a file name in the argument list. Multiple <b>-e</b> commands may be given to build up a multi-line script. Make sure to use semicolons where you would in a normal program.</td>
</tr>
<tr class="tcw">
<td><pre><b>-E</b> <i>commandline</i></pre></td>
<td>behaves like <b>-e</b>, except that it implicitly enables all optional features (in the main compilation unit).</td>
</tr>
<tr class="tcw">
<td><pre><b>-f</b></pre></td>
<td>Disable executing <b>$Config{sitelib}/sitecustomize.pl</b> at startup.<br><br> Perl can be built so that it by default tries to execute <b>$Config{sitelib}/sitecustomize.pl</b> at startup (in a <b>BEGIN</b> block). This is a hook that allows the sysadmin to customize how Perl behaves. It can for instance be used to add entries to the <b>@INC</b> array to make Perl find modules in non-standard locations.<br><br> Perl actually inserts the following code:<br><br> <pre class="tcy">BEGIN { do { local $!; -f "$Config{sitelib}/sitecustomize.pl"; } &amp;&amp; do "$Config{sitelib}/sitecustomize.pl";}</pre> Since it is an actual <a href="/unix/perlfunc.htm#func:do"><b>do</b></a> (not a <a href="/unix/perlfunc.htm#func:require"><b>require</b></a>), <b>sitecustomize.pl</b> doesn't need to return a <b>true</b> value. The code is run in package <b>main</b>, in its own lexical scope. However, if the script dies, <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b296f2">[email&#160;protected]</a></b> won't be set.<br><br> The value of <b>$Config{sitelib}</b> is also determined in C code and not read from <b>Config.pm</b>, which is not loaded.<br><br> The code is executed very early. For example, any changes made to <b>@INC</b> shows up in the output of "<b>perl -V</b>". Of course, <b>END</b> blocks is likewise executed very late.<br><br> To determine at runtime if this capability is compiled in your <b>perl</b>, you can check the value of <b>$Config{usesitecustomize}</b>. </td>
</tr>
<tr class="tcw">
<td><pre><b>-F</b><i>pattern</i></pre></td>
<td>specifies the pattern to split on if <b>-a</b> is also in effect. The pattern may be surrounded by <b>//</b> , <b>""</b> , or <b>''</b> , otherwise it is put in single quotes. You can't use literal <a href="/jargon/w/whitspac.htm">whitespace</a> in the pattern.</td>
</tr>
<tr class="tcw">
<td><pre><b>-h</b></pre></td>
<td>prints a summary of the options.</td>
</tr>
<tr class="tcw">
<td><pre><b>-i</b>[<i>extension</i>]</pre></td>
<td>specifies that files processed by the <b>&lt;&gt;</b> construct are to be edited in-place. It does this by renaming the input file, opening the output file by the original name, and selecting that output file as the default for <a href="/unix/perlfunc.htm#func:print"><b>print()</b></a> statements. The extension, if supplied, is used to modify the name of the old file to make a backup copy, following these rules:<br><br> If no extension is supplied, and your system supports it, the original file is kept open without a name while the output is redirected to a new file with the original . When <b>perl</b> exits, cleanly or not, the original file is unlinked.<br><br> If the extension doesn't contain a <b>*</b>, then it is appended to the end of the current file name as a <a href="/jargon/s/suffix.htm">suffix</a>. If the extension does contain one or more <b>*</b> characters, then each <b>*</b> is replaced with the current file name. In Perl terms, you could think of this as:<br><br> <pre class="tcy">($backup = $extension) =~ s/\*/$file_name/g;</pre> This allows you to add a prefix to the backup file, instead of (or in addition to) a suffix:<br><br> <pre class="tcy">perl -pi'orig_*' -e 's/bar/baz/' fileA # backup to 'orig_fileA'</pre> Or even to place backup copies of the original files into another directory (provided the directory already exists):<br><br> <pre class="tcy">perl -pi'old/*.orig' -e 's/bar/baz/' fileA  # backup to 'old/fileA.orig'</pre> These sets of one-liners are equivalent:<br><br> <pre class="tcy"># overwrite current fileperl -pi -e 's/bar/baz/' fileA # overwrite current fileperl -pi'*' -e 's/bar/baz/' fileA # backup to 'fileA.orig'perl -pi'.orig' -e 's/bar/baz/' fileA # backup to 'fileA.orig'perl -pi'*.orig' -e 's/bar/baz/' fileA</pre> From the <a href="/jargon/s/shell.htm">shell</a>, saying<br><br> <pre class="tcy">perl -p -i.orig -e "s/foo/bar/; ... "</pre> is the same as using the program:<br><br> <pre class="tcy">#!/usr/bin/perl -pi.orig s/foo/bar/;</pre> which is equivalent to<br><br> <pre class="tcy">#!/usr/bin/perl$extension = '.orig';LINE: while (&lt;&gt;) { if ($ARGV ne $oldargv)  { if ($extension !~ /\*/)  { $backup = $ARGV . $extension; } else  { ($backup = $extension) =~ s/\*/$ARGV/g; } rename($ARGV, $backup); open(ARGVOUT, "&gt;$ARGV"); select(ARGVOUT); $oldargv = $ARGV; } s/foo/bar/;}continue { print;	# this prints to original file name}select(STDOUT);</pre> except that the <b>-i</b> form doesn't need to compare <b>$ARGV</b> to <b>$oldargv</b> to know when the file name has changed. It does, however, use <b>ARGVOUT</b> for the selected file handle. Note that <b>STDOUT</b> is restored as the default output file handle after the loop.<br><br> As shown above, Perl creates the backup file whether or not any output is actually changed. So this is a fancy way to copy files:<br><br> <pre class="tcy">perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...</pre> or<br><br> <pre class="tcy">perl -p -i'.orig' -e 1 file1 file2 file3...</pre> You can use <b>eof</b> without parentheses to locate the end of each input file, in case you want to append to each file, or reset line numbering.<br><br> If, for a given file, Perl is unable to create the backup file as specified in the extension then it skips that file and continue on with the next one (if it exists).<br><br> You cannot use <b>-i</b> to create directories or to strip extensions from files.<br><br> Perl does not expand <b>~</b> in file names, which is good since some folks use it for their backup files:<br><br> <pre class="tcy">perl -pi~ -e 's/foo/bar/' file1 file2 file3...</pre> Note that because <b>-i</b> renames or deletes the original file before creating a new file of the same name, Unix-style <a href="/jargon/s/symblink.htm">soft</a> and <a href="/jargon/h/hardlink.htm">hard links</a> won't be preserved.<br><br> Finally, the <b>-i</b> switch does not impede execution when no files are given on the command line. In this case, no backup is made (the original file cannot, of course, be determined) and processing proceeds from STDIN to STDOUT as might be expected. </td>
</tr>
<tr class="tcw">
<td><pre><b>-I</b><i>directory</i></pre></td>
<td>Directories specified by <b>-I</b> are prepended to the search path for modules (<b>@INC</b> ).</td>
</tr>
<tr class="tcw">
<td><pre><b>-l</b>[<i>octnum</i>]</pre></td>
<td>enables automatic line-ending processing. It has two separate effects. First, it automatically <a href="/unix/perlfunc.htm#func:chomp"><b>chomp</b></a>s <b>$/</b> (the input record separator) when used with <b>-n</b> or <b>-p</b>. Second, it assigns <b>$\</b> (the output record separator) to have the value of <b>octnum</b> so that any <a href="/unix/perlfunc.htm#func:print"><b>print</b></a> statements has that separator added back on. If <b>octnum</b> is omitted, sets <b>$\</b> to the current value of <b>$/</b>. For instance, to trim lines to 80 columns:<br><br> <pre class="tcy">perl -lpe 'substr($_, 80) = ""'</pre> Note that the assignment <b>$\ = $/</b> is done when the switch is processed, so the input record separator can be different than the output record separator if the <b>-l</b> switch is followed by a <b>-0</b> switch:<br><br> <pre class="tcy">gnufind / -print0 | perl -ln0e 'print "found $_" if -p'</pre> This sets <b>$\</b> to <a href="/jargon/n/newline.htm">newline</a> and then sets <b>$/</b> to the null character. </td>
</tr>
<tr class="tcw">
<td><pre><b>-m</b>[<b>-</b>]<i>module</i><b>-M</b>[<b>-</b>]<i>module</i><b>-M</b>[<b>-</b>]<b>'</b><i>module</i> ...<b>'</b> <b>-</b>[<b>mM</b>][<b>-</b>]<i>module</i><b>=</b><i>arg</i>[<b>,</b><i>arg</i>]...</pre></td>
<td><b>-m</b><i>module</i> executes <a href="/unix/perlfunc.htm#func:use"><b>use</b></a> <i>module</i><b>();</b> before executing your program.<br><br> <b>-M</b><i>module</i> executes <b>use</b> <i>module</i> <b>;</b> before executing your program. You can use quotes to add extra code after the module name, e.g., <b>'-M</b><i>MODULE</i> <b>qw(</b><i>foo bar</i><b>)'</b>.<br><br> If the first character after the <b>-M</b> or <b>-m</b> is a dash (<b>-</b>) then the '<b>use</b>' is replaced with '<b>no</b>'.<br><br> You can also say <b>-m</b><i>MODULE</i><b>=</b><i>foo</i><b>,</b><i>bar</i> or <b>-M</b><i>MODULE</i><b>=</b><i>foo</i><b>,</b><i>bar</i> as a shortcut for <b>'-M</b><i>MODULE</i> <b>qw(</b><i>foo bar</i><b>)'</b>. This avoids the need to use quotes when importing symbols. The actual code generated by <b>-M</b><i>MODULE</i><b>=</b><i>foo</i><b>,</b><i>bar</i> is <b>use module split(/,/,q{</b><i>foo</i><b>,</b><i>bar</i><b>})</b>. Note that the <b>=</b> form removes the distinction between <b>-m</b> and <b>-M</b>.<br><br> A consequence of this is that <b>-M</b><i>MODULE</i><b>=</b><i>number</i> never does a version check, unless <b>MODULE::import()</b> itself is set up to do a version check, which could happen for example if <i>MODULE</i> inherits from Exporter.</td>
</tr>
<tr class="tcw">
<td><pre><b>-n</b></pre></td>
<td> causes Perl to assume the following loop around your program, which makes it iterate over file name arguments somewhat like <b><a href="/unix/used.htm">sed</a> -n</b> or <b><a href="/unix/uawk.htm">awk</a></b>:<br><br> <pre class="tcy">LINE: while (&lt;&gt;) { ...           # your program goes here}</pre> Note that the lines are not printed by default. See <b>-p</b> to have lines printed. If a file named by an argument cannot be opened for some reason, Perl warns you about it and moves on to the next file.<br><br> Also, note that <b>&lt;&gt;</b> passes command line arguments to <a href="/unix/perlfunc.htm#func:open"><b>open</b></a>, which doesn't necessarily interpret them as file names.<br><br> Here is an efficient way to delete all files that haven't been modified for at least a week:<br><br> <pre class="tcy">find . -mtime +7 -print | perl -nle unlink</pre> This is faster than using the <b>-exec</b> switch of <a href="/unix/ufind.htm">find</a> because you don't have to start a <a href="/jargon/p/process.htm">process</a> on every file name found. It does suffer from the bug of mishandling newlines in pathnames, which you can fix if you follow the example under <b>-0</b>.<br><br> <b>BEGIN</b> and <b>END</b> blocks may be used to capture control before or after the implicit program loop, as in <b>awk</b>. </td>
</tr>
<tr class="tcw">
<td><pre><b>-p</b></pre></td>
<td>causes Perl to assume the following loop around your program, which makes it <a href="/jargon/i/iteration.htm">iterate</a> over file name arguments somewhat like <b>sed</b>:<br><br> <pre class="tcy">LINE: while (&lt;&gt;) { ...         # your program goes here } continue { print or die "-p destination: $!\n";}</pre> If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file. Note that the lines are printed automatically. An error occurring during printing is treated as fatal. To suppress printing use the <b>-n</b> switch. A <b>-p</b> overrides a <b>-n</b> switch.<br><br> <b>BEGIN</b> and <b>END</b> blocks may be used to capture control before or after the implicit loop, as in <b>awk</b>. </td>
</tr>
<tr class="tcw">
<td><pre><b>-s</b></pre></td>
<td>enables rudimentary switch parsing for switches on the command line after the program name but before any file name arguments (or before an argument of "<b>--</b>"). Any switch found there is removed from <b>@ARGV</b> and sets the corresponding variable in the Perl program. The following program prints "<b>1</b>" if the program is invoked with a <b>-xyz</b> switch, and "<b>abc</b>" if it is invoked with <b>-xyz=abc</b>.<br><br> <pre class="tcy">#!/usr/bin/perl -sif ($xyz) { print "$xyz\n" }</pre> Do note that a switch like <b>--help</b> creates the variable <b>${-help}</b>, which is not compliant with use strict "refs". Also, when using this option on a script with warnings enabled you may get a lot of spurious "used only once" warnings. </td>
</tr>
<tr class="tcw">
<td><pre><b>-S</b></pre></td>
 <td>makes Perl use the <b>PATH</b> environment variable to search for the program unless the name of the program contains path separators.<br><br> On some platforms, this also makes Perl append suffixes to the file name while searching for it. For example, on Win32 platforms, the "<b>.bat</b>" and "<b>.cmd</b>" suffixes are appended if a lookup for the original name fails, and if the name does not already end in one of those suffixes. If your Perl was compiled with <b>DEBUGGING</b> turned on, using the <b>-Dp</b> switch to Perl shows how the search progresses.<br><br> often this is used to emulate <b>#!</b> startup on platforms that don't support <b>#!</b>. It's also convenient when debugging a script that uses <b>#!</b>, and is thus normally found by the shell's <b>$PATH</b> search mechanism.<br><br> This example works on many platforms that have a shell compatible with <a href="/jargon/b/bourne.htm">Bourne shell</a>:<br><br> <pre class="tcy">#!/usr/bin/perleval 'exec /usr/bin/perl -wS $0 ${1+"<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="133753">[email&#160;protected]</a>"}'if $running_under_some_shell;</pre> The system ignores the first line and feeds the program to <b>/bin/sh</b>, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter. On some systems <b>$0</b> doesn't always contain the full pathname, so the <b>-S</b> tells Perl to search for the program if necessary. After Perl locates the program, it parses the lines and ignores them because the variable <b>$running_under_some_shell</b> is never true. If the program is interpreted by <a href="/unix/ucsh.htm"><b>csh</b></a>, you need to replace <b>${1+"<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a581e5">[email&#160;protected]</a>"}</b> with <b>$*</b>, even though that doesn't understand embedded spaces (and such) in the argument list. To start up <b>sh</b> rather than <b>csh</b>, some systems may have to replace the <b>#!</b> line with a line containing only a colon, which is politely ignored by Perl. Other systems can't control that, and need a totally devious construct that works under any of <b>csh</b>, <b>sh</b>, or <b>perl</b>, such as the following:<br><br> <pre class="tcy">eval '(exit $?0)' &amp;&amp; eval 'exec perl -wS $0 ${1+"<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="547014">[email&#160;protected]</a>"}'&amp; eval 'exec /usr/bin/perl -wS $0 $argv:q'if $running_under_some_shell;</pre> If the file name supplied contains directory separators (and so is an absolute or relative pathname), and if that file is not found, platforms that append file extensions do so and try to look for the file with those extensions added, one by one.<br><br> On DOS-like platforms, if the program does not contain directory separators, it is first searched for in the current directory before being searched for on the <b>PATH</b>. On Unix platforms, the program is searched for strictly on the <b>PATH</b>. </td>
</tr>
<tr class="tcw">
<td><pre><b>-t</b></pre></td>
<td>Like <b>-T</b>, but taint checks issue warnings rather than fatal errors. These warnings can now be controlled normally with no warnings <b>qw(taint)</b>.<br><br> Note: This is not a substitute for <b>-T</b>! This is to only be used as a temporary development aid while securing legacy code: for real production code and for new secure code written from scratch, always use the real <b>-T</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>-T</b></pre></td>
<td>turns on "taint" so you can test them. Ordinarily these checks are done only when running setuid or setgid. It's a good idea to turn them on explicitly for programs that run on behalf of someone else whom you might not necessarily trust, such as <a href="/jargon/c/cgi.htm">CGI</a> programs or any Internet servers you might write in Perl. For security reasons, this option must be seen by Perl quite early; usually this means it must appear early on the command line or in the <b>#!</b> line for systems which support that construct.</td>
</tr>
<tr class="tcw">
<td><pre><b>-u</b></pre></td>
<td>This switch causes Perl to dump <a href="/jargon/c/core.htm">core</a> after compiling your program. You can then in theory take this core dump and turn it into an executable file using the <b>undump</b> program. This speeds startup at the expense of some disk space (which you can minimize by stripping the executable). If you want to execute a portion of your program before dumping, use the <a href="/unix/perlfunc.htm#func:dump"><b>dump()</b></a> operator instead. Note: availability of <b>undump</b> is platform specific.</td>
</tr>
<tr class="tcw">
<td><pre><b>-U</b></pre></td>
<td>allows Perl to do unsafe operations. Currently the only "unsafe" operations are attempting to <a href="/unix/unlink.htm"><b>unlink</b></a> directories while running as superuser and running <a href="/jargon/s/suid.htm">setuid</a> programs with fatal taint checks turned into warnings. Note that warnings must be enabled with this option to actually generate the taint-check warnings.</td>
</tr>
<tr class="tcw">
<td><pre><b>-v</b></pre></td>
<td>prints the version and patchlevel of your <b>perl</b> executable.</td>
</tr>
<tr class="tcw">
<td><pre><b>-V</b></pre></td>
<td>prints summary of the major <b>perl</b> configuration values and the current values of <b>@INC</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>-V:</b><i>configvar</i></pre></td>
<td>Prints to STDOUT the value of the named configuration variable(s), with multiples when your <i>configvar</i> argument looks like a <a href="/jargon/r/regex.htm">regex</a> (has non-letters). For example:<br><br> <pre class="tcy">perl -V:libc</pre> <pre>libc='/lib/libc-2.2.4.so';</pre> <pre class="tcy">perl -V:lib.</pre> <pre>libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';libc='/lib/libc-2.2.4.so';</pre> <pre class="tcy">perl -V:lib.*</pre> <pre>libpth='/usr/local/lib /lib /usr/lib';libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';lib_ext='.a';libc='/lib/libc-2.2.4.so';libperl='libperl.a';....</pre> Additionally, extra colons can be used to control formatting. A trailing colon suppresses the linefeed and terminator "<b>;</b>", allowing you to embed queries into shell commands. (mnemonic: PATH separator "<b>:</b>".)<br><br> <pre class="tcy">echo "compression-vars: " &#96;perl -V:z.*: &#96; " are here !"</pre> <pre>compression-vars: zcat='' zip='zip' are here !</pre> A leading colon removes the "<b>name=</b>" part of the response, this allows you to map to the name you need. (mnemonic: empty label)<br><br> <pre class="tcy">echo "goodvfork="&#96;./perl -Ilib -V::usevfork&#96;</pre> <pre>goodvfork=false;</pre> Leading and trailing colons can be used together if you need positional parameter values without the names. Note that in the case below, the <b>PERL_API</b> <a href="/jargon/p/paramete.htm">parameters</a> are returned in alphabetical order.<br><br> <pre class="tcy">echo building_on &#96;perl -V::osname: -V::PERL_API_.*:&#96; now</pre> <pre>building_on 'linux' '5' '1' '9' now</pre></td>
</tr>
<tr class="tcw">
<td><pre><b>-w</b></pre></td>
<td>prints warnings about dubious constructs, such as variable names mentioned only once and scalar variables used before being set; redefined subroutines; references to undefined file handles; file handles opened read-only that you are attempting to write on; values used as a number that don't look like numbers; using an array as though it were a scalar; if your subroutines recurse more than 100 deep; and innumerable other things.<br><br> This switch really only enables the global <b>$^W</b> variable; normally, the lexically scoped use warnings pragma is preferred. You can disable or promote into fatal errors specific warnings using <b>__WARN__</b> hooks, as described in <b>perlvar</b> and <b>warn</b>. See also <b>perldiag</b> and <b>perltrap</b>. A fine-grained warning facility is also available if you want to manipulate entire classes of warnings.</td>
</tr>
<tr class="tcw">
<td><pre><b>-W</b></pre></td>
<td>Enables all warnings regardless of no warnings or <b>$^W</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>-X</b></pre></td>
<td>Disables all warnings regardless of use warnings or <b>$^W</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>-x</b><b>-x</b><i>directory</i></pre></td>
<td>tells Perl that the program is embedded in a larger chunk of unrelated text, such as in a mail message. Leading garbage is discarded until the first line that starts with <b>#!</b> and contains the string &quot;<b>perl</b>&quot;. Any meaningful switches on that line are applied.<br><br> All references to line numbers by the program (warnings, errors, ...) treat the <b>#!</b> line as the first line. Thus a warning on the 2nd line of the program, which is on the 100th line in the file, is reported as line 2, not as line 100. This can be overridden using the <b>#line</b> directive.<br><br> If a directory name is specified, Perl switches to that directory before running the program. The <b>-x</b> switch controls only the disposal of leading garbage. The program must be terminated with <b>__END__</b> if there is trailing garbage to be ignored; the program can process any or all of the trailing garbage via the <b>DATA</b> file handle if desired.<br><br> The directory, if specified, must appear immediately following the <b>-x</b> with no intervening whitespace.</td>
</tr>
</table>
<h2 id="Environment">Environment</h2>
<p class="tab">The following <a href="/jargon/e/envivari.htm">environment variables</a> affect the operation of <b>perl</b>:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><pre><b>HOME</b></pre></td>
<td>Used if <a href="/unix/perlfunc.htm#func:chdir"><b>chdir</b></a> has no argument.</td>
</tr>
<tr class="tcw">
<td><pre><b>LOGDIR</b></pre></td>
<td>Used if <b>chdir</b> has no argument and <b>HOME</b> is not set.</td>
</tr>
<tr class="tcw">
<td><pre><b>PATH</b></pre></td>
<td>Used in executing subprocesses, and in finding the program if <b>-S</b> is used.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL5LIB</b></pre></td>
<td>A list of directories in which to look for Perl library files before looking in the standard library and the current directory. Any architecture-specific and version-specific directories, such as <b>version/archname/</b>, <b>version/</b>, or <b>archname/</b> under the specified locations are automatically included if they exist, with this lookup done at interpreter startup time. Also, any directories matching the entries in <b>$Config{inc_version_list}</b> are added. (These often would be for older compatible perl versions installed in the same directory tree.)<br><br> If <b>PERL5LIB</b> is not defined, <b>PERLLIB</b> is used. Directories are separated (like in <b>PATH</b>) by a colon on Unix-like platforms and by a semicolon on Windows (the proper path separator being given by the command perl <b>-V:path_sep</b>).<br><br> When running taint checks, either because the program was running setuid or setgid, or the <b>-T</b> or <b>-t</b> switch was specified, neither <b>PERL5LIB</b> nor <b>PERLLIB</b> is consulted. The program should instead say:<br><br> <pre class="tcy">use lib "/my/directory";</pre></td>
</tr>
<tr class="tcw">
<td><pre><b>PERL5OPT</b></pre></td>
<td>Command-line options (switches). Switches in this variable are treated as if they were on every Perl command line. Only the <b>-</b>[<b>CDIMUdmtwW</b>] switches are allowed. When running taint checks (either because the program was running setuid or setgid, or because the <b>-T</b> or <b>-t</b> switch was used), this variable is ignored. If <b>PERL5OPT</b> begins with <b>-T</b>, tainting enabled and subsequent options ignored. If <b>PERL5OPT</b> begins with <b>-t</b>, tainting enabled, a writable dot removed from <b>@INC</b>, and subsequent options honored.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERLIO</b></pre></td>
<td>A space (or colon) separated list of PerlIO layers. If perl is built to use PerlIO system for IO (the default) these layers affect Perl's IO.<br><br> It is conventional to start layer names with a colon (for example, <b>:perlio</b>) to emphasize their similarity to variable "attributes". But the code that parses layer specification strings, which is also used to decode the <b>PERLIO</b> environment variable, treats the colon as a separator.<br><br> An <b>unset</b> or empty <b>PERLIO</b> is equivalent to the default set of layers for your platform; for example, <b>:unix:perlio</b> on Unix-like systems and <b>:unix:crlf</b> on Windows and other <a href="/jargon/d/dos.htm">DOS</a>-like systems.<br><br> The list becomes the default for all Perl's IO. Consequently only built-in layers can appear in this list, as external layers (such as <b>:encoding()</b> ) need IO to load them. See <a href="/unix/perlprag.htm#pragma:open"><b>open</b> pragma</a> for how to add external encodings as defaults.<br><br> Layers that make sense to include in the <b>PERLIO</b> environment variable are briefly summarized below. For more details see <b>PerlIO</b>.<br><br>
<table class="mtable3">
<tr class="tcw">
<td style="width:80px"><b>:bytes</b></td>
<td>A pseudo layer that turns the <b>:utf8</b> flag off for the layer below; unlikely to be useful on its own in the global <b>PERLIO</b> environment variable. You perhaps were thinking of <b>:crlf:bytes</b> or <b>:perlio:bytes</b>.</td>
</tr>
<tr class="tcw">
<td><b>:crlf</b></td>
<td>A layer which does CRLF to &quot;<b>\n</b>&quot; translation distinguishing &quot;text&quot; and "binary" files in the manner of MS-DOS and similar operating systems. (It currently does not mimic MS-DOS as far as treating of <b>Control-Z</b> as being an end-of-file marker.)</td>
</tr>
<tr class="tcw">
<td><b>:mmap</b></td>
<td>A layer that implements &quot;reading&quot; of files using <b>mmap</b> to make an entire file appear in the process's address space, and then using that as PerlIO's &quot;buffer&quot;.</td>
</tr>
<tr class="tcw">
<td><b>:perlio</b></td>
<td>This is a re-implementation of stdio-like buffering written as a PerlIO layer. As such, it calls whatever layer is below it for its operations, often <b>:unix</b>.</td>
</tr>
<tr class="tcw">
<td><b>:pop</b></td>
<td>An experimental pseudo layer that removes the topmost layer. Use with the same care as is reserved for nitroglycerin.</td>
</tr>
<tr class="tcw">
<td><b>:raw</b></td>
<td>A pseudo layer that manipulates other layers. Applying the <b>:raw</b> layer is equivalent to calling <b>binmode($fh)</b>. It makes the stream pass each byte as-is without translation. In particular, both CRLF translation and intuiting :utf8 from the locale are disabled.<br><br> Unlike in earlier versions of Perl, <b>:raw</b> is not only the inverse of <b>:crlf</b> : other layers which would affect the binary nature of the stream are also removed or disabled.</td>
</tr>
<tr class="tcw">
<td><b>:stdio</b></td>
<td>This layer provides a PerlIO interface by wrapping system's <a href="/jargon/a/ansi.htm">ANSI</a> <a href="/jargon/c/c.htm">C</a> &quot;stdio&quot; library calls. The layer provides both buffering and IO. Note that the <b>:stdio</b> layer does not do CRLF translation even if that is the platform's normal behaviour. You need a <b>:crlf</b> layer above it to do that.</td>
</tr>
<tr class="tcw">
<td><b>:unix</b></td>
<td>Low-level layer that calls <b>read</b>, <b>write</b>, <b>lseek</b>, etc.</td>
</tr>
<tr class="tcw">
<td><b>:utf8</b></td>
<td>A pseudo layer that enables a flag in the layer below to tell Perl that output should be in utf8 and that input should be regarded as already in valid utf8 form. WARNING: It does not check for validity and as such should be handled with extreme caution for input, because security violations can occur with non-shortest UTF-8 encodings, etc. Generally <b>:encoding(utf8)</b> is the best option when reading UTF-8 encoded data.</td>
</tr>
<tr class="tcw">
<td><b>:win32</b></td>
<td>On Win32 platforms this experimental layer uses native &quot;handle&quot; IO rather than a Unix-like numeric file descriptor layer. Known to be buggy in release 5.14.</td>
</tr>
</table>
The default set of layers should give acceptable results on all platforms.<br>
<br>For Unix platforms that are the equivalent of &quot;<b>unix perlio</b>&quot; or &quot;<b>stdio</b>&quot;. Configure is set up to prefer the &quot;<b>stdio</b>&quot; implementation if the system's library provides for fast access to the buffer; otherwise, it uses the &quot;<b>unix perlio</b>&quot; implementation.<br>
<br>On Win32 the default in this release (5.14) is &quot;<b>unix crlf</b>&quot;. Win32's &quot;<b>stdio</b>&quot; has some bugs/mis-features for Perl IO which are somewhat depending on the version and vendor of the C <a href="/jargon/c/compile.htm">compiler</a>. Using our own crlf layer as the buffer avoids those issues and makes things more uniform. The crlf layer provides CRLF conversion and buffering.<br>
<br>
The current release (5.14 as of this writing) uses unix as the bottom layer on Win32, and so still uses the C compiler's numeric file descriptor routines. There is an experimental native win32 layer, which is expected to be enhanced and should eventually become the default under Win32.<br>
<br>
The <b>PERLIO</b> environment variable is completely ignored when Perl is run in taint mode.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERLIO_DEBUG</b></pre></td>
<td>If set to the name of a file or device, certain operations of PerlIO subsystem is logged to that file, which is opened in append mode. Typical uses are in Unix:<br><br> <pre class="tcy">env PERLIO_DEBUG=/dev/tty perl script ...</pre> and under Win32, the approximately equivalent:<br><br> <pre class="tcy">set PERLIO_DEBUG=CONperl script ...</pre> This functionality is disabled for setuid scripts and for scripts run with <b>-T</b>. </td>
</tr>
<tr class="tcw">
<td><pre><b>PERLLIB</b></pre></td>
<td>A list of directories in which to look for Perl library files before looking in the standard library and the current directory. If <b>PERL5LIB</b> is defined, <b>PERLLIB</b> is not used.<br><br> The <b>PERLLIB</b> environment variable is completely ignored when Perl is run in taint mode.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL5DB</b></pre></td>
<td>The command used to load the debugger code. The default is:<br><br> <pre class="tcy">BEGIN { require "perl5db.pl" }</pre> The <b>PERL5DB</b> environment variable is only used when Perl is started with a bare <b>-d</b> switch. </td>
</tr>
<tr class="tcw">
<td><pre><b>PERL5DB_THREADED</b></pre></td>
<td>If set to a <b>true</b> value, indicates to the debugger that the code being debugged uses threads.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL5SHELL</b></pre></td>
<td>(specific to the Win32 port.) On Win32 ports only, may be set to an alternative shell that Perl must use internally for executing "backtick" commands or <b>system()</b>. Default is <b>cmd.exe /x/d/c</b> on <a href="/jargon/w/winnt.htm">Windows NT</a> and <b>command.com /c</b> on <a href="/jargon/w/win95.htm">Windows95</a>. The value is considered space-separated. Precede any character that needs to be protected, like a space or backslash, with another backslash.<br><br> Note that Perl doesn't use COMSPEC for this purpose because COMSPEC has a high degree of variability among users, leading to portability concerns. Besides, Perl can use a shell that may not be fit for interactive use, and setting COMSPEC to such a shell may interfere with the proper functioning of other programs (which usually look in COMSPEC to find a shell fit for interactive use).<br><br> Before Perl 5.10.0 and 5.8.8, <b>PERL5SHELL</b> was not taint checked when running external commands. It is recommended that you explicitly set (or delete) <b>$ENV{PERL5SHELL}</b> when running in taint mode under Windows.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_ALLOW_NON_IFS_LSP</b></pre></td>
<td>(specific to the Win32 port.) Set to 1 to allow the use of non-IFS compatible LSPs (Layered Service Providers). Perl normally searches for an IFS-compatible LSP because this is required for its emulation of Windows sockets as real file handles. However, this may cause problems if you have a firewall such as McAfee Guardian, which requires that all applications use its LSP but that is not IFS-compatible, because clearly Perl normally avoids using such an LSP.<br><br> Setting this environment variable to <b>1</b> means that Perl uses the first suitable LSP enumerated in the catalog, which keeps McAfee Guardian happy, and in that particular case Perl still works too because McAfee Guardian's LSP actually plays other games which allow applications requiring IFS compatibility to work.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_DEBUG_MSTATS</b></pre></td>
<td>Relevant only if Perl is compiled with the malloc included with the Perl distribution; that is, if <b>perl -V:d_mymalloc</b> is "<b>define</b>".<br><br> If set, this dumps out memory statistics after execution. If set to an <a href="/jargon/i/integer.htm">integer</a> greater than one, also dumps out memory statistics after compilation.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_DESTRUCT_LEVEL</b></pre></td>
<td>Relevant only if your Perl executable was built with <b>-DDEBUGGING</b>, this controls the behaviour of global destruction of objects and other references.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_DL_NONLAZY</b></pre></td>
<td>Set to "<b>1</b>" to have Perl resolve all undefined symbols when it loads a dynamic library. The default behaviour is to resolve symbols when they are used. Setting this variable is useful during testing of extensions, as it ensures that you get an error on misspelled function names even if the test suite doesn't call them.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_ENCODING</b></pre></td>
<td>If using the <b>use</b> encoding pragma without an explicit encoding name, the <b>PERL_ENCODING</b> environment variable is consulted for an encoding name.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_HASH_SEED</b></pre></td>
<td>(Since Perl 5.8.1, new semantics in Perl 5.18.0) Used to override the randomization of Perl's internal <a href="/jargon/h/hash.htm">hash</a> function. The value is expressed in <a href="/jargon/h/hex.htm">hexadecimal</a>, and may include a leading <b>0x</b>. <a href="/jargon/t/truncate.htm">Truncated</a> patterns are treated as though they are suffixed with sufficient <b>0</b>'s as required.<br><br> If the option is provided, and <b>PERL_PERTURB_KEYS</b> is NOT set, then a value of '<b>0</b>' implies <b>PERL_PERTURB_KEYS=0</b> and any other value implies <b>PERL_PERTURB_KEYS=2</b>.<br><br> PLEASE NOTE: The hash seed is sensitive information. Hashes are randomized to protect against local and remote attacks against Perl code. By manually setting a seed, this protection may be partially or completely lost.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_PERTURB_KEYS</b></pre></td>
<td>(Since Perl 5.18.0) Set to "<b>0</b>" or "<b>NO</b>" then traversing keys is repeatable from run to run for the same <b>PERL_HASH_SEED</b>. Insertion into a hash won't change the order, except to provide for more space in the hash. When combined with setting <b>PERL_HASH_SEED</b>, this mode is as close to pre 5.18 behavior as you can get.<br><br> When set to "<b>1</b>" or "<b>RANDOM</b>" then traversing keys is randomized. Every time a hash is inserted into the key order changes in a random fashion. The order may not be repeatable in a following program run even if the <b>PERL_HASH_SEED</b> was specified. This is the default mode for perl.<br><br> When set to "<b>2</b>" or "<b>DETERMINISTIC</b>" then inserting keys into a hash causes the key order to change, but in a way that is repeatable from program run to program run.<br><br> NOTE: Use of this option is considered insecure, and is intended only for debugging non-deterministic behavior in Perl's hash function. Do not use it in production.<br><br></td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_HASH_SEED_DEBUG</b></pre></td>
<td>(Since Perl 5.8.1.) Set to "<b>1</b>" to display (to STDERR) information about the hash function, seed, and what type of key traversal randomization is in effect at the beginning of execution. This, combined with <b>PERL_HASH_SEED</b> and <b>PERL_PERTURB_KEYS</b> is intended to aid in debugging nondeterministic behaviour caused by hash randomization.<br><br> Note that any information about the hash function, especially the hash seed is sensitive information: by knowing it, one can craft a denial-of-service attack against Perl code, even remotely. Do not disclose the hash seed to people who don't need to know it. See also <b>hash_seed()</b> and <b>key_traversal_mask()</b> in <b>Hash::Util</b>.<br><br> An example output might be:<br><br> <pre class="tcy">HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)</pre></td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_MEM_LOG</b></pre></td>
<td> If your Perl was configured with <b>-Accflags=-DPERL_MEM_LOG</b>, setting the environment variable <b>PERL_MEM_LOG</b> enables logging debug messages. The value has the form <b>&lt;</b><i>number</i><b>&gt;</b>[<b>m</b>][<b>s</b>][<b>t</b>], where <i>number</i> is the file descriptor number you want to write to (<b>2</b> is default), and the combination of letters specifies that you want information about (<b>m</b>)emory and/or (<b>s</b>)v, optionally with (<b>t</b>)imestamps. For example, <b>PERL_MEM_LOG=1mst</b> logs all information to stdout. You can write to other opened file descriptors in a variety of ways:<br><br> <pre class="tcy">$ 3&gt;foo3 PERL_MEM_LOG=3m perl ...</pre></td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_ROOT</b></pre></td>
<td>(specific to the <a href="/jargon/v/vms.htm">VMS</a> port.) A translation-concealed rooted logical name with Perl and the logical device for the <b>@INC</b> path on VMS only. Other logical names that affect Perl on VMS include <b>PERLSHR</b>, <b>PERL_ENV_TABLES</b>, and <b>SYS$TIMEZONE_DIFFERENTIAL</b>, but are optional and discussed further in perlvms and in README.vms in the Perl source distribution.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_SIGNALS</b></pre></td>
<td>Available in Perls 5.8.1 and later. If set to "<b>unsafe</b>", the pre-Perl-5.8.0 signal behaviour (which is immediate but unsafe) is restored. If set to safe, then safe (but deferred) signals are used.</td>
</tr>
<tr class="tcw">
<td><pre><b>PERL_UNICODE</b></pre></td>
<td>Equivalent to the <b>-C</b> command-line switch. Note that this is not a <a href="/jargon/b/boolean.htm">boolean</a> variable. Setting this to "<b>1</b>" is not the right way to "enable Unicode". You can use "<b>0</b>" to "disable Unicode", though (or alternatively unset <b>PERL_UNICODE</b> in your shell before starting Perl). See the description of the <b>-C</b> switch for more information.</td>
</tr>
<tr class="tcw">
<td><pre><b>SYS$LOGIN</b></pre></td>
<td>(specific to the VMS port.) Used if <b>chdir</b> has no argument and <b>HOME</b> and <b>LOGDIR</b> are not set.</td>
</tr>
</table>
<p class="tab">Perl and its various modules and components, including its test frameworks, may sometimes make use of certain other environment variables. Some of these are specific to a particular platform. Please consult the appropriate module documentation and any documentation for your platform for variables peculiar to those specific situations.</p>
<p class="tab">Perl makes all environment variables available to the program being executed, and passes these along to any child processes it starts. However, programs running <a href="/jargon/s/suid.htm">setuid</a> would do well to execute the following lines before doing anything else, only to keep people honest:</p>
<pre class="tab tcy">$ENV{PATH} = "/bin:/usr/bin"; # or whatever you need
$ENV{SHELL} = "/bin/sh" if exists $ENV{SHELL};
delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};</pre>
<p class="tabb">Also see:</p>
<p class="tab"><b><a href="/unix/perlsyn.htm">Syntax</a></b><br> <b><a href="/unix/perldata.htm">Perl Data Types</a></b><br> <b><a href="/unix/perlsub.htm">Perl Subroutines</a></b><br> <b><a href="/unix/perlop.htm">Perl Operators</a></b><br> <b><a href="/unix/perlfunc.htm">Perl Functions</a></b><br> <b><a href="/unix/perlprag.htm">Perl Pragmas</a></b><br></p>
<h2 id="related">Related commands</h2>
<p class="tab"><a href="/unix/uawk.htm"><b>awk</b></a> &mdash; Interpreter for the AWK text processing programming language.<br> <a href="/unix/used.htm"><b>sed</b></a> &mdash; A utility for filtering and transforming text.<br></p>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3999293766533555" data-ad-slot="6514780129" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" rel="nofollow" class="first-child">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a832f5837c43d',m:'9vtnd2oWzEjRhSehLplLL2FlM4_Mpn3wQgpjx9V5bUQ-1661495359-0-AYZm4xEnKKu+cXPjNsquEW3Gphi1Y+OtkgqLaradp7dNDNpsAWPjAR0vhGpohvPdOWtxbz9ENfHsEsAFmTr9lJtLqoDu87usN12W8nhOGpVEPpnKVHJyAgNzppC1wrRVKg==',s:[0x0d3d652cba,0xd8b9bb8202],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>