<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Linux ip command</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-08-16">08/16/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/ip.gif" width="300" height="300" alt="ip command" class="floatRight"><p class="intro">On Linux operating systems, the <b>ip</b> command edits and displays the configuration of <a href="/jargon/n/nic.htm">network interfaces</a>, <a href="/jargon/r/routing.htm">routing</a>, and <a href="/jargon/t/tunnel.htm">tunnels</a>. On many Linux systems, it replaces the deprecated <a href="/unix/uifconfi.htm"><b>ifconfig</b></a> command.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#related">Related commands</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">ip [ <i>OPTIONS</i> ] <i>OBJECT</i> { <i>COMMAND</i> | help }</pre>
<p class="tab">where <i>OBJECT</i> may be:</p>
<pre class="tcy tab">{ link | addr | addrlabel | route | rule | neigh | ntable | tunnel |
tuntap maddr | mroute | mrule | monitor | xfrm | netns | l2tp | tcp_metrics }</pre>
<p class="tab">and <i>OPTIONS</i> may be:</p>
<pre class="tcy tab">{ -V[ersion] | -s[tatistics] | -r[esolve] | -f[amily]
{ inet | inet6 | ipx | dnet | link } | -o[neline] }</pre>
<h3 class="tab">Options</h3>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>-V</b>,<br> <b>-Version</b></td>
<td>Print the version of the <b>ip</b> utility and exit.</td>
</tr>
<tr class="tcw">
<td><b>-s</b>,<br> <b>-stats</b>,<br> <b>-statistics</b></td>
<td>Output more information. If the option appears twice or more, the amount of information increases. As a rule, the information is <a href="/jargon/s/stat.htm">statistics</a> or some time values.</td>
</tr>
<tr class="tcw">
<td><b>-l</b>, <b>-loops</b></td>
<td>Specify maximum number of loops the '<b>ip addr flush</b>' logic will attempt before giving up. The default is 10. Zero ("<b>0</b>") means loop until all <a href="/jargon/a/address.htm">addresses</a> are removed.</td>
</tr>
<tr class="tcw">
<td><b>-f</b>, <b>-family</b></td>
<td>Followed by <a href="/jargon/p/protocol.htm">protocol</a> family identifier: <b>inet</b>, <b>inet6</b>, <b>bridge</b>, <b>ipx</b>, <b>dnet</b> or <b>link</b>, enforce the protocol family to use. If the option is not present, the protocol family is guessed from other <a href="/jargon/a/argument.htm">arguments</a>. If the rest of the <a href="/jargon/c/commandi.htm">command line</a> does not give enough information to guess the family, <b>ip</b> falls back to the default one, usually <b>inet</b> or <b>any</b>. <b>link</b> is a special family identifier meaning that no networking protocol is involved.</td>
</tr>
<tr class="tcw">
<td><b>-4</b></td>
<td>Shortcut for <b>-family inet</b>.</td>
</tr>
<tr class="tcw">
<td><b>-6</b></td>
 <td>Shortcut for <b>-family inet6</b>.</td>
</tr>
<tr class="tcw">
<td><b>-B</b></td>
<td>Shortcut for <b>-family bridge</b>.</td>
</tr>
<tr class="tcw">
<td><b>-0</b></td>
<td>Shortcut for <b>-family link</b>.</td>
</tr>
<tr class="tcw">
<td><b>-o</b>, <b>-oneline</b></td>
<td>Output each record on a single line, replacing <a href="/jargon/l/lf.htm">line feeds</a> with the '<b>\</b>' character. This is convenient when you want to count records with <a href="/jargon/w/wc.htm"><b>wc</b></a> or to <a href="/unix/ugrep.htm"><b>grep</b></a> the output.</td>
</tr>
<tr class="tcw">
<td><b>-r</b>, <b>-resolve</b></td>
<td>Use the system's name resolver to print <a href="/jargon/d/dns.htm">DNS</a> names instead of <a href="/jargon/h/hostcomp.htm">host</a> addresses.</td>
</tr>
</table>
<h3 class="tab">Object</h3>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>address</b></td>
<td>Protocol (<a href="/jargon/i/ip.htm">IP</a> or <a href="/jargon/i/ipv6.htm">IPv6</a>) address on a device.</td>
</tr>
<tr class="tcw">
<td><b>addrlabel</b></td>
<td>Label <a href="/jargon/c/configur.htm">configuration</a> for protocol address selection.</td>
</tr>
<tr class="tcw">
<td><b>l2tp</b></td>
<td>Tunnel Ethernet over IP (L2TPv3).</td>
</tr>
<tr class="tcw">
<td><b>link</b></td>
<td>Network device.</td>
</tr>
<tr class="tcw">
<td><b>maddress</b></td>
<td><a href="/jargon/m/multicast.htm">Multicast</a> address.</td>
</tr>
<tr class="tcw">
<td><b>monitor</b></td>
<td>Watch for netlink messages.</td>
</tr>
<tr class="tcw">
<td><b>mroute</b></td>
<td>Multicast routing cache entry.</td>
</tr>
<tr class="tcw">
<td><b>mrule</b></td>
<td>Rule in multicast routing policy <a href="/jargon/d/database.htm">database</a>.</td>
</tr>
<tr class="tcw">
<td><b>neighbour</b></td>
<td>Manage <a href="/jargon/a/arp.htm">ARP</a> or NDISC <a href="/jargon/c/cache.htm">cache</a> entries.</td>
</tr>
<tr class="tcw">
<td><b>netns</b></td>
<td>Manage network <a href="/jargon/d/domaname.htm">namespaces</a>.</td>
</tr>
<tr class="tcw">
<td><b>ntable</b></td>
<td>Manage the neighbor cache's operation.</td>
</tr>
<tr class="tcw">
<td><b>route</b></td>
<td><a href="/jargon/r/routing_table.htm">Routing table</a> entry.</td>
</tr>
<tr class="tcw">
<td><b>rule</b></td>
<td>Rule in routing policy database.</td>
</tr>
<tr class="tcw">
<td><b>tcp_metrics,<br> tcpmetrics</b></td>
<td>Manage TCP Metrics.</td>
</tr>
<tr class="tcw">
<td><b>tunnel</b></td>
<td>Tunnel over IP.</td>
</tr>
<tr class="tcw">
<td><b>tuntap</b></td>
<td>Manage TUN/TAP devices.</td>
</tr>
<tr class="tcw">
<td><b>xfrm</b></td>
<td>Manage <a href="/jargon/i/ipsec.htm">IPSec</a> policies.</td>
</tr>
</table>
<p class="tab">The names of all objects may be written in full or abbreviated form (e.g., <b>address</b> is abbreviated as <b>addr</b> or just <b>a</b>).</p>
<h3 class="tab">Command</h3>
<p class="tab">Specifies the action to perform on the object. The set of possible actions depends on the object type. As a rule, it is possible to <b>add</b>, <b>delete</b> and <b>show</b> (or <b>list</b>) objects, but some objects do not allow all of these operations or have some additional commands. The <b>help</b> command is available for all objects. It prints out a list of available commands and argument syntax conventions.</p>
<p class="tab">If no command is given, some default command is assumed. Usually it is <b>list</b> or, if the objects of this class cannot be listed, <b>help</b>.</p>
<h3 class="tab">ip link: Network Device Configuration</h3>
<p class="tab"><b>link</b> is a network device and the corresponding commands display and change the state of devices.</p>
<p class="tab"><b>ip link set</b> changes device <a href="/jargon/a/attribut.htm">attributes</a>:</p>
<pre class="tcy tab">ip link set <i>DEVICE</i> { up | down | arp { on | off } |
            promisc { on | off } |
            allmulticast { on | off } |
            dynamic { on | off } |
            multicast { on | off } |
            txqueuelen <i>PACKETS</i> |
            name <i>NEWNAME</i> |
            address <i>LLADDR</i> | broadcast <i>LLADDR</i> |
            mtu <i>MTU</i> |
            netns <i>PID</i> |
            alias <i>NAME</i> |
            vf <i>NUM</i> [ mac <i>LLADDR</i> ]
            [ vlan <i>VLANID</i> [ qos <i>VLAN</i>-<i>QOS</i> ] ]
            [ rate <i>TXRATE</i> ] } 
</pre>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>dev</b> <i>NAME</i></td>
<td>(Default.) <i>NAME</i> specifies network device to operate on. When configuring SR-IOV Virtual Function (VF) devices, this keyword should specify the associated Physical Function (PF) device.</td>
</tr>
<tr class="tcw">
<td><b>up</b>, <b>down</b></td>
<td>Change the state of the device to <b>UP</b> or <b>DOWN</b>.</td>
</tr>
<tr class="tcw">
<td><b>arp on</b>, <b>arp off</b></td>
<td>Change the <b>NOARP</b> flag on the device.</td>
</tr>
<tr class="tcw">
<td><b>multicast on</b>, <b>multicast off</b></td>
<td>Change the <b>MULTICAST</b> flag on the device.</td>
</tr>
<tr class="tcw">
<td><b>dynamic on</b>, <b>dynamic off</b></td>
<td>Change the <b>DYNAMIC</b> flag on the device.</td>
</tr>
<tr class="tcw">
<td><b>name</b> <i>NAME</i></td>
<td>Change the name of the device. This operation is not recommended if the device is running or has some addresses already configured.</td>
</tr>
<tr class="tcw">
<td><b>txqueuelen</b> <i>NUMBER</i>, <b>txqlen</b> <i>NUMBER</i></td>
<td>Change the transmit <a href="/jargon/q/queue.htm">queue</a> length of the device.</td>
</tr>
<tr class="tcw">
<td><b>mtu</b> <i>NUMBER</i></td>
<td>Change the <a href="/jargon/m/mtu.htm">MTU</a> of the device.</td>
</tr>
<tr class="tcw">
<td><b>address</b> <i>LLADDRESS</i></td>
<td>Change the station address of the <a href="/jargon/i/interfac.htm">interface</a>.</td>
</tr>
<tr class="tcw">
<td><b>broadcast</b> <i>LLADDRESS</i></td>
<td><b>brd</b> <i>LLADDRESS</i></td>
</tr>
<tr class="tcw">
<td><b>peer</b> <i>LLADDRESS</i></td>
<td>Change the link layer broadcast address or the <a href="/jargon/p/peer.htm">peer</a> address when the interface is POINTOPOINT.</td>
</tr>
<tr class="tcw">
<td><b>netns</b> <i>PID</i></td>
<td>Move the device to the network namespace associated with the process PID.</td>
</tr>
<tr class="tcw">
<td><b>alias</b> <i>NAME</i></td>
<td>Give the device a symbolic name for easy reference.</td>
</tr>
<tr class="tcw">
<td><b>vf</b> <i>NUM</i></td>
<td>Specify a Virtual Function device to be configured. The associated PF device must be specified using the <b>dev</b> parameter.</td>
</tr>
<tr class="tcw">
<td><b>mac</b> <i>LLADDRESS</i></td>
<td>Change the station address for the specified VF. The <b>vf</b> parameter must be specified.</td>
</tr>
<tr class="tcw">
<td><b>vlan</b> <i>VLANID</i></td>
<td>Change the assigned <a href="/jargon/v/vlan.htm">VLAN</a> for the specified VF. When specified, all traffic sent from the VF will be tagged with the specified VLAN ID. Incoming traffic will be filtered for the specified VLAN ID, and will have all VLAN tags stripped before being passed to the VF. Setting this parameter to 0 disables VLAN tagging and filtering. The vf parameter must be specified.</td>
</tr>
<tr class="tcw">
<td><b>qos</b> <i>VLAN-QOS</i></td>
<td>Assign VLAN QOS (priority) <a href="/jargon/b/bit.htm">bits</a> for the VLAN tag. When specified, all VLAN tags transmitted by the VF will include the specified priority bits in the VLAN tag. If not specified, the value is assumed to be <b>0</b>. Both the <b>vf</b> and <b>vlan</b> parameters must be specified. Setting both <b>vlan</b> and <b>qos</b> as <b>0</b> disables VLAN tagging and filtering for the VF.</td>
</tr>
<tr class="tcw">
<td><b>rate</b> <i>TXRATE</i></td>
<td>Change the allowed transmit <a href="/jargon/b/bandwidt.htm">bandwidth</a>, in <a href="/jargon/m/mbps.htm">Mbps</a>, for the specified VF. Setting this parameter to <b>0</b> disables rate limiting. The <b>vf</b> parameter must be specified.</td>
</tr>
</table>
<p class="tab"><b>Warning</b>: If multiple parameter changes are requested, <b>ip</b> aborts immediately after any of the changes have failed. This is the only case when <b>ip</b> can move the system to an unpredictable state. The solution is to avoid changing several parameters with one <b>ip link set</b> call.</p>
<p class="tab"><b>ip link show</b> displays device attributes:</p>
<pre class="tcy tab">ip link show [ <i>DEVICE</i> ]</pre>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>dev</b> <i>NAME</i></td>
<td>(Default.) NAME specifies the network device to show. If this argument is omitted all devices are listed.</td>
</tr>
<tr class="tcw">
<td><b>up</b></td>
<td>Only display running interfaces.</td>
</tr>
</table>
<h3 class="tab">ip address: Protocol Address Management</h3>
<p class="tab">The address is a protocol (IP or IPv6) address attached to a network device. Each device must have at least one address to use the corresponding protocol. It is possible to have different addresses attached to one device. These addresses are not discriminated, so the term <a href="/jargon/a/alias.htm">alias</a> is not quite appropriate for them and we do not use it in this page.</p>
<p class="tab">The <b>ip addr</b> command displays addresses and their properties, adds new addresses and deletes old ones.</p>
<p class="tab"><b>ip address add</b> adds a new protocol address:</p>
<pre class="tcy tab">ip address add <i>IFADDR</i> dev <i>NAME</i></pre>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>dev</b> <i>NAME</i></td>
<td>The name of the device to add the address to.</td>
</tr>
<tr class="tcw">
<td><b>local</b> <i>ADDRESS</i></td>
<td>(Default.) the address of the interface. The format of the address depends on the protocol. It is a dotted quad for IP and a sequence of <a href="/jargon/h/hex.htm">hexadecimal</a> half words separated by colons for IPv6. The ADDRESS may be followed by a slash and a decimal number which encodes the network <a href="/jargon/p/prefix.htm">prefix</a> length.</td>
</tr>
<tr class="tcw">
<td><b>peer</b> <i>ADDRESS</i></td>
<td>The address of the remote endpoint for pointopoint interfaces. Again, the ADDRESS may be followed by a slash and a <a href="/jargon/d/decimal.htm">decimal</a> number, <a href="/jargon/e/encode.htm">encoding</a> the network prefix length. If a <a href="/jargon/p/peer.htm">peer</a> address is specified, the local address cannot have a prefix length. The network prefix is associated with the peer rather than with the local address.</td>
</tr>
<tr class="tcw">
<td><b>broadcast</b> <i>ADDRESS</i></td>
<td><p>The broadcast address on the interface.</p>
<p>It is possible to use the special symbols '<b>+</b>' and '<b>-</b>' instead of the broadcast address. In this case, the broadcast address is derived by setting/resetting the host bits of the interface prefix.</p>
</td>
</tr>
<tr class="tcw">
<td><b>label</b> <i>NAME</i></td>
<td>Each address may be tagged with a label <a href="/jargon/s/string.htm">string</a>. To preserve compatibility with <a href="/jargon/l/linux.htm">Linux</a>-2.0 net aliases, this string must coincide with the name of the device or must be prefixed with the device name followed by colon.</td>
</tr>
<tr class="tcw">
<td><b>scope</b> <i>SCOPE_VALUE</i></td>
<td><p>The scope of the area where this address is valid. The available scopes are listed in file <b>/etc/iproute2/rt_scopes</b>. Predefined scope values are:</p>
<p><b>global</b></p>
<p>the address is <a href="/jargon/g/global.htm">globally</a> valid.</p>
<p><b>site</b></p>
<p>(IPv6 only) the address is site local, i.e., it is valid inside this site.</p>
<p><b>link</b></p>
<p>the address is link local, i.e., it is valid only on this device.</p>
<p><b>host</b></p>
<p>the address is valid only inside this host.</p>
</td>
</tr>
</table>
<p class="tab"><b>ip address delete</b> deletes a protocol address:</p>
<p class="tab">The arguments for <b>ip address delete</b> are the same as the arguments of <b>ip addr add</b> (see above). The device name is a required argument; the rest are optional. If no arguments are given, the first address is deleted.</p>
<p class="tab"><b>ip address show</b> looks at protocol addresses:</p>
<pre class="tcy tab">ip address { show | flush } [ dev <i>STRING</i> ] [ scope <i>SCOPE-ID</i> ] [ to <i>PREFIX</i> ]
           [ <i>FLAG-LIST</i> ] [ label <i>PATTERN</i> ] 
</pre>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>dev</b> <i>NAME</i></td>
<td>(Default.) name of device.</td>
</tr>
<tr class="tcw">
<td><b>scope</b> <i>SCOPE_VAL</i></td>
<td>Only list addresses with this scope.</td>
</tr>
<tr class="tcw">
<td><b>to</b> <i>PREFIX</i></td>
<td>Only list addresses matching this prefix.</td>
</tr>
<tr class="tcw">
<td><b>label</b> <i>PATTERN</i></td>
<td>Only list addresses with labels matching the PATTERN. PATTERN is a usual <a href="/jargon/s/shell.htm">shell</a> style pattern.</td>
</tr>
<tr class="tcw">
<td><b>dynamic</b>, <b>permanent</b></td>
<td>(<a href="/jargon/i/ipv6.htm">IPv6</a> only) only list addresses installed due to stateless address configuration or only list permanent (not dynamic) addresses.</td>
</tr>
<tr class="tcw">
<td><b>tentative</b></td>
<td>(IPv6 only) only list addresses which did not pass duplicate address detection.</td>
</tr>
<tr class="tcw">
<td><b>deprecated</b></td>
<td>(IPv6 only) only list deprecated addresses.</td>
</tr>
<tr class="tcw">
<td><b>primary</b>, <b>secondary</b></td>
<td>Only list primary (or secondary) addresses.</td>
</tr>
</table>
<p class="tab"><b>ip address flush</b> flushes a protocol addresses:</p>
<p class="tab">This command flushes the protocol addresses selected by some criteria.</p>
<p class="tab">This command has the same arguments as <b>show</b> (see above). The difference is that it does not run when no arguments are given.</p>
<p class="tab"><b>Warning:</b> This command (and other flush commands described below) is pretty dangerous. If you make a mistake, it will not forgive it, but will cruelly <a href="/jargon/p/purge.htm">purge</a> all the addresses.</p>
<p class="tab">With the <b>-statistics</b> option, the command becomes <a href="/jargon/v/verbose.htm">verbose</a>. It prints out the number of deleted addresses and the number of rounds made to flush the address list. If this option is given twice, <b>ip addr flush</b> also dumps all the deleted addresses in the format described in the previous subsection.</p>
<h3 class="tab">ip addrlabel: Protocol Address Label Management</h3>
<p class="tab">IPv6 address label is used for address selection described in <a href="/jargon/r/rfc.htm">RFC</a> 3484. Precedence is managed by userspace, and only label is stored in <a href="/jargon/k/kernel.htm">kernel</a>.</p>
<p class="tab"><b>ip addrlabel add</b> adds an address label entry to the kernel:</p>
<pre class="tcy tab">ip addrlabel { add | del } prefix <i>PREFIX</i> [ dev <i>DEV</i> ] [ label <i>NUMBER</i> ]</pre>
<pre class="tcy tab">ip addrlabel { list | flush }</pre>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:140px"><b>prefix</b> <i>PREFIX</i></td>
<td>The prefix to be used.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>DEV</i></td>
<td>The outgoing interface.</td>
</tr>
<tr class="tcw">
<td><b>label</b> <i>NUMBER</i></td>
<td>The label for the prefix. 0xffffffff is reserved.</td>
</tr>
</table>
<p class="tab"><b>ip addrlabel del</b> flushes address labels:</p>
<p class="tab">the command deletes an address label entry in the kernel. Arguments coincide with the arguments of <b>ip addrlabel add</b> but <b>label</b> is not required.</p>
<p class="tab"><b>ip addrlabel list</b> lists address labels:</p>
<p class="tab">this command shows contents of address labels.</p>
<p class="tab"><b>ip addrlabel flush</b> flushes address labels:</p>
<p class="tab">this command flushes the contents of address labels and does not restore default settings.</p>
<h3 class="tab">ip neighbour - neighbour/arp tables management.</h3>
<p class="tab"><b>neighbour</b> objects establish bindings between protocol addresses and link layer addresses for hosts sharing the same link. Neighbour entries are organized into tables. The <a href="/jargon/i/ipv4.htm">IPv4</a> neighbour table is known by another name: the ARP table.</p>
<p class="tab">The corresponding commands display neighbour bindings and their properties, add new neighbour entries and delete old ones.</p>
<pre class="tcy tab">ip neighbour { add | del | change | replace } { <i>ADDR</i> [ lladdr <i>LLADDR</i> ]
             [ nud { permanent | noarp | stale | reachable } ] | proxy <i>ADDR</i> }
             [ dev <i>DEV</i> ]
</pre>
<p class="tab"><b>ip neighbour add</b> - add a new neighbour entry</p>
<p class="tab"><b>ip neighbour change</b> - change an existing entry</p>
<p class="tab"><b>ip neighbour replace</b> - add a new entry or change an existing one</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>to</b> <i>ADDRESS</i></td>
<td>(Default.) the protocol address of the neighbour. It is either an IPv4 or IPv6 address.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>The interface to which this neighbour is attached.</td>
</tr>
<tr class="tcw">
<td><b>illaddr</b> <i>LLADDRESS</i></td>
<td>The link layer address of the neighbour. <i>LLADDRESS</i> can also be <a href="/jargon/n/null.htm">null</a>.</td>
</tr>
<tr class="tcw">
<td><b>nud</b> <i>NUD_STATE</i></td>
<td>The state of the neighbour entry. The nud is an abbreviation for 'Neighbour Unreachability Detection'. The state can take one of the following values:<br><br><b>permanent</b><br><br> The neighbour entry is valid forever and can be only be removed administratively.<br><br><b>noarp</b><br><br> The neighbour entry is valid. No attempts to validate this entry will be made but it can be removed when its lifetime expires.<br><br><b>reachable</b><br><br> The neighbour entry is valid until the reachability timeout expires.<br><br><b>stale</b><br><br> The neighbour entry is valid but suspicious. This option to <b>ip neighbour</b> does not change the neighbour state if it was valid and the address is not changed by this command.</td>
</tr>
</table>
<p class="tab"><b>ip neighbour delete</b> deletes a neighbour entry:</p>
<p class="tab">This command invalidates a neighbour entry.</p>
<p class="tab">The arguments are the same as with <b>ip neighbor add</b>, except that <b>lladdr</b> and <b>nud</b> are ignored.</p>
<p class="tab"><b>Warning:</b> Attempts to delete or manually change a noarp entry created by the kernel may result in unpredictable behaviour. Particularly, the kernel may try to resolve this address even on a NOARP interface or if the address is multicast or broadcast.</p>
<pre class="tcy tab">ip neighbor { show | flush } [ to <i>PREFIX</i> ] [ dev <i>DEV</i> ] [ nud <i>STATE</i> ]</pre>
<p class="tab"><b>ip neighbour show</b> lists neighbour entries:</p>
<p class="tab">This command displays neighbour tables.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>to</b> <i>ADDRESS</i> (default)</td>
<td>The prefix selecting the neighbours to list.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>Only list the neighbours attached to this device.</td>
</tr>
<tr class="tcw">
<td><b>unused</b></td>
 <td>Only list neighbours that are not currently in use.</td>
</tr>
<tr class="tcw">
<td><b>nud</b> <i>NUD_STATE</i></td>
<td>Only list neighbour entries in this state. <i>NUD_STATE</i> takes values listed below or the special value all which means all states. This option may occur more than once. If this option is absent, <b>ip</b> lists all entries except for <b>none</b> and <b>noarp</b>.</td>
</tr>
</table>
<p class="tab"><b>ip neighbour flush</b> flushes neighbour entries:</p>
<p class="tab">This command flushes neighbour tables, selecting entries to flush by some criteria.</p>
<p class="tab">This command has the same arguments as <b>show</b>. The differences are that it does not run when no arguments are given, and that the default neighbour states to be flushed do not include <b>permanent</b> and <b>noarp</b>.</p>
<p class="tab">With the <b>-statistics</b> option, the command becomes verbose. It prints out the number of deleted neighbours and the number of rounds made to flush the neighbour table. If the option is given twice, <b>ip neighbor flush</b> also dumps all the deleted neighbours.</p>
<p class="tab"><b>ip route</b> manages routing tables:</p>
<p class="tab">Manipulate route entries in the kernel routing tables keep information about paths to other networked nodes.</p>
<p class="tab">Route types:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>unicast</b></td>
<td>the route entry describes real paths to the destinations covered by the route prefix.</td>
</tr>
<tr class="tcw">
<td><b>unreachable</b></td>
<td>These destinations are unreachable. Packets are discarded and the ICMP message host unreachable is generated. The local senders get an EHOSTUNREACH error.</td>
</tr>
<tr class="tcw">
<td><b>blackhole</b></td>
<td>These destinations are unreachable. Packets are discarded silently. The local senders get an EINVAL error.</td>
</tr>
<tr class="tcw">
<td><b>prohibit</b></td>
<td>These destinations are unreachable. Packets are discarded and the ICMP message communication administratively prohibited is generated. The local senders get an EACCES error.</td>
</tr>
<tr class="tcw">
<td><b>local</b></td>
<td>The destinations are assigned to this host. The packets are looped back and delivered locally.</td>
</tr>
<tr class="tcw">
<td><b>broadcast</b></td>
<td>The destinations are broadcast addresses. The packets are sent as link broadcasts.</td>
</tr>
<tr class="tcw">
<td><b>throw</b></td>
<td>A special control route used together with policy rules. If such a route is selected, lookup in this table is terminated pretending that no route was found. Without policy routing it is equivalent to the absence of the route in the routing table. The packets are dropped and the ICMP message net unreachable is generated. The local senders get an ENETUNREACH error.</td>
</tr>
<tr class="tcw">
<td><b>nat</b></td>
<td>A special NAT route. Destinations covered by the prefix are considered to be dummy (or external) addresses which require translation to real (or internal) ones before forwarding. The addresses to translate to are selected with the attribute <b>via</b>.<br><br> <b>Warning:</b> Route NAT is no longer supported in Linux 2.6.</td>
</tr>
<tr class="tcw">
<td><b>anycast</b></td>
<td>(<b>Not yet implemented!</b>) the destinations are anycast addresses assigned to this host. They are mainly equivalent to local with one difference: such addresses are invalid when used as the source address of any packet.</td>
</tr>
<tr class="tcw">
<td><b>multicast</b></td>
<td>A special type used for multicast routing. It is not present in normal routing tables.</td>
</tr>
</table>
<p class="tab">Route tables:</p>
<p class="tab">Linux-2.x can pack routes into several routing tables identified by a number in the range from <b>1</b> to <b>255</b> or by name from the file <b>/etc/iproute2/rt_tables</b> By default, all normal routes are inserted into the main table (ID 254) and the kernel only uses this table when calculating routes.</p>
<p class="tab">Actually, one other table always exists, which is invisible but even more important. It is the local table (ID <b>255</b>). This table consists of routes for local and broadcast addresses. The kernel maintains this table automatically and the administrator usually need not modify it or even look at it.</p>
<p class="tab">The multiple routing tables get involved when policy routing is used.</p>
<pre class="tcy tab">ip route { add | del | change | append | replace | monitor } <i>ROUTE</i> 
</pre>
<p class="tab"><b>ip route add</b> - add new route</p>
<p class="tab"><b>ip route change</b> - change route</p>
<p class="tab"><b>ip route replace</b> - change route, or add new route</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>to</b> <i>TYPE PREFIX</i> (default)</td>
<td>The destination prefix of the route. If <i>TYPE</i> is omitted, <b>ip</b> assumes type unicast. Other values of <i>TYPE</i> are listed above. <i>PREFIX</i> is an IP or IPv6 address optionally followed by a slash and the prefix length. If the length of the prefix is missing, ip assumes a full-length host route. There is also a special <i>PREFIX</i> default - which is equivalent to IP <b>0/0</b> or to IPv6 <b>::/0</b>.</td>
</tr>
<tr class="tcw">
<td><b>tos</b> <i>TOS</i>, <b>dsfield</b> <i>TOS</i></td>
<td>The Type Of Service (TOS) key. This key has no associated mask and the longest match is understood as: First, compare the TOS of the route and of the packet. If they are not equal, then the packet may still match a route with a zero TOS. TOS is either an <a href="/jargon/num/8bit.htm">8 bit</a> hexadecimal number or an identifier from <b>/etc/iproute2/rt_dsfield</b>.</td>
</tr>
<tr class="tcw">
<td><b>metric</b> <i>NUMBER</i>, <b>preference</b> <i>NUMBER</i></td>
<td>The preference value of the route. <i>NUMBER</i> is an arbitrary <a href="/jargon/num/32bit.htm">32 bit</a> number.</td>
</tr>
<tr class="tcw">
<td><b>table</b> <i>TABLEID</i></td>
<td>The table to add this route to. <i>TABLEID</i> may be a number or a string from the file <b>/etc/iproute2/rt_tables</b>. If this parameter is omitted, <b>ip</b> assumes the main table, with the exception of <b>local</b>, <b>broadcast</b> and <b>nat</b> routes, which are put into the local table by default.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>The output device name.</td>
</tr>
<tr class="tcw">
<td><b>via</b> <i>ADDRESS</i></td>
<td>The address of the nexthop router. Actually, the sense of this field depends on the route type. For normal <a href="/jargon/u/unicast.htm">unicast</a> routes it is either the true next hop router or, if it's a direct route installed in <a href="/jargon/b/bsd.htm">BSD</a> compatibility mode, it can be a local address of the interface. For NAT routes it is the first address of the block of translated IP destinations.</td>
</tr>
<tr class="tcw">
<td><b>src</b> <i>ADDRESS</i></td>
<td>The source address to prefer when sending to the destinations covered by the route prefix.</td>
</tr>
<tr class="tcw">
<td><b>realm</b> <i>REALMID</i></td>
<td>The realm to which this route is assigned. <i>REALMID</i> may be a number or a <a href="/jargon/s/string.htm">string</a> from the file <b>/etc/iproute2/rt_realms</b>.</td>
</tr>
<tr class="tcw">
<td><b>mtu</b> <i>MTU</i>, <b>mtu lock</b> <i>MTU</i></td>
<td>The MTU along the path to the destination. If the modifier lock is not used, the MTU may be updated by the kernel due to Path MTU Discovery. If the modifier lock is used, no path MTU discovery will be tried, all packets will be sent without the DF bit in IPv4 case or fragmented to MTU for IPv6.</td>
</tr>
<tr class="tcw">
<td><b>window</b> <i>NUMBER</i></td>
<td>The maximal window for <a href="/jargon/t/tcpip.htm">TCP</a> to advertise to these destinations, measured in bytes. It limits maximal data bursts that our TCP peers are allowed to send to us.</td>
</tr>
<tr class="tcw">
<td><b>rtt</b> <i>TIME</i></td>
<td><p>The initial RTT ('Round Trip Time') estimate. If no <a href="/jargon/s/suffix.htm">suffix</a> is specified the units are raw values passed directly to the routing code to maintain compatibility with previous releases. Otherwise:</p>
<p>a suffix of <b>s</b>, <b>sec</b> or <b>secs</b> is used to specify <a href="/jargon/s/second.htm">seconds</a>;</p>
<p><b>ms</b>, <b>msec</b> or <b>msecs</b> to specify <a href="/jargon/m/millisec.htm">milliseconds</a>;</p>
<p><b>us</b>, <b>usec</b> or <b>usecs</b> to specify <a href="/jargon/m/microsec.htm">microseconds</a>;</p>
<p><b>ns</b>, <b>nsec</b> or <b>nsecs</b> to specify <a href="/jargon/n/nanosec.htm">nanoseconds</a>;</p>
<p>or <b>j</b>, <b>hz</b> or <b>jiffies</b> to specify <a href="/jargon/t/tick.htm">jiffies</a>.</p>
<p>The value is then converted to what the routing code expects.</p>
</td>
</tr>
<tr class="tcw">
<td><b>rttvar</b> <i>TIME</i></td>
<td>The initial RTT variance estimate. Values are specified as with <b>rtt</b> above.</td>
</tr>
<tr class="tcw">
<td><b>rto_min</b> <i>TIME</i></td>
<td>The minimum <i>TCP Retransmission</i> <a href="/jargon/t/timeout.htm">timeout</a> to use when communicating with this destination. Values are specified as with <b>rtt</b> above.</td>
</tr>
<tr class="tcw">
<td><b>ssthresh</b> <i>NUMBER</i></td>
<td>An estimate for the initial slow start threshold.</td>
</tr>
<tr class="tcw">
<td><b>cwnd</b> <i>NUMBER</i></td>
<td>The clamp for congestion window. It is ignored if the <b>lock</b> flag is not used.</td>
</tr>
<tr class="tcw">
<td><b>initcwnd</b> <i>NUMBER</i></td>
<td>The maximum initial congestion window (cwnd) size in MSS of a TCP connection.</td>
</tr>
<tr class="tcw">
<td><b>initrwnd</b> <i>NUMBER</i></td>
<td>The initial receive window size for connections to this destination. Actual window size is this value multiplied by the MSS of the connection. The default value is zero, meaning to use Slow Start value.</td>
</tr>
<tr class="tcw">
<td><b>advmss</b> <i>NUMBER</i></td>
<td>The MSS ('Maximal Segment Size') to advertise to these destinations when establishing TCP connections. If it's not given, Linux uses a default value calculated from the first hop device MTU. If the path to these destination is asymmetric, this guess may be wrong.</td>
</tr>
<tr class="tcw">
<td><b>reordering</b> <i>NUMBER</i></td>
<td>Maximal reordering on the path to this destination. If it's not given, Linux uses the value selected with sysctl variable <b>net/ipv4/tcp_reordering</b>.</td>
</tr>
<tr class="tcw">
<td><b>nexthop</b> <i>NEXTHOP</i></td>
<td><p>The nexthop of a multipath route. <i>NEXTHOP</i> is a complex value with its own syntax similar to the top level argument lists:</p>
<p><b>via</b> <i>ADDRESS</i></p>
<p>is the nexthop router.</p>
<p><b>dev</b> <i>NAME</i></p>
<p>is the output device.</p>
<p><b>weight</b> <i>NUMBER</i></p>
<p>is a weight for this element of a multipath route reflecting its relative bandwidth or quality.</p>
</td>
</tr>
<tr class="tcw">
<td><b>scope</b> <i>SCOPE_VAL</i></td>
<td>The scope of the destinations covered by the route prefix. <i>SCOPE_VAL</i> may be a number or a string from the file <b>/etc/iproute2/rt_scopes</b>. If this parameter is omitted, <b>ip</b> assumes scope global for all <a href="/jargon/g/gateway.htm">gatewayed</a> unicast routes, scope link for direct unicast and broadcast routes and scope host for local routes.</td>
</tr>
<tr class="tcw">
<td><b>protocol</b> <i>RTPROTO</i></td>
<td><p>The routing protocol identifier of this route. <i>RTPROTO</i> may be a number or a string from the file <b>/etc/iproute2/rt_protos</b>. If the routing protocol ID is not given, ip assumes protocol boot (i.e., it assumes the route was added by someone who doesn't understand what they are doing). Several protocol values have a fixed interpretation. Namely:</p>
<p><b>redirect</b> - the route was installed due to an <a href="/jargon/i/icmp.htm">ICMP</a> redirect.</p>
<p><b>kernel</b> - the route was installed by the kernel during autoconfiguration.</p>
<p><b>boot</b> - the route was installed during the bootup sequence. If a routing <a href="/jargon/d/daemon.htm">daemon</a> starts, it will purge all of them.</p>
<p><b>static</b> - the route was installed by the administrator to override dynamic routing. Routing daemon will respect them and, probably, even advertise them to its peers.</p>
<p><b>ra</b> - the route was installed by Router Discovery protocol.</p>
</td>
</tr>
</table>
<p class="tab">The rest of the values are not reserved and the administrator is free to assign (or not to assign) protocol tags:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>onlink</b></td>
<td>Pretend that the nexthop is directly attached to this link, even if it does not match any interface prefix.</td>
</tr>
<tr class="tcw">
<td><b>equalize</b></td>
<td>Allow packet by packet randomization on multipath routes. Without this modifier, the route will be frozen to one selected nexthop, so that load splitting will only occur on per-flow base. equalize only works if the kernel is patched.</td>
</tr>
</table>
<p class="tab"><b>ip route delete</b> - delete route</p>
<p class="tab"><b>ip route del</b> has the same arguments as <b>ip route add</b>, but their semantics are a bit different.</p>
<p class="tab">Key values (<b>to</b>, <b>tos</b>, <b>preference</b> and <b>table</b>) select the route to delete. If optional attributes are present, <b>ip</b> verifies that they coincide with the attributes of the route to delete. If no route with the given key and attributes was found, <b>ip route del</b> fails.</p>
<p class="tab"><b>ip route show</b> - list routes</p>
<p class="tab">the command displays the contents of the routing tables or the route(s) selected by some criteria.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>to</b> <i>SELECTOR</i> (default)</td>
<td>Only select routes from the given range of destinations. <i>SELECTOR</i> consists of an optional modifier (<b>root</b>, <b>match</b> or <b>exact</b>) and a prefix. <b>root</b> <i>PREFIX</i> selects routes with prefixes not shorter than <i>PREFIX</i>. For example, <b>root 0/0</b> selects the entire routing table. <b>match</b> <i>PREFIX</i> selects routes with prefixes not longer than <i>PREFIX</i>. For example, <b>match 10.0/16</b> selects <b>10.0/16</b>, <b>10/8</b> and <b>0/0</b>, but it does not select <b>10.1/16</b> and <b>10.0.0/24</b>. And exact <i>PREFIX</i> (or just <i>PREFIX</i>) selects routes with this exact prefix. If neither of these options are present, ip assumes root <b>0/0</b> i.e., it lists the entire table.</td>
</tr>
<tr class="tcw">
<td><b>tos</b> <i>TOS</i>, <b>dsfield</b> <i>TOS</i></td>
<td>Only select routes with the given TOS.</td>
</tr>
<tr class="tcw">
<td><b>table</b> <i>TABLEID</i></td>
<td><p>Show the routes from this table(s). The default setting is to show <b>tablemain</b>. <i>TABLEID</i> may either be the ID of a real table or one of the special values:</p>
<p><b>all</b></p>
<p>list all of the tables.</p>
<p><b>cache</b></p>
<p>dump the routing cache.</p>
<p><b>cloned</b>, <b>cached</b></p>
<p>list cloned routes i.e., routes which were dynamically forked from other routes because some route attribute (f.e. MTU) was updated. Actually, it is equivalent to <b>table cache</b>.</p>
</td>
</tr>
<tr class="tcw">
<td><b>from</b> <i>SELECTOR</i></td>
<td>The same syntax as for <b>to</b>, but it binds the source address range rather than destinations. Note that the <b>from</b> option only works with cloned routes.</td>
</tr>
<tr class="tcw">
<td><b>protocol</b> <i>RTPROTO</i></td>
<td>Only list routes of this protocol.</td>
</tr>
<tr class="tcw">
<td><b>scope</b> <i>SCOPE_VAL</i></td>
<td>Only list routes with this scope.</td>
</tr>
<tr class="tcw">
<td><b>type</b> <i>TYPE</i></td>
<td>Only list routes of this type.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>Only list routes going via this device.</td>
</tr>
<tr class="tcw">
<td><b>via</b> <i>PREFIX</i></td>
<td>Only list routes going via the nexthop routers selected by <i>PREFIX</i>.</td>
</tr>
<tr class="tcw">
<td><b>src</b> <i>PREFIX</i></td>
<td>Only list routes with preferred source addresses selected by <i>PREFIX</i>.</td>
</tr>
<tr class="tcw">
<td><b>realm</b> <i>REALMID</i>, <b>realms</b> <i>FROMREALM/ TOREALM</i></td>
<td>Only list routes with these realms.</td>
</tr>
</table>
<p class="tab"><b>ip route flush</b> - flush routing tables</p>
<p class="tab">this command flushes routes selected by some criteria.</p>
<p class="tab">The arguments have the same syntax and semantics as the arguments of <b>ip route show</b>, but routing tables are not listed but purged. The only difference is the default action: <b>show</b> dumps all the IP main routing table but <b>flush</b> prints the helper page.</p>
<p class="tab">With the <b>-statistics</b> option, the command becomes verbose. It prints out the number of deleted routes and the number of rounds made to flush the routing table. If the option is given twice, <b>ip route flush</b> also dumps all the deleted routes in the format described in the previous subsection.</p>
<p class="tab"><b>ip route get</b> - get a single route</p>
<p class="tab">this command gets a single route to a destination and prints its contents exactly as the kernel sees it.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>to</b> <i>ADDRESS</i> (default)</td>
<td>The destination address.</td>
</tr>
<tr class="tcw">
<td><b>from</b> <i>ADDRESS</i></td>
<td>The source address.</td>
</tr>
<tr class="tcw">
<td><b>tos</b> <i>TOS</i>, <b>dsfield</b> <i>TOS</i></td>
<td>The Type Of Service.</td>
</tr>
<tr class="tcw">
<td><b>iif</b> <i>NAME</i></td>
<td>The device from which this packet is expected to arrive.</td>
</tr>
<tr class="tcw">
<td><b>oif</b> <i>NAME</i></td>
<td>Force the output device on which this packet will be routed.</td>
</tr>
<tr class="tcw">
<td><b>connected</b></td>
<td>If no source address (option <b>from</b>) was given, re-lookup the route with the source set to the preferred address received from the first lookup. If policy routing is used, it may be a different route.</td>
</tr>
</table>
<p class="tab">Note that this operation is not equivalent to <b>ip route show</b>. <b>show</b> shows existing routes. <b>get</b> resolves them and creates new clones if necessary. Essentially, <b>get</b> is equivalent to sending a packet along this path. If the <b>iif</b> argument is not given, the kernel creates a route to output packets towards the requested destination. This is equivalent to <a href="/jargon/p/ping.htm">pinging</a> the destination with a subsequent <b>ip route ls cache</b>, however, no packets are actually sent. With the <b>iif</b> argument, the kernel pretends that a packet arrived from this interface and searches for a path to forward the packet.</p>
<p class="tab"><b>ip rule</b> - routing policy database management</p>
<p class="tab">Rules in the routing policy database control the route selection <a href="/jargon/a/algorith.htm">algorithm</a>.</p>
<p class="tab">Classic routing algorithms used in the Internet make routing decisions based only on the destination address of packets (and in theory, but not in practice, on the TOS field).</p>
<p class="tab">In some circumstances we want to route packets differently depending not only on destination addresses, but also on other packet fields: <b>source address</b>, <b>IP protocol</b>, <b>transport protocol ports</b> or even <b>packet payload</b>. This task is called 'policy routing'.</p>
<p class="tab">To solve this task, the conventional destination based routing table, ordered according to the longest match rule, is replaced with a 'routing policy database' (or RPDB), which selects routes by executing some set of rules.</p>
<p class="tab">Each policy routing rule consists of a selector and an action predicate. The RPDB is scanned in the order of increasing priority. The selector of each rule is applied to {<b>source address</b>, <b>destination address</b>, <b>incoming interface</b>, <b>tos</b>, <b>fwmark</b>} and, if the selector matches the packet, the action is performed. The action predicate may return with success. In this case, it will either give a route or failure indication and the RPDB lookup is terminated. Otherwise, the RPDB program continues on the next rule.</p>
<p class="tab">Semantically, natural action is to select the nexthop and the output device.</p>
<pre class="tcy tab">ip rule [ list | add | del | flush ] <i>SELECTOR</i> <i>ACTION</i> 
</pre>
<p class="tab"><b>ip rule add</b> - insert a new rule</p>
<p class="tab"><b>ip rule delete</b> - delete a rule</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>type</b> <i>TYPE</i> (default)</td>
<td>The type of this rule. The list of valid types was given in the previous subsection.</td>
</tr>
<tr class="tcw">
<td><b>from</b> <i>PREFIX</i></td>
<td>Select the source prefix to match.</td>
</tr>
<tr class="tcw">
<td><b>to</b> <i>PREFIX</i></td>
<td>Select the destination prefix to match.</td>
</tr>
<tr class="tcw">
<td><b>iif</b> <i>NAME</i></td>
<td>Select the incoming device to match. If the interface is loopback, the rule only matches packets originating from this host. This means that you may create separate routing tables for forwarded and local packets and, hence, completely segregate them.</td>
</tr>
<tr class="tcw">
<td><b>tos</b> <i>TOS</i>, <b>dsfield</b> <i>TOS</i></td>
<td>Select the TOS value to match.</td>
</tr>
<tr class="tcw">
<td><b>fwmark</b> <i>MARK</i></td>
<td>Select the fwmark value to match.</td>
</tr>
<tr class="tcw">
<td><b>priority</b> <i>PREFERENCE</i></td>
<td>The priority of this rule. Each rule should have an explicitly set unique priority value. The options preference and order are synonyms with priority.</td>
</tr>
<tr class="tcw">
<td><b>table</b> <i>TABLEID</i></td>
<td>The routing table identifier to lookup if the rule selector matches. It is also possible to use <b>lookup</b> instead of <b>table</b>.</td>
</tr>
<tr class="tcw">
<td><b>realms</b> <i>FROM/TO</i></td>
<td>Realms to select if the rule matched and the routing table lookup succeeded. Realm <i>TO</i> is only used if the route did not select any realm.</td>
</tr>
<tr class="tcw">
<td><b>nat</b> <i>ADDRESS</i></td>
<td>The base of the IP address block to translate (for source addresses). The ADDRESS may be either the start of the block of NAT addresses (selected by NAT routes) or a local host address (or even zero). In the last case the router does not translate the packets, but masquerades them to this address. Using <b>map-to</b> instead of <b>nat</b> means the same thing.</td>
</tr>
</table>
<p class="tab"><b>Warning:</b> Changes to the RPDB made with these commands do not become active immediately. It is assumed that after a <a href="/jargon/s/script.htm">script</a> finishes a batch of updates, it flushes the routing cache with <b>ip route flush</b> cache.</p>
<p class="tab"><b>ip rule flush</b> - also dumps all the deleted rules.</p>
<p class="tab">This command has no arguments.</p>
<p class="tab"><b>ip rule show</b> - list rules</p>
<p class="tab">This command has no arguments. The options <b>list</b> or <b>lst</b> are synonyms with <b>show</b>.</p>
<p class="tab"><b>ip maddress</b> - multicast addresses management</p>
<p class="tab"><b>maddress</b> objects are multicast addresses.</p>
<pre class="tcy tab">ip maddress show [ dev <i>STRING</i> ]</pre>
<pre class="tcy tab">ip maddress [ add | del ] <i>MULTIADDR</i> dev <i>STRING</i>
</pre>
<p class="tab"><b>ip maddress show</b> - list multicast addresses</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>the device name.</td>
</tr>
</table>
<p class="tab"><b>ip maddress add</b> - add a multicast address</p>
<p class="tab"><b>ip maddress delete</b> - delete a multicast address</p>
<p class="tab">these commands attach/detach a static link layer multicast address to listen on the interface. Note that it is impossible to join protocol multicast groups statically. This command only manages link layer addresses.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>address</b> <i>LLADDRESS</i> (default)</td>
<td>The link layer multicast address.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>The device to join/leave this multicast address.</td>
</tr>
</table>
<p class="tab"><b>ip mroute</b> - multicast routing cache management</p>
<p class="tab"><b>mroute</b> objects are multicast routing cache entries created by a user level mrouting daemon (e.g., <b>pimd</b> or <b>mrouted</b>).</p>
<p class="tab">Due to the limitations of the current interface to the multicast routing engine, it is impossible to change <b>mroute</b> objects administratively, so we may only display them. According to the authors, this limitation will be removed in the future.</p>
<p class="tab"><b>ip mroute show</b> - list mroute cache entries</p>
<pre class="tcy tab">ip mroute show [ <i>PREFIX</i> ] [ from <i>PREFIX</i> ] [ iif <i>DEVICE</i> ]
</pre>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>to</b> <i>PREFIX</i> (default)</td>
<td>The prefix selecting the destination multicast addresses to list.</td>
</tr>
<tr class="tcw">
<td><b>iif</b> <i>NAME</i></td>
<td>The interface on which multicast packets are received.</td>
</tr>
<tr class="tcw">
<td><b>from</b> <i>PREFIX</i></td>
<td>The prefix selecting the IP source addresses of the multicast route.</td>
</tr>
</table>
<p class="tab"><b>ip tunnel</b> - tunnel configuration</p>
<p class="tab"><b>tunnel</b> objects are tunnels, encapsulating <a href="/jargon/p/packet.htm">packets</a> in IP packets and then sending them over the IP infrastructure. The encapulating (or outer) address family is specified by the <b>-f</b> option. The default is IPv4.</p>
<pre class="tcy tab">ip tunnel { add | change | del | show | prl } [ <i>NAME</i> ] [ mode <i>MODE</i> ]
          [ remote <i>ADDR</i> ] [ local <i>ADDR</i> ] [ [i|o]seq ] [ [i|o]key <i>KEY</i> ]
          [ [i|o]csum ] ] [ encaplimit <i>ELIM</i> ] [ ttl <i>TTL</i> ] [ tos <i>TOS</i> ]
          [ flowlabel <i>FLOWLABEL</i> ] [ prl-default <i>ADDR</i> ] [ prl-nodefault <i>ADDR</i> ]
          [ prl-delete <i>ADDR</i> ] [ [no]pmtudisc ] [ dev <i>PHYS</i>_<i>DEV</i> ] [ dscp inherit ]
</pre>
<p class="tab"><b>ip tunnel add</b> - add a new tunnel</p>
<p class="tab"><b>ip tunnel change</b> - change an existing tunnel</p>
<p class="tab"><b>ip tunnel delete</b> - destroy a tunnel</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>name</b> <i>NAME</i> (default)</td>
<td>Select the tunnel device name.</td>
</tr>
<tr class="tcw">
<td><b>mode</b> <i>MODE</i></td>
<td>Set the tunnel mode. Available modes depend on the encapsulating address family.<br><br> Modes for IPv4 encapsulation available: ipip, sit, isatap, and gre.<br><br> Modes for IPv6 encapsulation available: <b>ip6ip6</b>, <b>ipip6</b> and <b>any</b>.</td>
</tr>
<tr class="tcw">
<td><b>remote</b> <i>ADDRESS</i></td>
<td>Set the remote endpoint of the tunnel.</td>
</tr>
<tr class="tcw">
<td><b>local</b> <i>ADDRESS</i></td>
<td>Set the fixed local address for tunneled packets. It must be an address on another interface of this host.</td>
</tr>
<tr class="tcw">
<td><b>ttl</b> <i>N</i></td>
<td>Set a fixed TTL <i>N</i> on tunneled packets. <i>N</i> is a number in the range <b>1-255</b>. <b>0</b> is a special value meaning that packets inherit the TTL value. The default value for IPv4 tunnels is: <b>inherit</b>. The default value for IPv6 tunnels is: <b>64</b>.</td>
</tr>
<tr class="tcw">
<td><b>tos</b> <i>T</i>, <b>dsfield</b> <i>T</i>, <b>tclass</b> <i>T</i></td>
<td>Set a fixed TOS (or traffic class in IPv6) <i>T</i> on tunneled packets. The default value is: <b>inherit</b>.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>NAME</i></td>
<td>Bind the tunnel to the device <i>NAME</i> so that tunneled packets will only be routed via this device and will not be able to escape to another device when the route to endpoint changes.</td>
</tr>
<tr class="tcw">
<td><b>nopmtudisc</b></td>
<td>Disable <i>Path MTU Discovery</i> on this tunnel. It is enabled by default. Note that a fixed ttl is incompatible with this option: tunnelling with a fixed ttl always makes pmtu discovery.</td>
</tr>
<tr class="tcw">
<td><b>key</b> <i>K</i>,<br> <b>ikey</b> <i>K</i>,<br> <b>okey</b> <i>K</i></td>
<td>( only GRE tunnels ) use keyed GRE with key <i>K</i>. <i>K</i> is either a number or an IP address-like dotted quad. The key parameter sets the key to use in both directions. The <i>ikey</i> and <i>okey</i> parameters set different keys for input and output.</td>
</tr>
<tr class="tcw">
<td><b>csum</b>, <b>icsum</b>, <b>ocsum</b></td>
<td>( only GRE tunnels ) generate/require <a href="/jargon/c/checksum.htm">checksums</a> for tunneled packets. The <i>ocsum</i> flag calculates checksums for outgoing packets. The <i>icsum</i> flag requires that all input packets have the correct checksum. The <i>csum</i> flag is equivalent to the combination <i>icsum ocsum</i>.</td>
</tr>
<tr class="tcw">
<td><b>seq</b>, <b>iseq</b>, <b>oseq</b></td>
<td>( only GRE tunnels ) serialize packets. The <i>oseq</i> flag enables sequencing of outgoing packets. The <i>iseq</i> flag requires that all input packets are serialized. The <i>seq</i> flag is equivalent to the combination <i>iseq oseq</i>.</td>
</tr>
<tr class="tcw">
<td><b>dscp</b> <i>inherit</i></td>
<td>( only IPv6 tunnels ) Inherit DS field between inner and outer header.</td>
</tr>
<tr class="tcw">
<td><b>encaplim</b> <i>ELIM</i></td>
<td>( only IPv6 tunnels ) set a fixed encapsulation limit. Default is <b>4</b>.</td>
</tr>
<tr class="tcw">
<td><b>flowlabel</b> <i>FLOWLABEL</i></td>
<td>( only IPv6 tunnels ) set a fixed flowlabel.</td>
</tr>
</table>
<p class="tab"><b>ip tunnel prl</b> - potential router list (ISATAP only)</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>dev</b> <i>NAME</i></td>
<td>Mandatory device name.</td>
</tr>
<tr class="tcw">
<td><b>prl-default</b> <i>ADDR</i>, <b>prl-nodefault</b> <i>ADDR</i>, <b>prl-delete</b> <i>ADDR</i></td>
<td>Add or delete ADDR as a potential router or default router.</td>
</tr>
</table>
<p class="tab"><b>ip tunnel show</b> - list tunnels</p>
<p class="tab">This command has no arguments.</p>
<p class="tab"><b>ip monitor and rtmon</b> - state monitoring</p>
<p class="tab">The <b>ip</b> utility can monitor the state of devices, addresses, and routes continuously. This option has a slightly different format. Namely, the <b>monitor</b> command is the first in the command line and then the object list follows:</p>
<pre class="tcy tab">ip monitor [ <i>all</i> | <i>OBJECT-LIST</i> ]</pre>
<p class="tab"><i>OBJECT-LIST</i> is the list of object types that we want to monitor. It may contain <b>link</b>, <b>address</b> and <b>route</b>. If no file argument is given, <b>ip</b> opens RTNETLINK, listens on it and dumps state changes in the format described in previous sections.</p>
<p class="tab">If a <a href="/jargon/f/filename.htm">file name</a> is given, it does not listen on RTNETLINK, but opens the file containing RTNETLINK messages saved in <a href="/jargon/b/binary.htm">binary</a> format and dumps them. Such a history file can be generated with the <b>rtmon</b> utility. This utility has a command line syntax similar to <b>ip monitor</b>. Ideally, <b>rtmon</b> should be started before the first network configuration command is issued. For example, if you insert:</p>
<p class="tabb">rtmon file /var/log/rtmon.log</p>
<p class="tab">in a startup script, you will be able to view the full history later.</p>
<p class="tab">Certainly, it is possible to start <b>rtmon</b> at any time. It prepends the history with the state snapshot dumped at the moment of starting.</p>
<p class="tab"><b>ip xfrm</b> - setting xfrm</p>
<p class="tab"><b>xfrm</b> is an IP framework, which can transform format of the datagrams, i.e., <a href="/jargon/e/encrypt.htm">encrypt</a> the packets with some algorithm. <b>xfrm policy</b> and <b>xfrm state</b> are associated through templates TMPL_LIST. This framework is used as a part of IPsec protocol.</p>
<pre class="tcy tab">ip xfrm state { add | update } <i>ID</i> [ <i>XFRM</i>_<i>OPT</i> ] [ mode <i>MODE</i> ] [ reqid <i>REQID</i> ]
              [ seq <i>SEQ</i> ] [ replay-window <i>SIZE</i> ] [ flag <i>FLAG</i>-<i>LIST</i> ]
              [ encap <i>ENCAP</i> ] [ sel <i>SELECTOR</i> ] [ <i>LIMIT</i>-<i>LIST</i> ]
</pre>
<pre class="tcy tab">ip xfrm state allocspi <i>ID</i> [ mode <i>MODE</i> ] [ reqid <i>REQID</i> ] [ seq <i>SEQ</i> ]
              [ min <i>SPI</i> max <i>SPI</i> ]
</pre>
<p class="tab"><b>ip xfrm state add</b> - add new state into xfrm</p>
<p class="tab"><b>ip xfrm state update</b> - update existing xfrm state</p>
<p class="tab"><b>ip xfrm state allocspi</b> - allocate SPI value</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>MODE</b></td>
<td>Is set as default to transport, but it could be set to tunnel,ro or beet.</td>
</tr>
<tr class="tcw">
<td><b>FLAG-LIST</b></td>
<td>Contains one or more flags.</td>
</tr>
<tr class="tcw">
<td><b>FLAG</b></td>
<td>Could be set to noecn, decap-dscp or wildrecv.</td>
</tr>
<tr class="tcw">
<td><b>ENCAP</b></td>
<td>Encapsulation is set to encapsulation type ENCAP-TYPE, source port SPORT, destination port DPORT and OADDR.</td>
</tr>
<tr class="tcw">
<td><b>ENCAP-TYPE</b></td>
<td>Could be set to <b>espinudp</b> or <b>espinudp-nonike</b>.</td>
</tr>
<tr class="tcw">
<td><b>ALGO-LIST</b></td>
<td>Contains one or more algorithms ALGO which depend on the type of algorithm set by ALGO_TYPE. The algorithm can be <b>enc</b>, <b>auth</b> or <b>comp</b>.</td>
</tr>
</table>
<pre class="tcy tab">ip xfrm policy { add | update } dir <i>DIR</i> <i>SELECTOR</i> [ index <i>INDEX</i> ]
               [ ptype <i>PTYPE</i> ] [ action <i>ACTION</i> ] [ priority <i>PRIORITY</i> ]
               [ <i>LIMIT</i>-<i>LIST</i> ] [ <i>TMPL</i>-<i>LIST</i> ]
</pre>
<pre class="tcy tab">ip xfrm policy { delete | get } dir <i>DIR</i> [ <i>SELECTOR</i> | index <i>INDEX</i> ]
               [ ptype <i>PTYPE</i> ]
</pre>
<pre class="tcy tab">ip xfrm policy { deleteall | list } [ dir <i>DIR</i> ] [ <i>SELECTOR</i> ]
               [ index <i>INDEX</i> ] [ action <i>ACTION</i> ] [ priority <i>PRIORITY</i> ]</pre>
<pre class="tcy tab">ip xfrm policy flush [ ptype <i>PTYPE</i> ]</pre>
<p class="tab"><b>ip xfrm policy add</b> - add a new policy</p>
<p class="tab"><b>ip xfrm policy update</b> - update an existing policy</p>
<p class="tab"><b>ip xfrm policy delete</b> - delete existing policy</p>
<p class="tab"><b>ip xfrm policy get</b> - get existing policy</p>
<p class="tab"><b>ip xfrm policy deleteall</b> - delete all existing xfrm policy</p>
<p class="tab"><b>ip xfrm policy list</b> - print out the list of xfrm policy</p>
<p class="tab"><b>ip xfrm policy flush</b> - flush policies</p>
<p class="tab"><b>ip xfrm policy flush</b> can flush all policies or only those specified with <b>ptype</b>.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>dir</b> <i>DIR</i></td>
<td>Directory could be one of these: <b>inp</b>, <b>out</b> or <b>fwd</b>.</td>
</tr>
<tr class="tcw">
<td><i>SELECTOR</i></td>
<td>Selects which addresses the policy will configure. The selector is defined by source and destination address.</td>
</tr>
<tr class="tcw">
<td><i>UPSPEC</i></td>
<td>Is defined by source port <b>sport</b>, destination port <b>dport</b>, <b>type</b> as number and <b>code</b> also number.</td>
</tr>
<tr class="tcw">
<td><b>dev</b> <i>DEV</i></td>
<td>Specify network device.</td>
</tr>
<tr class="tcw">
<td><b>index</b> <i>INDEX</i></td>
<td>The number of indexed policy.</td>
</tr>
<tr class="tcw">
<td><b>ptype</b> <i>PTYPE</i></td>
<td>Default type is <b>main</b>.</td>
</tr>
<tr class="tcw">
<td><b>action</b> <i>ACTION</i></td>
<td>Default is <b>allow</b>.</td>
</tr>
<tr class="tcw">
<td><b>priority</b> <i>PRIORITY</i></td>
<td>Priority is a number. Default is zero.</td>
</tr>
<tr class="tcw">
<td><i>LIMIT-LIST</i></td>
<td>Limits are set in seconds, bytes or numbers of packets.</td>
</tr>
<tr class="tcw">
<td><i>TMPL-LIST</i></td>
<td>Template list is based on <b>ID</b>, <b>mode</b>, <b>reqid</b> and <b>level</b>.</td>
</tr>
<tr class="tcw">
<td><i>ID</i></td>
<td>Is specified by <b>source address</b>, <b>destination address</b>, <b>proto</b>, and value of <b>spi</b>.</td>
</tr>
<tr class="tcw">
<td><i>XFRM_PROTO</i></td>
<td>Values: <b>esp</b>, <b>ah</b>, <b>comp</b>, <b>route2</b> or <b>hao</b>.</td>
</tr>
<tr class="tcw">
<td><i>MODE</i></td>
<td>Is set as default to <b>transport</b>, but it could be set to <b>tunnel</b> or <b>beet</b>.</td>
</tr>
<tr class="tcw">
<td><i>LEVEL</i></td>
<td>Is set as default on required and the other choice is use.</td>
</tr>
<tr class="tcw">
<td><i>UPSPEC</i></td>
<td>Is specified by <b>sport</b>, <b>dport</b>, <b>type</b> and <b>code</b> (NUMBER).</td>
</tr>
</table>
<pre class="tcy tab">ip xfrm monitor [ all | <i>OBJECT-LIST</i> ]</pre>
<p class="tab"><b>ip xfrm monitor</b> - is used for listing all objects or defined group of them.</p>
<p class="tab"><b>xfrm monitor</b> can monitor the policies for all objects or defined group of them.</p>
<h2 id="examples">Examples</h2>
<div class="tip tab" role="note">
<span class="title">Tip</span>
<p>You must have <a href="/jargon/r/root.htm">root</a> access to use some functions of the <b>ip</b> command.</p>
</div>
<pre class="tcy tab">ip addr show</pre>
<p class="tab">Lists the network interfaces.</p>
<pre class="tcy tab">ip route show</pre>
<p class="tab">Lists the routing table.</p>
<pre class="tcy tab">ip addr add 104.20.56.118 dev eth1</pre>
<p class="tab">Assign the IP address <b>104.20.56.118</b> to Ethernet device <b>eth1</b>.</p>
<h3 class="tab">A note about other operating systems</h3>
<p class="tab">If you are using another Unix-like operating system such as BSD or macOS X (whose foundations are based upon BSD), the <b>ip</b> command may not be available; however the same, or very closely similar, functionality can be achieved using the <b>route</b> command. For instance, this Linux <b>ip</b> command:</p>
<pre class="tcy tab">ip route get 74.125.226.35</pre>
<p class="tab">...which outputs:</p>
<pre class="tab">74.125.226.35 via 192.168.1.1 dev wlan0  src 192.168.1.2
cache</pre>
<p class="tab">...is similar to this OS X <b>route</b> command:</p>
<pre class="tcy tab">route get 74.125.226.35</pre>
<pre class="tab">route to: lga15s43-in-f3.1e100.net
destination: default
       mask: default
    gateway: 192.168.1.1
  interface: en1
      flags: &lt;UP,GATEWAY,DONE,STATIC,PRCLONING&gt;
 recvpipe  sendpipe  ssthresh  rtt,msec    rttvar  hopcount      mtu     expire
       0         0         0         0         0         0      1500         0</pre>
<p class="tab">Note that this form of the <b>route</b> command is BSD-specific, and does not carry over to Linux <a href="/unix/route.htm"><b>route</b></a>. Also, note that the <b>route</b> command performs DNS resolution, but <b>ip</b> does not. Therefore, on BSD, this command will work:</p>
<pre class="tcy tab">route get google.com</pre>
<p class="tab">...but this Linux command:</p>
<pre class="tcy tab">ip route get google.com</pre>
<p class="tab">...will not, because it needs an IP address, and cannot (by design) resolve the domain name on its own.</p>
<p class="tab">There are many differences between these types of <a href="/jargon/k/kernel.htm">kernel</a>-level utilities on varying operating systems despite the fact they often share the same command name, and it's advisable to check your operating system's manual pages for exact usage details.</p>
<h2 id="related">Related commands</h2>
<p class="tab"><a href="/unix/arp.htm"><b>arp</b></a> &mdash; Manipulate the system ARP cache.<br><a href="/unix/uifconfi.htm"><b>ifconfig</b></a> &mdash; View or modify the configuration of network interfaces.<br><a href="/unix/unetstat.htm"><b>netstat</b></a> &mdash; Print information about network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.<br><a href="/unix/route.htm"><b>route</b></a> &mdash; Display and manipulate the IP routing table.<br><a href="/unix/tcpdump.htm"><b>tcpdump</b></a> &mdash; Capture raw network traffic.</p>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a82fd0fb2c447',m:'jluNk17bwNYCm7QaXYaR3AioFAuWDVeEdC1Vnsy21Qk-1661495351-0-AYIrDKMaZcJ7NOKUtjRQEyDmV2or/YXRsoIxZ9vQTCwLEy8dgmmmV2Hb6vCgojsrJyJxZbD1p58bsdKPjNCyRUZmsyQAxWW4H8aQVEqeyTtOo6IUG1FA/mjKeynuhVribg==',s:[0xcd027b104c,0xcb54de86e4],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>