<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Linux emacs command</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-11-06">11/06/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/emacs.gif" width="300" height="300" alt="emacs command" class="floatRight"><p class="intro">On <a href="/jargon/u/unix-like.htm">Unix-like</a> operating systems, the <b>emacs</b> command launches Emacs, a comprehensive, customizable text editor, optimized for <a href="/jargon/s/softdeve.htm">software development</a>.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#options">Options</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#related">Related commands</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="syntax">Syntax</h2>
<p class="tcy tab">emacs [ <i>command-line switches</i> ] [ <i>files</i> ... ]</p>
<h3 class="tab">Description</h3>
<p class="tab"><b>Emacs</b> is a highly extensible, extremely customizable text editor originally written for the <a href="/jargon/p/pdp.htm">PDP-10</a> by <a href="/people/richard_stallman.htm">Richard Stallman</a> in the 1970s. It incorporates over 2000 commands, which can be extended using Emacs <a href="/jargon/l/lisp.htm">Lisp</a>, and automated by user-created <a href="/jargon/m/macro.htm">macros</a>.<br><br><b>Emacs</b> can do much more than simple insertion and deletion of text. It can control subprocesses, indent programs automatically, show multiple files at once, and more. Emacs editing commands operate in terms of <a href="/jargon/c/charact.htm">characters</a>, words, lines, sentences, paragraphs, and pages, and <a href="/jargon/e/expressi.htm">expressions</a> and comments in various <a href="/jargon/p/programming-language.htm">programming languages</a>.<br><br><b>Emacs</b> is called "self-documenting" because at any time you can use special commands, known as help commands, to find out what your options are, or to find out what any command does, or to find all the commands that pertain to a given topic.<br><br><b>Emacs</b> is <i>customizable</i> in that you can easily alter its behavior in simple ways. For instance, if you use a programming language where <a href="/jargon/c/comment.htm">comments</a> start with '<b>&lt;**</b>' and end with '<b>**&gt;</b>', you can tell the <b>Emacs</b> comment manipulation commands to use those strings (see <a href="#Comments">Comments</a>). To use another example, you can rebind the basic <a href="/jargon/c/cursor.htm">cursor</a> motion commands (up, down, left and right) to any keys on the keyboard that you find comfortable. See <a href="#Customization">Customization</a>.<br><br><b>Emacs</b> is <i>extensible</i> in that you can go beyond simple customization and create entirely new commands. New commands are programs written in the <a href="/jargon/l/lisp.htm">Lisp</a> language, which are run by Emacs's own Lisp <a href="/jargon/i/interpre.htm">interpreter</a>. Existing commands can even be redefined in the middle of an editing session, without having to restart <b>Emacs</b>. Most of the editing commands in <b>Emacs</b> are written in Lisp; the few exceptions could be written in Lisp but use <a href="/jargon/c/c.htm">C</a> instead for efficiency. Writing an extension is programming, but non-programmers can use it afterwards.</p>
<h3 class="tab">Getting help from within Emacs</h3>
<p class="tab"><b>Emacs</b> has an extensive built-in help facility, but it assumes that you know how to manipulate Emacs windows and buffers. <b>Ctrl-h</b> or <b>F1</b> enters the Help facility. "Help Tutorial" (<b>Ctrl-h t</b>) starts an interactive tutorial which can teach beginners the fundamentals of Emacs in a few minutes. "Help Apropos" (<b>Ctrl-h a</b>) helps you find a command given its functionality, "Help Character" (<b>Ctrl-h c</b>) describes a given character's effect, and "Help Function" (<b>Ctrl-h f</b>) describes a given Lisp function specified by name.<br><br>This documentation covers <a href="/jargon/g/gnu.htm">GNU</a> Emacs, which includes special packages to handle mail reading (<b>RMail</b>) and mail sending (<b>Mail</b>); outline editing (<b>Outline</b>); compiling (<b>Compile</b>); running sub-<a href="/jargon/s/shell.htm">shells</a> within <b>Emacs</b> windows (<b>Shell</b>); running a Lisp <b>read-eval-print</b> loop (<b>Lisp-Interaction-Mode</b>), automated psychotherapy (seriously. It's called <b>Doctor</b>), and much more.</p>
<h2 id="options">Options</h2>
<p class="tab">General-interest <b>Emacs</b> options:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><i>file</i></td>
<td>Edit file <i>file</i>.</td>
</tr>
<tr class="tcw">
<td><b>--file</b> <i>file</i>,<br><b>--find-file</b> <i>file</i>,<br><b>--visit</b> <i>file</i></td>
<td>The same as specifying <i>file</i> directly as an <a href="/jargon/a/argument.htm">argument</a>.</td>
</tr>
<tr class="tcw">
<td><b>+</b><i>number</i></td>
<td>Go to the line specified by <i>number</i> (do not insert a space between the "<b>+</b>" sign and the number). This applies only to the next file specified.</td>
</tr>
<tr class="tcw">
<td><b>+</b><i>line</i><b>:</b><i>column</i></td>
<td>Go to the specified <i>line</i> and <i>column</i></td>
</tr>
<tr class="tcw">
<td><b>-q</b>,<br><b>--no-init-file</b></td>
<td>Do not load an init file.</td>
</tr>
<tr class="tcw">
<td><b>-no-site-file</b></td>
<td>Do not load the site-wide startup file.</td>
</tr>
<tr class="tcw">
<td><b>--no-desktop</b></td>
<td>Do not load a saved desktop.</td>
</tr>
<tr class="tcw">
<td><b>-Q</b>, <b>--quick</b></td>
<td>Similar to "<b>-q --no-site-file --no-spash</b>". Also, skips any processing of <a href="/jargon/x/xwin.htm">X Windows</a> resources.</td>
</tr>
<tr class="tcw">
<td><b>--no-splash</b></td>
<td>Do not display a <a href="/jargon/s/splashsc.htm">splash screen</a> during startup.</td>
</tr>
<tr class="tcw">
<td><b>--debug-init</b></td>
<td>Enable the Emacs Lisp <a href="/jargon/d/debugger.htm">debugger</a> during the processing of the user init file <b>~/.emacs</b>. This is useful for debugging problems in the init file.</td>
</tr>
<tr class="tcw">
<td><b>-u</b> <i>user</i>,<br><b>--user</b> <i>user</i></td>
<td>Load <i>user</i>'s init file.</td>
</tr>
<tr class="tcw">
<td><b>-t</b> <i>file</i>,<br><b>--terminal</b> <i>file</i></td>
<td>Use specified <i>file</i> as the terminal instead of using <a href="/jargon/s/stdin.htm">stdin</a>/stdout. This must be the first argument specified in the <a href="/jargon/c/commandi.htm">command line</a>.</td>
</tr>
<tr class="tcw">
<td><b>--daemon</b></td>
<td>Start Emacs as a <a href="/jargon/d/daemon.htm">daemon</a>, enabling the Emacs <a href="/jargon/s/server.htm">server</a> and disconnecting from the <a href="/jargon/t/terminal.htm">terminal</a>. You can then use the <b>emacsclient</b> command to connect to the server.</td>
</tr>
<tr class="tcw">
<td><b>--version</b></td>
<td>Display Emacs version information and exit.</td>
</tr>
<tr class="tcw">
<td><b>--help</b></td>
<td>Display a help message and exit.</td>
</tr>
</table>
<p class="tab">The following options are lisp-oriented (these options are processed in the order encountered):</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>-f</b> <i>function</i>,<br><b>--funcall</b> <i>function</i></td>
<td>Execute the lisp function <i>function</i>.</td>
</tr>
<tr class="tcw">
<td><b>-l</b> <i>file</i>, <b>--load</b> <i>file</i></td>
<td>Load the lisp code in the file <i>file</i>.</td>
</tr>
<tr class="tcw">
<td><b>-eval</b> <i>expr</i>,<br><b>--execute</b> <i>expr</i></td>
<td>Evaluate the Lisp <a href="/jargon/e/expressi.htm">expression</a> <i>expr</i>.</td>
</tr>
</table>
<p class="tab">The following options are useful when running Emacs as a <a href="/jargon/b/batchfil.htm">batch</a> editor:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>--batch</b></td>
<td>Edit in batch mode. The editor sends messages to standard error. You must use <b>-l</b> and <b>-f</b> options to specify files to execute and functions to call.</td>
</tr>
<tr class="tcw">
<td><b>--script</b> <i>file</i></td>
<td>Run <i>file</i> as an Emacs lisp script.</td>
</tr>
<tr class="tcw">
<td><b>--insert</b> <i>file</i></td>
<td>Insert contents of <i>file</i> into the current buffer.</td>
</tr>
<tr class="tcw">
<td><b>--kill</b></td>
<td>Exit <b>Emacs</b> while in batch mode.</td>
</tr>
<tr class="tcw">
<td><b>-L</b> <i>directory</i>,<br><b>--directory</b> <i>directory</i></td>
<td>Add <i>directory</i> to the list of <a href="/jargon/d/director.htm">directories</a> where <b>Emacs</b> searches for Lisp files.</td>
</tr>
</table>
<h3 class="tab">Using Emacs with X</h3>
<p class="tab">Emacs is designed to work well with the <a href="/jargon/x/xwin.htm">X Window System</a>. If you run Emacs under X Windows, it creates its own window to be displayed. You probably want to run it as a background process so that you can still use your original window. <b>Emacs</b> can be started with the following X-related switches:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>--name</b> <i>name</i></td>
<td>Specify the name which should be assigned to the initial Emacs window. This controls looking up X resources and the title of the window.</td>
</tr>
<tr class="tcw">
<td><b>-T</b> <i>name</i>, <b>--title</b> <i>name</i></td>
<td>Specify the title for the initial X window.</td>
</tr>
<tr class="tcw">
<td><b>-r</b>, <b>-rv</b>,<br><b>--reverse-video</b></td>
<td>Display the Emacs window in reverse video.</td>
</tr>
<tr class="tcw">
<td><b>-fn</b> <i>font</i>, <b>--font</b> <i>font</i></td>
<td>Set the Emacs window's font to that specified by <i>font</i>. You find the various X fonts in the <b>/usr/lib/X11/fonts</b> directory. Note that Emacs only accepts fixed width fonts. Under the X11 Release 4 font-naming conventions, any font with the value "<b>m</b>" or "<b>c</b>" in the eleventh field of the font name is a fixed width font. Fonts whose name are of the form <b>widthxheight</b> are generally fixed width, as is the font fixed.</td>
</tr>
<tr class="tcw">
<td><b>--xrm</b> <i>resources</i></td>
<td>Set additional X resources.</td>
</tr>
<tr class="tcw">
<td><b>--color</b>, <b>--color</b>=<i>mode</i></td>
<td>Override color mode for <a href="/jargon/c/charact.htm">character</a> terminals; <i>mode</i> defaults to &#96;<b>auto</b>', and can also be &#96;<b>never</b>', &#96;<b>auto</b>', &#96;<b>always</b>', or a mode name like &#96;<b>ansi8</b>'.</td>
</tr>
<tr class="tcw"> 
<td><b>-bw</b> <i>pixels</i>,<br><b>--border-width</b> <i>pixels</i></td>
<td>Set the Emacs window's border width to the number of pixels specified by <i>pixels</i>. Defaults to one pixel on each side of the window.</td>
</tr>
<tr class="tcw">
<td><b>-ib</b> <i>pixels</i>,<br><b>--internal-border</b> <i>pixels</i></td>
<td>Set the window's internal border width to the number of pixels specified by <i>pixels</i>. Defaults to one pixel of padding on each side of the window.</td>
</tr>
<tr class="tcw">
<td><b>-g</b> <i>geometry</i>,<br><b>--geometry</b> <i>geometry</i></td>
<td>Set the Emacs window's width, height, and position as specified. The geometry specification is in the standard X format; see X(7) for more information. The width and height are specified in characters; the default is 80 by 24. See the Emacs manual, section "Options for Window Size and Position", for information on how window sizes interact with selecting or deselecting the tool bar and menu bar.</td>
</tr>
<tr class="tcw">
<td><b>-lsp</b> <i>pixels</i>,<br><b>--line-spacing</b> <i>pixels</i></td>
<td>Additional space to put between lines.</td>
</tr>
<tr class="tcw">
<td><b>-vb</b>,<br><b>--vertical-scroll-bars</b></td>
<td>Enable vertical scrollbars.</td>
</tr>
<tr class="tcw">
<td><b>-fh</b>, <b>--fullheight</b></td>
<td>Make the first frame as high as the screen.</td>
</tr>
<tr class="tcw">
<td><b>-fs</b>, <b>--fullscreen</b></td>
<td>Make the first frame fullscreen.</td>
</tr>
<tr class="tcw">
<td><b>-fw</b>, <b>--fullwidth</b></td>
<td>Make the first frame as wide as the screen.</td>
</tr>
<tr class="tcw">
<td><b>-mm</b>, <b>--maximized</b></td>
<td>Maximize the first frame, like "<b>-fw -fh</b>".</td>
</tr>
<tr class="tcw">
<td><b>-fg</b> <i>color</i>,<br><b>--foreground-color</b> <i>color</i></td>
<td>On color displays, set the color of the text. Use the command <b>M-x list-colors-display</b> for a list of valid color names.</td>
</tr>
<tr class="tcw">
<td><b>-bg</b> <i>color</i>,<br><b>--background-color</b> <i>color</i></td>
<td>On color displays, set the color of the window's background.</td>
</tr>
<tr class="tcw">
<td><b>-bd</b> <i>color</i>,<br><b>--border-color</b> <i>color</i></td>
<td>On color displays, set the color of the window's border.</td>
</tr>
<tr class="tcw">
<td><b>-cr</b> <i>color</i>,<br><b>--cursor-color</b> <i>color</i></td>
<td>On color displays, set the color of the window's text cursor.</td>
</tr>
<tr class="tcw">
<td><b>-ms</b> <i>color</i>,<br><b>--mouse-color</b> <i>color</i></td>
<td>On color displays, set the color of the window's mouse cursor.</td>
</tr>
<tr class="tcw">
<td><b>-d</b> <i>displayname</i>,<br><b>--display</b> <i>displayname</i></td>
<td>Create the Emacs window on the display specified by <i>displayname</i>. Must be the first option specified in the command line.</td>
</tr>
<tr class="tcw">
<td><b>-nbi</b>, <b>--no-bitmap-icon</b></td>
<td>Do not use picture of the <a href="/jargon/g/gnu.htm">GNU</a> for the Emacs <a href="/jargon/i/icon.htm">icon</a>.</td>
</tr>
<tr class="tcw">
<td><b>--iconic</b></td>
<td>Start Emacs in iconified state.</td>
</tr>
<tr class="tcw">
<td><b>-nbc</b>,<br><b>--no-blinking-cursor</b></td>
<td>Do not use a blinking <a href="/jargon/c/cursor.htm">cursor</a>.</td>
</tr>
<tr class="tcw">
<td><b>-nw</b>,<br><b>--no-window-system</b></td>
<td>Tell Emacs not to create a graphical frame. If you use this switch when invoking Emacs from an <a href="/unix/uxterm.htm">xterm</a> window, display is done in that window.</td>
</tr>
<tr class="tcw">
<td><b>-D</b>, <b>--basic-display</b></td>
<td>This option disables many display features; use it for <a href="/jargon/d/debug.htm">debugging</a> Emacs.</td>
</tr>
</table>
<h3 class="tab">Configuring Emacs defaults for X</h3>
<p class="tab">You can set X default values for your Emacs windows in your <b>.Xresources</b> file. Use the following format:</p>
<pre class="tab tcy">emacs.<i>keyword</i>:<i>value</i></pre>
<p class="tab">Where <i>value</i> specifies the default value of <i>keyword</i>. Emacs lets you set default values for the following keywords:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>background</b></td>
<td style="width:240px">(class <b>Background</b>)</td>
<td>For color displays, sets the window's background color.</td>
</tr>
<tr class="tcw">
<td><b>bitmapIcon</b></td>
<td>(class <b>BitmapIcon</b>)</td>
<td>If <b>bitmapIcon</b>'s value is set to <b>on</b>, the window will iconify.</td>
</tr>
<tr class="tcw">
<td><b>borderColor</b></td>
<td>(class <b>BorderColor</b>)</td>
<td>For color displays, sets the color of the window's border.</td>
</tr>
<tr class="tcw">
<td><b>borderWidth</b></td>
<td>(class <b>BorderWidth</b>)</td>
<td>Sets the window's border width in pixels.</td>
</tr>
<tr class="tcw">
<td><b>cursorColor</b></td>
<td>(class <b>Foreground</b>)</td>
<td>For color displays, sets the color of the window's text cursor.</td>
</tr>
<tr class="tcw">
<td><b>cursorBlink</b></td>
<td>(class <b>CursorBlink</b>)</td>
<td>Specifies whether to make the cursor blink. The default is <b>on</b>. Use <b>off</b> or <b>false</b> to turn cursor blinking off.</td>
</tr>
<tr class="tcw">
<td><b>font</b></td>
<td>(class <b>Font</b>)</td>
<td>Sets the window's text font.</td>
</tr>
<tr class="tcw">
<td><b>foreground</b></td>
<td>(class <b>Foreground</b>)</td>
<td>For color displays, sets the window's text color.</td>
</tr>
<tr class="tcw">
<td><b>fullscreen</b></td>
<td>(class <b>Fullscreen</b>)</td>
<td>The desired fullscreen size. The value can be one of <b>fullboth</b>, <b>maximized</b>, <b>fullwidth</b>, or <b>fullheight</b>, which correspond to the command-line options &#96;<b>-fs</b>', &#96;<b>-mm</b>', &#96;<b>-fw</b>', and &#96;<b>-fh</b>', respectively. Note that this applies to the initial frame only.</td>
</tr>
<tr class="tcw">
<td><b>geometry</b></td>
<td>(class <b>Geometry</b>)</td>
<td>Sets the geometry of the Emacs window (as described above).</td>
</tr>
<tr class="tcw">
<td><b>iconName</b></td>
<td>(class <b>Title</b>)</td>
<td>Sets the icon name for the Emacs window icon.</td>
</tr>
<tr class="tcw">
<td><b>internalBorder</b></td>
<td>(class <b>BorderWidth</b>)</td>
<td>Sets the window's internal border width in pixels.</td>
</tr>
<tr class="tcw">
<td><b>lineSpacing</b></td>
<td>(class <b>LineSpacing</b>)</td>
<td>Additional space ("leading") between lines, in pixels.</td>
</tr>
<tr class="tcw">
<td><b>menuBar</b></td>
<td>(class <b>MenuBar</b>)</td>
<td>Gives frames menu bars if <b>on</b>; don't have menu bars if <b>off</b>.</td>
</tr>
<tr class="tcw">
<td><b>minibuffer</b></td>
<td>(class <b>Minibuffer</b>)</td>
<td>If <b>none</b>, don't make a minibuffer in this frame. It uses a separate minibuffer frame instead.</td>
</tr>
<tr class="tcw">
<td><b>paneFont</b></td>
<td>(class <b>Font</b>)</td>
<td>Font name for menu pane titles, in non-toolkit versions of Emacs.</td>
</tr>
<tr class="tcw">
<td><b>pointerColor</b></td>
<td>(class <b>Foreground</b>)</td>
<td>For color displays, sets the color of the window's mouse cursor.</td>
</tr>
<tr class="tcw">
<td><b>privateColormap</b></td>
<td>(class <b>PrivateColormap</b>)</td>
<td>If <b>on</b>, use a private color map, in the case where it is the "default visual" of class <b>PseudoColor</b> and Emacs uses it.</td>
</tr>
<tr class="tcw">
<td><b>reverseVideo</b></td>
<td>(class <b>ReverseVideo</b>)</td>
<td>If <b>reverseVideo</b>'s value is set to <b>on</b>, the window is displayed in reverse video.</td>
</tr>
<tr class="tcw">
<td><b>screenGamma</b></td>
<td>(class <b>ScreenGamma</b>)</td>
<td>Gamma correction for colors, equivalent to the frame parameter &#96;<b>screen-gamma</b>'.</td>
</tr>
<tr class="tcw">
<td><b>scrollBarWidth</b></td>
<td>(class <b>ScrollBarWidth</b>)</td>
<td>The scroll bar width in pixels, equivalent to the frame parameter &#96;<b>scroll-bar-width</b>'.</td>
</tr>
<tr class="tcw">
<td><b>selectionFont</b></td>
<td>(class <b>SelectionFont</b>)</td>
<td>Font name for pop-up menu items, in non-toolkit versions of Emacs.</td>
</tr>
<tr class="tcw">
<td><b>selectionTimeout</b></td>
<td>(class <b>SelectionTimeout</b>)</td>
<td>Number of milliseconds to wait for a selection reply. A value of <b>0</b> means wait as long as necessary.</td>
</tr>
<tr class="tcw">
<td><b>synchronous</b></td>
<td>(class <b>Synchronous</b>)</td>
<td>Run Emacs in synchronous mode if <b>on</b>. Synchronous mode is useful for debugging X problems.</td>
</tr>
<tr class="tcw">
<td><b>title</b></td>
<td>(class <b>Title</b>)</td>
<td>Sets the title of the Emacs window.</td>
</tr>
<tr class="tcw">
<td><b>toolBar</b></td>
<td>(class <b>ToolBar</b>)</td>
<td>Number of lines to reserve for the tool bar.</td>
</tr>
<tr class="tcw">
<td><b>useXIM</b></td>
<td>(class <b>UseXIM</b>)</td>
<td>Turns off use of X input methods (XIM) if <b>false</b> or <b>off</b>.</td>
</tr>
<tr class="tcw">
<td><b>verticalScrollBars</b></td>
<td>(class <b>ScrollBars</b>)</td>
<td>Gives frames scroll bars if <b>on</b>; suppresses scroll bars if <b>off</b>.</td>
</tr>
<tr class="tcw">
<td><b>visualClass</b></td>
<td>(class <b>VisualClass</b>)</td>
<td>Specify the "visual" that X should use. This tells X how to handle colors. The value should start with one of <b>TrueColor</b>, <b>PseudoColor</b>, <b>DirectColor</b>, <b>StaticColor</b>, <b>GrayScale</b>, and <b>StaticGray</b>, followed by <b>-</b><i>depth</i>, where <i>depth</i> is the number of color planes.</td>
</tr>
</table>
<h2 id="Screen">The organization of the Emacs screen</h2>
<p class="tab">On a graphical display, such as on GNU/Linux using the X Window System, Emacs occupies a &quot;graphical window&quot;. On a text terminal, Emacs occupies the entire terminal screen. We use the term <i>frame</i> to mean a graphical window or terminal screen occupied by Emacs. Emacs behaves very similarly on both kinds of frames. It normally starts out with only one frame, but you can create additional frames if you want (see <a href="#Frames">Frames</a>).<br><br>Each frame consists of several distinct regions. At the top of the frame is a menu bar, which allows you to access commands via a series of menus. On a graphical display, directly below the menu bar is a tool bar, a row of icons that perform editing commands if you click them. At the very bottom of the frame is an echo area, where informative messages are displayed and where you enter information when Emacs asks for it.<br><br>The main area of the frame, below the tool bar (if one exists) and above the echo area, is called the window. Graphical display systems commonly use the word &quot;window&quot; with a different meaning; but here we refer to those &quot;graphical windows&quot; as &quot;frames&quot;.<br><br>An Emacs window is where the <a href="/jargon/b/buffer.htm">buffer</a> (the text you are editing) is displayed. On a graphical display, the window possesses a scroll bar on one side, which can scroll through the buffer. The last line of the window is a mode line. This displays various information about what is going on in the buffer, such as whether there are unsaved changes, the editing modes that are in use, the current line number, and so forth.<br><br>When you start Emacs, there is normally only one window in the frame. However, you can subdivide this window horizontally or vertically to create multiple windows, each of which can independently display a buffer (see <a href="#Windows">Windows</a>).</p>
<p class="tab">At any time, one window is the selected window. On a graphical display, the selected window shows a more prominent cursor (usually solid and blinking); other windows show a less prominent cursor (usually a hollow box). On a text terminal, there is only one cursor, which is shown in the selected window. The buffer displayed in the selected window is called the current buffer, and it is where editing happens. Most Emacs commands implicitly apply to the current buffer; the text displayed in unselected windows is mostly visible for reference. If you use multiple frames on a graphical display, selecting a particular frame selects a window in that frame.</p>
<ul>
<li><a href="#Point">Point</a>: The place in the text where editing commands operate.</li>
<li><a href="#Echo-Area">Echo Area</a>: Short messages appear at the bottom of the screen.</li>
<li><a href="#Mode-Line">Mode Line</a>: Interpreting the mode line.</li>
<li><a href="#Menu-Bar">Menu Bar</a>: How to use the menu bar.</li>
</ul>
<h2 id="Point">Point</h2>
<p class="tab">The cursor in the selected window shows the location where most editing commands take effect, which is called <b>point</b>. Many Emacs commands move point to different places in the buffer; for example, you can place point by clicking mouse button 1 (normally the left button) at the desired location.<br><br>By default, the cursor in the selected window is drawn as a solid block and appears to be on a character, but think of point as between two characters; it is situated before the character under the cursor. For example, if your text looks like '<b>frob</b>' with the cursor over the '<b>b</b>', then point is between the '<b>o</b>' and the '<b>b</b>'. If you insert the character '<b>!</b>' at that position, the result is '<b>fro!b</b>', with point between the '<b>!</b>' and the '<b>b</b>'. Thus, the cursor remains over the '<b>b</b>', as before.<br><br>If you are editing several files in Emacs, each in its own buffer, each buffer has its own value of point. A buffer that is not currently displayed remembers its value of point if you later display it again. Furthermore, if a buffer is displayed in multiple windows, each of those windows has its own value of point.</p>
<p class="tab">See <a href="#Cursor-Display">Cursor Display</a>, for options that control how Emacs displays the cursor.</p>
<h2 id="Echo-Area">The echo area</h2>
<p class="tab">The line at the very bottom of the frame is the <b>echo area</b>. It is used to display small amounts of text for various purposes.<br><br>The echo area is so-named because one of the things it is used for is <a href="/jargon/e/echo.htm">echoing</a>, which means displaying the characters of a multi-character command as you type. Single-character commands are not echoed. Multi-character commands (see <a href="#Keys">Keys</a>) are echoed if you pause for more than a second in the middle of a command. Emacs then echoes all the characters of the command so far, to prompt you for the rest. Once echoing has started, the rest of the command echoes immediately as you type it. This behavior is designed to give confident users fast response, while giving hesitant users maximum feedback.<br><br>The echo area is also used to display an error message when a command cannot do its job. Error messages may be accompanied by beeping or by flashing the screen.<br><br>Some commands display informative messages in the echo area to tell you what the command has done, or to provide you with some specific information. These informative messages, unlike error messages, are not accompanied with a beep or flash. For example, <b>C-x</b> means the following: hold down <b>Ctrl</b> and type <b>x</b>, then let go of <b>Ctrl</b> and type <b>=</b>. This displays a message describing the character at point, its position in the buffer, and its current column in the window. Commands that take a long time often display messages ending in '<b>...</b>' while they are working (sometimes also indicating how much progress is made, as a percentage), and add '<b>done</b>' when they are finished.<br><br>Informative echo area messages are saved in a special buffer named <b>*Messages*</b>. Buffers have not been explained yet; see <a href="#Buffers">Buffers</a> for more information about them. If you miss a message that appeared briefly on the screen, you can switch to the <b>*Messages*</b> buffer to see it again. The <b>*Messages*</b> buffer is limited to a certain number of lines, specified by the variable <b>message-log-max</b>. See <a href="#Variables">Variables</a> for more information about them. Beyond this limit, one line is deleted from the beginning whenever a new message line is added at the end.<br><br>See <a href="#Display-Custom">Display Custom</a> for options that control how Emacs uses the echo area.<br><br>The echo area is also used to display the <b>minibuffer</b>, a special window where you can input arguments to commands, such as the name of a file to be edited. When the <b>minibuffer</b> is in use, the text displayed in the echo area begins with a <a href="/jargon/p/prompt.htm">prompt</a> <a href="/jargon/s/string.htm">string</a>, and the active cursor appears in the minibuffer, which is temporarily considered the selected window. You can always get out of the minibuffer by typing <b>C-g</b>. See <a href="#Minibuffer">Minibuffer</a> for more info.</p>
<h2 id="Mode-Line">The mode line</h2>
<p class="tab">At the bottom of each window is a <b>mode line</b>, which describes what is going on in the current buffer. When there is only one window, the mode line appears right above the <a href="#Echo-Area">echo area</a>; it is the next-to-last line in the <a href="#Frames">frame</a>. On a graphical display, the mode line is drawn with a 3D box appearance. Emacs also usually draws the mode line of the selected window with a different color than that of unselected windows, to make it stand out.</p>
<p class="tab">The text displayed in the mode line has the following format:</p>
<pre class="tab tcy">cs:ch-fr <i>buf pos line</i> (<i>major minor</i>)</pre>
<p class="tab">On a text terminal, this text is followed by a series of dashes extending to the right edge of the window. These dashes are omitted on a graphical display.<br><br>The <b>cs</b> string and the colon character after it describe the <a href="/jargon/c/charcode.htm">character set</a> and <a href="/jargon/n/newline.htm">newline</a> convention used for the current buffer. Normally, Emacs automatically handles these settings for you, but it is sometimes useful to have this information.<br><br><b>cs</b> describes the character set of the text in the buffer (see <a href="#Coding-Systems">Coding Systems</a>). If it's a dash ('<b>-</b>'), that indicates no special character set handling (with the possible exception of <a href="/jargon/e/eol.htm">end-of-line</a> conventions, described in the next paragraph). '<b>=</b>' means no conversion whatsoever, and is usually used for files containing non-textual data. Other characters represent various coding systems&mdash;for example, '<b>1</b>' represents ISO Latin-1.<br><br>On a text terminal, <b>cs</b> is preceded by two additional characters that describe the coding systems for keyboard input and terminal output. If you are using an input method, <b>cs</b> is preceded by a string that identifies the input method (see <a href="#Input-Methods">Input Methods</a>).<br><br>The character after <b>cs</b> is usually a colon. If a different string is displayed, that indicates a nontrivial end-of-line convention for <a href="/jargon/e/encode.htm">encoding</a> a file. Usually, lines of text are separated by newline characters in a file, but two other conventions are sometimes used. The <a href="/jargon/m/msdos.htm">MS-DOS</a> convention uses a &quot;<a href="/jargon/c/cr.htm">carriage-return</a>&quot; character followed by a &quot;<a href="/jargon/l/lf.htm">linefeed</a>&quot; character; when editing such files, the colon changes to either a backslash ('<b>\</b>') or '<b>(DOS)</b>', depending on the <a href="/jargon/o/os.htm">operating system</a>. Another convention, employed by older <a href="/jargon/a/applemac.htm">Macintosh</a> systems, uses a &quot;carriage-return&quot; character instead of a newline; when editing such files, the colon changes to either a forward slash ('<b>/</b>') or '(<b>Mac</b>)'. On some systems, Emacs displays '<b>(Unix)</b>' instead of the colon for files that use newline as the line separator.<br><br>The next element on the mode line is the string indicated by <b>ch</b>. This shows two dashes ('<b>--</b>') if the buffer displayed in the window has the same contents as the corresponding file on the disk; i.e., if the buffer is &quot;unmodified&quot;. If the buffer is modified, it shows two stars ('<b>**</b>'). For a <a href="/jargon/r/readonly.htm">read-only</a> buffer, it shows '<b>%*</b>' if the buffer is modified, and '<b>%%</b>' otherwise.<br><br>The character after <b>ch</b> is normally a dash ('<b>-</b>'). However, if the <b>default-directory</b> for the current buffer is on a remote machine, '<b>@</b>' is displayed instead (see <a href="#File-Names">File Names</a>).<br><br><b>fr</b> gives the selected frame name (see <a href="#Frames">Frames</a>). It appears only on text terminals. The initial frame's name is '<b>F1</b>'.<br><br><b>buf</b> is the name of the buffer displayed in the window. Usually, this is the same as the name of a file you are editing. See <a href="#Buffers">Buffers</a>.<br><br><b>pos</b> tells you whether there is additional text above the top of the window, or below the bottom. If your buffer is small and it is visible in the window, <b>pos</b> is '<b>All</b>'. Otherwise, it is '<b>Top</b>' if you are looking at the beginning of the buffer, '<b>Bot</b>' if you are looking at the end of the buffer, or '<b>nn%</b>', where <b>nn</b> is the percentage of the buffer above the top of the window. With Size Indication mode, you can display the size of the buffer as well. See <a href="#Optional-Mode-Line">Optional Mode Line</a>.<br><br><b>line</b> is the character '<b>L</b>' followed by the line number at <a href="#Point">point</a>. You can display the current column number too, by turning on Column Number mode. See <a href="#Optional-Mode-Line">Optional Mode Line</a>.<br><br><b>major</b> is the name of the <b>major mode</b> used in the buffer. A <b>major mode</b> is a principal editing mode for the buffer, such as Text mode, Lisp mode, C mode, and so forth. See <a href="#Major-Modes">Major Modes</a>. Some major modes display additional information after the major mode name. For example, Compilation buffers and Shell buffers display the status of the subprocess.<br><br><b>minor</b> is a list of some of the enabled <b>minor modes</b>, which are optional editing modes that provide additional features on top of the major mode. See <a href="#Minor-Modes">Minor Modes</a>.<br><br>Some features are listed together with the minor modes whenever they are turned on, even though they are not really minor modes. '<b>Narrow</b>' indicates the buffer being displayed has editing restricted to only a portion of its text (see <a href="#Narrowing">Narrowing</a>). '<b>Def</b>' indicatest a keyboard macro is currently being defined (see <a href="#Keyboard-Macros">Keyboard Macros</a>).<br><br>Also, if Emacs is inside a <a href="/jargon/r/recursive.htm">recursive</a> editing level, square brackets ('<b>[...]</b>') appear around the parentheses that surround the modes. If Emacs is in one recursive editing level within another, double square brackets appear. Since recursive editing levels affect Emacs <a href="/jargon/g/global.htm">globally</a>, such square brackets appear in the mode line of every window. See <a href="#Recursive-Edit">Recursive Edit</a>.<br><br>You can change the appearance of the mode line and the format of its contents; see <a href="#Optional-Mode-Line">Optional Mode Line</a>. Also, the mode line is mouse-sensitive; clicking different parts of the mode line performs various commands. See <a href="#Mode-Line-Mouse">Mode Line Mouse</a>.</p>
<h2 id="Menu-Bar">The menu bar</h2>
<p class="tab">Each Emacs normally has a menu bar at the top which you can use to perform common operations. There's no need to list them here, as you can more easily see them yourself.<br><br>On a graphical display, you can use the mouse to choose a command from the menu bar. An arrow on the right edge of a menu item means it leads to a subsidiary menu, or "submenu". A '<b>...</b>' at the end of a menu item indicates the command prompts you for further input before it actually does anything.<br><br>Some of the commands in the menu bar have ordinary key bindings as well; if so, a key binding is shown in parentheses after the item itself. To view the full command name and documentation for a menu item, type <b>C-h k</b>, and then select the menu bar with the mouse in the usual way (see <a href="#Key-Help">Key Help</a>).<br><br>Instead of using the mouse, you can also invoke the first menu bar item by pressing <kbd>F10</kbd> (to run the command <b>menu-bar-open</b>). You can then navigate the menus with the arrow keys. To activate a selected menu item, press enter; to cancel menu navigation, press escape. On a text terminal, you can use the menu bar by typing <b>M-&#96;</b> or F10 (these run the command <b>tmm-menubar</b>). This lets you select a menu item with the keyboard. A provisional choice appears in the <a href="#Echo-Area">echo area</a>. You can use the up and down arrow keys to move through the menu to different items, and then you can press enter to select the item. Each menu item is also designated by a letter or digit (usually the initial of some word in the item's name). This letter or digit is separated from the item name by '<b>==&gt;</b>'. You can type the item's letter or digit to select the item.</p>
<h2 id="User-Input">Kinds of user input</h2>
<p class="tab">Keyboard input in Emacs is based on a heavily-extended version of <a href="/jargon/a/ascii.htm">ASCII</a>. Simple characters, like '<b>a</b>', '<b>B</b>', '<b>3</b>', '<b>=</b>', and the space character (denoted as <b>&lt;SPC&gt;</b>), are entered by typing the corresponding key. Control characters, such as <b>&lt;RET&gt;</b>, <b>&lt;TAB&gt;</b>, <b>&lt;DEL&gt;</b>, <b>&lt;ESC&gt;</b>, <b>&lt;F1&gt;</b>, <b>&lt;Home&gt;</b>, and <b>&lt;left&gt;</b>, are also entered this way, as are certain characters found on non-English keyboards (see <a href="#International">International</a>).<br><br>Emacs also recognizes control characters that are entered using modifier keys. Two commonly-used modifier keys are <b>Control</b> (usually labeled <b>Ctrl</b>), and <b>Meta</b> (usually labeled <b>Alt</b>). For example, <b>Control-a</b> is entered by holding down the <b>Ctrl</b> key while pressing <b>a</b>; this is referred to this as <b>C-a</b> for short. Similarly <b>Meta-a</b>, or <b>M-a</b> for short, is entered by holding down the <b>Alt</b> key and pressing <b>a</b>. Modifier keys can also be applied to non-<a href="/jargon/a/alphanum.htm">alphanumerical</a> characters, e.g., <b>C-F1</b> or <b>M-left</b>.<br><br>You can also type Meta characters using two-character sequences starting with <b>&lt;ESC&gt;</b>. Thus, you can enter <b>M-a</b> by typing <b>&lt;ESC&gt;</b> <b>a</b>. You can enter <b>C-M-a</b> by typing <b>&lt;ESC&gt;</b> <b>C-a</b>. Unlike <b>Meta</b>, <b>&lt;ESC&gt;</b> is entered as a separate character. You don't hold down <b>&lt;ESC&gt;</b> while typing the next character; instead, press <b>&lt;ESC&gt;</b> and release it, then enter the next character. This feature is useful on certain text terminals where the <b>Meta</b> key does not function reliably.<br><br>On graphical displays, the window manager might block some keyboard inputs, including <b>M-&lt;TAB&gt;</b>, <b>M-&lt;SPC&gt;</b>, <b>C-M-d</b> and <b>C-M-l</b>. If you have this problem, you can either customize your window manager to not block those keys, or "rebind" the affected Emacs commands (see <a href="#Customization">Customization</a>).<br><br>Simple characters and control characters, and certain non-keyboard inputs such as mouse clicks, are collectively referred to as input events.</p>
<h2 id="Keys">Keys</h2>
<p class="tab">Some Emacs commands are invoked by only one input event; for example, <b>C-f</b> moves forward one character in the buffer. Other commands take two or more input events to invoke, such as <b>C-x C-f</b> and <b>C-x 4 C-f</b>.<br><br>A key sequence, or key for short, is a sequence of one or more input events that is meaningful as a unit. If a key sequence invokes a command, we call it a complete key; for example, <b>C-f</b>, <b>C-x C-f</b> and <b>C-x 4 C-f</b> are all complete keys. If a key sequence isn't long enough to invoke a command, we call it a prefix key; from the preceding example, we see that <b>C-x</b> and <b>C-x 4</b> are prefix keys. Every key sequence is either a complete key or a prefix key.<br><br>A prefix key combines with the following input event to make a longer key sequence. For example, <b>C-x</b> is a prefix key, so typing <b>C-x</b> alone does not invoke a command; instead, Emacs waits for further input (if you pause for longer than a second, it echoes the <b>C-x</b> key to prompt for that input; see <a href="#Echo-Area">Echo Area</a>). <b>C-x</b> combines with the next input event to make a two-event key sequence, which could itself be a prefix key (such as <b>C-x 4</b>), or a complete key (such as <b>C-x C-f</b>). There is no limit to the length of key sequences, but in practice they are seldom longer than three or four input events.<br><br>You can't add input events onto a complete key. For example, because <b>C-f</b> is a complete key, the two-event sequence <b>C-f C-k</b> is two key sequences, not one.<br><br>By default, the prefix keys in Emacs are <b>C-c</b>, <b>C-h</b>, <b>C-x</b>, <b>C-x &lt;RET&gt;</b>, <b>C-x @</b>, <b>C-x a</b>, <b>C-x n</b>, <b>C-x r</b>, <b>C-x v</b>, <b>C-x 4</b>, <b>C-x 5</b>, <b>C-x 6</b>, <b>&lt;ESC&gt;</b>, <b>M-g</b>, and <b>M-o</b>. (<b>F1</b> and <b>F2</b> are aliases for <b>C-h</b> and <b>C-x 6</b>.) This list is not cast in stone; if you customize Emacs, you can make new prefix keys. You could even eliminate some of the standard ones, though this is not recommended for most users; for example, if you remove the prefix definition of <b>C-x 4</b>, then <b>C-x 4 C-f</b> becomes an invalid key sequence. See <a href="#Key-Bindings">Key Bindings</a>. Typing the help character (<b>C-h</b> or <b>F1</b>) after a prefix key displays a list of the commands starting with that prefix. The sole exception to this rule is <b>&lt;ESC&gt;</b>: <b>&lt;ESC&gt;</b> <b>C-h</b> is equivalent to <b>C-M-h</b>, which does something else entirely. You can, however, use <b>F1</b> to display a list of commands starting with <b>&lt;ESC&gt;</b>.</p>
<h2 id="Commands">Keys and commands</h2>
<p class="tab">Emacs does not assign meanings to keys directly. Instead, Emacs assigns meanings to named commands, and then gives keys their meanings by binding them to commands.<br><br>Every command has a name chosen by a programmer. The name is usually made of a few English words separated by dashes; for example, <b>next-line</b> or <b>forward-word</b>. Internally, each command is a special type of Lisp function, and the actions associated with the command are performed by running the function.<br><br>The bindings between keys and commands are recorded in tables called keymaps. See <a href="#Keymaps">Keymaps</a>. The description "<b>C-n</b> moves down vertically one line" glosses over a subtle distinction that is irrelevant in ordinary use, but vital for Emacs customization. The command <b>next-line</b> does a vertical move downward. <b>C-n</b> has this effect because it is bound to <b>next-line</b>. If you rebind <b>C-n</b> to the command <b>forward-word</b>, <b>C-n</b> moves forward one word instead.<br><br>In this manual, we often speak of keys like <b>C-n</b> as commands, even though strictly speaking the key is bound to a command. Usually we state the name of the command which really does the work in parentheses after mentioning the key that runs it. For example, we say that "The command <b>C-n</b> (<b>next-line</b>) moves point vertically down", meaning that the command <b>next-line</b> moves vertically down, and the key <b>C-n</b> is normally bound to it. Since we are discussing customization, we should tell you about <a href="/jargon/v/variable.htm">variables</a>. Often the description of a command says, "To change this, set the variable <b>this-that</b>." A variable is a name used to store a value. Most of the variables documented in this manual are meant for customization: some command or other part of Emacs examines the variable and behaves differently according to the value that you set. You can ignore the information about variables until you are interested in customizing them. Then read the basic information on variables (see <a href="#Variables">Variables</a>) and the information about specific variables makes sense.</p>
<h2 id="Entering-Emacs">Entering Emacs</h2>
<p class="tab">The usual way to invoke Emacs is with the <a href="/jargon/s/shell.htm">shell</a> command <b>emacs</b>. From a terminal window running in the X Window System, you can run Emacs in the background with <b>emacs &amp;</b>; this way, Emacs won't tie up the terminal window, so you can use it to run other shell commands.<br><br>When Emacs starts up, the initial frame displays a special buffer named '<b>*GNU Emacs*</b>'. This startup screen contains information about Emacs and links to common tasks that are useful for beginning users. For instance, activating the 'Emacs Tutorial' link opens the Emacs tutorial; this does the same thing as the command <b>C-h t</b> (<b>help-with-tutorial</b>). To activate a link, either move point onto it and type <b>&lt;RET&gt;</b>, or click it with mouse-1 (the left mouse button).<br><br>Using a <a href="/jargon/c/commandi.htm">command line</a> <a href="/jargon/a/argument.htm">argument</a>, you can tell Emacs to visit one or more files as soon as it starts up. For example, <b>emacs foo.txt</b> starts Emacs with a buffer displaying the contents of the file '<b>foo.txt</b>'. This feature exists mainly for compatibility with other editors, which are designed to be launched from the shell for short editing sessions. If you call Emacs this way, the initial frame is split into two windows: one showing the specified file, and the other showing the startup screen. See <a href="#Windows">Windows</a>.<br><br>Generally, it is unnecessary and wasteful to start Emacs afresh each time you want to edit a file. The recommended way to use Emacs is to start it only once, only after you log in, and do all your editing in the same Emacs session. See <a href="#Files">Files</a>, for information on visiting more than one file. If you use Emacs this way, the Emacs session accumulates valuable context, such as the kill ring, registers, undo history, and mark ring data, which together make editing more convenient. These features are described later in the manual.<br><br>To edit a file from another program while Emacs is running, you can use the <b>emacsclient</b> helper program to open a file in the existing Emacs session. See <a href="#Emacs-Server">Emacs Server</a>.<br><br>Emacs accepts other command line arguments that tell it to load certain Lisp files, where to put the initial frame, and so forth. See <a href="#Emacs-Invocation">Emacs Invocation</a>.<br><br>If the variable <b>inhibit-startup-screen</b> is set to anything, Emacs does not display the startup screen. In that case, if one or more files were specified on the command line, Emacs displays those files; otherwise, it displays a buffer named <b>*scratch*</b>, which can evaluate Emacs Lisp expressions interactively. See <a href="#Lisp-Interaction">Lisp Interaction</a>. You can set the variable <b>inhibit-startup-screen</b> using the Customize facility (see <a href="#Easy-Customization">Easy Customization</a>), or by editing your initialization file (see <a href="#Init-File">Init File)</a>.<br><br>You can also force Emacs to display a file or directory at startup by setting the variable <b>initial-buffer-choice</b> to a value. In that case, even if you specify one or more files on the command line, Emacs opens but does not display them. The value of <b>initial-buffer-choice</b> should be the name of the desired file or directory.</p>
<h2 id="Exiting">Exiting Emacs</h2>
<p class="tab tcy">C-x C-c</p>
<p class="tab">Kills Emacs (<b>save-buffers-kill-terminal</b>).</p>
<p class="tab tcy">C-z</p>
<p class="tab">On a text terminal, this suspends Emacs; on a graphical display, "minimize" the selected frame (<b>suspend-emacs</b>).<br><br>Killing Emacs means terminating the Emacs program. To do this, type <b>C-x C-c</b> (<b>save-buffers-kill-terminal</b>). A two-character key sequence is used to make it harder to type by accident. If there are any modified file-visiting buffers when you type <b>C-x C-c</b>, Emacs first offers to save these buffers. If you do not save them all, it asks for confirmation again, as the unsaved changes are lost. Emacs also asks for confirmation if any subprocesses are still running, as killing Emacs also kills the subprocesses (see <a href="#Shell">Shell</a>).<br><br><b>C-x C-c</b> behaves specially if you are using Emacs as a server. If you type it from a "client frame", it closes the client connection. See <a href="#Emacs-Server">Emacs Server</a>.<br><br>Emacs can, optionally, record certain session information when you kill it, such as the files you were visiting at the time. This information is then available the next time you start Emacs. See <a href="#Saving-Emacs-Sessions">Saving Emacs Sessions</a>. If the value of the variable <b>confirm-kill-emacs</b> is non-nil, <b>C-x C-c</b> assumes that its value is a predicate function, and calls that function. If the result of the function call is not <a href="/jargon/n/null.htm">nil</a>, the session is killed, otherwise Emacs continues to run. One convenient function to use as the value of <b>confirm-kill-emacs</b> is the function <b>yes-or-no-p</b>. The default value of <b>confirm-kill-emacs</b> is nil.<br><br>To kill Emacs without being prompted about saving, type <b>M-x kill-emacs</b>.<br><br><b>C-z</b> runs the command <b>suspend-frame</b>. On a graphical display, this command minimizes (or iconifies) the selected Emacs frame, hiding it in a way that lets you bring it back later (exactly how this hiding occurs depends on the window system). On a text terminal, the <b>C-z</b> command suspends Emacs, stopping the program temporarily and returning control to the parent process (usually a shell); in most shells, you can resume Emacs after suspending it with the shell command <b>%emacs</b>.<br><br>Text terminals usually listen for certain special characters whose meaning is to kill or suspend the program you are running. This terminal feature is turned off while you are in Emacs. The meanings of <b>C-z</b> and <b>C-x C-c</b> as keys in Emacs were inspired by the use of <b>C-z</b> and <b>C-c</b> on several operating systems as the characters for stopping or killing a program, but that is their only relationship with the operating system. You can customize these keys to run any commands of your choice (see <a href="#Keymaps">Keymaps</a>).</p>
<h2 id="Basic">Basic editing commands</h2>
<p class="tab">The following sections explain the basics of how to enter text, make corrections, and save the text in a file. If this material is new to you, it's suggested you first run the Emacs <b>learn-by-doing</b> tutorial, by typing <b>C-h t</b> (<b>help-with-tutorial</b>).</p>
<ul>
<li><a href="#Inserting-Text">Inserting Text</a>: Inserting text by typing it.</li>
<li><a href="#Moving-Point">Moving Point</a>: Moving the cursor to the place where you want to change something.</li>
<li><a href="#Erasing">Erasing</a>: Deleting and killing text.</li>
<li><a href="#Basic-Undo">Basic Undo</a>: Undoing recent changes in the text.</li>
<li><a href="#Files">Files</a>: Visiting, creating, and saving files.</li>
<li><a href="#Basic-Help">Help</a>: Asking what a character does.</li>
<li><a href="#Blank-Lines">Blank Lines</a>: Making and deleting blank lines.</li>
<li><a href="#Continuation-Lines">Continuation Lines</a>: How Emacs displays lines too wide for the screen.</li>
<li><a href="#Position-Info">Position Info</a>: What line, row, or column is point on?</li>
<li><a href="#Arguments">Arguments</a>: Numeric arguments for repeating a command N times.</li>
<li><a href="#Repeating">Repeating</a>: Repeating the previous command quickly.</li>
</ul>
<h2 id="Inserting-Text">Inserting text</h2>
<p class="tab">You can insert an ordinary graphic character (e.g., '<b>a</b>', '<b>B</b>', '<b>3</b>', and '<b>=</b>') by typing the associated key. This adds the character to the buffer at point. Insertion moves point forward, so that point remains only after the inserted text. See <a href="#Point">Point</a>.<br><br>To end a line and start a new one, type <b>&lt;RET&gt;</b> (<a href="/jargon/n/newline.htm">newline</a>). The <b>&lt;RET&gt;</b> key may be labeled <b>Return</b> or <b>Enter</b> on your keyboard, but Emacs refers to it as <b>&lt;RET&gt;</b>. This command inserts a newline character into the buffer. If point is at the end of the line, the effect is to create a new blank line after it; if point is in the middle of a line, the line is split at that position.<br><br>You can change the way Emacs handles text insertion by turning on minor modes. For instance, the minor mode called Auto Fill mode splits lines automatically when they get too long (see <a href="#Filling">Filling</a>). The minor mode called Overwrite mode causes inserted characters to replace (<a href="/jargon/o/overwrit.htm">overwrite</a>) existing text, instead of shoving it to the right. See <a href="#Minor-Modes">Minor Modes</a>.<br><br>Only graphic characters can be inserted by typing the associated key; other keys act as editing commands and do not insert themselves. For instance, <b>&lt;DEL&gt;</b> runs the command <b>delete-backward-char</b> by default (some modes bind it to a different command); it does not insert a literal '<b>&lt;DEL&gt;</b>' character (<a href="/jargon/a/ascii.htm">ASCII</a> character code 127).<br><br>To insert a non-graphic character, or a character your keyboard does not support, first quote it by typing <b>C-q</b> (<b>quoted-insert</b>). There are two ways to use <b>C-q</b>:</p>
<ul>
<li><b>C-q</b> followed by any non-graphic character (even <b>C-g</b>) inserts that character. For instance, <b>C-q &lt;DEL&gt;</b> inserts a literal '<b>&lt;DEL&gt;</b>' character.</li>
<li><b>C-q</b> followed by a sequence of <a href="/jargon/o/octal.htm">octal</a> digits inserts the character with the specified octal character code. You can use any number of octal <a href="/jargon/d/digit.htm">digits</a>; any non-digit terminates the sequence. If the terminating character is <b>&lt;RET&gt;</b>, that <b>&lt;RET&gt;</b> serves only to terminate the sequence. Any other non-digit terminates the sequence and then acts as normal input; thus, <b>C-q 1 0 1 B</b> inserts '<b>AB</b>'. The use of octal sequences is disabled in ordinary non-binary Overwrite mode, to give you a convenient way to insert a digit instead of overwriting with it.</li>
</ul>
<p class="tab">To use <a href="/jargon/d/decimal.htm">decimal</a> or <a href="/jargon/h/hex.htm">hexadecimal</a> instead of octal, set the variable <b>read-quoted-char-radix</b> to <b>10</b> or <b>16</b>. If the <a href="/jargon/r/radix.htm">radix</a> is 16, the letters <b>a</b> to <b>f</b> serve as part of a character code, only like digits. <a href="/jargon/c/case.htm">Case</a> is ignored.<br><br>Alternatively, you can use the command <b>C-x 8 &lt;RET&gt;</b> (<b>insert-char</b>). This prompts for the <a href="/jargon/u/unicode.htm">Unicode</a> name or code-point of a character, using the minibuffer. If you enter a name, the command provides completion (see <a href="#Completion">Completion</a>). If you enter a code-point, it should be as a hexadecimal number (the convention for Unicode), or a number with a specified radix, e.g., <b>#o23072</b> (octal). The command then inserts the corresponding character into the buffer. For example, both of the following insert the infinity sign (Unicode code-point U+221E):</p>
<ul>
<li><b>C-x 8 &lt;RET&gt; infinity &lt;RET&gt;</b></li>
<li><b>C-x 8 &lt;RET&gt; 221e &lt;RET&gt;</b></li>
</ul>
<p class="tab">A numeric argument to <b>C-q</b> or <b>C-x 8 &lt;RET&gt;</b> specifies how many copies of the character to insert (see <a href="#Arguments">Arguments</a>).</p>
<h2 id="Moving-Point">Changing the location of point</h2>
<p class="tab">To do more than insert characters, you have to know how to move point (see <a href="#Point">Point</a>). The keyboard commands <b>C-f</b>, <b>C-b</b>, <b>C-n</b>, and <b>C-p</b> move point to the right, left, down, and up, respectively. You can also move point using the arrow keys; however, many Emacs users find that it is slower to use the arrow keys than the control keys, because you need to move your hand to the area of the keyboard where those keys are located.<br><br>You can also click the left mouse button to move point to the position clicked. Emacs also provides a variety of additional keyboard commands that move point in more sophisticated ways.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>C-f</b></td>
<td>Move forward one character (<b>forward-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;right&gt;</b></td>
<td>This command (<b>right-char</b>) behaves like <b>C-f</b>, with one exception: when editing <b>right-to-left</b> scripts such as Arabic, it instead moves backward if the current paragraph is a <b>right-to-left</b> paragraph. See <a href="#Bidirectional-Editing">Bidirectional Editing</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-b</b></td>
<td>Move backward one character (<b>backward-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;left&gt;</b></td>
<td>This command (<b>left-char</b>) behaves like <b>C-b</b>, except it moves forward if the current paragraph is <b>right-to-left</b>. See <a href="#Bidirectional-Editing">Bidirectional Editing</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-n</b>, <b>&lt;down&gt;</b></td>
<td>Move down one screen line (<b>next-line</b>). This command attempts to keep the horizontal position unchanged, so if you start in the middle of one line, you move to the middle of the next.</td>
</tr>
<tr class="tcw">
<td><b>C-p</b>, <b>&lt;up&gt;</b></td>
<td>Move up one screen line (<b>previous-line</b>). This command preserves position in the line, like <b>C-n</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-a</b>, <b>&lt;Home&gt;</b></td>
<td>Move to the beginning of the line (<b>move-beginning-of-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-e</b>, <b>&lt;End&gt;</b></td>
<td>Move to the end of the line (<b>move-end-of-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-f</b></td>
<td>Move forward one word (<b>forward-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-&lt;right&gt;</b>,<br><b>M-&lt;right&gt;</b></td>
<td>This command (<b>right-word</b>) behaves like <b>M-f</b>, except it moves backward by one word if the current paragraph is <b>right-to-left</b>. See <a href="#Bidirectional-Editing">Bidirectional Editing</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-b</b></td>
<td>Move backward one word (<b>backward-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-&lt;left&gt;</b>,<br><b>M-&lt;left&gt;</b></td>
<td>This command (<b>left-word</b>) behaves like <b>M-f</b>, except it moves forward by one word if the current paragraph is <b>right-to-left</b>. See <a href="#Bidirectional-Editing">Bidirectional Editing</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-r</b></td>
<td>Without moving the text on the screen, reposition point on the left margin of the center-most text line of the window; on subsequent consecutive invocations, move point to the left margin of the top-most line, the bottom-most line, and so forth, in cyclic order (<b>move-to-window-line-top-bottom</b>).<br><br>A numeric argument says which screen line to place point on, counting downward from the top of the window (zero means the top line). A negative argument counts lines up from the bottom (&minus;1 means the bottom line). See <a href="#Arguments">Arguments</a>, for more information on numeric arguments.</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;</b></td>
<td>Move to the top of the buffer (<b>beginning-of-buffer</b>). With numeric argument <i>n</i>, move to <i>n</i>/10 of the way from the top.</td>
</tr>
<tr class="tcw">
<td><b>M-&gt;</b></td>
<td>Move to the end of the buffer (<b>end-of-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-v</b>, <b>&lt;PageDown&gt;</b>, <b>&lt;next&gt;</b></td>
<td>Scroll the display one screen forward, and move point onscreen if necessary (<b>scroll-up-command</b>). See <a href="#Scrolling">Scrolling</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-v</b>, <b>&lt;PageUp&gt;</b>, <b>&lt;prior&gt;</b></td>
<td>Scroll one screen backward, and move point onscreen if necessary (<b>scroll-down-command</b>). See <a href="#Scrolling">Scrolling</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-g c</b></td>
<td>Read a number <i>n</i> and move point to buffer position <i>n</i>. Position 1 is the beginning of the buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-g M-g</b>, <b>M-g g</b></td>
<td>Read a number <i>n</i> and move point to the beginning of line number <i>n</i> (<b>goto-line</b>). Line 1 is the beginning of the buffer. If point is on or only after a number in the buffer, that is the default for <i>n</i>. Only type <b>&lt;RET&gt;</b> in the minibuffer to use it. You can also specify <i>n</i> by giving <b>M-g M-g</b> a numeric prefix argument. See <a href="#Select-Buffer">Select Buffer</a>, for the behavior of <b>M-g M-g</b> when you give it a plain prefix argument.</td>
</tr>
<tr class="tcw">
<td><b>M-g &lt;TAB&gt;</b></td>
<td>Read a number <i>n</i> and move to column <i>n</i> in the current line. Column 0 is the leftmost column. If called with a prefix argument, move to the column number specified by the argument's numeric value.</td>
</tr>
<tr class="tcw">
<td><b>C-x C-n</b></td>
<td>Use the current column of point as the semipermanent goal column for <b>C-n</b> and <b>C-p</b> (<b>set-goal-column</b>). When a semipermanent goal column is in effect, those commands always try to move to this column, or as close as possible to it, after moving vertically. The goal column remains in effect until canceled.</td>
</tr>
<tr class="tcw">
<td><b>C-u C-x C-n</b></td>
<td>Cancel the goal column. Henceforth, <b>C-n</b> and <b>C-p</b> try to preserve the horizontal position, as usual.</td>
</tr>
</table>
<p class="tab">When a line of text in the buffer is longer than the width of the window, Emacs usually displays it on two or more screen lines. For convenience, <b>C-n</b> and <b>C-p</b> move point by screen lines, as do the equivalent keys down and up. You can force these commands to move according to logical lines (i.e., according to the text lines in the buffer) by setting the variable <b>line-move-visual</b> to nil; if a logical line occupies multiple screen lines, the cursor then skips over the additional screen lines. For details, see <a href="#Continuation-Lines">Continuation Lines</a>. See <a href="#Variables">Variables</a>, for how to set variables such as <b>line-move-visual</b>.<br><br>Unlike <b>C-n</b> and <b>C-p</b>, most of the Emacs commands that work on lines work on logical lines. For instance, <b>C-a</b> (<b>move-beginning-of-line</b>) and <b>C-e</b> (<b>move-end-of-line</b>) respectively move to the beginning and end of the logical line. Whenever we encounter commands that work on-screen lines, such as <b>C-n</b> and <b>C-p</b>, we point these out.<br><br>When <b>line-move-visual</b> is nil, you can also set the variable <b>track-eol</b> to a non-nil value. Then <b>C-n</b> and <b>C-p</b>, when starting at the end of the logical line, move to the end of the next logical line. Normally, <b>track-eol</b> is nil.<br><br><b>C-n</b> normally stops at the end of the buffer when you use it on the last line in the buffer. However, if you set the variable <b>next-line-add-newlines</b> to a non-nil value, <b>C-n</b> on the last line of a buffer creates an additional line at the end and moves down into it.</p>
<h2 id="Erasing">Erasing text</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>&lt;DEL&gt;</b>, <b>&lt;Backspace&gt;</b></td>
<td>Delete the character before point, or the region if it's active (<b>delete-backward-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;Delete&gt;</b></td>
<td>Delete the character after point, or the region if it's active (<b>delete-forward-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-d</b></td>
<td>Delete the character after point (<b>delete-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-k</b></td>
<td>Kill to the end of the line (<b>kill-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-d</b></td>
<td>Kill forward to the end of the next word (<b>kill-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;DEL&gt;</b></td>
<td>Kill back to the beginning of the previous word (<b>backward-kill-word</b>).</td>
</tr>
</table>
<p class="tab">The <b>&lt;DEL&gt;</b> (<b>delete-backward-char</b>) command removes the character before point, moving the cursor and the characters after it backwards. If point was at the beginning of a line, this deletes the preceding newline, joining this line to the previous one.<br><br>If, however, the region is active, <b>&lt;DEL&gt;</b> instead deletes the text in the region. See <a href="#Mark">Mark</a>, for a description of the region.<br><br>On most keyboards, <b>&lt;DEL&gt;</b> is labeled <b>Backspace</b>, but it is referred to as <b>&lt;DEL&gt;</b> in this manual. Do not confuse <b>&lt;DEL&gt;</b> with the <b>Delete</b> key; <b>Delete</b> is discussed momentarily. On some text terminals, Emacs may not recognize the <b>&lt;DEL&gt;</b> key properly.<br><br>The <b>delete</b> (<b>delete-forward-char</b>) command deletes in the "opposite direction": it deletes the character after point, i.e., the character under the cursor. If point was at the end of a line, this joins the following line onto this one. Like <b>&lt;DEL&gt;</b>, it deletes the text in the region if the region is active (see <a href="#Mark">Mark</a>).<br><br><b>C-d</b> (<b>delete-char</b>) deletes the character after point, similar to <b>delete</b>, but regardless of whether the region is active.<br><br>See <a href="#Deletion">Deletion</a>, for more detailed information about the above deletion commands.<br><br><b>C-k</b> (<b>kill-line</b>) erases ("kills") a line at a time. If you type <b>C-k</b> at the beginning or middle of a line, it kills all the text up to the end of the line. If you type <b>C-k</b> at the end of a line, it joins that line with the following line. See <a href="#Killing">Killing</a>, for more information about <b>C-k</b> and related commands.</p>
<h2 id="Basic-Undo">Undoing changes</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-/</b></td>
<td>Undo one entry of the undo records&mdash;usually, one command worth (<b>undo</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x u</b>, <b>C-_</b></td>
<td>The same.</td>
</tr>
</table>
<p class="tab">Emacs records a list of changes made in the buffer text, so you can undo recent changes. This is done using the undo command, which is bound to <b>C-/</b> (also <b>C-x u</b> and <b>C-_</b>). Normally, this command undoes the last change, moving point back to where it was before the change. The <b>undo</b> command applies only to changes in the buffer; you can't use it to undo cursor motion.<br><br>Although each editing command usually makes a separate entry in the undo records, very simple commands may be grouped together. Sometimes, an entry may cover only part of a complex command.<br><br>If you repeat <b>C-/</b> (or its aliases), each repetition undoes another, earlier change, back to the limit of the undo information available. If all recorded changes have already been undone, the <b>undo</b> command displays an error message and does nothing.<br><br>To learn more about the <b>undo</b> command, see <a href="#Undo">Undo</a>.</p>
<h2 id="Basic-Files">Files</h2>
<p class="tab">Text that you insert in an Emacs buffer lasts only as long as the Emacs session. To keep any text permanently, you must put it in a file.<br><br>Suppose there is a file named <b>test.emacs</b> in your <a href="/jargon/h/homedir.htm">home directory</a>. To begin editing this file in Emacs, type</p>
<p class="tab tcy">C-x C-f test.emacs &lt;RET&gt;</p>
<p class="tab">Here the file name is given as an argument to the command <b>C-x C-f</b> (<b>find-file</b>). That command uses the minibuffer to read the argument, and you type <b>&lt;RET&gt;</b> (press the Return/Enter key) to terminate the argument. See <a href="#Minibuffer">Minibuffer</a> for more information on the minibuffer.<br><br>Emacs obeys this command by visiting the file: it creates a buffer, copies the contents of the file into the buffer, and then displays the buffer for editing. If you alter the text, you can save the new text in the file by typing <b>C-x C-s</b> (<b>save-buffer</b>). This copies the altered buffer contents back into the file <b>test.emacs</b>, making them permanent. Until you save, the changed text exists only inside Emacs, and the file <b>test.emacs</b> is unaltered.<br><br>To create a file, only visit it with <b>C-x C-f</b> as if it already existed. This creates an empty buffer, where you can insert the text you want to put in the file. Emacs actually creates the file the first time you save this buffer with <b>C-x C-s</b>.<br><br>To learn more in depth about how Emacs uses files, see <a href="#Files">Files</a>.</p>
<h2 id="Basic-Help">Help</h2>
<p class="tab">If you forget what a key does, you can find out by typing <b>C-h k</b> (<b>describe-key</b>), followed by the key of interest; for example, <b>C-h k C-n</b> tells you what <b>C-n</b> does.<br><br>The prefix key <b>C-h</b> stands for "help". The key <b>F1</b> serves as an alias for <b>C-h</b>. Apart from <b>C-h k</b>, there are other help commands providing different kinds of help.<br><br>For more information in depth about Emacs Help, see <a href="#Help">Help.</a></p>
<h2 id="Blank-Lines">Blank lines</h2>
<p class="tab">Here are special commands and techniques for inserting and deleting blank lines:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-o</b></td>
<td>Insert a blank line after the cursor (<b>open-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-o</b></td>
<td>Delete all but one of many consecutive blank lines (<b>delete-blank-lines</b>).</td>
</tr>
</table>
<p class="tab">We have seen how <b>&lt;RET&gt;</b> (newline) starts a new line of text. However, it may be easier to see what you are doing if you first make a blank line and then insert the desired text into it. This is easy to do using the key <b>C-o</b> (<b>open-line</b>), which inserts a newline after point but leaves point in front of the newline. After <b>C-o</b>, type the text for the new line.<br><br>You can make several blank lines by typing <b>C-o</b> several times, or by giving it a numeric argument specifying how many blank lines to make. See <a href="#Arguments">Arguments</a>, for how. If you have a fill prefix, the <b>C-o</b> command inserts the fill prefix on the new line, if typed at the beginning of a line. See <a href="#Fill-Prefix">Fill Prefix</a>.<br><br>The easy way to get rid of extra blank lines is with the command <b>C-x C-o</b> (<b>delete-blank-lines</b>). If point lies within a run of several blank lines, <b>C-x C-o</b> deletes all but one of them. If point is on a single blank line, <b>C-x C-o</b> deletes it. If point is on a nonblank line, <b>C-x C-o</b> deletes all following blank lines, if any exists.</p>
<h2 id="Continuation-Lines">Continuation lines</h2>
<p class="tab">Sometimes, a line of text in the buffer (a logical line) is too long to fit in the window, and Emacs displays it as two or more screen lines. This is called line wrapping or continuation, and the long logical line is called a <i>continued line</i>. On a graphical display, Emacs indicates line wrapping with small bent arrows in the left and right window fringes. On a text terminal, Emacs indicates line wrapping by displaying a '<b>\</b>' character at the right margin.<br><br>Most commands that act on lines act on logical lines, not screen lines. For instance, <b>C-k</b> kills a logical line. As described earlier, <b>C-n</b> (<b>next-line</b>) and <b>C-p</b> (<b>previous-line</b>) are special exceptions: they move point down and up, respectively, by one screen line (see <a href="#Moving-Point">Moving Point</a>).<br><br>Emacs can optionally <a href="/jargon/t/truncate.htm">truncate</a> long logical lines instead of continuing them. This means that every logical line occupies a single screen line; if it's longer than the width of the window, the rest of the line is not displayed. On a graphical display, a truncated line is indicated by a small straight arrow in the right fringe; on a text terminal, it is indicated by a '<b>$</b>' character in the right margin. See <a href="#Line-Truncation">Line Truncation</a>.<br><br>By default, continued lines are wrapped at the right window edge. Since the wrapping may occur in the middle of a word, continued lines can be difficult to read. The usual solution is to break your lines before they get too long, by inserting newlines. If you prefer, you can make Emacs insert a newline automatically when a line gets too long, using Auto Fill mode. See <a href="#Filling">Filling</a>.<br><br>Sometimes, you may need to edit files containing many long logical lines, and it may not be practical to break them all up by adding newlines. In that case, you can use Visual Line mode, which enables word wrapping: instead of wrapping long lines exactly at the right window edge, Emacs wraps them at the word boundaries (i.e., space or tab characters) nearest to the right window edge. Visual Line mode also redefines editing commands such as <b>C-a</b>, <b>C-n</b>, and <b>C-k</b> to operate on-screen lines rather than logical lines. See <a href="#Visual-Line-Mode">Visual Line Mode</a>.</p>
<h2 id="Position-Info">Cursor position information</h2>
<p class="tab">Here are commands to get information about the size and position of parts of the buffer, and to count words and lines.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>M-x what-line</b></td>
<td>Display the line number of point.</td>
</tr>
<tr class="tcw">
<td><b>M-x line-number-mode</b>,<br><b>M-x column-number-mode</b></td>
<td>Toggle automatic display of the current line number or column number. See <a href="#Optional-Mode-Line">Optional Mode Line</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-=</b></td>
<td>Display the number of lines, words, and characters that are present in the region (<b>count-words-region</b>). See <a href="#Mark">Mark</a>, for information about the region.</td>
</tr>
<tr class="tcw">
<td><b>M-x count-words</b></td>
<td>Display the number of lines, words, and characters that are present in the buffer. If the region is active (see <a href="#Mark">Mark</a>), display the numbers for the region instead.</td>
</tr>
<tr class="tcw">
<td><b>C-x =</b></td>
<td>Display the character code of character after point, character position of point, and column of point (<b>what-cursor-position</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x hl-line-mode</b></td>
<td>Enable or disable highlighting of the current line. See <a href="#Cursor-Display">Cursor Display</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-x size-indication-mode</b></td>
<td>Toggle automatic display of the size of the buffer. See <a href="#Optional-Mode-Line">Optional Mode Line</a>.</td>
</tr>
</table>
<p class="tab"><b>M-x what-line</b> displays the current line number in the <a href="#Echo-Area">echo area</a>. This command is usually redundant, because the current line number is shown in the mode line (see <a href="#Mode-Line">Mode Line</a>). However, if you narrow the buffer, the mode line shows the line number relative to the accessible portion (see <a href="#Narrowing">Narrowing</a>). By contrast, <b>what-line</b> displays both the line number relative to the narrowed region and the line number relative to the whole buffer.<br><br><b>M-=</b> (<b>count-words-region</b>) displays a message reporting the number of lines, words, and characters in the region (see <a href="#Mark">Mark</a>, for an explanation of the region). With a prefix argument, <b>C-u M-=</b>, the command displays a count for the entire buffer.<br><br>The command <b>M-x count-words</b> does the same job, but with a different calling convention. It displays a count for the region if the region is active, and for the buffer otherwise.<br><br>The command <b>C-x =</b> (<b>what-cursor-position</b>) shows information about the current cursor position and the buffer contents at that position. It displays a line in the echo area that looks like this:</p>
<pre class="tab tcy">Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53</pre>
<p class="tab">After '<b>Char:</b>', this shows the character in the buffer at point. The text inside the parenthesis shows the corresponding decimal, octal and hex character codes; for more information about how <b>C-x =</b> displays character information, see <a href="#International-Chars">International Chars</a>. After '<b>point=</b>' is the position of point as a character count (the first character in the buffer is position 1, the second character is position 2, and so on). The number after that is the total number of characters in the buffer, and the number in parenthesis expresses the position as a percentage of the total. After '<b>column=</b>' is the horizontal position of point, in columns counting from the left edge of the window.<br><br>If the buffer is narrowed, making some of the text at the beginning and the end temporarily inaccessible, <b>C-x =</b> displays additional text describing the currently accessible range. For example, it might display this:</p>
<pre class="tab tcy">Char: C (67, #o103, #x43) point=252 of 889 (28%) &lt;231-599&gt; column=0</pre>
<p class="tab">Where the two extra numbers give the smallest and largest character position that point is allowed to assume. The characters between those two positions are the accessible ones. See <a href="#Narrowing">Narrowing</a>.</p>
<h2 id="Arguments">Numeric arguments</h2>
<p class="tab">In the terminology of mathematics and computing, <i>argument</i> means "data provided to a function or operation". You can give any Emacs command a numeric argument (also called a <i>prefix argument</i>). Some commands interpret the argument as a repetition count. For example, giving <b>C-f</b> an argument of ten causes it to move point forward by ten characters instead of one. With these commands, no argument is equivalent to an argument of one, and negative arguments cause them to move or act in the opposite direction.<br><br>The easiest way to specify a numeric argument is to type a digit and/or a minus sign while holding down the <b>META</b> key. For example,</p>
<p class="tab tcy">M-5 C-n</p>
<p class="tab">Moves down five lines. The keys <b>M-1</b>, <b>M-2</b>, and so on, and <b>M--</b>, are bound to commands (<b>digit-argument</b> and <b>negative-argument</b>) that set up an argument for the next command. <b>Meta--</b> without digits normally means <b>&minus;1</b>.<br><br>If you enter more than one digit, you need not hold down the <b>META</b> key for the second and subsequent digits. Thus, to move down fifty lines, type</p>
<p class="tab tcy">M-5 0 C-n</p>
<p class="tab">Note that this does not insert five copies of '<b>0</b>' and move down one line, as you might expect. The '<b>0</b>' is treated as part of the prefix argument.<br><br>What if you do want to insert five copies of '<b>0</b>'? Type <b>M-5 C-u 0</b>. Here, <b>C-u</b> "terminates" the prefix argument, so that the next keystroke begins the command that you want to execute. Note that this meaning of <b>C-u</b> applies only to this case. For the usual role of <b>C-u</b>, see below. Instead of typing <b>M-1</b>, <b>M-2</b>, and so on, another way to specify a numeric argument is to type <b>C-u</b> (<b>universal-argument</b>) followed by some digits, or (for a negative argument) a minus sign followed by digits. A minus sign without digits normally means <b>&minus;1</b>.<br><br><b>C-u</b> alone has the special meaning of "four times": it multiplies the argument for the next command by four. <b>C-u C-u</b> multiplies it by sixteen. Thus, <b>C-u C-u C-f</b> moves forward sixteen characters. Other useful combinations are <b>C-u C-n</b>, <b>C-u C-u C-n</b> (move down a good fraction of a screen), <b>C-u C-u C-o</b> (make "a lot" of blank lines), and <b>C-u C-k</b> (kill four lines).<br><br>You can use a numeric argument before a self-inserting character to insert multiple copies of it. This is straightforward when the character is not a digit; for example, <b>C-u 6 4 a</b> inserts 64 copies of the character '<b>a</b>'. But this does not work for inserting digits; <b>C-u 6 4 1</b> specifies an argument of <b>641</b>. You can separate the argument from the digit to insert with another <b>C-u</b>; for example, <b>C-u 6 4 C-u 1</b> does insert 64 copies of the character '<b>1</b>'.<br><br>Some commands care whether there is an argument, but ignore its value. For example, the command <b>M-q</b> (<b>fill-paragraph</b>) fills text; with an argument, it onlyifies the text as well. (See <a href="#Filling">Filling</a>, for more information on <b>M-q</b>.) For these commands, it is enough to specify the argument with a single <b>C-u</b>.<br><br>Some commands use the value of the argument as a repeat count, but do something special when there is no argument. For example, the command <b>C-k</b> (<b>kill-line</b>) with argument <i>n</i> kills <i>n</i> lines, including their terminating newlines. But C-k with no argument is special: it kills the text up to the next newline, or, if point is right at the end of the line, it kills the newline itself. Thus, two <b>C-k</b> commands with no arguments can kill a nonblank line, only like <b>C-k</b> with an argument of one. See <a href="#Killing">Killing</a>, for more information on <b>C-k</b>.<br><br>A few commands treat a plain <b>C-u</b> differently from an ordinary argument. A few others may treat an argument of only a minus sign differently from an argument of <b>&minus;1</b>. These unusual cases are described when they come up; they exist to make an individual command more convenient, and they are documented in that command's documentation string.<br><br>We use the term <i>prefix argument</i> to emphasize that you type such arguments before the command, and to distinguish them from minibuffer arguments (see <a href="#Minibuffer">Minibuffer</a>), which are entered after invoking the command.</p>
<h2 id="Repeating">Repeating a command</h2>
<p class="tab">Many simple commands, such as those invoked with a single key or with <b>M-x command-name &lt;RET&gt;</b>, can be repeated by invoking them with a numeric argument that serves as a repeat count (see <a href="#Arguments">Arguments</a>). However, if the command you want to repeat prompts for input, or uses a numeric argument in another way, that method won't work.<br><br>The command <b>C-x z</b> (<b>repeat</b>) provides another way to repeat an Emacs command many times. This command repeats the previous Emacs command, whatever that was. Repeating a command uses the same arguments that were used before; it does not read new arguments each time.<br><br>To repeat the command more than once, type additional <b>z</b>'s: each <b>z</b> repeats the command one more time. Repetition ends when you type a character other than <b>z</b>, or press a mouse button.<br><br>For example, suppose you type <b>C-u 2 0 C-d</b> to delete 20 characters. You can repeat that command (including its argument) three additional times, to delete a total of 80 characters, by typing <b>C-x z z z</b>. The first <b>C-x z</b> repeats the command once, and each subsequent <b>z</b> repeats it once again.</p>
<h2 id="Minibuffer">The minibuffer</h2>
<p class="tab">The minibuffer is where Emacs commands read complicated arguments, such as file names, buffer names, Emacs command names, or Lisp expressions. We call it the "minibuffer" because it's a special-purpose buffer with a small amount of screen space. You can use the usual Emacs editing commands in the minibuffer to edit the argument text.</p>
<ul>
<li><a href="#Basic-Minibuffer">Basic Minibuffer</a>: Basic usage of the minibuffer.</li>
<li><a href="#Minibuffer-File">Minibuffer File</a>: Entering file names with the minibuffer.</li>
<li><a href="#Minibuffer-Edit">Minibuffer Edit</a>: How to edit in the minibuffer.</li>
<li><a href="#Completion">Completion</a>: An abbreviation facility for minibuffer input.</li>
<li><a href="#Minibuffer-History">Minibuffer History</a>: Reusing recent minibuffer arguments.</li>
<li><a href="#Repetition">Repetition</a>: Re-executing commands that used the minibuffer.</li>
<li><a href="#Passwords">Passwords</a>: Entering passwords in the echo area.</li>
<li><a href="#Yes-or-No-Prompts">Yes or No Prompts</a>: Replying yes or no in the echo area.</li>
</ul>
<h2 id="Basic-Minibuffer">Using the minibuffer</h2>
<p class="tab">When the minibuffer is in use, it appears in the echo area, with a cursor. The minibuffer starts with a prompt, usually ending with a colon. The prompt states what kind of input is expected, and how it is used. The prompt is highlighted using the minibuffer-prompt face (see <a href="#Faces">Faces</a>).<br><br>The simplest way to enter a minibuffer argument is to type the text, then <b>&lt;RET&gt;</b> to submit the argument and exit the minibuffer. Alternatively, you can type <b>C-g</b> to exit the minibuffer by cancelling the command asking for the argument (see <a href="#Quitting">Quitting</a>).<br><br>Sometimes, the prompt shows a default argument, inside parentheses before the colon. This default is used as the argument if you only type <b>&lt;RET&gt;</b>. For example, commands that read buffer names usually show a buffer name as the default; you can type <b>&lt;RET&gt;</b> to operate on that default buffer.<br><br>If you enable Minibuffer Electric Default mode, a global minor mode, Emacs hides the default argument as soon as you modify the contents of the minibuffer (since typing <b>&lt;RET&gt;</b> would no longer submit that default). If you ever bring back the original minibuffer text, the prompt again shows the default. Further, if you change the variable <b>minibuffer-eldef-shorten-default</b> to a non-nil value, the default argument is displayed as '<b>[default]</b>' instead of '<b>(default default)</b>', saving some screen space. To enable this minor mode, type <b>M-x minibuffer-electric-default-mode</b>.<br><br>Since the minibuffer appears in the echo area, it can conflict with other uses of the echo area. If an error message or an informative message is emitted while the minibuffer is active, the message hides the minibuffer for a few seconds, or until you type something; then the minibuffer comes back. While the minibuffer is in use, keystrokes do not echo.</p>
<h2 id="Minibuffer-File">Minibuffers for file names</h2>
<p class="tab">Commands such as <b>C-x C-f</b> (<b>find-file</b>) use the minibuffer to read a file name argument (see <a href="#Basic-Files">Basic Files</a>). When the minibuffer is used to read a file name, it often starts out with some initial text ending in a slash. This is the default directory. For example, it may start out like this:</p>
<p class="tab tcy"><b>Find file:</b> /u2/emacs/src/</p>
<p class="tab">Here, '<b>Find file:</b> ' is the prompt and '<b>/u2/emacs/src/</b>' is the default directory. If you now type <b>buffer.c</b> as input, that specifies the file <b>/u2/emacs/src/buffer.c</b>. See <a href="#File-Names">File Names</a>, for information about the default directory.<br><br>You can specify the parent directory with ..: <b>/a/b/../foo.el</b> is equivalent to <b>/a/foo.el</b>. Alternatively, you can use <b>M-&lt;DEL&gt;</b> to kill directory names backwards (see <a href="#Words">Words</a>).<br><br>To specify a file in a completely different directory, you can kill the entire default with <b>C-a C-k</b> (see <a href="#Minibuffer-Edit">Minibuffer Edit</a>). Alternatively, you can ignore the default, and enter an absolute file name starting with a slash or a tilde after the default directory. For example, you can specify <b>/etc/termcap</b> as follows:</p>
<p class="tab tcy"><b>Find file:</b> /u2/emacs/src//etc/termcap</p>
<p class="tab">Emacs interprets a double slash as "ignore everything before the second slash in the pair". In the example above, <b>/u2/emacs/src/</b> is ignored, so the argument you supplied is <b>/etc/termcap</b>. The ignored part of the file name is dimmed if the terminal allows it. (To disable this dimming, turn off File Name Shadow mode with the command <b>M-x file-name-shadow-mode</b>.)<br><br>Emacs interprets <b>~/</b> as your home directory. Thus, <b>~/foo/bar.txt</b> specifies a file named <b>bar.txt</b>, inside a directory named <b>foo</b>, which is in turn located in your home directory. Also, <b>~user-id/</b> means the home directory of a user whose login name is <b>user-id</b>. Any leading directory name in front of the <b>~</b> is ignored: thus, <b>/u2/emacs/~/foo/bar.txt</b> is equivalent to <b>~/foo/bar.txt</b>.<br><br>On <a href="/jargon/w/windows.htm">Microsoft Windows</a> and <a href="/jargon/m/msdos.htm">MS-DOS</a> systems, where a user doesn't always have a home directory, Emacs uses several alternatives. For Microsoft Windows, see <a href="#Windows-HOME">Windows HOME</a>. On these systems, the <b>~user-id/</b> construct is supported only for the current user, i.e., only if <b>user-id</b> is the current user's login name.<br><br>To prevent Emacs from inserting the default directory when reading file names, change the variable <b>insert-default-directory</b> to nil. In that case, the minibuffer starts out empty. Nonetheless, relative file name arguments are still interpreted based on the same default directory.<br><br>You can also enter remote file names in the minibuffer. See <a href="#Remote-Files">Remote Files</a>.</p>
<h2 id="Minibuffer-Edit">Editing in the minibuffer</h2>
<p class="tab">The minibuffer is an Emacs buffer, albeit a peculiar one, and the usual Emacs commands are available for editing the argument text. (The prompt, however, is read-only, and cannot be changed.)<br><br>Since <b>&lt;RET&gt;</b> in the minibuffer submits the argument, you can't use it to insert a newline. You can do that with <b>C-q C-j</b>, which inserts a <b>C-j</b> control character, which is formally equivalent to a newline character (see <a href="#Inserting-Text">Inserting Text</a>). Alternatively, you can use the <b>C-o</b> (<b>open-line</b>) command (see <a href="#Blank-Lines">Blank Lines</a>).<br><br>Inside a minibuffer, the keys <b>&lt;TAB&gt;</b>, <b>&lt;SPC&gt;</b>, and <b>?</b> are often bound to completion commands, which allow you to easily fill in the desired text without typing all of it. See <a href="#Completion">Completion</a>. As with <b>&lt;RET&gt;</b>, you can use <b>C-q</b> to insert a <b>&lt;TAB&gt;</b>, <b>&lt;SPC&gt;</b>, or '<b>?</b>' character.<br><br>For convenience, <b>C-a</b> (<b>move-beginning-of-line</b>) in a minibuffer moves point to the beginning of the argument text, not the beginning of the prompt. For example, this allows you to erase the entire argument with <b>C-a C-k</b>.<br><br>When the minibuffer is active, the echo area is treated much like an ordinary Emacs window. For instance, you can switch to another window (with <b>C-x o</b>), edit text there, then return to the minibuffer window to finish the argument. You can even kill text in another window, return to the minibuffer window, and yank the text into the argument. There are some restrictions on the minibuffer window, however: for instance, you cannot split it. See <a href="#Windows">Windows</a>.<br><br>Normally, the minibuffer window occupies a single screen line. However, if you add two or more lines' worth of text into the minibuffer, it expands automatically to accommodate the text. The variable <b>resize-mini-windows</b> controls the resizing of the minibuffer. The default value is <b>grow-only</b>, which means the behavior we have only described. If the value is <b>t</b>, the minibuffer window also shrinks automatically if you remove some lines of text from the minibuffer, down to a minimum of one screen line. If the value is nil, the minibuffer window never changes size automatically, but you can use the usual window-resizing commands on it (see <a href="#Windows">Windows</a>).<br><br>The variable <b>max-mini-window-height</b> controls the maximum height for resizing the minibuffer window. A floating-point number specifies a fraction of the frame's height; an integer specifies the maximum number of lines; nil means do not resize the minibuffer window automatically. The default value is <b>0.25</b>.<br><br>The <b>C-M-v</b> command in the minibuffer scrolls the help text from commands that display help text of any sort in another window. You can also scroll the help text with <b>M-prior</b> and <b>M-next</b> (or, equivalently, <b>M-PageUp</b> and <b>M-PageDown</b>). This is especially useful with long lists of possible completions. See <a href="#Other-Window">Other Window</a>.<br><br>Emacs normally disallows most commands that use the minibuffer while the minibuffer is active. To allow such commands in the minibuffer, set the variable <b>enable-recursive-minibuffers</b> to <b>t</b>.<br><br>When not active, the minibuffer is in minibuffer-inactive-mode, and clicking Mouse-1 there shows the <b>*Messages*</b> buffer. If you use a dedicated frame for minibuffers, Emacs also recognizes certain keys there, for example <b>n</b> to make a new frame.</p>
<h2 id="Completion">Completion</h2>
<p class="tab">You can often use a feature called completion to help enter arguments. This means that after you type part of the argument, Emacs can fill in the rest, or some of it, based on what was typed so far.<br><br>When completion is available, certain keys (usually <b>&lt;TAB&gt;</b>, <b>&lt;RET&gt;</b>, and <b>&lt;SPC&gt;</b>) are rebound in the minibuffer to special completion commands (see <a href="#Completion-Commands">Completion Commands</a>). These commands attempt to complete the text in the minibuffer, based on a set of completion alternatives provided by the command that requested the argument. You can usually type <b>?</b> to see a list of completion alternatives.<br><br>Although completion is usually done in the minibuffer, the feature is sometimes available in ordinary buffers too. See <a href="#Symbol-Completion">Symbol Completion</a>.</p>
<ul>
<li><a href="#Completion-Example">Completion Example</a>: Examples of using completion.</li>
<li><a href="#Completion-Commands">Completion Commands</a>: A list of completion commands.</li>
<li><a href="#Completion-Exit">Completion Exit</a>: Completion and minibuffer text submission.</li>
<li><a href="#Completion-Styles">Completion Styles</a>: How completion matches are chosen.</li>
<li><a href="#Completion-Options">Options</a>: Options for completion.</li>
</ul>
<h2 id="Completion-Example">Completion example</h2>
<p class="tab">A simple example: <b>M-x</b> uses the minibuffer to read the name of a command, so completion works by matching the minibuffer text against the names of existing Emacs commands. Suppose you want to run the command <b>auto-fill-mode</b>. You can do that by typing <b>M-x auto-fill-mode &lt;RET&gt;</b>, but it is easier to use completion.<br><br>If you type <b>M-x a u &lt;TAB&gt;</b>, the <b>&lt;TAB&gt;</b> looks for completion alternatives (in this case, command names) that start with '<b>au</b>'. There's several, including <b>auto-fill-mode</b> and <b>autoconf-mode</b>, but they all begin with <b>auto</b>, so the '<b>au</b>' in the minibuffer completes to '<b>auto</b>'. (More commands may be defined in your Emacs session. For example, if a command called <b>authorize-me</b> was defined, Emacs could only complete as far as '<b>aut</b>'.)<br><br>If you type <b>&lt;TAB&gt;</b> again immediately, it cannot determine the next character; it could be '<b>-</b>', '<b>a</b>', or '<b>c</b>'. So it does not add any characters; instead, <b>&lt;TAB&gt;</b> displays a list of all possible completions in another window.<br><br>Next, type <b>-f</b>. The minibuffer now contains '<b>auto-f</b>', and the only command name that starts with this is <b>auto-fill-mode</b>. If you now type <b>&lt;TAB&gt;</b>, completion fills in the rest of the argument '<b>auto-fill-mode</b>' into the minibuffer.<br><br>Hence, typing only <b>a u &lt;TAB&gt; - f &lt;TAB&gt;</b> allows you to enter '<b>auto-fill-mode</b>'.</p>
<h2 id="Completion-Commands">Completion commands</h2>
<p class="tab">Here is a list of the completion commands defined in the minibuffer when completion is allowed.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>&lt;TAB&gt;</b></td>
<td>Complete the text in the minibuffer as much as possible; if unable to complete, display a list of possible completions (<b>minibuffer-complete</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;SPC&gt;</b></td>
<td>Complete up to one word from the minibuffer text before point (<b>minibuffer-complete-word</b>). This command is not available for arguments that often include spaces, such as file names.</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b></td>
<td>Submit the text in the minibuffer as the argument, possibly completing first (<b>minibuffer-complete-and-exit</b>). See <a href="#Completion-Exit">Completion Exit</a>.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>Display a list of completions (<b>minibuffer-completion-help</b>).</td>
</tr>
</table>
<p class="tab"><b>&lt;TAB&gt;</b> (<b>minibuffer-complete</b>) is the most fundamental completion command. It searches for all possible completions that match the existing minibuffer text, and attempts to complete as much as it can. See <a href="#Completion-Styles">Completion Styles</a>, for how completion alternatives are chosen.<br><br><b>&lt;SPC&gt;</b> (<b>minibuffer-complete-word</b>) completes like <b>&lt;TAB&gt;</b>, but only up to the next hyphen or space. If you have '<b>auto-f</b>' in the minibuffer and type <b>&lt;SPC&gt;</b>, it finds that the completion is '<b>auto-fill-mode</b>', but it only inserts '<b>ill-</b>', giving '<b>auto-fill-</b>'. Another <b>&lt;SPC&gt;</b> at this point completes to '<b>auto-fill-mode</b>'.<br><br>If <b>&lt;TAB&gt;</b> or <b>&lt;SPC&gt;</b> cannot complete, it displays a list of matching completion alternatives (if there are any) in another window. You can display the same list with <b>?</b> (<b>minibuffer-completion-help</b>). The following commands can be used with the completion list:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>Mouse-1</b>, <b>Mouse-2</b></td>
<td>Clicking mouse button 1 or 2 on a completion alternative chooses it (<b>mouse-choose-completion</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-v</b>,<br><b>&lt;PageUp&gt;</b>,<br><b>&lt;prior&gt;</b></td>
<td>Typing <b>M-v</b>, while in the minibuffer, selects the window showing the completion list (<b>switch-to-completions</b>). This paves the way for using the commands below. <b>PageUp</b> or <b>prior</b> does the same. You can also select the window in other ways (see <a href="#Windows">Windows</a>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b></td>
<td>While in the completion list buffer, this chooses the completion at point (<b>choose-completion</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;Right&gt;</b></td>
<td>While in the completion list buffer, this moves point to the following completion alternative (<b>next-completion</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;Left&gt;</b></td>
<td>While in the completion list buffer, this moves point to the previous completion alternative (<b>previous-completion</b>).</td>
</tr>
</table>
<h2 id="Completion-Exit">Completion exit</h2>
<p class="tab">When a command reads an argument using the minibuffer with completion, it also controls what happens when you type <b>&lt;RET&gt;</b> (<b>minibuffer-complete-and-exit</b>) to submit the argument. There are four types of behavior:</p>
<ul>
<li>Strict completion accepts only exact completion matches. Typing <b>&lt;RET&gt;</b> exits the minibuffer only if the minibuffer text is an exact match, or completes to one. Otherwise, Emacs refuses to exit the minibuffer; instead it tries to complete, and if no completion can be done it momentarily displays '<b>[No match]</b>' after the minibuffer text. (You can still leave the minibuffer by typing <b>C-g</b> to cancel the command.)</li>
<li>An example of a command that uses this behavior is <b>M-x</b>, as it is meaningless for it to accept a non-existent command name.</li>
<li>Cautious completion is like strict completion, except <b>&lt;RET&gt;</b> exits only if the text is already an exact match. If the text completes to an exact match, <b>&lt;RET&gt;</b> performs that completion but does not exit yet; you must type a second <b>&lt;RET&gt;</b> to exit. Cautious completion is used for reading file names for files that must already exist, for example.</li>
<li>Permissive completion allows any input; the completion candidates are only suggestions. Typing <b>&lt;RET&gt;</b> does not complete, it only submits the argument as you have entered it.</li>
<li>Permissive completion with confirmation is like permissive completion, with an exception: if you typed <b>&lt;TAB&gt;</b> and this completed the text up to some intermediate state (i.e., one that is not yet an exact completion match), typing <b>&lt;RET&gt;</b> right afterward does not submit the argument. Instead, Emacs asks for confirmation by momentarily displaying '<b>[Confirm]</b>' after the text; type <b>&lt;RET&gt;</b> again to confirm and submit the text. This catches a common mistake, where one types <b>&lt;RET&gt;</b> before realizing that <b>&lt;TAB&gt;</b> did not complete as far as desired.</li>
<li>You can tweak the confirmation behavior by customizing the variable <b>confirm-nonexistent-file-or-buffer</b>. The default value, <b>after-completion</b>, gives the behavior we have only described. If you change it to nil, Emacs does not ask for confirmation, falling back on permissive completion. If you change it to any other non-nil value, Emacs asks for confirmation whether or not the preceding command was <b>&lt;TAB&gt;</b>.</li>
</ul>
<p class="tab">This behavior is used by most commands that read file names, like <b>C-x C-f</b>, and commands that read buffer names, like <b>C-x b</b>.</p>
<h2 id="Completion-Styles">How completion alternatives are chosen</h2>
<p class="tab">Completion commands work by narrowing a large list of possible completion alternatives to a smaller subset that "matches" what you have typed in the minibuffer. In <a href="#Completion-Example">Completion Example</a>, we gave a simple example of such matching. The procedure of determining what constitutes a "match" is quite intricate. Emacs attempts to offer plausible completions under most circumstances.<br><br>Emacs performs completion using one or more completion styles&mdash;sets of criteria for matching minibuffer text to completion alternatives. During completion, Emacs tries each completion style in turn. If a style yields one or more matches, that is used as the list of completion alternatives. If a style produces no matches, Emacs falls back on the next style.<br><br>The list variable <b>completion-styles</b> specifies the completion styles to use. Each list element is the name of a completion style (a Lisp symbol). The default completion styles are (in order):</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>basic</b></td>
<td>A matching completion alternative must have the same beginning as the text in the minibuffer before point. Furthermore, if there is any text in the minibuffer after point, the rest of the completion alternative must contain that text as a substring.</td>
</tr>
<tr class="tcw">
<td><b>partial-completion</b></td>
<td>This aggressive completion style divides the minibuffer text into words separated by hyphens or spaces, and completes each word separately. (For example, when completing command names, '<b>em-l-m</b>' completes to '<b>emacs-lisp-mode</b>'.)<br><br>Furthermore, a '<b>*</b>' in the minibuffer text is treated as a <a href="/jargon/w/wildcard.htm">wildcard</a>: it matches any character at the corresponding position in the completion alternative.</td>
</tr>
<tr class="tcw">
<td><b>emacs22</b></td>
<td>This completion style is similar to <b>basic</b>, except that it ignores the text in the minibuffer after point. It is so-named because it corresponds to the completion behavior in Emacs 22.</td>
</tr>
</table>
<p class="tab">The following additional completion styles are also defined, and you can add them to completion-styles if you want (see <a href="#Customization">Customization</a>):</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:100px"><b>substring</b></td>
<td>A matching completion alternative must contain the text in the minibuffer before point, and the text in the minibuffer after point, as substrings (in that same order).<br><br>Thus, if the text in the minibuffer is '<b>foobar</b>', with point between '<b>foo</b>' and '<b>bar</b>', that matches '<b>afoobbarc</b>', where <b>a</b>, <b>b</b>, and <b>c</b> is any string including the empty string.</td>
</tr>
<tr class="tcw">
<td><b>initials</b></td>
<td>This very aggressive completion style attempts to complete acronyms and initialisms. For example, when completing command names, it matches '<b>lch</b>' to '<b>list-command-history</b>'.</td>
</tr>
</table>
<p class="tab">There is also a very simple completion style called <b>emacs21</b>. In this style, if the text in the minibuffer is '<b>foobar</b>', only matches starting with '<b>foobar</b>' are considered.<br><br>You can use different completion styles in different situations, by setting the variable <b>completion-category-overrides</b>. For example, the default setting says to use only basic and substring completion for buffer names.</p>
<h2 id="Completion-Options">Options</h2>
<p class="tab">Case is significant when completing case-sensitive arguments, such as command names. For example, when completing command names, '<b>AU</b>' does not complete to '<b>auto-fill-mode</b>'. Case differences are ignored when completing arguments where case does not matter.<br><br>When completing file names, case differences are ignored if the variable <b>read-file-name-completion-ignore-case</b> is non-nil. The default value is nil on systems that have case-sensitive file-names, such as GNU <a href="/jargon/l/linux.htm">Linux</a>; it is non-nil on systems that have case-insensitive file-names, such as Microsoft Windows. When completing buffer names, case differences are ignored if the variable <b>read-buffer-completion-ignore-case</b> is non-nil; the default is nil.<br><br>When completing file names, Emacs usually omits certain alternatives that are considered unlikely to be chosen, as determined by the list variable <b>completion-ignored-extensions</b>. Each element in the list should be a string; any file name ending in such a string is ignored as a completion alternative. Any element ending in a slash (<b>/</b>) represents a subdirectory name. The standard value of <b>completion-ignored-extensions</b> has several elements including "<b>.o</b>", "<b>.elc</b>", and "<b>~</b>". For example, if a directory contains '<b>foo.c</b>' and '<b>foo.elc</b>', '<b>foo</b>' completes to '<b>foo.c</b>'. However, if all possible completions end in "ignored" strings, they are not ignored: in the previous example, '<b>foo.e</b>' completes to '<b>foo.elc</b>'. Emacs disregards <b>completion-ignored-extensions</b> when showing completion alternatives in the completion list.<br><br>If <b>completion-auto-help</b> is set to nil, the completion commands never display the completion list buffer; you must type <b>?</b> to display the list. If the value is lazy, Emacs only shows the completion list buffer on the second attempt to complete. In other words, if there is nothing to complete, the first <b>&lt;TAB&gt;</b> echoes '<b>Next char not unique</b>'; the second <b>&lt;TAB&gt;</b> shows the completion list buffer.<br><br>If <b>completion-cycle-threshold</b> is non-nil, completion commands can "cycle" through completion alternatives. Normally, if there is more than one completion alternative for the text in the minibuffer, a completion command completes up to the longest common substring. If you change <b>completion-cycle-threshold</b> to <b>t</b>, the completion command instead completes to the first of those completion alternatives; each subsequent invocation of the completion command replaces that with the next completion alternative, in a cyclic manner. If you give <b>completion-cycle-threshold</b> a numeric value <b>n</b>, completion commands switch to this cycling behavior only when there are <b>n</b> or fewer alternatives.<br><br>Icomplete mode presents a constantly-updated display that tells you what completions are available for the text you've entered so far. The command to enable or disable this minor mode is <b>M-x icomplete-mode</b>.</p>
<h2 id="Minibuffer-History">Minibuffer history</h2>
<p class="tab">Every argument that you enter with the minibuffer is saved in a minibuffer history list so you can easily use it again later. You can use the following arguments to quickly fetch an earlier argument into the minibuffer:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:140px"><b>M-p &lt;Up&gt;</b></td>
<td>Move to the previous item in the minibuffer history, an earlier argument (<b>previous-history-element</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-n &lt;Down&gt;</b></td>
<td>Move to the next item in the minibuffer history (<b>next-history-element</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-r</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Move to an earlier item in the minibuffer history that matches <i>regexp</i> (<b>previous-matching-history-element</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-s</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Move to a later item in the minibuffer history that matches <i>regexp</i> (<b>next-matching-history-element</b>).</td>
</tr>
</table>
<p class="tab">While in the minibuffer, <b>M-p</b> or <b>Up</b> (<b>previous-history-element</b>) moves through the minibuffer history list, one item at a time. Each <b>M-p</b> fetches an earlier item from the history list into the minibuffer, replacing its existing contents. Typing <b>M-n</b> or <b>Down</b> (<b>next-history-element</b>) moves through the minibuffer history list in the opposite direction, fetching later entries into the minibuffer.<br><br>If you type <b>M-n</b> in the minibuffer when there are no later entries in the minibuffer history (e.g., if you haven't previously typed <b>M-p</b>), Emacs tries fetching from a list of default arguments: values that you are likely to enter. You can think of this as moving through the "future history" list.<br><br>If you edit the text inserted by the <b>M-p</b> or <b>M-n</b> minibuffer history commands, this does not change its entry in the history list. However, the edited argument does go at the end of the history list when you submit it.<br><br>You can use <b>M-r</b> (<b>previous-matching-history-element</b>) to search through older elements in the history list, and <b>M-s</b> (<b>next-matching-history-element</b>) to search through newer entries. Each of these commands asks for a regular expression as an argument, and fetches the first matching entry into the minibuffer. See <a href="#Regexps">Regexps</a>, for an explanation of regular expressions. A numeric prefix argument <i>n</i> means to fetch the <i>n</i>th matching entry. These commands are unusual, in that they use the minibuffer to read the regular expression argument, even though they are invoked from the minibuffer. An upper-case letter in the regular expression makes the search case-sensitive (see <a href="#Search-Case">Search Case</a>).<br><br>You can also search through the history using an incremental search. See <a href="#Isearch-Minibuffer">Isearch Minibuffer</a>.<br><br>Emacs keeps separate history lists for t kinds of arguments. For example, there is a list for file names, used by all the commands that read file names. Other history lists include buffer names, command names (used by <b>M-x</b>), and command arguments (used by commands like <b>query-replace</b>).<br><br>The variable <b>history-length</b> specifies the maximum length of a minibuffer history list; adding a new element deletes the oldest element if the list gets too long. If the value is <b>t</b>, there is no maximum length.<br><br>The variable <b>history-delete-duplicates</b> specifies whether to delete duplicates in history. If it's non-nil, adding a new element deletes from the list all other elements that are equal to it. The default is <b>nil</b>.</p>
<h2 id="Repetition">Repeating minibuffer commands</h2>
<p class="tab">Every command that uses the minibuffer once is recorded on a special history list, the command history, together with the values of its arguments, so that you can repeat the entire command. In particular, every use of <b>M-x</b> is recorded there, as <b>M-x</b> uses the minibuffer to read the command name.</p>
<p class="tab tcy">C-x &lt;ESC&gt; &lt;ESC&gt;</p>
<p class="tab">Re-executes a recent minibuffer command from the command history (<b>repeat-complex-command</b>).</p>
<p class="tab tcy">M-x list-command-history</p>
<p class="tab">Display the entire command history, showing all the commands <b>C-x &lt;ESC&gt; &lt;ESC&gt;</b> can repeat, most recent first.</p>
<p class="tab"><b>C-x &lt;ESC&gt; &lt;ESC&gt;</b> re-executes a recent command that used the minibuffer. With no argument, it repeats the last such command. A numeric argument specifies which command to repeat; 1 means the last one, 2 the previous, etc.<br><br><b>C-x &lt;ESC&gt; &lt;ESC&gt;</b> works by turning the previous command into a Lisp expression and then entering a minibuffer initialized with the text for that expression. Even if you don't know Lisp, it will probably be obvious which command is displayed for repetition. If you type only <b>&lt;RET&gt;</b>, that repeats the command unchanged. You can also change the command by editing the Lisp expression before you execute it. The executed command is added to the front of the command history unless it is identical to the most recent item.<br><br>Once inside the minibuffer for <b>C-x &lt;ESC&gt; &lt;ESC&gt;</b>, you can use the usual minibuffer history commands (see <a href="#Minibuffer-History">Minibuffer History</a>) to move through the history list. After finding the desired previous command, you can edit its expression as usual and then execute it by typing <b>&lt;RET&gt;</b>.<br><br>Incremental search does not, strictly speaking, use the minibuffer. Therefore, although it behaves like a complex command, it normally does not appear in the history list for <b>C-x &lt;ESC&gt; &lt;ESC&gt;</b>. You can make incremental search commands appear in the history by setting <b>isearch-resume-in-command-history</b> to a non-nil value. See <a href="#Incremental-Search">Incremental Search</a>.<br><br>The list of previous <b>minibuffer-using</b> commands is stored as a Lisp list in the variable <b>command-history</b>. Each element is a Lisp expression that describes one command and its arguments. Lisp programs can re-execute a command by calling <b>eval</b> with the <b>command-history</b> element.</p>
<h2 id="Passwords">Entering passwords</h2>
<p class="tab">Sometimes, you may need to enter a <a href="/jargon/p/password.htm">password</a> into Emacs. For instance, when you tell Emacs to visit a file on another machine via a network <a href="/jargon/p/protocol.htm">protocol</a> such as <a href="/jargon/f/ftp.htm">FTP</a>, you often need to supply a password to gain access to the machine (see <a href="#Remote-Files">Remote Files</a>).<br><br>Entering a password is similar to using a minibuffer. Emacs displays a prompt in the echo area (such as '<b>Password:</b> '); after you type the required password, press <b>&lt;RET&gt;</b> to submit it. To prevent others from seeing your password, every character you type is displayed as a dot ('<b>.</b>') instead of its usual form.<br><br>Most of the features and commands associated with the minibuffer cannot be used when entering a password. There is no history or completion, and you cannot change windows or perform any other action with Emacs until you have submitted the password.<br><br>While you are typing the password, you may press <b>&lt;DEL&gt;</b> to delete backwards, removing the last character entered. <b>C-u</b> deletes everything you have typed so far. <b>C-g</b> quits the password prompt (see <a href="#Quitting">Quitting</a>). <b>C-y</b> inserts the current kill into the password (see <a href="#Killing">Killing</a>). You may type either <b>&lt;RET&gt;</b> or <b>&lt;ESC&gt;</b> to submit the password. Any other self-inserting character key inserts the associated character into the password, and all other input is ignored.</p>
<h2 id="Yes-or-No-Prompts">Yes or no prompts</h2>
<p class="tab">An Emacs command may require you to answer a "yes or no" question during the course of its execution. Such queries come in two main varieties.<br><br>For the first type of "yes or no" query, the prompt ends with '<b>(y or n)</b>'. Such a query does not actually use the minibuffer; the prompt appears in the echo area, and you answer by typing either '<b>y</b>' or '<b>n</b>', which immediately delivers the response. For example, if you type <b>C-x C-w</b> (<b>write-file</b>) to save a buffer, and enter the name of an existing file, Emacs issues a prompt like this:</p>
<pre class="tab tcy">File &#96;foo.el' exists; overwrite? (y or n)</pre>
<p class="tab">Because this query does not actually use the minibuffer, the usual minibuffer editing commands cannot be used. However, you can perform some window scrolling operations while the query is active: <b>C-l</b> recenters the selected window; <b>M-v</b> (or <b>PageDown</b> or <b>next</b>) scrolls forward; <b>C-v</b> (or <b>PageUp</b>, or <b>prior</b>) scrolls backward; <b>C-M-v</b> scrolls forward in the next window; and <b>C-M-S-v</b> scrolls backward in the next window. Typing <b>C-g</b> dismisses the query, and quits the command that issued it (see <a href="#Quitting">Quitting</a>).<br><br>The second type of "yes or no" query is often employed if giving the wrong answer would have serious consequences; it uses the minibuffer, and features a prompt ending with '<b>(yes or no)</b>'. For example, if you invoke <b>C-x k</b> (<b>kill-buffer</b>) on a file-visiting buffer with unsaved changes, Emacs activates the minibuffer with a prompt like this:</p>
<pre class="tab tcy">Buffer foo.el modified; kill anyway? (yes or no)</pre>
<p class="tab">To answer, you must type '<b>yes</b>' or '<b>no</b>' into the minibuffer, followed by <b>&lt;RET&gt;</b>. The minibuffer behaves as described in the previous sections; you can switch to another window with <b>C-x o</b>, use the history commands <b>M-p</b> and <b>M-f</b>, etc. Type <b>C-g</b> to quit the minibuffer and the querying command.</p>
<h2 id="M_002dx">Running commands by name</h2>
<p class="tab">Every Emacs command has a name that you can use to run it. For convenience, many commands also have key bindings. You can run those commands by typing the keys, or run them by name. Most Emacs commands have no key bindings, so the only way to run them is by name. (See <a href="#Key-Bindings">Key Bindings</a>, for how to set up key bindings.)<br><br>By convention, a command name consists of one or more words, separated by hyphens; for example, <b>auto-fill-mode</b> or <b>manual-entry</b>. Command names mostly use complete English words to make them easier to remember.<br><br>To run a command by name, start with <b>M-x</b>, type the command name, then terminate it with <b>&lt;RET&gt;</b>. <b>M-x</b> uses the minibuffer to read the command name. The string '<b>M-x</b>' appears at the beginning of the minibuffer as a prompt to remind you to enter a command name to run. <b>&lt;RET&gt;</b> exits the minibuffer and runs the command. See <a href="#Minibuffer">Minibuffer</a>, for more information on the minibuffer.<br><br>You can use completion to enter the command name. For example, to invoke the command <b>forward-char</b>, you can type</p>
<p class="tab tcy">M-x forward-char &lt;RET&gt;</p>
<p class="tab">or</p>
<p class="tab tcy">M-x forw &lt;TAB&gt; c &lt;RET&gt;</p>
<p class="tab">Note that <b>forward-char</b> is the same command that you invoke with the key <b>C-f</b>. The existence of a key binding does not stop you from running the command by name.<br><br>To cancel the <b>M-x</b> and not run a command, type <b>C-g</b> instead of entering the command name. This takes you back to command level.<br><br>To pass a numeric argument to the command you are invoking with <b>M-x</b>, specify the numeric argument before <b>M-x</b>. The argument value appears in the prompt while the command name is being read, and finally <b>M-x</b> passes the argument to that command.<br><br>When the command you run with <b>M-x</b> has a key binding, Emacs mentions this in the echo area after running the command. For example, if you type <b>M-x forward-word</b>, the message says that you can run the same command by typing <b>M-f</b>. You can turn off these messages by setting the variable <b>suggest-key-bindings</b> to nil.<br><br>In this manual, when we speak of running a command by name, we often omit the <b>&lt;RET&gt;</b> that terminates the name. Thus we might say <b>M-x auto-fill-mode</b> rather than <b>M-x auto-fill-mode &lt;RET&gt;</b>. We mention the <b>&lt;RET&gt;</b> only for emphasis, such as when the command is followed by arguments.<br><br><b>M-x</b> works by running the command <b>execute-extended-command</b>, which is responsible for reading the name of another command and invoking it.</p>
<h2 id="Help">Help</h2>
<p class="tab">Emacs provides a wide variety of help commands, all accessible through the prefix key <b>C-h</b> (or, equivalently, the function key <b>F1</b>). These help commands are described in the following sections. You can also type <b>C-h C-h</b> to view a list of help commands (<b>help-for-help</b>). You can scroll the list with <b>&lt;SPC&gt;</b> and <b>&lt;DEL&gt;</b>, then type the help command you want. To cancel, type <b>C-g</b>.<br><br>Many help commands display their information in a special help buffer. In this buffer, you can type <b>&lt;SPC&gt;</b> and <b>&lt;DEL&gt;</b> to scroll and type <b>&lt;RET&gt;</b> to follow hyperlinks. See <a href="#Help-Mode">Help Mode</a>.<br><br>If you are looking for a certain feature, but don't know what it is called or where to look, we recommend three methods. First, try the <a href="/unix/apropos.htm">apropos</a> command, then try searching the manual index, then look in the <a href="/jargon/f/faq.htm">FAQ</a> and the package keywords.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-h a topics &lt;RET&gt;</b></td>
<td>Search for commands whose names match the argument topics. The argument is a keyword, a list of keywords, or a regular expression (see <a href="#Regexps">Regexps</a>). See <a href="#Apropos">Apropos</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-h i d m emacs &lt;RET&gt; i</b> <i>topic</i> <b>&lt;RET&gt;</b></td>
<td>Search for <i>topic</i> in the indices of the Emacs Info manual, displaying the first match found. Press <b>,</b> to see subsequent matches. You can use a regular expression as <i>topic</i>.</td>
</tr>
<tr class="tcw">
<td><b>C-h i d m emacs &lt;RET&gt; s</b> <i>topic</i> <b>&lt;RET&gt;</b></td>
<td>Similar, but searches the text of the manual rather than the indices.</td>
</tr>
<tr class="tcw">
<td><b>C-h C-f</b></td>
<td>Display the Emacs FAQ, using <a href="/unix/info.htm">Info</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-h p</b></td>
<td>Display the available Emacs packages based on keywords. See <a href="#Package-Keywords">Package Keywords</a>.</td>
</tr>
</table>
<p class="tab"><b>C-h</b> or <b>F1</b> means "help" in other contexts as well. For instance, you can type them after a prefix key to view a list of the keys that follow the prefix key. (A few prefix keys don't support <b>C-h</b> in this way, because they define other meanings for it, but they all support <b>F1</b> for help.)</p>
<ul>
<li><a href="#Help-Summary">Help Summary</a>: Brief list of all Help commands.</li>
<li><a href="#Key-Help">Key Help</a>: Asking what a key does in Emacs.</li>
<li><a href="#Name-Help">Name Help</a>: Asking about a command, variable or function name.</li>
<li><a href="#Apropos">Apropos</a>: Asking what pertains to a given topic.</li>
<li><a href="#Help-Mode">Help Mode</a>: Special features of Help mode and Help buffers.</li>
<li><a href="#Package-Keywords">Package Keywords</a>: Finding Lisp libraries by keywords (topics).</li>
<li><a href="#Language-Help">Language Help</a>: Help relating to international language support.</li>
<li><a href="#Misc-Help">Misc Help</a>: Other help commands.</li>
<li><a href="#Help-Files">Help Files</a>: Commands to display auxiliary help files.</li>
<li><a href="#Help-Echo">Help Echo</a>: Help on active text and tooltips ("balloon help").</li>
</ul>
<h2 id="Help-Summary">Help summary</h2>
<p class="tab">Here is a summary of help commands for accessing the built-in documentation. Most of these are described in more detail in the following sections.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>C-h a</b> <i>topics</i> <b>&lt;RET&gt;</b></td>
<td>Display a list of commands whose names match <i>topics</i> (<b>apropos-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h b</b></td>
<td>Display all active key bindings; minor mode bindings first, then those of the major mode, then global bindings (<b>describe-bindings</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h c</b> <i>key</i></td>
<td>Show the name of the command that the key sequence key is bound to (<b>describe-key-briefly</b>). Here <b>c</b> stands for "character". For more extensive information on <i>key</i>, use <b>C-h k</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-h d</b> <i>topics</i> <b>&lt;RET&gt;</b></td>
<td>Display the commands and variables whose documentation matches <i>topics</i> (<b>apropos-documentation</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h e</b></td>
<td>Display the <b>*Messages*</b> buffer (<b>view-echo-area-messages</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h f</b> <i>function</i> <b>&lt;RET&gt;</b></td>
<td>Display documentation on the Lisp function named <i>function</i> (<b>describe-function</b>). Since commands are Lisp functions, this works for commands too.</td>
</tr>
<tr class="tcw">
<td><b>C-h h</b></td>
<td>Display the HELLO file, which shows examples of various character sets.</td>
</tr>
<tr class="tcw">
<td><b>C-h i</b></td>
<td>Run Info, the GNU documentation browser (<b>info</b>). The Emacs manual is available in Info.</td>
</tr>
<tr class="tcw">
<td><b>C-h k</b> <i>key</i></td>
<td>Display the name and documentation of the command that <i>key</i> runs (<b>describe-key</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h l</b></td>
<td>Display a description of your last 300 keystrokes (<b>view-lossage</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h m</b></td>
<td>Display documentation of the current major mode (<b>describe-mode</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h n</b></td>
<td>Display news of recent Emacs changes (<b>view-emacs-news</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h p</b></td>
<td>Find packages by topic keyword (<b>finder-by-keyword</b>). This lists packages using a package menu buffer. See <a href="#Packages">Packages</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-h P</b> <i>package</i> <b>&lt;RET&gt;</b></td>
<td>Display documentation about the package named <i>package</i> (<b>describe-package</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h r</b></td>
<td>Display the Emacs manual in Info (<b>info-emacs-manual</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h s</b></td>
<td>Display the contents of the current syntax table (<b>describe-syntax</b>). The syntax table says which characters are opening <a href="/jargon/d/delimite.htm">delimiters</a>, which are parts of words, etc.</td>
</tr>
<tr class="tcw">
<td><b>C-h t</b></td>
<td>Enter the Emacs interactive tutorial (<b>help-with-tutorial</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h v</b> <i>var</i> <b>&lt;RET&gt;</b></td>
<td>Display the documentation of the Lisp variable <i>var</i> (<b>describe-variable</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h w</b> <i>command</i> <b>&lt;RET&gt;</b></td>
<td>Show which keys run the command named command (<b>where-is</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C</b> <i>coding</i> <b>&lt;RET&gt;</b></td>
<td>Describe the coding system <i>coding</i> (<b>describe-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C &lt;RET&gt;</b></td>
<td>Describe the coding systems currently in use.</td>
</tr>
<tr class="tcw">
<td><b>C-h F</b> <i>command</i> <b>&lt;RET&gt;</b></td>
<td>Enter Info and go to the node that documents the Emacs command (<b>Info-goto-emacs-command-node</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h I</b> <i>method</i> <b>&lt;RET&gt;</b></td>
<td>Describe the input method <i>method</i> (<b>describe-input-method</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h K</b> <i>key</i></td>
<td>Enter Info and go to the node that documents the key sequence <i>key</i> (<b>Info-goto-emacs-key-command-node</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h L</b> <i>language-env</i> <b>&lt;RET&gt;</b></td>
<td>Display information on the character sets, coding systems, and input methods used in language environment <i>language-env</i> (<b>describe-language-environment</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h S</b> <i>symbol</i> <b>&lt;RET&gt;</b></td>
<td>Display the Info documentation on symbol <i>symbol</i> according to the programming language you are editing (<b>info-lookup-symbol</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h .</b></td>
<td>Display the help message for a special text area, if point is in one (<b>display-local-help</b>). (These include, for example, links in <b>*Help*</b> buffers.)</td>
</tr>
</table>
<h2 id="Key-Help">Documentation for a key</h2>
<p class="tab">The help commands to get information about a key sequence are <b>C-h c</b> (<b>describe-key-briefly</b>) and <b>C-h k</b> (<b>describe-key</b>).<br><br><b>C-h c</b> <i>key</i> displays in the echo area the name of the command that key is bound. For example, <b>C-h c C-f</b> displays '<b>forward-char</b>'.<br><br><b>C-h k</b> <i>key</i> is similar but gives more information: it displays a help buffer containing the command's documentation string, which describes exactly what the command does.<br><br><b>C-h K</b> <i>key</i> displays the section of the Emacs manual that describes the command corresponding to <i>key</i>.<br><br><b>C-h c</b>, <b>C-h k</b> and <b>C-h K</b> work for any sort of key sequences, including function keys, menus, and mouse events. For instance, after <b>C-h k</b> you can select a menu item from the menu bar, to view the documentation string of the command it runs.<br><br><b>C-h w</b> <i>command</i> <b>&lt;RET&gt;</b> lists the keys that are bound to <i>command</i>. It displays the list in the echo area. If it says the command is not on any key, that means you must use <b>M-x</b> to run it. <b>C-h w</b> runs the command <b>where-is</b>.</p>
<h2 id="Name-Help">Help by command or variable name</h2>
<p class="tab"><b>C-h f</b> <i>function</i> <b>&lt;RET&gt;</b> (<b>describe-function</b>) displays the documentation of Lisp function function, in a window. Since commands are Lisp functions, you can use this method to view the documentation of any command whose name you know. For example,</p>
<p class="tab tcy">C-h f auto-fill-mode &lt;RET&gt;</p>
<p class="tab">Displays the documentation of <b>auto-fill-mode</b>. This is the only way to get the documentation of a command that is not bound to any key (one which you would normally run using <b>M-x</b>).<br><br><b>C-h f</b> is also useful for Lisp functions that you use in a Lisp program. For example, if you have only written the expression (<b>make-vector len</b>) and want to check that you are using <b>make-vector</b> properly, type <b>C-h f make-vector &lt;RET&gt;</b>. Because <b>C-h f</b> allows all function names, not only command names, you may find that some of your favorite completion abbreviations that work in <b>M-x</b> don't work in <b>C-h f</b>. An abbreviation that is unique among command names may not be unique among all function names.<br><br>If you type <b>C-h f &lt;RET&gt;</b>, it describes the function called by the innermost Lisp expression in the buffer around point, provided that function name is a valid, defined Lisp function. (That name appears as the default while you enter the argument.) For example, if point is located following the text '<b>(make-vector (car x)</b>', the innermost list containing point is the one that starts with '<b>(make-vector</b>', so <b>C-h f &lt;RET&gt;</b> describes the function <b>make-vector</b>. <b>C-h f</b> is also useful only to verify that you spelled a function name correctly. If the minibuffer prompt for <b>C-h f</b> shows the function name from the buffer as the default, it means that name is defined as a Lisp function. Type <b>C-g</b> to cancel the <b>C-h f</b> command if you don't really want to view the documentation.<br><br><b>C-h v</b> (<b>describe-variable</b>) is like <b>C-h f</b> but describes Lisp variables instead of Lisp functions. Its default is the Lisp symbol around or before point, if that is the name of a defined Lisp variable. See <a href="#Variables">Variables</a>.<br><br>Help buffers that describe Emacs variables and functions normally have hyperlinks to the corresponding source code, if you have the source files installed (see <a href="#Hyperlinking">Hyperlinking</a>).<br><br>To find a command's documentation in a manual, use <b>C-h F</b> (<b>Info-goto-emacs-command-node</b>). This knows about various manuals, not only the Emacs manual, and finds the right one.</p>
<h2 id="Apropos">Apropos</h2>
<p class="tab">Apropos commands answer questions like, "What are the commands for working with files?" More precisely, you specify an apropos pattern, which means either a word, a list of words, or a regular expression.<br><br>Each of the following apropos commands reads an apropos pattern in the minibuffer, searches for items that match the pattern, and displays the results in a different window.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>C-h a</b></td>
<td>Search for commands (<b>apropos-command</b>). With a prefix argument, search for noninteractive functions too.</td>
</tr>
<tr class="tcw">
<td><b>M-x apropos</b></td>
<td>Search for functions and variables. Both interactive functions (commands) and noninteractive functions can be found by this.</td>
</tr>
<tr class="tcw">
<td><b>M-x</b> <i>apropos-variable</i></td>
<td>Search for user-customizable variables. With a prefix argument, search for non-customizable variables too.</td>
</tr>
<tr class="tcw">
<td><b>M-x</b> <i>apropos-value</i></td>
<td>Search for variables whose values match the specified pattern. With a prefix argument, search also for functions with definitions matching the pattern, and Lisp symbols with properties matching the pattern.</td>
</tr>
<tr class="tcw">
<td><b>C-h d</b></td>
<td>Search for functions and variables whose documentation strings match the specified pattern (<b>apropos-documentation</b>).</td>
</tr>
</table>
<p class="tab">The simplest kind of apropos pattern is one word. Anything containing that word matches the pattern. Thus, to find commands that work on files, type <b>C-h a file &lt;RET&gt;</b>. This displays a list of all command names that contain '<b>file</b>', including <b>copy-file</b>, <b>find-file</b>, etc. Each command name comes with a brief description and a list of keys you can currently use. In our example, it would say that you can invoke <b>find-file</b> by typing <b>C-x C-f</b>.<br><br>For more information about a function definition, variable or symbol property listed in the apropos buffer, you can click it with Mouse-1 or Mouse-2, or move there and type <b>&lt;RET&gt;</b>.<br><br>When you specify more than one word in the apropos pattern, a name must contain at least two of the words to match. Thus, if you are looking for commands to kill a chunk of text before point, you could try <b>C-h a kill back backward behind before &lt;RET&gt;</b>. The real command name <b>kill-backward</b> matches that; if there were a command <b>kill-text-before</b>, it would also match, as it contains two of the specified words.<br><br>For even greater flexibility, you can specify a regular expression (see <a href="#Regexps">Regexps</a>). An apropos pattern is interpreted as a regular expression if it contains any of the regular expression special characters, '<b>^$*+?.\[</b>'.<br><br>Following the conventions for naming Emacs commands, here are some words that are useful in apropos patterns. Using them in <b>C-h a</b>, you can also get a feel for the naming conventions.<br><br><b>char</b>, <b>line</b>, <b>word</b>, <b>sentence</b>, <b>paragraph</b>, <b>region</b>, <b>page</b>, <b>sexp</b>, <b>list</b>, <b>defun</b>, <b>rect</b>, <b>buffer</b>, <b>frame</b>, <b>window</b>, <b>face</b>, <b>file</b>, <b>dir</b>, <b>register</b>, <b>mode</b>, <b>beginning</b>, <b>end</b>, <b>forward</b>, <b>backward</b>, <b>next</b>, <b>previous</b>, <b>up</b>, <b>down</b>, <b>search</b>, <b>goto</b>, <b>kill</b>, <b>delete</b>, <b>mark</b>, <b>insert</b>, <b>yank</b>, <b>fill</b>, <b>indent</b>, <b>case</b>, <b>change</b>, <b>set</b>, <b>what</b>, <b>list</b>, <b>find</b>, <b>view</b>, <b>describe</b>, <b>default</b>.<br><br>If the variable <b>apropos-do-all</b> is non-nil, the apropos commands always behave as if they had been given a prefix argument.<br><br>By default, all apropos commands except <b>apropos-documentation</b> list their results in alphabetical order. If the variable <b>apropos-sort-by-scores</b> is non-nil, these commands instead try to guess the relevance of each result, and display the most relevant ones first. The <b>apropos-documentation</b> command lists its results in order of relevance by default; to list them in alphabetical order, change the variable <b>apropos-documentation-sort-by-scores</b> to nil.</p>
<h2 id="Help-Mode">Help mode commands</h2>
<p class="tab">Help buffers provide the same commands as View mode (see <a href="#View-Mode">View Mode</a>); for instance, <b>&lt;SPC&gt;</b> scrolls forward, and <b>&lt;DEL&gt;</b> scrolls backward. A few special commands are also provided:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>&lt;RET&gt;</b></td>
<td>Follow a cross reference at point (<b>help-follow</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>Move point forward to the next hyperlink (<b>forward-button</b>).</td>
</tr>
<tr class="tcw">
<td><b>S-&lt;TAB&gt;</b></td>
<td>Move point back to the previous hyperlink (<b>backward-button</b>).</td>
</tr>
<tr class="tcw">
<td><b>Mouse-1</b>, <b>Mouse-2</b></td>
<td>Follow a hyperlink that you click.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-c</b></td>
<td>Show all documentation about the <b>symbol</b> at point (<b>help-follow-symbol</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-b</b></td>
<td>Go back to the previous help topic (<b>help-go-back</b>).</td>
</tr>
</table>
<p class="tab">When a function name, variable name, or face name (see <a href="#Faces">Faces</a>) appears in the documentation in the help buffer, it is normally an underlined hyperlink. To view the associated documentation, move point there and type <b>&lt;RET&gt;</b> (<b>help-follow</b>), or click the hyperlink with <b>Mouse-1</b> or <b>Mouse-2</b>. Doing so replaces the contents of the help buffer; to retrace your steps, type <b>C-c C-b</b> (<b>help-go-back</b>).<br><br>A help buffer can also contain hyperlinks to Info manuals, source code definitions, and <a href="/jargon/u/url.htm">URLs</a> (web pages). The first two are opened in Emacs, and the third using a web browser via the <b>browse-url</b> command (see <a href="#Browse_002dURL">Browse-URL</a>).<br><br>In a help buffer, <b>&lt;TAB&gt;</b> (<b>forward-button</b>) moves point forward to the next hyperlink, while <b>S-&lt;TAB&gt;</b> (<b>backward-button</b>) point back to the previous hyperlink. These commands act cyclically; for instance, typing <b>&lt;TAB&gt;</b> at the last hyperlink moves back to the first hyperlink.<br><br>To view all documentation about any symbol in the text, move point to there and type <b>C-c C-c</b> (<b>help-follow-symbol</b>). This shows all available documentation about the symbol: as a variable, function and/or face.</p>
<h2 id="Package-Keywords">Keyword search for packages</h2>
<p class="tab">Most optional features in Emacs are grouped into packages. Emacs contains several hundred built-in packages, and more can be installed over the network (see <a href="#Packages">Packages</a>).<br><br>To make it easier to find packages related to a topic, most packages are associated with one or more keywords based on what they do. Type <b>C-h p</b> (<b>finder-by-keyword</b>) to bring up a list of package keywords, together with a description of what the keywords mean. To view a list of packages for a given keyword, type <b>&lt;RET&gt;</b> on that line; this displays the list of packages in a Package Menu buffer (see <a href="#Package-Menu">Package Menu</a>).<br><br><b>C-h P</b> (<b>describe-package</b>) prompts for the name of a package, and displays a help buffer describing the attributes of the package and the features that it implements.</p>
<h2 id="Language-Help">Help for international language support</h2>
<p class="tab">For information on a specific language environment (see <a href="#Language-Environments">Language Environments</a>), type <b>C-h L</b> (<b>describe-language-environment</b>). This displays a help buffer describing the languages supported by the language environment, and listing the associated character sets, coding systems, and input methods, and some sample text for that language environment.<br><br>The command <b>C-h h</b> (<b>view-hello-file</b>) displays the file <b>etc/HELLO</b>, which demonstrates various character sets by showing how to say "hello" in many languages.<br><br>The command <b>C-h I</b> (<b>describe-input-method</b>) describes an input method&mdash;either a specified input method, or by default the input method currently in use. See <a href="#Input-Methods">Input Methods</a>.<br><br>The command <b>C-h C</b> (<b>describe-coding-system</b>) describes coding systems: either a specified coding system, or the ones currently in use. See <a href="#Coding-Systems">Coding Systems</a>.</p>
<h2 id="Misc-Help">Other help commands</h2>
<p class="tab"><b>C-h i</b> (<b>info</b>) runs the Info program, which browses structured documentation files. The entire Emacs manual is available within Info, along with other manuals for the GNU system. Type <b>h</b> after entering Info to run a tutorial on using Info.<br><br>With a numeric argument <i>n</i>, <b>C-h i</b> selects the Info buffer '<b>*info*</b>&lt;<i>n</i>&gt;'. This is useful if you want to browse multiple Info manuals simultaneously. If you specify only <b>C-u</b> as the prefix argument, <b>C-h i</b> prompts for the name of a documentation file, so you can browse a file which doesn't have an entry in the top-level Info menu.<br><br>The help commands <b>C-h F</b> <i>function</i> <b>&lt;RET&gt;</b> and <b>C-h K</b> <i>key</i>, described above, enter Info and go straight to the documentation of <i>function</i> or <i>key</i>.<br><br>When editing a program, if you have an Info version of the manual for the programming language, you can use <b>C-h S</b> (<b>info-lookup-symbol</b>) to find an entry for a symbol (keyword, function or variable) in the proper manual. The details of how this command works depend on the major mode.<br><br>If something surprising happens, and you are not sure what you typed, use <b>C-h l</b> (<b>view-lossage</b>). <b>C-h l</b> displays your last 300 input keystrokes. If you see commands that you don't know, you can use <b>C-h c</b> to find out what they do.<br><br>To review recent echo area messages, use <b>C-h e</b> (<b>view-echo-area-messages</b>). This displays the buffer <b>*Messages*</b>, where those messages are kept.<br><br>Each Emacs major mode often redefines a few keys and makes other changes in how editing works. <b>C-h m</b> (<b>describe-mode</b>) displays documentation on the current major mode, which normally describes the commands and features that are changed in this mode.<br><br><b>C-h b</b> (<b>describe-bindings</b>) and <b>C-h s</b> (<b>describe-syntax</b>) show other information about the current environment within Emacs. <b>C-h b</b> displays a list of all the key bindings now in effect: first the local bindings of the current minor modes, then the local bindings defined by the current major mode, and finally the global bindings (see <a href="#Key-Bindings">Key Bindings</a>). <b>C-h s</b> displays the contents of the syntax table, with explanations of each character's syntax.<br><br>You can get a list of subcommands for a particular prefix key by typing <b>C-h</b> (<b>describe-prefix-bindings</b>) after the prefix key. (There are a few prefix keys where this does not work&mdash;those that provide their bindings for <b>C-h</b>. One of these is <b>&lt;ESC&gt;</b>, because <b>&lt;ESC&gt;</b> <b>C-h</b> is actually <b>C-M-h</b>, which marks a defun.)</p>
<h2 id="Help-Files">Help files</h2>
<p class="tab">Apart from the built-in documentation and manuals, Emacs contains other files describing topics like copying conditions, release notes, instructions for debugging and reporting bugs, and so forth. You can use the following commands to view these files. Apart from <b>C-h g</b>, they all have the form <b>C-h C-</b><i>char</i>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>C-h C-c</b></td>
<td>Display the rules under which you can copy and redistribute Emacs (<b>describe-copying</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-d</b></td>
<td>Display help for debugging Emacs (<b>view-emacs-debugging</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-e</b></td>
<td>Display information about where to get external packages (<b>view-external-packages</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-f</b></td>
<td>Display the Emacs frequently-answered-questions list (<b>view-emacs-FAQ</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h g</b></td>
<td>Display information about the GNU Project (<b>describe-gnu-project</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-m</b></td>
<td>Display information about ordering printed copies of Emacs manuals (<b>view-order-manuals</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-n</b></td>
<td>Display the "news" file, which lists the new features in this version of Emacs (<b>view-emacs-news</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-o</b></td>
<td>Display how to order or download the latest version of Emacs and other GNU software (<b>describe-distribution</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-p</b></td>
<td>Display the list of known Emacs problems, sometimes with suggested workarounds (<b>view-emacs-problems</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-t</b></td>
<td>Display the Emacs to-do list (<b>view-emacs-todo</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C-w</b></td>
<td>Display the full details on the complete absence of warranty for GNU Emacs (<b>describe-no-warranty</b>).</td>
</tr>
</table>
<h2 id="Help-Echo">Help on active text and tooltips</h2>
<p class="tab">In Emacs, stretches of "active text" (text that does something special in response to mouse clicks or <b>&lt;RET&gt;</b>) often have associated help text. This includes hyperlinks in Emacs buffers, and parts of the mode line. On graphical displays, and some text terminals which support mouse tracking, moving the mouse over the active text displays the help text as a tooltip. See <a href="#Tooltips">Tooltips</a>.<br><br>On terminals that don't support mouse-tracking, you can display the help text for active buffer text at point by typing <b>C-h</b> . (<b>display-local-help</b>). This shows the help text in the echo area. To display help text automatically whenever it is available at point, set the variable <b>help-at-pt-display-when-idle</b> to <b>t</b>.</p>
<h2 id="Mark">The mark and the region</h2>
<p class="tab">Many Emacs commands operate on an arbitrary contiguous part of the current buffer. To specify the text for such a command to operate on, you set the mark at one end of it, and move point to the other end. The text between point and the mark is called the region. The region always extends between point and the mark, no matter which one comes earlier in the text; each time you move point, the region changes.<br><br>Setting the mark at a position in the text also activates it. When the mark is active, we say also that the region is active; Emacs indicates its extent by highlighting the text within it, using the region face (see <a href="#Face-Customization">Face Customization</a>).<br><br>After certain non-motion commands, including any command that changes the text in the buffer, Emacs automatically deactivates the mark; this turns off the highlighting. You can also explicitly deactivate the mark at any time, by typing <b>C-g</b> (see <a href="#Quitting">Quitting</a>).<br><br>The above default behavior is known as Transient Mark mode. Disabling Transient Mark mode switches Emacs to an alternative behavior, where the region is usually not highlighted. See <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>.<br><br>Setting the mark in one buffer has no effect on the marks in other buffers. When you return to a buffer with an active mark, the mark is at the same place as before. When multiple windows show the same buffer, they can have different values of point, and thus different regions, but they all share one common mark position. See <a href="#Windows">Windows</a>. Ordinarily, only the selected window highlights its region; however, if the variable <b>highlight-nonselected-windows</b> is non-nil, each window highlights its own region.</p>
<ul>
<li><a href="#Setting-Mark">Setting Mark</a>: Commands to set the mark.</li>
<li><a href="#Marking-Objects">Marking Objects</a>: Commands to put region around textual units.</li>
<li><a href="#Using-Region">Using Region</a>: Summary of ways to operate on contents of the region.</li>
<li><a href="#Mark-Ring">Mark Ring</a>: Previous mark positions saved so you can go back there.</li>
<li><a href="#Global-Mark-Ring">Global Mark Ring</a>: Previous mark positions in various buffers.</li>
<li><a href="#Shift-Selection">Shift Selection</a>: Using shifted cursor motion keys.</li>
<li><a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>: Leaving regions unhighlighted by default.</li>
</ul>
<h2 id="Setting-Mark">Setting up the mark</h2>
<p class="tab">Here are some commands for setting the mark:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-&lt;SPC&gt;</b></td>
<td>Set the mark at point, and activate it (<b>set-mark-command</b>).</td>
</tr>
<tr class="tcw">
<td><b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="40036d00">[email&#160;protected]</a></b></td>
<td>The same.</td>
</tr>
<tr class="tcw">
<td><b>C-x C-x</b></td>
<td>Set the mark at point, and activate it; then move point where the mark used to be (<b>exchange-point-and-mark</b>).</td>
</tr>
<tr class="tcw">
<td><b>Drag-Mouse-1</b></td>
<td>Set point and the mark around the text you drag across.</td>
</tr>
<tr class="tcw">
<td><b>Mouse-3</b></td>
<td>Set the mark at point, then move point to where you click (<b>mouse-save-then-kill</b>).</td>
</tr>
<tr class="tcw">
<td><b>'Shifted cursor motion keys'</b></td>
<td>Set the mark at point if the mark is inactive, then move point. See <a href="#Shift-Selection">Shift Selection</a>.</td>
</tr>
</table>
<p class="tab">The most common way to set the mark is with <b>C-&lt;SPC&gt;</b> (<b>set-mark-command</b>). This sets the mark where point is, and activates it. You can then move point away, leaving the mark behind.<br><br>For example, suppose you want to convert part of the buffer to uppercase. To accomplish this, go to one end of the desired text, type <b>C-&lt;SPC&gt;</b>, and move point until the desired portion of text is highlighted. Now type <b>C-x C-u</b> (<b>upcase-region</b>). This converts the text in the region to uppercase, and then deactivates the mark.<br><br>Whenever the mark is active, you can deactivate it by typing <b>C-g</b> (see <a href="#Quitting">Quitting</a>). Most commands that operate on the region also automatically deactivate the mark, like <b>C-x C-u</b> in the above example.<br><br>Instead of setting the mark to operate on a region, you can also use it to "remember" a position in the buffer (by typing <b>C-&lt;SPC&gt; C-&lt;SPC&gt;</b>), and later jump back there (by typing <b>C-u C-&lt;SPC&gt;</b>). See <a href="#Mark-Ring">Mark Ring</a>, for details.<br><br>The command <b>C-x C-x</b> (<b>exchange-point-and-mark</b>) exchanges the positions of point and the mark. <b>C-x C-x</b> is useful when you are satisfied with the position of point but want to move the other end of the region (where the mark is). Using <b>C-x C-x</b> a second time, if necessary, puts the mark at the new position with point back at its original position. Normally, if the mark is inactive, this command first reactivates the mark wherever it was last set, to ensure that the region is left highlighted. However, if you call it with a prefix argument, it leaves the mark inactive and the region unhighlighted; you can use this to jump to the mark in a manner similar to <b>C-u C-&lt;SPC&gt;</b>. You can also set the mark with the mouse. If you press the left mouse button (<b>down-mouse-1</b>) and drag the mouse across a range of text, this sets the mark where you first pressed the mouse button and puts point where you release it. Alternatively, clicking the right mouse button (<b>mouse-3</b>) sets the mark at point and then moves point to where you clicked. See <a href="#Mouse-Commands">Mouse Commands</a>, for a more detailed description of these mouse commands.<br><br>Finally, you can set the mark by holding down the Shift key while typing certain cursor motion commands (such as <b>S-right</b>, <b>S-C-f</b>, <b>S-C-n</b>, etc.). This is called shift-selection. It sets the mark at point before moving point, but only if there is no active mark set via shift-selection. The mark set by mouse commands and by shift-selection behaves slightly differently from the usual mark: any subsequent unshifted cursor motion command deactivates it automatically. For details, See <a href="#Shift-Selection">Shift Selection</a>.<br><br>Many commands that insert text, such as <b>C-y</b> (<b>yank</b>), set the mark at the other end of the inserted text, without activating it. This lets you easily return to that position (see <a href="#Mark-Ring">Mark Ring</a>). You can tell that a command does this when it shows 'Mark set' in the echo area.<br><br>Under X, every time the active region changes, Emacs saves the text in the region to the primary selection. This lets you insert that text into other X applications with mouse-2 clicks. See <a href="#Primary-Selection">Primary Selection</a>.</p>
<h2 id="Marking-Objects">Commands to mark textual objects</h2>
<p class="tab">Here are commands for placing point and the mark around a textual object such as a word, list, paragraph or page:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="531e7e13">[email&#160;protected]</a></b></td>
<td>Set mark after end of next word (<b>mark-word</b>). This does not move point.</td>
</tr>
<tr class="tcw">
<td><b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a8eb85e585e8">[email&#160;protected]</a></b></td>
<td>Set mark after end of following balanced expression (<b>mark-sexp</b>). This does not move point.</td>
</tr>
<tr class="tcw">
<td><b>M-h</b></td>
<td>Move point to the beginning of the current paragraph, and set mark at the end (<b>mark-paragraph</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-h</b></td>
<td>Move point to the beginning of the current defun, and set mark at the end (<b>mark-defun</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-p</b></td>
<td>Move point to the beginning of the current page, and set mark at the end (<b>mark-page</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x h</b></td>
<td>Move point to the beginning of the buffer, and set mark at the end (<b>mark-whole-buffer</b>).</td>
</tr>
</table>
<p class="tab"><b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="86cbabc6">[email&#160;protected]</a></b> (<b>mark-word</b>) sets the mark at the end of the next word (see <a href="#Words">Words</a>, for information about words). Repeated invocations of this command extend the region by advancing the mark one word at a time. As an exception, if the mark is active and located before point, <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cd80e08d">[email&#160;protected]</a></b> moves the mark backwards from its current position one word at a time.<br><br>This command also accepts a numeric argument <i>n</i>, which tells it to advance the mark by <i>n</i> words. A negative argument moves the mark back by <i>n</i> words.<br><br>Similarly, <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="31721c7c1c71">[email&#160;protected]</a></b> (<b>mark-sexp</b>) puts the mark at the end of the next balanced expression (see <a href="#Expressions">Expressions</a>). Repeated invocations extend the region to subsequent expressions, while positive or negative numeric arguments move the mark forward or backward by the specified number of expressions.<br><br>The other commands in the above list set both point and mark, so as to delimit an object in the buffer. <b>M-h</b> (<b>mark-paragraph</b>) marks paragraphs (see <a href="#Paragraphs">Paragraphs</a>), <b>C-M-h</b> (<b>mark-defun</b>) marks top-level definitions (see <a href="#Moving-by-Defuns">Moving by Defuns</a>), and <b>C-x C-p</b> (<b>mark-page</b>) marks pages (see <a href="#Pages">Pages</a>). Repeated invocations again play the same role, extending the region to consecutive objects; similarly, numeric arguments specify how many objects to move the mark by.<br><br><b>C-x h</b> (<b>mark-whole-buffer</b>) sets up the entire buffer as the region, by putting point at the beginning and the mark at the end.</p>
<h2 id="Using-Region">Operating on the region</h2>
<p class="tab">Once you have a region, here are some of the ways you can operate on it:</p>
<ul>
<li>Kill it with <b>C-w</b> (see <a href="#Killing">Killing</a>).</li>
<li>Copy it to the kill ring with <b>M-w</b> (see <a href="#Yanking">Yanking</a>).</li>
<li>Convert case with <b>C-x C-l</b> or <b>C-x C-u</b> (see <a href="#Case">Case</a>).</li>
<li>Undo changes within it using <b>C-u C-/</b> (see <a href="#Undo">Undo</a>).</li>
<li>Replace text within it using <b>M-%</b> (see <a href="#Query-Replace">Query Replace</a>).</li>
<li>Indent it with <b>C-x &lt;TAB&gt;</b> or <b>C-M-\</b> (see <a href="#Indentation">Indentation</a>).</li>
<li>Fill it as text with <b>M-x fill-region</b> (see <a href="#Filling">Filling</a>).</li>
<li>Check the spelling of words within it with <b>M-$</b> (see <a href="#Spelling">Spelling</a>).</li>
<li>Evaluate it as Lisp code with <b>M-x eval-region</b> (see <a href="#Lisp-Eval">Lisp Eval</a>).</li>
<li>Save it in a register with <b>C-x r s</b> (see <a href="#Registers">Registers</a>).</li>
<li>Save it in a buffer or a file (see <a href="#Accumulating-Text">Accumulating Text</a>).</li>
</ul>
<p class="tab">Some commands have a default behavior when the mark is inactive, but operate on the region if the mark is active. For example, <b>M-$</b> (<b>ispell-word</b>) normally checks the spelling of the word at point, but it checks the text in the region if the mark is active (see <a href="#Spelling">Spelling</a>). Normally, such commands use their default behavior if the region is empty (i.e., if mark and point are at the same position). If you want them to operate on the empty region, change the variable <b>use-empty-active-region</b> to <b>t</b>.<br><br>As described in <a href="#Erasing">Erasing</a>, the <b>&lt;DEL&gt;</b> (<b>backward-delete-char</b>) and <b>delete</b> (<b>delete-forward-char</b>) commands also act this way. If the mark is active, they delete the text in the region. (As an exception, if you supply a numeric argument <i>n</i>, where <i>n</i> is not one, these commands delete <i>n</i> characters regardless of whether the mark is active). If you change the variable <b>delete-active-region</b> to nil, then these commands don't act differently when the mark is active. If you change the value to <b>kill</b>, these commands kill the region instead of deleting it (see <a href="#Killing">Killing</a>).<br><br>Other commands always operate on the region, and have no default behavior. Such commands usually have the word <b>region</b> in their names, like <b>C-w</b> (<b>kill-region</b>) and <b>C-x C-u</b> (<b>upcase-region</b>). If the mark is inactive, they operate on the "inactive region"&mdash;that is, on the text between point and the position at which the mark was last set (see <a href="#Mark-Ring">Mark Ring</a>). To disable this behavior, change the variable <b>mark-even-if-inactive</b> to nil. Then these commands will instead signal an error if the mark is inactive.<br><br>By default, text insertion occurs normally even if the mark is active; for example, typing <b>a</b> inserts the character '<b>a</b>', then deactivates the mark. If you enable Delete Selection mode, a minor mode, then inserting text while the mark is active causes the text in the region to be deleted first. To toggle Delete Selection mode on or off, type <b>M-x delete-selection-mode</b>.</p>
<h2 id="Mark-Ring">The mark ring</h2>
<p class="tab">Each buffer remembers previous locations of the mark, in the mark ring. Commands that set the mark also push the old mark to this ring. One of the uses of the mark ring is to remember spots where you may want to go back.</p>
<p class="tab tcy">C-&lt;SPC&gt; C-&lt;SPC&gt;</p>
<p class="tab">Set the mark, pushing it onto the mark ring, without activating it.</p>
<p class="tab tcy">C-u C-&lt;SPC&gt;</p>
<p class="tab">Move point to where the mark was, and restore the mark from the ring of former marks.<br><br>The command <b>C-&lt;SPC&gt; C-&lt;SPC&gt;</b> is handy when you want to use the mark to remember a position where you may want to return. It pushes the current point onto the mark ring, without activating the mark (which would cause Emacs to highlight the region). This is actually two consecutive invocations of <b>C-&lt;SPC&gt;</b> (<b>set-mark-command</b>); the first <b>C-&lt;SPC&gt;</b> sets the mark, and the second <b>C-&lt;SPC&gt;</b> deactivates it. (When Transient Mark mode is off, <b>C-&lt;SPC&gt; C-&lt;SPC&gt;</b> instead activates Transient Mark mode temporarily; see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>.)<br><br>To return to a marked position, use <b>set-mark-command</b> with a prefix argument: <b>C-u C-&lt;SPC&gt;</b>. This moves point to where the mark was, and deactivates the mark if it was active. Each subsequent <b>C-u C-&lt;SPC&gt;</b> jumps to a prior position stored in the mark ring. The positions you move through in this way are not lost; they go to the end of the ring.<br><br>If you set <b>set-mark-command-repeat-pop</b> to non-nil, then immediately after you type <b>C-u C-&lt;SPC&gt;</b>, you can type <b>C-&lt;SPC&gt;</b> instead of <b>C-u C-&lt;SPC&gt;</b> to cycle through the mark ring. By default, <b>set-mark-command-repeat-pop</b> is nil.<br><br>Each buffer has its own mark ring. All editing commands use the current buffer's mark ring. In particular, <b>C-u C-&lt;SPC&gt;</b> always stays in the same buffer.<br><br>The variable <b>mark-ring-max</b> specifies the maximum number of entries to keep in the mark ring. This defaults to 16 entries. If that many entries exist and another one is pushed, the earliest one in the list is discarded. Repeating <b>C-u C-&lt;SPC&gt;</b> cycles through the positions currently in the ring.<br><br>If you want to move back to the same place over and over, the mark ring may not be convenient enough. If so, you can record the position in a register for later retrieval (see <a href="#Position-Registers">Saving Positions in Registers</a>).</p>
<h2 id="Global-Mark-Ring">The global mark ring</h2>
<p class="tab">In addition to the ordinary mark ring that belongs to each buffer, Emacs has a single global mark ring. Each time you set a mark, this is recorded in the global mark ring in addition to the current buffer's own mark ring, if you have switched buffers since the previous mark setting. Hence, the global mark ring records a sequence of buffers that you are in, and, for each buffer, a place where you set the mark. The length of the global mark ring is controlled by <b>global-mark-ring-max</b>, and is 16 by default.<br><br>The command <b>C-x C-&lt;SPC&gt;</b> (<b>pop-global-mark</b>) jumps to the buffer and position of the latest entry in the global ring. It also rotates the ring, so that successive uses of <b>C-x C-&lt;SPC&gt;</b> take you to earlier buffers and mark positions.</p>
<h2 id="Shift-Selection">Shift selection</h2>
<p class="tab">If you hold down the Shift key while typing a cursor motion command, this sets the mark before moving point, so that the region extends from the original position of point to its new position. This feature is referred to as <b>shift-selection</b>. It is similar to the way text is selected in other editors.<br><br>The mark set via shift-selection behaves a little differently from what we have described above. Firstly, in addition to the usual ways of deactivating the mark (such as changing the buffer text or typing <b>C-g</b>), the mark is deactivated by any unshifted cursor motion command. Secondly, any subsequent shifted cursor motion command avoids setting the mark anew. Therefore, a series of shifted cursor motion commands will continuously adonly the region.<br><br>Shift-selection only works if the shifted cursor motion key is not already bound to a separate command (see <a href="#Customization">Customization</a>). For example, if you bind <b>S-C-f</b> to another command, typing <b>S-C-f</b> runs that command instead of performing a shift-selected version of <b>C-f</b> (<b>forward-char</b>).<br><br>A mark set via mouse commands behaves the same as a mark set via shift-selection (see <a href="#Setting-Mark">Setting Mark</a>). For example, if you specify a region by dragging the mouse, you can continue to extend the region using shifted cursor motion commands. In either case, any unshifted cursor motion command deactivates the mark.<br><br>To turn off shift-selection, set <b>shift-select-mode</b> to nil. Doing so does not disable setting the mark via mouse commands.</p>
<h2 id="Disabled-Transient-Mark">Disabling transient mark mode</h2>
<p class="tab">The default behavior of the mark and region, where setting the mark activates it and highlights the region, is called Transient Mark mode. This is a minor mode that is enabled by default. It can be toggled with <b>M-x transient-mark-mode</b>, or with the 'Active Region Highlighting' menu item in the 'Options' menu. Turning it off switches Emacs to an alternative mode of operation:</p>
<ul>
<li>Setting the mark, with commands like <b>C-&lt;SPC&gt;</b> or <b>C-x C-x</b>, does not highlight the region. Therefore, you can't tell by looking where the mark is located; you have to remember.</li>
<li>The usual solution to this problem is to set the mark and then use it soon, before you forget where it is. You can also check where the mark uses <b>C-x C-x</b>, which exchanges the positions of the point and the mark (see <a href="#Setting-Mark">Setting Mark</a>).</li>
<li>Some commands, which ordinarily act on the region when the mark is active, no longer do so. For example, normally <b>M-%</b> (<b>query-replace</b>) performs replacements in the region, if the mark is active. When Transient Mark mode is off, it always operates from point to the end of the buffer. Commands that act this way are identified in their documentation.</li>
</ul>
<p class="tab">While Transient Mark mode is off, you can activate it temporarily using <b>C-&lt;SPC&gt; C-&lt;SPC&gt;</b> or <b>C-u C-x C-x</b>.</p>
<p class="tab tcy">C-&lt;SPC&gt; C-&lt;SPC&gt;</p>
<p class="tab">Set the mark at point (like plain <b>C-&lt;SPC&gt;</b>) and enable Transient Mark mode only once, until the mark is deactivated. (This is not a separate command; you are using the <b>C-&lt;SPC&gt;</b> command twice.)</p>
<p class="tab tcy">C-u C-x C-x</p>
<p class="tab">Exchange point and mark, activate the mark and enable Transient Mark mode temporarily, until the mark is next deactivated. (This is the <b>C-x C-x</b> command, <b>exchange-point-and-mark</b>, with a prefix argument.)<br><br>These commands set or activate the mark, and enable Transient Mark mode only until the mark is deactivated. One reason you may want to use them is that some commands operate on the entire buffer instead of the region when Transient Mark mode is off. Enabling Transient Mark mode momentarily gives you a way to use these commands on the region.<br><br>When you specify a region with the mouse (see <a href="#Setting-Mark">Setting Mark</a>), or with shift-selection (see <a href="#Shift-Selection">Shift Selection</a>), this likewise activates Transient Mark mode temporarily and highlights the region.</p>
<h2 id="Killing">Killing and moving text</h2>
<p class="tab">In Emacs, killing means erasing text and copying it into the kill ring. Yanking means bringing text from the kill ring back into the buffer. (Some applications use the terms "cutting" and "pasting" for similar operations.) The kill ring is so-named because it can be visualized as a set of blocks of text arranged in a ring, which you can access in cyclic order. See <a href="#Kill-Ring">Kill Ring</a>.<br><br>Killing and yanking are the most common way to move or copy text within Emacs. It is very versatile, because there are commands for killing many different types of syntactic units.</p>
<ul>
<li><a href="#Deletion-and-Killing">Deletion and Killing</a>: Commands that remove text.</li>
<li><a href="#Yanking">Yanking</a>: Commands that insert text.</li>
<li><a href="#Cut-and-Paste">Cut and Paste</a>: Clipboard and selections on graphical displays.</li>
<li><a href="#Accumulating-Text">Accumulating Text</a>: Other methods to add text to the buffer.</li>
<li><a href="#Rectangles">Rectangles</a>: Operating on text in rectangular areas.</li>
<li><a href="#CUA-Bindings">CUA Bindings</a>: Using <b>C-x</b>/<b>C-c</b>/<b>C-v</b> to kill and yank.</li>
</ul>
<h2 id="Deletion-and-Killing">Deletion and killing</h2>
<p class="tab">Most commands which erase text from the buffer save it in the kill ring. These are known as kill commands, and their names normally contain the word '<b>kill</b>' (e.g., <b>kill-line</b>). The kill ring stores several recent kills, not only the last one, so killing is a very safe operation: you don't have to worry much about losing text that you previously killed. The kill ring is shared by all buffers, so text that is killed in one buffer can be yanked into another buffer.<br><br>When you use <b>C-/</b> (<b>undo</b>) to undo a kill command (see <a href="#Undo">Undo</a>), that brings the killed text back into the buffer, but does not remove it from the kill ring.<br><br>On graphical displays, killing text also copies it to the system clipboard. See <a href="#Cut-and-Paste">Cut and Paste</a>.<br><br>Commands that erase text but do not save it in the kill ring are known as delete commands; their names usually contain the word '<b>delete</b>'. These include <b>C-d</b> (<b>delete-char</b>) and <b>&lt;DEL&gt;</b> (<b>delete-backward-char</b>), which delete only one character at a time, and those commands that delete only spaces or newlines. Commands that erase significant amounts of nontrivial data generally do a kill operation instead.<br><br>You can also use the mouse to kill and yank. See <a href="#Cut-and-Paste">Cut and Paste</a>.</p>
<ul>
<li><a href="#Deletion">Deletion</a>: Commands for deleting small amounts of text and blank areas.</li>
<li><a href="#Killing-by-Lines">Killing by Lines</a>: How to kill entire lines of text at one time.</li>
<li><a href="#Other-Kill-Commands">Other Kill Commands</a>: Commands to kill large regions of text and syntactic units such as words and sentences.</li>
<li><a href="#Kill-Options">Options</a>: Options that affect killing.</li>
</ul>
<h2 id="Deletion">Deletion</h2>
<p class="tab">Deletion means erasing text and not saving it in the kill ring. For the most part, the Emacs commands that delete text are those that erase only one character or only whitespace.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>&lt;DEL&gt;</b>, <b>Backspace</b></td>
<td>Delete the previous character, or the text in the region if it's active (<b>delete-backward-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>Delete</b></td>
<td>Delete the next character, or the text in the region if it's active (<b>delete-forward-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-d</b></td>
<td>Delete the next character (<b>delete-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-\</b></td>
<td>Delete spaces and tabs around point (<b>delete-horizontal-space</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;SPC&gt;</b></td>
<td>Delete spaces and tabs around point, leaving one space (<b>only-one-space</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-o</b></td>
<td>Delete blank lines around the current line (<b>delete-blank-lines</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-^</b></td>
<td>Join two lines by deleting the intervening newline, along with any indentation following it (<b>delete-indentation</b>).</td>
</tr>
</table>
<p class="tab">We have already described the basic deletion commands <b>&lt;DEL&gt;</b> (<b>delete-backward-char</b>), <b>delete</b> (<b>delete-forward-char</b>), and <b>C-d</b> (<b>delete-char</b>). See <a href="#Erasing">Erasing</a>. With a numeric argument, they delete the specified number of characters. If the numeric argument is omitted or one, they delete all the text in the region if it's active (see <a href="#Using-Region">Using Region</a>).<br><br>The other delete commands are those that delete only whitespace characters: spaces, tabs and newlines. <b>M-\</b> (<b>delete-horizontal-space</b>) deletes all the spaces and tab characters before and after point. With a prefix argument, this only deletes spaces and tab characters before point. <b>M-&lt;SPC&gt;</b> (<b>only-one-space</b>) does likewise but leaves a single space before point, regardless of the number of spaces that existed previously (even if there were none before). With a numeric argument <i>n</i>, it leaves <i>n</i> spaces before point if <i>n</i> is positive; if <i>n</i> is negative, it deletes newlines in addition to spaces and tabs, leaving <i>-n</i> spaces before point.<br><br><b>C-x C-o</b> (<b>delete-blank-lines</b>) deletes all blank lines after the current line. If the current line is blank, it deletes all blank lines preceding the current line as well (leaving one blank line, the current line). On a solitary blank line, it deletes that line.<br><br><b>M-^</b> (<b>delete-indentation</b>) joins the current line and the previous line, by deleting a newline and all surrounding spaces, usually leaving a single space. See <a href="#Indentation">M-^</a>.</p>
<h2 id="Killing-by-Lines">Killing by lines</h2>
<p class="tab tcy">C-k</p>
<p class="tab">Kill rest of line or one or more lines (<b>kill-line</b>).</p>
<p class="tab tcy">C-S-backspace</p>
<p class="tab">Kill an entire line at once (<b>kill-whole-line</b>)</p>
<p class="tab">The simplest kill command is <b>C-k</b> (<b>kill-line</b>). If used at the end of a line, it kills the line-ending newline character, merging the next line into the current one (thus, a blank line is entirely removed). Otherwise, <b>C-k</b> kills all the text from point up to the end of the line; if point was originally at the beginning of the line, this leaves the line blank.<br><br>Spaces and tabs at the end of the line are ignored when deciding which case applies. As long as point is after the last visible character in the line, you can be sure that <b>C-k</b> kills the newline. To kill an entire non-blank line, go to the beginning and type <b>C-k</b> twice.<br><br>In this context, "line" means a logical text line, not a screen line (see <a href="#Continuation-Lines">Continuation Lines</a>).<br><br>When <b>C-k</b> is given a positive argument <i>n</i>, it kills <i>n</i> lines and the newlines that follow them (text on the current line before point is not killed). With a negative argument <i>&minus;n</i>, it kills <i>n</i> lines preceding the current line, together with the text on the current line before point. <b>C-k</b> with an argument of zero kills the text before point on the current line.<br><br>If the variable <b>kill-whole-line</b> is non-nil, <b>C-k</b> at the very beginning of a line kills the entire line including the following newline. This variable is normally nil.<br><br><b>C-S-backspace</b> (<b>kill-whole-line</b>) kills a whole line including its newline, regardless of the position of point in the line. Note that many text terminals prevent you from typing the key sequence <b>C-S-backspace</b>.</p>
<h2 id="Other-Kill-Commands">Other kill commands</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>C-w</b></td>
<td>Kill the region (<b>kill-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-w</b></td>
<td>Copy the region into the kill ring (<b>kill-ring-save</b>).</td>
</tr>
<tr class="tcw">
 <td><b>M-d</b></td>
<td>Kill the next word (<b>kill-word</b>). See <a href="#Words">Words</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;DEL&gt;</b></td>
<td>Kill one word backwards (<b>backward-kill-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;DEL&gt;</b></td>
<td>Kill back to beginning of sentence (<b>backward-kill-sentence</b>). See <a href="#Sentences">Sentences</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-k</b></td>
<td>Kill to the end of the sentence (<b>kill-sentence</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-k</b></td>
<td>Kill the following balanced expression (<b>kill-sexp</b>). See <a href="#Expressions">Expressions</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-z</b> <i>char</i></td>
<td>Kill through the next occurrence of <i>char</i> (<b>zap-to-char</b>).</td>
</tr>
</table>
<p class="tab">One of the commonly-used kill commands is <b>C-w</b> (<b>kill-region</b>), which kills the text in the region (see <a href="#Mark">Mark</a>). Similarly, <b>M-w</b> (<b>kill-ring-save</b>) copies the text in the region into the kill ring without removing it from the buffer. If the mark is inactive when you type <b>C-w</b> or <b>M-w</b>, the command acts on the text between point and where you last set the mark (see <a href="#Using-Region">Using Region</a>).<br><br>Emacs also provides commands to kill specific syntactic units: words, with <b>M-&lt;DEL&gt;</b> and <b>M-d</b> (see <a href="#Words">Words</a>); balanced expressions, with <b>C-M-k</b> (see <a href="#Expressions">Expressions</a>); and sentences, with <b>C-x &lt;DEL&gt;</b> and <b>M-k</b> (see <a href="#Sentences">Sentences</a>).<br><br>The command <b>M-z</b> (<b>zap-to-char</b>) combines killing with searching: it reads a character and kills from point up to (and including) the next occurrence of that character in the buffer. A numeric argument acts as a repeat count; a negative argument means to search backward and kill text before point.</p>
<h2 id="Kill-Options">Options for killing</h2>
<p class="tab">Some specialized buffers contain read-only text, which cannot be modified and therefore cannot be killed. The kill commands work specially in a read-only buffer: they move over text and copy it to the kill ring, without actually deleting it from the buffer. Normally, they also beep and display an error message when this happens. But if you set the variable <b>kill-read-only-ok</b> to a non-nil value, they only print a message in the echo area to explain why the text has not been erased.<br><br>If you change the variable <b>kill-do-not-save-duplicates</b> to a non-nil value, identical subsequent kills yield a single kill-ring entry, without duplication.</p>
<h2 id="Yanking">Yanking</h2>
<p class="tab">Yanking means reinserting text previously killed. The usual way to move or copy text is to kill it and then yank it elsewhere.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>C-y</b></td>
<td>Yank the last kill into the buffer, at point (<b>yank</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-y</b></td>
<td>Replace the text only yanked with an earlier batch of killed text (<b>yank-pop</b>). See <a href="#Earlier-Kills">Earlier Kills</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-M-w</b></td>
<td>Cause the following command, if it's a kill command, to append to the previous kill (<b>append-next-kill</b>). See <a href="#Appending-Kills">Appending Kills</a>.</td>
</tr>
</table>
<p class="tab">The basic yanking command is <b>C-y</b> (<b>yank</b>). It inserts the most recent kill, leaving the cursor at the end of the inserted text. It also sets the mark at the beginning of the inserted text, without activating the mark; this lets you jump easily to that position, if you want, with <b>C-u C-&lt;SPC&gt;</b> (see <a href="#Mark-Ring">Mark Ring</a>).<br><br>With a plain prefix argument (<b>C-u C-y</b>), the command instead leaves the cursor in front of the inserted text, and sets the mark at the end. Using any other prefix argument specifies an earlier kill; e.g., <b>C-u 4 C-y</b> reinserts the fourth most recent kill. See <a href="#Earlier-Kills">Earlier Kills</a>.<br><br>On graphical displays, <b>C-y</b> first checks if another application has placed any text in the system clipboard more recently than the last Emacs kill. If so, it inserts the clipboard's text instead. Thus, Emacs effectively treats "cut" or "copy" clipboard operations performed in other applications like Emacs kills, except that they are not recorded in the kill ring. See <a href="#Cut-and-Paste">Cut and Paste</a>, for details.</p>
<ul>
<li><a href="#Kill-Ring">Kill Ring</a>: Where killed text is stored.</li>
<li><a href="#Earlier-Kills">Earlier Kills</a>: Yanking something killed some time ago.</li>
<li><a href="#Appending-Kills">Appending Kills</a>: Several kills in a row all yank together.</li>
</ul>
<h2 id="Kill-Ring">The kill ring</h2>
<p class="tab">The kill ring is a list of blocks of text that were previously killed. There is only one kill ring, shared by all buffers, so you can kill text in one buffer and yank it in another buffer. This is the usual way to move text from one buffer to another. (There are other methods: for instance, you could store the text in a register; see <a href="#Registers">Registers</a>. See <a href="#Accumulating-Text">Accumulating Text</a>, for some other ways to move text around.)<br><br>The maximum number of entries in the kill ring is controlled by the variable <b>kill-ring-max</b>. The default is 60. If you make a new kill when this limit is reached, Emacs makes room by deleting the oldest entry in the kill ring.<br><br>The actual contents of the kill ring are stored in a variable named <b>kill-ring</b>; you can view the entire contents of the kill ring with <b>C-h v kill-ring</b>.</p>
<h2 id="Earlier-Kills">Yanking earlier kills</h2>
<p class="tab">As explained in Yanking, you can use a numeric argument to <b>C-y</b> to yank text that is no longer the most recent kill. This is useful if you remember which kill ring entry you want. If you don't, you can use the <b>M-y</b> (<b>yank-pop</b>) command to cycle through the possibilities.<br><br>If the previous command was a yank command, <b>M-y</b> takes the text that was yanked and replaces it with the text from an earlier kill. So, to recover the text of the next-to-the-last kill, first use <b>C-y</b> to yank the last kill, and then use <b>M-y</b> to replace it with the previous kill. <b>M-y</b> is allowed only after a <b>C-y</b> or another <b>M-y</b>.<br><br>You can understand <b>M-y</b> in terms of a "last yank" pointer which points at an entry in the kill ring. Each time you kill, the "last yank" pointer moves to the newly made entry at the front of the ring. <b>C-y</b> yanks the entry which the "last yank" pointer points to. <b>M-y</b> moves the "last yank" pointer to a different entry, and the text in the buffer changes to match. Enough <b>M-y</b> commands can move the pointer to any entry in the ring, so you can get any entry into the buffer. Eventually the pointer reaches the end of the ring; the next <b>M-y</b> loops back around to the first entry again.<br><br><b>M-y</b> moves the "last yank" pointer around the ring, but it does not change the order of the entries in the ring, which always runs from the most recent kill at the front to the oldest one still remembered.<br><br><b>M-y</b> can take a numeric argument, which tells it how many entries to advance the "last yank" pointer by. A negative argument moves the pointer toward the front of the ring; from the front of the ring, it moves "around" to the last entry and continues forward from there.<br><br>Once the text you are looking for is brought into the buffer, you can stop doing <b>M-y</b> commands and it stays there. It's only a copy of the kill ring entry, so editing it in the buffer does not change what's in the ring. As long as no new killing is done, the "last yank" pointer remains at the same place in the kill ring, so repeating <b>C-y</b> will yank another copy of the same previous kill.<br><br>When you call <b>C-y</b> with a numeric argument, that also sets the "last yank" pointer to the entry that it yanks.</p>
<h2 id="Appending-Kills">Appending kills</h2>
<p class="tab">Normally, each kill command pushes a new entry onto the kill ring. However, two or more kill commands in a row combine their text into a single entry, so that a single <b>C-y</b> yanks all the text as a unit, only as it was before it was killed.<br><br>Thus, if you want to yank text as a unit, you need not kill all of it with one command; you can keep killing line after line, or word after word, until you have killed it all, and you can still get it all back at once.<br><br>Commands that kill forward from point add onto the end of the previous killed text. Commands that kill backward from point add text onto the beginning. This way, any sequence of mixed forward and backward kill commands puts all the killed text into one entry without rearrangement. Numeric arguments do not break the sequence of appending kills. For example, suppose the buffer contains this text:</p>
<pre class="tab tcy">This is a line -!-of sample text.</pre>
<p class="tab">With point shown by <b>-!-</b>. If you type <b>M-d M-&lt;DEL&gt; M-d M-&lt;DEL&gt;</b>, killing alternately forward and backward, you end up with 'a line of sample' as one entry in the kill ring, and 'This is text' in the buffer. (Note the double space between '<b>is</b>' and '<b>text</b>', which you can clean up with <b>M-&lt;SPC&gt;</b> or <b>M-q</b>.)<br><br>Another way to kill the same text is to move back two words with <b>M-b M-b</b>, then kill all four words forward with <b>C-u M-d</b>. This produces the same results in the buffer and in the kill ring. <b>M-f M-f C-u M-&lt;DEL&gt;</b> kills the same text, all going backward; once again, the result is the same. The text in the kill ring entry always has the same order that it had in the buffer before you killed it.<br><br>If a kill command is separated from the last kill command by other commands (not only numeric arguments), it starts a new entry on the kill ring. But you can force it to append by first typing the command <b>C-M-w</b> (<b>append-next-kill</b>) right before it. The <b>C-M-w</b> tells the following command, if it's a kill command, to append the text it kills to the last killed text, instead of starting a new entry. With <b>C-M-w</b>, you can kill several separated pieces of text and accumulate them to be yanked back in one place.<br><br>A kill command following <b>M-w</b> (<b>kill-ring-save</b>) does not append to the text that <b>M-w</b> copied into the kill ring.</p>
<h2 id="Cut-and-Paste">Cut and paste operations on graphical displays</h2>
<p class="tab">In most graphical desktop environments, you can transfer data (usually text) between different applications using a system facility called the clipboard. On <a href="/jargon/x/xwin.htm">X</a>, two other similar facilities are available: the primary selection and the secondary selection. When Emacs is run on a graphical display, its kill and yank commands integrate with these facilities, so that you can easily transfer text between Emacs and other graphical applications.<br><br>By default, Emacs uses <a href="/jargon/u/unicode.htm">UTF-8</a> as the coding system for inter-program text transfers. If you find that the pasted text is not what you expected, you can specify another coding system by typing <b>C-x &lt;RET&gt; x</b> or <b>C-x &lt;RET&gt; X</b>. You can also request a different data type by customizing <b>x-select-request-type</b>. See <a href="#Communication-Coding">Communication Coding</a>.</p>
<ul>
<li><a href="#Clipboard">Clipboard</a>: How Emacs uses the system clipboard.</li>
<li><a href="#Primary-Selection">Primary Selection</a>: The temporarily selected text selection.</li>
<li><a href="#Secondary-Selection">Secondary Selection</a>: Cutting without altering point and mark.</li>
</ul>
<h2 id="Clipboard">Using The clipboard</h2>
<p class="tab">The clipboard is the facility that most graphical applications use for "cutting and pasting". When the clipboard exists, the kill and yank commands in Emacs make use of it.<br><br>When you kill some text with a command such as <b>C-w</b> (<b>kill-region</b>), or copy it to the kill ring with a command such as <b>M-w</b> (<b>kill-ring-save</b>), that text is also put in the clipboard.<br><br>When an Emacs kill command puts text in the clipboard, the existing clipboard contents are normally lost. Optionally, you can change <b>save-interprogram-paste-before-kill</b> to <b>t</b>. Then Emacs will first save the clipboard to its kill ring, preventing you from losing the old clipboard data, at the risk of high memory consumption if that data turns out to be large.<br><br>Yank commands, such as <b>C-y</b> (<b>yank</b>), also use the clipboard. If another application "owns" the clipboard, i.e., if you cut or copied text there more recently than your last kill command in Emacs, Emacs yanks from the clipboard instead of the kill ring.<br><br>Normally, rotating the kill ring with <b>M-y</b> (<b>yank-pop</b>) does not alter the clipboard. However, if you change <b>yank-pop-change-selection</b> to <b>t</b>, then <b>M-y</b> saves the new yank to the clipboard.<br><br>To prevent kill and yank commands from accessing the clipboard, change the variable <b>x-select-enable-clipboard</b> to nil.<br><br>Many X desktop environments support a feature called the clipboard manager. If you exit Emacs while it is the current "owner" of the clipboard data, and there is a clipboard manager running, Emacs transfers the clipboard data to the clipboard manager so that it is not lost. In some circumstances, this may cause a delay when exiting Emacs; if you want to prevent Emacs from transferring data to the clipboard manager, change the variable <b>x-select-enable-clipboard-manager</b> to nil.<br><br>Before Emacs 24, the kill and yank commands used the primary selection (see <a href="#Primary-Selection">Primary Selection</a>), not the clipboard. If you prefer this behavior, change <b>x-select-enable-clipboard</b> to nil, <b>x-select-enable-primary</b> to <b>t</b>, and <b>mouse-drag-copy-region</b> to <b>t</b>. In this case, you can use the following commands to act explicitly on the clipboard: <b>clipboard-kill-region</b> kills the region and saves it to the clipboard; <b>clipboard-kill-ring-save</b> copies the region to the kill ring and saves it to the clipboard; and <b>clipboard-yank</b> yanks the contents of the clipboard at point.</p>
<h2 id="Primary-Selection">Cut and paste with other window applications</h2>
<p class="tab">Under the X Window System, there exists a primary selection containing the last stretch of text selected in an X application (usually by dragging the mouse). Typically, this text can be inserted into other X applications by mouse-2 clicks. The primary selection is separate from the clipboard. Its contents are more "fragile"; they are overwritten each time you select text with the mouse, whereas the clipboard is only overwritten by explicit "cut" or "copy" commands.<br><br>Under X, whenever the region is active (see <a href="#Mark">Mark</a>), the text in the region is saved in the primary selection. This applies regardless of whether the region was made by dragging or clicking the mouse (see <a href="#Mouse-Commands">Mouse Commands</a>), or by keyboard commands (e.g., by typing <b>C-&lt;SPC&gt;</b> and moving point; see <a href="#Setting-Mark">Setting Mark</a>).<br><br>If you change the variable <b>select-active-regions</b> to <b>only</b>, Emacs saves only temporarily active regions to the primary selection, i.e., those made with the mouse or with shift selection (see <a href="#Shift-Selection">Shift Selection</a>). If you change <b>select-active-regions</b> to nil, Emacs avoids saving active regions to the primary selection entirely.<br><br>To insert the primary selection into an Emacs buffer, click <b>mouse-2</b> (<b>mouse-yank-primary</b>) where you want to insert it. See <a href="#Mouse-Commands">Mouse Commands</a>.<br><br><a href="/jargon/w/windows.htm">Microsoft Windows</a> provides no primary selection, but Emacs emulates it within a single Emacs session by storing the selected text internally. Therefore, all the features and commands related to the primary selection work on Windows as they do on X, for cutting and pasting in the same session, but not across Emacs sessions or with other applications.</p>
<h2 id="Secondary-Selection">Secondary selection</h2>
<p class="tab">In addition to the primary selection, the X Window System provides a second similar facility known as the secondary selection. Nowadays, few X applications make use of the secondary selection, but you can access it using the following Emacs commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:170px"><b>M-Drag-Mouse-1</b></td>
<td>Set the secondary selection, with one end at the place where you press down the button, and the other end at the place where you release it (<b>mouse-set-secondary</b>). The selected text is highlighted, using the secondary-selection face, as you drag. The window scrolls automatically if you drag the mouse off the top or bottom of the window, only like <b>mouse-set-region</b> (see <a href="#Mouse-Commands">Mouse Commands</a>). This command does not alter the kill ring.</td>
</tr>
<tr class="tcw">
<td><b>M-Mouse-1</b></td>
<td>Set one endpoint for the secondary selection (<b>mouse-start-secondary</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-Mouse-3</b></td>
<td>Set the secondary selection, with one end at the position clicked and the other at the position specified with <b>M-Mouse-1</b> (<b>mouse-secondary-save-then-kill</b>). This also puts the selected text in the kill ring. A second <b>M-Mouse-3</b> at the same place kills the secondary selection only made.</td>
</tr>
<tr class="tcw">
<td><b>M-Mouse-2</b></td>
<td>Insert the secondary selection where you click, placing point at the end of the yanked text (<b>mouse-yank-secondary</b>).</td>
</tr>
</table>
<p class="tab">Double or triple clicking of <b>M-Mouse-1</b> operates on words and lines, much like <b>Mouse-1</b>.<br><br>If <b>mouse-yank-at-point</b> is non-nil, <b>M-Mouse-2</b> yanks at point. Then it does not matter precisely where you click, or even which of the frame's windows you click. See <a href="#Mouse-Commands">Mouse Commands</a>.</p>
<h2 id="Accumulating-Text">Accumulating text</h2>
<p class="tab">Usually we copy or move text by killing it and yanking it, but there are other convenient methods for copying one block of text in many places, or for copying many scattered blocks of text into one place. Here we describe the commands to accumulate scattered pieces of text into a buffer or into a file.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>M-x append-to-buffer</b></td>
<td>Append region to the contents of a specified buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x prepend-to-buffer</b></td>
<td>Prepend region to the contents of a specified buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x copy-to-buffer</b></td>
<td>Copy region into a specified buffer, deleting that buffer's old contents.</td>
</tr>
<tr class="tcw">
<td><b>M-x insert-buffer</b></td>
<td>Insert the contents of a specified buffer into current buffer at point.</td>
</tr>
<tr class="tcw">
<td><b>M-x append-to-file</b></td>
<td>Append region to the contents of a specified file, at the end.</td>
</tr>
</table>
<p class="tab">To accumulate text into a buffer, use <b>M-x append-to-buffer</b>. This reads a buffer name, then inserts a copy of the region into the buffer specified. If you specify a nonexistent buffer, <b>append-to-buffer</b> creates the buffer. The text is inserted wherever point is in that buffer. If you are using the buffer for editing, the copied text goes into the middle of the text of the buffer, starting from wherever point happens to be at that moment.<br><br>Point in that buffer is left at the end of the copied text, so successive uses of <b>append-to-buffer</b> accumulate the text in the specified buffer in the same order as they were copied. Strictly speaking, <b>append-to-buffer</b> does not always append to the text already in the buffer&mdash;it appends only if point in that buffer is at the end. However, if <b>append-to-buffer</b> is the only command you use to alter a buffer, then point is always at the end.<br><br><b>M-x prepend-to-buffer</b> is only like <b>append-to-buffer</b> except that point in the other buffer is left before the copied text, so successive prependings add text in reverse order. <b>M-x copy-to-buffer</b> is similar, except that any existing text in the other buffer is deleted, so the buffer is left containing only the text newly copied into it.<br><br>The command <b>M-x insert-buffer</b> can retrieve the accumulated text from another buffer. This prompts for the name of a buffer, and inserts a copy of all the text in that buffer into the current buffer at point, leaving point at the beginning of the inserted text. It also adds the position of the end of the inserted text to the mark ring, without activating the mark. See <a href="#Buffers">Buffers</a>, for background information on buffers.<br><br>Instead of accumulating text in a buffer, you can append text directly into a file with <b>M-x append-to-file</b>. This prompts for a file name, and adds the text of the region to the end of the specified file. The file is changed immediately on disk.<br><br>Use <b>append-to-file</b> only with files that are not being visited in Emacs. Using it on a file that you are editing in Emacs would change the file behind Emacs's back, which can lead to losing some of your editing.<br><br>Another way to move text around is to store it in a register. See <a href="#Registers">Registers</a>.</p>
<h2 id="Rectangles">Rectangles</h2>
<p class="tab">Rectangle commands operate on rectangular areas of the text: all the characters between a certain pair of columns, in a certain range of lines. Emacs has commands to kill rectangles, yank killed rectangles, clear them out, fill them with blanks or text, or delete them. Rectangle commands are useful with text in multicolumn formats, and for changing text into or out of such formats.<br><br>To specify a rectangle for a command to work on, set the mark at one corner and point at the opposite corner. The rectangle thus specified is called the <b>region-rectangle</b>. If point and the mark are in the same column, the region-rectangle is empty. If they are in the same line, the region-rectangle is one line high.<br><br>The region-rectangle is controlled in much the same way as the region is controlled. But remember that a given combination of point and mark values can be interpreted either as a region or as a rectangle, depending on the command that uses them.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>C-x r k</b></td>
<td>Kill the text of the region-rectangle, saving its contents as the "last killed rectangle" (<b>kill-rectangle</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r M-w</b></td>
<td>Save the text of the region-rectangle as the "last killed rectangle" (<b>copy-rectangle-as-kill</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r d</b></td>
<td>Delete the text of the region-rectangle (<b>delete-rectangle</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r y</b></td>
<td>Yank the last killed rectangle with its upper left corner at point (<b>yank-rectangle</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r o</b></td>
<td>Insert blank space to fill the space of the region-rectangle (<b>open-rectangle</b>). This pushes the previous contents of the region-rectangle to the right.</td>
</tr>
<tr class="tcw">
<td><b>C-x r N</b></td>
<td>Insert line numbers along the left edge of the region-rectangle (<b>rectangle-number-lines</b>). This pushes the previous contents of the region-rectangle to the right.</td>
</tr>
<tr class="tcw">
<td><b>C-x r c</b></td>
<td>Clear the region-rectangle by replacing all its contents with spaces (<b>clear-rectangle</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x delete-whitespace-rectangle</b></td>
<td>Delete whitespace in each of the lines on the specified rectangle, starting from the left edge column of the rectangle.</td>
</tr>
<tr class="tcw">
<td><b>C-x r t</b> <i>string</i> <b>&lt;RET&gt;</b></td>
<td>Replace rectangle contents with <i>string</i> on each line (<b>string-rectangle</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x string-insert-rectangle &lt;RET&gt;</b> <i>string</i> <b>&lt;RET&gt;</b></td>
<td>Insert <i>string</i> on each line of the rectangle.</td>
</tr>
</table>
<p class="tab">The rectangle operations fall into two classes: commands to erase or insert rectangles, and commands to make blank rectangles.<br><br>There are two ways to erase the text in a rectangle: <b>C-x r d</b> (<b>delete-rectangle</b>) to delete the text outright, or <b>C-x r k</b> (<b>kill-rectangle</b>) to remove the text and save it as the last killed rectangle. In both cases, erasing the region-rectangle is like erasing the specified text on each line of the rectangle; if there is any following text on the line, it moves backwards to fill the gap.<br><br>"Killing" a rectangle is not killing in the usual sense; the rectangle is not stored in the kill ring, but in a special place that only records the most recent rectangle killed. This is because yanking a rectangle is so different from yanking linear text that different yank commands have to be used. Yank-popping is not defined for rectangles.<br><br><b>C-x r M-w</b> (<b>copy-rectangle-as-kill</b>) is the equivalent of <b>M-w</b> for rectangles: it records the rectangle as the "last killed rectangle", without deleting the text from the buffer.<br><br>To yank the last killed rectangle, type <b>C-x r y</b> (<b>yank-rectangle</b>). The rectangle's first line is inserted at point, the rectangle's second line is inserted at the same horizontal position one line vertically below, etc. The number of lines affected is determined by the height of the saved rectangle.<br><br>For example, you can convert two single-column lists into a double-column list by killing one of the single-column lists as a rectangle, and then yanking it beside the other list.<br><br>You can also copy rectangles into and out of registers with <b>C-x r r r</b> and <b>C-x r i r</b>. See <a href="#Rectangle-Registers">Rectangle Registers</a>.<br><br>There are two commands you can use for making blank rectangles: <b>C-x r c</b> (<b>clear-rectangle</b>) blanks out existing text in the region-rectangle, and <b>C-x r o</b> (<b>open-rectangle</b>) inserts a blank rectangle.<br><br><b>M-x delete-whitespace-rectangle</b> deletes horizontal whitespace starting from a particular column. This applies to each of the lines in the rectangle, and the column is specified by the left edge of the rectangle. The right edge of the rectangle does not make any difference to this command.<br><br>The command <b>C-x r N</b> (<b>rectangle-number-lines</b>) inserts line numbers along the left edge of the <b>region-rectangle</b>. Normally, the numbering begins from 1 (for the first line of the rectangle). With a prefix argument, the command prompts for a number to begin from, and for a format string with which to print the numbers.<br><br>The command <b>C-x r t</b> (<b>string-rectangle</b>) replaces the contents of a region-rectangle with a string on each line. The string's width need not be the same as the width of the rectangle. If the string's width is less, the text after the rectangle shifts left; if the string is wider than the rectangle, the text after the rectangle shifts right.<br><br>The command <b>M-x string-insert-rectangle</b> is similar to <b>string-rectangle</b>, but inserts the string on each line, shifting the original text to the right.</p>
<h2 id="CUA-Bindings">CUA bindings</h2>
<p class="tab">The command <b>M-x cua-mode</b> sets up key bindings that are compatible with the Common User Access (CUA) system used in other applications.<br><br>When CUA mode is enabled, the keys <b>C-x</b>, <b>C-c</b>, <b>C-v</b>, and <b>C-z</b> invoke commands that cut (kill), copy, paste (yank), and undo respectively. The <b>C-x</b> and <b>C-c</b> keys perform cut and copy only if the region is active. Otherwise, they still act as prefix keys, so that standard Emacs commands like <b>C-x C-c</b> still work. Note that this means the variable <b>mark-even-if-inactive</b> has no effect for <b>C-x</b> and <b>C-c</b> (see <a href="#Using-Region">Using Region</a>).<br><br>To enter an Emacs command like <b>C-x C-f</b> while the mark is active, use one of the following methods: either hold Shift together with the prefix key, e.g., <b>S-C-x C-f</b>, or quickly type the prefix key twice, e.g., <b>C-x C-x C-f</b>.<br><br>To disable the overriding of standard Emacs binding by CUA mode, while retaining the other features of CUA mode described below, set the variable <b>cua-enable-cua-keys</b> to nil.<br><br>In CUA mode, typed text replaces the active region as in Delete-Selection mode (see <a href="#Mouse-Commands">Mouse Commands</a>).<br><br>CUA mode provides enhanced rectangle support with visible rectangle highlighting. Use <b>C-&lt;RET&gt;</b> to start a rectangle, extend it using the movement commands, and cut or copy it using <b>C-x</b> or <b>C-c</b>. <b>&lt;RET&gt;</b> moves the cursor to the next (clockwise) corner of the rectangle, so you can easily expand it in any direction. Normal text you type is inserted to the left or right of each line in the rectangle (on the same side as the cursor).<br><br>With CUA you can easily copy text and rectangles into and out of registers by providing a one-digit numeric prefix to the kill, copy, and yank commands, e.g., <b>C-1 C-c</b> copies the region into register 1, and <b>C-2 C-v</b> yanks the contents of register 2.<br><br>CUA mode also has a global mark feature that allows easy moving and copying of text between buffers. Use <b>C-S-&lt;SPC&gt;</b> to toggle the global mark on and off. When the global mark is on, all text that you kill or copy is automatically inserted at the global mark, and text you type is inserted at the global mark rather than at the current position.<br><br>For example, to copy words from various buffers into a word list in a given buffer, set the global mark in the target buffer, then navigate to each of the words you want in the list, mark it (e.g., with <b>S-M-f</b>), copy it to the list with <b>C-c</b> or <b>M-w</b>, and insert a newline after the word in the target list by pressing <b>&lt;RET&gt;</b>.</p>
<h2 id="Registers">Registers</h2>
<p class="tab">Emacs registers are compartments where you can save text, rectangles, positions, and other things for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once, or many times; once you save a position in a register, you can jump back to that position once, or many times.<br><br>Each register has a name that consists of a single character, which we will denote by <b>r</b>; <b>r</b> is a letter (such as '<b>a</b>') or a number (such as '<b>1</b>'); case matters, so register '<b>a</b>' is not the same as register '<b>A</b>'.<br><br>A register can store a position, a piece of text, a rectangle, a number, a window configuration, or a file name, but only one thing at any given time. Whatever you store in a register remains there until you store something else in that register. To see what register <b>r</b> contains, use <b>M-x view-register</b>:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>M-x view-register &lt;RET&gt;</b> <i>r</i></td>
<td>Display a description of what register <i>r</i> contains.</td>
</tr>
</table>
<p class="tab">Bookmarks record files and positions in them, so you can return to those positions when you look at the file again. Bookmarks are similar in spirit to registers, so they are also documented in this chapter.</p>
<ul>
<li><a href="#Position-Registers">Position Registers</a>: Saving positions in registers.</li>
<li><a href="#Text-Registers">Text Registers</a>: Saving text in registers.</li>
<li><a href="#Rectangle-Registers">Rectangle Registers</a>: Saving rectangles in registers.</li>
<li><a href="#Configuration-Registers">Configuration Registers</a>: Saving window configurations in registers.</li>
<li><a href="#Number-Registers">Number Registers</a>: Numbers in registers.</li>
<li><a href="#File-Registers">File Registers</a>: File names in registers.</li>
<li><a href="#Bookmarks">Bookmarks</a>: Bookmarks are like registers, but persistent.</li>
</ul>
<h2 id="Position-Registers">Saving positions in registers</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-x r &lt;SPC&gt;</b> <i>r</i></td>
<td>Record the position of point and the current buffer in register <i>r</i> (<b>point-to-register</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x</b> <i>r</i><b>j</b> <i>r</i></td>
<td>Jump to the position and buffer saved in register <i>r</i> (<b>jump-to-register</b>).</td>
</tr>
</table>
<p class="tab">Typing <b>C-x r &lt;SPC&gt;</b> (<b>point-to-register</b>), followed by a character <i>r</i>, saves both the position of point and the current buffer in register <i>r</i>. The register retains this information until you store something else in it.<br><br>The command <b>C-x r j</b> <i>r</i> switches to the buffer recorded in register <i>r</i>, and moves point to the recorded position. The contents of the register are not changed, so you can jump to the saved position any number of times.<br><br>If you use <b>C-x r j</b> to go to a saved position, but the buffer it was saved from is killed, <b>C-x r j</b> tries to create the buffer again by visiting the same file. Of course, this works only for buffers that were visiting files.</p>
<h2 id="Text-Registers">Saving text in registers</h2>
<p class="tab">When you want to insert a copy of the same piece of text several times, it may be inconvenient to yank it from the kill ring, as each subsequent kill moves that entry further down the ring. An alternative is to store the text in a register and later retrieve it.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:330px"><b>C-x r s</b> <i>r</i></td>
<td>Copy region into register <i>r</i> (<b>copy-to-register</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r i</b> <i>r</i></td>
<td>Insert text from register <i>r</i> (<b>insert-register</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x append-to-register &lt;RET&gt;</b> <i>r</i></td>
<td>Append region to text in register <i>r</i>.<br><br>When register <i>r</i> contains text, you can use <b>C-x r +</b> (<b>increment-register</b>) to append to that register. Note that command <b>C-x r +</b> behaves differently if <i>r</i> contains a number. See <a href="#Number-Registers">Number Registers</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-x prepend-to-register &lt;RET&gt;</b> <i>r</i></td>
<td>Prepend region to text in register <i>r</i>.</td>
</tr>
</table>
<p class="tab"><b>C-x r s</b> <i>r</i> stores a copy of the text of the region into the register named <i>r</i>. If the mark is inactive, Emacs first reactivates the mark where it was last set. The mark is deactivated at the end of this command. See <a href="#Mark">Mark</a>. <b>C-u C-x r s</b> <i>r</i>, the same command with a prefix argument, copies the text into register <i>r</i> and deletes the text from the buffer as well; you can think of this as "moving" the region text into the register.<br><br><b>M-x append-to-register &lt;RET&gt;</b> <i>r</i> appends the copy of the text in the region to the text already stored in the register named <i>r</i>. If invoked with a prefix argument, it deletes the region after appending it to the register. The command <b>prepend-to-register</b> is similar, except that it prepends the region text to the text in the register instead of appending it.<br><br>When you are collecting text using <b>append-to-register</b> and <b>prepend-to-register</b>, you may want to separate individual collected pieces using a separator. In that case, configure a register-separator and store the separator text in to that register. For example, to get double newlines as text separator during the collection process, you can use the following setting.</p>
<pre class="tab tcy">(setq register-separator ?+) (set-register register-separator "\n\n")</pre>
<p class="tab"><b>C-x r i</b> <i>r</i> inserts in the buffer the text from register <i>r</i>. Normally it leaves point before the text and sets the mark after, without activating it. With a numeric argument, it instead puts point after the text and the mark before.</p>
<h2 id="Rectangle-Registers">Saving rectangles in registers</h2>
<p class="tab">A register can contain a rectangle instead of linear text. See <a href="#Rectangles">Rectangles</a>, for basic information on how to specify a rectangle in the buffer.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>C-x r r</b> <i>r</i></td>
<td>Copy the region-rectangle into register <i>r</i> (<b>copy-rectangle-to-register</b>). With numeric argument, delete it as well.</td>
</tr>
<tr class="tcw">
<td><b>C-x r i</b> <i>r</i></td>
<td>Insert the rectangle stored in register <i>r</i> (if it contains a rectangle) (<b>insert-register</b>).</td>
</tr>
</table>
<p class="tab">The <b>C-x r i</b> <i>r</i> (<b>insert-register</b>) command, previously documented in <a href="#Text-Registers">Text Registers</a>, inserts a rectangle rather than a text string, if the register contains a rectangle.</p>
<h2 id="Configuration-Registers">Saving window configuration in registers</h2>
<p class="tab">You can save the window configuration of the selected frame in a register, or even the configuration of all windows in all frames, and restore the configuration later. See <a href="#Windows">Windows</a>, for information about window configurations.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>C-x r w</b> <i>r</i></td>
<td>Save the state of the selected frame's windows in register <i>r</i> (<b>window-configuration-to-register</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r f</b> <i>r</i></td>
<td>Save the state of all frames, including all their windows, in register <i>r</i> (<b>frame-configuration-to-register</b>).</td>
</tr>
</table>
<p class="tab">Use <b>C-x r j</b> <i>r</i> to restore a window or frame configuration. This is the same command used to restore a cursor position. When you restore a frame configuration, any existing frames not included in the configuration become invisible. If you want to delete these frames instead, use <b>C-u C-x r j r</b>.</p>
<h2 id="Number-Registers">Keeping numbers in registers</h2>
<p class="tab">There are commands to store a number in a register, to insert the number in the buffer in decimal, and to increment it. These commands can be useful in keyboard macros (see <a href="#Keyboard-Macros">Keyboard Macros</a>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>C-u</b> <i>number</i> <b>C-x r n</b> <i>r</i></td>
<td>Store <i>number</i> into register <i>r</i> (<b>number-to-register</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u</b> <i>number</i> <b>C-x r +</b> <i>r</i></td>
<td>If <i>r</i> contains a number, increment the number in that register by <i>number</i>. Note that command <b>C-x r +</b> (<b>increment-register</b>) behaves differently if <i>r</i> contains text. See <a href="#Text-Registers">Text Registers</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x r i</b> <i>r</i></td>
<td>Insert the number from register <i>r</i> into the buffer.</td>
</tr>
</table>
<p class="tab"><b>C-x r i</b> is the same command used to insert any other sort of register contents into the buffer. <b>C-x r +</b> with no numeric argument increments the register value by 1; <b>C-x r n</b> with no numeric argument stores zero in the register.</p>
<h2 id="File-Registers">Keeping file names in registers</h2>
<p class="tab">If you visit certain file names frequently, you can visit them more conveniently if you put their names in registers. Here's the Lisp code used to put a file name in a register:</p>
<pre class="tab tcy">(set-register ?r '(<i>file</i> . <i>name</i>))</pre>
<p class="tab">For example,</p>
<pre class="tab tcy">(set-register ?z '(<i>file</i> . "/gd/gnu/emacs/19.0/src/ChangeLog"))</pre>
<p class="tab">Puts the file name shown in register '<b>z</b>'.<br><br>To visit the file whose name is in register <i>r</i>, type <b>C-x r j</b> <i>r</i>. (This is the same command used to jump to a position or restore a frame configuration.)</p>
<h2 id="Bookmarks">Bookmarks</h2>
<p class="tab">Bookmarks are somewhat like registers in that they record positions where you can jump. Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record "where you were reading" in various files.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-x r m &lt;RET&gt;</b></td>
<td>Set the bookmark for the visited file, at point.</td>
</tr>
<tr class="tcw">
<td><b>C-x r m</b> <i>bookmark</i> <b>&lt;RET&gt;</b></td>
<td>Set the bookmark named <i>bookmark</i> at point (<b>bookmark-set</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r b</b> <i>bookmark</i> <b>&lt;RET&gt;</b></td>
<td>Jump to the bookmark named <i>bookmark</i> (<b>bookmark-jump</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x r l</b></td>
<td>List all bookmarks (<b>list-bookmarks</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x bookmark-save</b></td>
<td>Save all the current bookmark values in the default bookmark file.</td>
</tr>
</table>
<p class="tab">The prototypical use for bookmarks is to record one current position in each of several files. So the command <b>C-x r m</b>, which sets a bookmark, uses the visited file name as the default for the bookmark name. If you name each bookmark after the file it points to, then you can conveniently revisit any of those files with <b>C-x r b</b>, and move to the position of the bookmark at the same time.<br><br>To display a list of all your bookmarks in a separate buffer, type <b>C-x r l</b> (<b>list-bookmarks</b>). If you switch to that buffer, you can use it to edit your bookmark definitions or annotate the bookmarks. Type <b>C-h m</b> in the bookmark buffer for more information about its special editing commands.<br><br>When you kill Emacs, Emacs saves your bookmarks, if you have changed any bookmark values. You can also save the bookmarks at any time with the <b>M-x bookmark-save</b> command. Bookmarks are saved to the file <b>~/.emacs.d/bookmarks</b> (for compatibility with older versions of Emacs, if you have a file named <b>~/.emacs.bmk</b>, that is used instead). The bookmark commands load your default bookmark file automatically. This saving and loading is how bookmarks persist from one Emacs session to the next.<br><br>If you set the variable <b>bookmark-save-flag</b> to 1, each command that sets a bookmark also saves your bookmarks; this way, you don't lose any bookmark values even if Emacs crashes. The value, if a number, says how many bookmark modifications should go by between saving. If you set this variable to nil, Emacs only saves bookmarks if you explicitly use <b>M-x bookmark-save</b>.<br><br>Bookmark position values are saved with surrounding context, so that <b>bookmark-jump</b> can find the proper position even if the file is modified slightly. The variable <b>bookmark-search-size</b> says how many characters of context to record on each side of the bookmark's position.<br><br>Here are some additional commands for working with bookmarks:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>M-x bookmark-load &lt;RET&gt; <i>filename</i> &lt;RET&gt;</b></td>
<td>Load a file named <i>filename</i> containing a list of bookmark values. You can use this command, and <b>bookmark-write</b>, to work with other files of bookmark values in addition to your default bookmark file.</td>
</tr>
<tr class="tcw">
<td><b>M-x bookmark-write &lt;RET&gt;</b> <i>filename</i> <b>&lt;RET&gt;</b></td>
<td>Save all the current bookmark values in the file <i>filename</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x bookmark-delete &lt;RET&gt;</b> <i>bookmark</i> <b>&lt;RET&gt;</b></td>
<td>Delete the bookmark named <i>bookmark</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x bookmark-insert-location &lt;RET&gt;</b> <i>bookmark</i> <b>&lt;RET&gt;</b></td>
<td>Insert in the buffer the name of the file that bookmark <i>bookmark</i> points to.</td>
</tr>
<tr class="tcw">
<td><b>M-x bookmark-insert &lt;RET&gt;</b> <i>bookmark</i> <b>&lt;RET&gt;</b></td>
<td>Insert in the buffer the contents of the file that bookmark <i>bookmark</i> points to.</td>
</tr>
</table>
<h2 id="Display">Controlling the display</h2>
<p class="tab">Since only part of a large buffer fits in the window, Emacs has to show only a part of it. This chapter describes commands and variables that let you specify which part of the text you want to see, and how the text is displayed.</p>
<ul>
<li><a href="#Scrolling">Scrolling</a>: Commands to move text up and down in a window.</li>
<li><a href="#Recentering">Recentering</a>: A scroll command that centers the current line.</li>
<li><a href="#Auto-Scrolling">Auto Scrolling</a>: Redisplay scrolls text automatically when needed.</li>
<li><a href="#Horizontal-Scrolling">Horizontal Scrolling</a>: Moving text left and right in a window.</li>
<li><a href="#Narrowing">Narrowing</a>: Restricting display and editing to a portion of the buffer.</li>
<li><a href="#View-Mode">View Mode</a>: Viewing read-only buffers.</li>
<li><a href="#Follow-Mode">Follow Mode</a>: Follow mode lets two windows scroll as one.</li>
<li><a href="#Faces">Faces</a>: How to change the display style using faces.</li>
<li><a href="#Colors">Colors</a>: Specifying colors for faces.</li>
<li><a href="#Standard-Faces">Standard Faces</a>: The main predefined faces.</li>
<li><a href="#Text-Scale">Text Scale</a>: Increasing or decreasing text size in a buffer.</li>
<li><a href="#Font-Lock">Font Lock</a>: Minor mode for syntactic highlighting using faces.</li>
<li><a href="#Highlight-Interactively">Highlight Interactively</a>: Tell Emacs what text to highlight.</li>
<li><a href="#Fringes">Fringes</a>: Enabling or disabling window fringes.</li>
<li><a href="#Displaying-Boundaries">Displaying Boundaries</a>: Displaying top and bottom of the buffer.</li>
<li><a href="#Useless-Whitespace">Useless Whitespace</a>: Showing possibly spurious trailing whitespace.</li>
<li><a href="#Selective-Display">Selective Display</a>: Hiding lines with lots of indentation.</li>
<li><a href="#Optional-Mode-Line">Optional Mode Line</a>: Optional mode line display features.</li>
<li><a href="#Text-Display">Text Display</a>: How text characters are normally displayed.</li>
<li><a href="#Cursor-Display">Cursor Display</a>: Features for displaying the cursor.</li>
<li><a href="#Line-Truncation">Line Truncation</a>: Truncating lines to fit the screen width instead of continuing them to multiple screen lines.</li>
<li><a href="#Visual-Line-Mode">Visual Line Mode</a>: Word wrap and screen line-based editing.</li>
<li><a href="#Display-Custom">Display Custom</a>: Information on variables for customizing display.</li>
</ul>
<h2 id="Scrolling">Scrolling</h2>
<p class="tab">If a window is too small to display all the text in its buffer, it displays only a portion of it. Scrolling commands change which portion of the buffer is displayed.<br><br>Scrolling "forward" or "up" advances the portion of the buffer displayed in the window; equivalently, it moves the buffer text upwards relative to the window. Scrolling "backward" or "down" displays an earlier portion of the buffer, and moves the text downwards relative to the window.<br><br>In Emacs, scrolling "up" or "down" refers to the direction that the text moves in the window, not the direction that the window moves relative to the text. This terminology was adopted by Emacs before the modern meaning of "scrolling up" and "scrolling down" became widespread. Hence, the strange result that <b>&lt;PageDown&gt;</b> scrolls "up" in the Emacs sense.<br><br>The portion of a buffer displayed in a window always contains point. If you move point past the bottom or top of the window, scrolling occurs automatically to bring it back onscreen (see <a href="#Auto-Scrolling">Auto Scrolling</a>). You can also scroll explicitly with these commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>C-v</b>, <b>&lt;next&gt;</b>, <b>&lt;PageDown&gt;</b></td>
<td>Scroll forward by nearly a full window (<b>scroll-up-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-v</b>, <b>&lt;prior&gt;</b>, <b>&lt;PageUp&gt;</b></td>
<td>Scroll backward (<b>scroll-down-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-v</b></td>
<td>(<b>scroll-up-command</b>) scrolls forward by nearly the whole window height. The effect is to take the two lines at the bottom of the window and put them at the top, followed by lines that were not previously visible. If point was in the text that scrolled off the top, it ends up on the window's new topmost line. The <b>&lt;next&gt;</b> (or <b>&lt;PageDown&gt;</b>) key is equivalent to <b>C-v</b>.</td>
</tr>
<tr class="tcw">
<td><b>M-v</b></td>
<td>(<b>scroll-down-command</b>) scrolls backward in a similar way. The <b>&lt;prior&gt;</b> (or <b>&lt;PageUp&gt;</b>) key is equivalent to <b>M-v</b>.</td>
</tr>
</table>
<p class="tab">The number of lines of overlap left by these scroll commands is controlled by the variable <b>next-screen-context-lines</b>, whose default value is 2. You can supply the commands with a numeric prefix argument, <i>n</i>, to scroll by <i>n</i> lines; Emacs attempts to leave point unchanged, so that the text and point move up or down together. <b>C-v</b> with a negative argument is like <b>M-v</b> and vice versa.<br><br>By default, these commands signal an error (by beeping or flashing the screen) if no more scrolling is possible, because the window has reached the beginning or end of the buffer. If you change the variable <b>scroll-error-top-bottom</b> to <b>t</b>, the command moves point to the farthest possible position. If point is already there, the command signals an error.<br><br>Some users like scroll commands to keep point at the same screen position, so that scrolling back to the same screen conveniently returns point to its original position. You can enable this behavior via the variable <b>scroll-preserve-screen-position</b>. If the value is <b>t</b>, Emacs adonlys point to keep the cursor at the same screen position whenever a scroll command moves it off-window, rather than moving it to the topmost or bottommost line. With any other non-nil value, Emacs adonlys point this way even if the scroll command leaves point in the window. This variable affects all the scroll commands documented in this section, and scrolling with the mouse wheel (see <a href="#Mouse-Commands">Mouse Commands</a>); in general, it affects any command with a non-nil <b>scroll-command</b> property.<br><br>The commands <b>M-x scroll-up</b> and <b>M-x scroll-down</b> behave similarly to <b>scroll-up-command</b> and <b>scroll-down-command</b>, except they do not obey <b>scroll-error-top-bottom</b>. Before Emacs 24, these were the default commands for scrolling up and down. The commands <b>M-x scroll-up-line</b> and <b>M-x scroll-down-line</b> scroll the current window by one line at a time. If you intend to use any of these commands, you might want to give them key bindings (see <a href="#Init-Rebinding">Init Rebinding</a>).</p>
<h2 id="Recentering">Recentering</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>C-l</b></td>
<td>Scroll the selected window so the current line is the center-most text line; on subsequent consecutive invocations, make the current line the top line, the bottom line, and so on in cyclic order. Possibly redisplay the screen too (<b>recenter-top-bottom</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x recenter</b></td>
<td>Scroll the selected window so the current line is the center-most text line. Possibly redisplay the screen too.</td>
</tr>
<tr class="tcw">
<td><b>C-M-l</b></td>
<td>Scroll heuristically to bring useful information onto the screen (<b>reposition-window</b>).</td>
</tr>
</table>
<p class="tab">The <b>C-l</b> (<b>recenter-top-bottom</b>) command recenters the selected window, scrolling it so that the current screen line is exactly in the center of the window, or as close to the center as possible.<br><br>Typing <b>C-l</b> twice in a row (<b>C-l C-l</b>) scrolls the window so that point is on the topmost screen line. Typing a third <b>C-l</b> scrolls the window so that point is on the bottom-most screen line. Each successive <b>C-l</b> cycles through these three positions.<br><br>You can change the cycling order by customizing the list variable <b>recenter-positions</b>. Each list element should be the symbol <b>top</b>, <b>middle</b>, or <b>bottom</b>, or a number; an <a href="/jargon/i/integer.htm">integer</a> means to move the line to the specified screen line, while a <a href="/jargon/f/floapoin.htm">floating-point</a> number between 0.0 and 1.0 specifies a percentage of the screen space from the top of the window. The default, (<b>middle top bottom</b>), is the cycling order described above. Furthermore, if you change the variable <b>scroll-margin</b> to a non-zero value <i>n</i>, <b>C-l</b> always leaves at least <i>n</i> screen lines between point and the top or bottom of the window (see <a href="#Auto-Scrolling">Auto Scrolling</a>).<br><br>You can also give <b>C-l</b> a prefix argument. A plain prefix argument, <b>C-u C-l</b>, recenters point. A positive argument <i>n</i> puts point <i>n</i> lines down from the top of the window. An argument of zero puts point on the topmost line. A negative argument <i>-n</i> puts point <i>n</i> lines from the bottom of the window. When given an argument, <b>C-l</b> does not clear the screen or cycle through different screen positions.<br><br>If the variable <b>recenter-redisplay</b> has a non-nil value, each invocation of <b>C-l</b> also clears and redisplays the screen; the special value <b>tty</b> (the default) says to do this on text-terminal frames only. Redisplaying is useful in case the screen becomes garbled for any reason (see <a href="#Screen-Garbled">Screen Garbled</a>).<br><br>The more primitive command <b>M-x recenter</b> behaves like <b>recenter-top-bottom</b>, but does not cycle among screen positions.<br><br><b>C-M-l</b> (<b>reposition-window</b>) scrolls the current window heuristically in a way designed to get useful information onto the screen. For example, in a Lisp file, this command tries to get the entire current defun onto the screen if possible.</p>
<h2 id="Auto-Scrolling">Automatic scrolling</h2>
<p class="tab">Emacs performs automatic scrolling when point moves out of the visible portion of the text. Normally, automatic scrolling centers point vertically in the window, but there's several ways to alter this behavior.<br><br>If you set <b>scroll-conservatively</b> to a small number <i>n</i>, then moving point only a little off the screen (no more than <i>n</i> lines) causes Emacs to scroll only enough to bring point back on screen; if doing so fails to make point visible, Emacs scrolls only far enough to center point in the window. If you set <b>scroll-conservatively</b> to a large number (larger than 100), automatic scrolling never centers point, no matter how far point moves; Emacs always scrolls text only enough to bring point into view, either at the top or bottom of the window depending on the scroll direction. By default, <b>scroll-conservatively</b> is 0, which means to always center point in the window.<br><br>Another way to control automatic scrolling is to customize the variable <b>scroll-step</b>. Its value determines the number of lines by which to automatically scroll, when point moves off the screen. If scrolling by that number of lines fails to bring point back into view, point is centered instead. The default value is zero, which (by default) causes point to always be centered after scrolling.<br><br>A third way to control automatic scrolling is to customize the variables <b>scroll-up-aggressively</b> and <b>scroll-down-aggressively</b>, which directly specify the vertical position of point after scrolling. The value of <b>scroll-up-aggressively</b> should be either nil (the default), or a floating point number <i>f</i> between 0 and 1. The latter means that when point goes below the bottom window edge (i.e., scrolling forward), Emacs scrolls the window so that point is <i>f</i> parts of the window height from the bottom window edge. Thus, larger <i>f</i> means more aggressive scrolling: more new text is brought into view. The default value, nil, is equivalent to 0.5.<br><br>Likewise, <b>scroll-down-aggressively</b> is used when point goes above the bottom window edge (i.e., scrolling backward). The value specifies how far point should be from the top margin of the window after scrolling. Thus, as with <b>scroll-up-aggressively</b>, a larger value is more aggressive.<br><br>Note that the variables <b>scroll-conservatively</b>, <b>scroll-step</b>, and <b>scroll-up-aggressively</b> / <b>scroll-down-aggressively</b> control automatic scrolling in contradictory ways. Therefore, pick no more than one of these methods to customize automatic scrolling. In case you customize multiple variables, the order of priority is: <b>scroll-conservatively</b>, then <b>scroll-step</b>, and finally <b>scroll-up-aggressively</b> / <b>scroll-down-aggressively</b>.<br><br>The variable <b>scroll-margin</b> restricts how close point can come to the top or bottom of a window (even if aggressive scrolling specifies a fraction <i>f</i> that is larger than the window portion between the top and the bottom margins). Its value is some screen lines; if point comes within that many lines of the top or bottom of the window, Emacs performs automatic scrolling. By default, <b>scroll-margin</b> is 0.</p>
<h2 id="Horizontal-Scrolling">Horizontal scrolling</h2>
<p class="tab">Horizontal scrolling means shifting all the lines sideways within a window, so that some of the text near the left margin is not displayed. When the text in a window is scrolled horizontally, text lines are <a href="/jargon/t/truncate.htm">truncated</a> rather than continued (see <a href="#Line-Truncation">Line Truncation</a>). If a window shows truncated lines, Emacs performs automatic horizontal scrolling whenever point moves off the left or right edge of the screen. To disable automatic horizontal scrolling, set the variable <b>auto-hscroll-mode</b> to nil. Note that when the automatic horizontal scrolling is turned off, if point moves off the edge of the screen, the cursor disappears to indicate that. (On text terminals, the cursor is left at the edge instead.)<br><br>The variable <b>hscroll-margin</b> controls how close point can get to the window's left and right edges before automatic scrolling occurs. It is measured in columns. For example, if the value is 5, then moving point within 5 columns of an edge causes horizontal scrolling away from that edge.<br><br>The variable <b>hscroll-step</b> determines how many columns to scroll the window when point gets too close to the edge. Zero, the default value, means to center point horizontally in the window. A positive integer value specifies the number of columns to scroll by. A floating-point number specifies the fraction of the window's width to scroll by.<br><br>You can also perform explicit horizontal scrolling with the following commands:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>C-x &lt;</b></td>
<td>Scroll text in current window to the left (<b>scroll-left</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &gt;</b></td>
<td>Scroll to the right (<b>scroll-right</b>).</td>
</tr>
</table>
<p class="tab"><b>C-x &lt;</b> (<b>scroll-left</b>) scrolls text in the selected window to the left by the full width of the window, less two columns. (In other words, the text in the window moves left relative to the window.) With a numeric argument <i>n</i>, it scrolls by <i>n</i> columns.<br><br>If the text is scrolled to the left, and point moves off the left edge of the window, the cursor freezes at the left edge of the window, until point moves back to the displayed portion of the text. This is independent of the current setting of <b>auto-hscroll-mode</b>, which, for text scrolled to the left, only affects the behavior at the right edge of the window.<br><br><b>C-x &gt;</b> (<b>scroll-right</b>) scrolls similarly to the right. The window cannot be scrolled any farther to the right once it is displayed normally, with each line starting at the window's left margin; attempting to do so has no effect. This means that you don't have to calculate the argument precisely for <b>C-x &gt;</b>; any sufficiently large argument restores the normal display.<br><br>If you use those commands to scroll a window horizontally, that sets a lower bound for automatic horizontal scrolling. Automatic scrolling continues to scroll the window, but never farther to the right than the amount you previously set by <b>scroll-left</b>.</p>
<h2 id="Narrowing">Narrowing</h2>
<p class="tab">Narrowing means focusing in on some portion of the buffer, making the rest temporarily inaccessible. The portion which you can still get to is called the accessible portion. Canceling the narrowing, which makes the entire buffer once again accessible, is called widening. The bounds of narrowing in effect in a buffer are called the buffer's restriction.<br><br>Narrowing can make it easier to concentrate on a single subroutine or paragraph by eliminating clutter. It can also be used to limit the range of operation of a replace command or repeating keyboard <a href="/jargon/m/macro.htm">macro</a>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x n n</b></td>
<td>Reduce to between point and mark (<b>narrow-to-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x n w</b></td>
<td>Widen to make the entire buffer accessible again (<b>widen</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x n p</b></td>
<td>Reduce to the current page (<b>narrow-to-page</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x n d</b></td>
<td>Reduce to the current defun (<b>narrow-to-defun</b>).</td>
</tr>
</table>
<p class="tab">When you have narrowed down to a part of the buffer, that part appears to be all there is. You can't see the rest, you can't move into it (motion commands won't go outside the accessible part), you can't change it in any way. However, it is not gone, and if you save the file, all the inaccessible text is saved. The word '<b>Narrow</b>' appears in the mode line whenever narrowing is in effect.<br><br>The primary narrowing command is <b>C-x n n</b> (<b>narrow-to-region</b>). It sets the current buffer's restrictions so that the text in the current region remains accessible, but all text before the region or after the region is inaccessible. Point and mark do not change.<br><br>Alternatively, use <b>C-x n p</b> (<b>narrow-to-page</b>) to reduce to the current page. See <a href="#Pages">Pages</a>, for the definition of a page. <b>C-x n d</b> (<b>narrow-to-defun</b>) narrows down to the defun containing point (see <a href="#Defuns">Defuns</a>).<br><br>The way to cancel narrowing is to widen with <b>C-x n w</b> (<b>widen</b>). This makes all text in the buffer accessible again.<br><br>You can get information on what part of the buffer you are narrowed down to using the <b>C-x =</b> command. See <a href="#Position-Info">Position Info</a>.<br><br>Because narrowing can easily confuse users who do not understand it, <b>narrow-to-region</b> is normally a disabled command. Attempting to use this command asks for confirmation and gives you the option of enabling it; if you enable the command, confirmation is no longer required for it. See <a href="#Disabling">Disabling</a>.</p>
<h2 id="View-Mode">View mode</h2>
<p class="tab">View mode is a minor mode that lets you scan a buffer by sequential screenfuls. It provides commands for scrolling through the buffer conveniently but not for changing it. Apart from the usual Emacs cursor motion commands, you can type <b>&lt;SPC&gt;</b> to scroll forward one windowful, <b>&lt;DEL&gt;</b> to scroll backward, and <b>s</b> to start an incremental search.<br><br>Typing <b>q</b> (<b>View-quit</b>) disables View mode, and switches back to the buffer and position before View mode was enabled. Typing <b>e</b> (<b>View-exit</b>) disables View mode, keeping the current buffer and position.<br><br><b>M-x view-buffer</b> prompts for an existing Emacs buffer, switches to it, and enables View mode. <b>M-x view-file</b> prompts for a file and visits it with View mode enabled.</p>
<h2 id="Follow-Mode">Follow mode</h2>
<p class="tab">Follow mode is a minor mode that makes two windows, both showing the same buffer, scroll as a single tall "virtual window". To use Follow mode, go to a frame with only one window, split it into two side-by-side windows using <b>C-x 3</b>, and then type <b>M-x follow-mode</b>. From then on, you can edit the buffer in either of the two windows, or scroll either one; the other window follows it.<br><br>In Follow mode, if you move point outside the portion visible in one window and into the portion visible in the other window, that selects the other window; again, treating the two as if they were parts of one large window.<br><br>To turn off Follow mode, type <b>M-x follow-mode</b> a second time.</p>
<h2 id="Faces">Text faces</h2>
<p class="tab">Emacs can display text in different styles, called faces. Each face can specify various face attributes, such as the font, height, weight, slant, foreground and background color, and underlining or overlining. Most major modes assign faces to the text automatically, via Font Lock mode. See <a href="#Font-Lock">Font Lock</a>, for more information about how these faces are assigned.<br><br>To see what faces are currently defined, and what they look like, type <b>M-x list-faces-display</b>. With a prefix argument, this prompts for a regular expression, and displays only faces with names matching that regular expression (see <a href="#Regexps">Regexps</a>).<br><br>It's possible for a given face to look different in different frames. For instance, some text terminals do not support all face attributes, particularly font, height, and width, and some support a limited range of colors. Also, most Emacs faces are defined so that their attributes are different on light and dark frame backgrounds, for reasons of legibility. By default, Emacs automatically chooses which set of face attributes to display on each frame, based on the frame's current background color. However, you can override this by giving the variable <b>frame-background-mode</b> a non-nil value. A value of dark makes Emacs treat all frames as if they have a dark background, whereas a value of light makes it treat all frames as if they have a light background.<br><br>You can customize a face to alter its attributes, and save those customizations for future Emacs sessions. See <a href="#Face-Customization">Face Customization</a>, for details.<br><br>The default face is the default for displaying text, and all its attributes are specified. Its background color is also used as the frame's background color. See <a href="#Colors">Colors</a>.<br><br>Another special face is the cursor face. On graphical displays, the background color of this face is used to draw the text cursor. None of the other attributes of this face have any effect; the foreground color for text under the cursor is taken from the background color of the underlying text. On text terminals, the appearance of the text cursor is determined by the terminal, not by the cursor face.<br><br>You can also use X resources to specify attributes of any particular face. See <a href="#Resources">Resources</a>.<br><br>Emacs can display <b>variable-width fonts</b>, but some Emacs commands, particularly indentation commands, do not account for variable character display widths. Therefore, we recommend not using variable-width fonts for most faces, particularly those assigned by Font Lock mode.</p>
<h2 id="Colors">Colors for faces</h2>
<p class="tab">Faces can have various foreground and background colors. When you specify a color for a face&mdash;for instance, when customizing the face (see <a href="#Face-Customization">Face Customization</a>) you can use either a color name or an <a href="/jargon/r/rgb.htm">RGB</a> <a href="/jargon/t/triplet.htm">triplet</a>.<br><br>A color name is a pre-defined name, such as 'dark orange' or 'medium sea green'. To view a list of color names, type <b>M-x list-colors-display</b>. To control the order that colors are shown, customize <b>list-colors-sort</b>. If you run this command on a graphical display, it shows the full range of color names known to Emacs (these are the standard X11 color names, defined in X's <b>rgb.txt</b> file). If you run the command on a text terminal, it shows only a small subset of colors that are safely displayed on such terminals. However, Emacs understands X11 color names even on text terminals; if a face is given a color specified by an X11 color name, it is displayed using the closest-matching terminal color.<br><br>An RGB triplet is a string of the form '<b>#RRGGBB</b>'. Each of the R, G, and B components is a <a href="/jargon/h/hex.htm">hexadecimal</a> number specifying the component's relative intensity, one to four digits long (usually two digits are used). The components must have the same number of digits. For hexadecimal values A to F, either upper or lowercase are acceptable.<br><br>The <b>M-x list-colors-display</b> command also shows the equivalent RGB triplet for each named color. For instance, 'medium sea green' is equivalent to '<b>#3CB371</b>'.<br><br>You can change the foreground and background colors of a face with <b>M-x set-face-foreground</b> and <b>M-x set-face-background</b>. These commands prompt in the minibuffer for a face name and a color, with completion, and then set that face to use the specified color. They affect the face colors on all frames, but their effects do not persist for future Emacs sessions, unlike using the customization buffer or X resources. You can also use frame parameters to set foreground and background colors for a specific frame; See <a href="#Frame-Parameters">Frame Parameters</a>.</p>
<h2 id="Standard-Faces">Standard faces</h2>
<p class="tab">Here are the standard faces for specifying text appearance. You can apply them to specific text when you want the effects they produce.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>default</b></td>
<td>This face is used for ordinary text that doesn't specify any face. Its background color is used as the frame's background color.</td>
</tr>
<tr class="tcw">
<td><b>bold</b></td>
<td>This face uses a bold variant of the default font.</td>
</tr>
<tr class="tcw">
<td><b>italic</b></td>
<td>This face uses an italic variant of the default font.</td>
</tr>
<tr class="tcw">
<td><b>bold-italic</b></td>
<td>This face uses a bold italic variant of the default font.</td>
</tr>
<tr class="tcw">
<td><b>underline</b></td>
<td>This face underlines text.</td>
</tr>
<tr class="tcw">
<td><b>fixed-pitch</b></td>
<td>This face forces use of a fixed-width font. It's reasonable to customize this face to use a different fixed-width font, if you like, but don't make it a variable-width font.</td>
</tr>
<tr class="tcw">
<td><b>variable-pitch</b></td>
<td>This face forces use of a variable-width font.</td>
</tr>
<tr class="tcw">
<td><b>shadow</b></td>
<td>This face is used for making the text less noticeable than the surrounding ordinary text. Usually this is achieved using shades of gray in contrast with either black or white default foreground color.</td>
</tr>
</table>
<p class="tab">Here's an incomplete list of faces used to highlight parts of the text temporarily for specific purposes. (Other modes define their faces for this purpose.)</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>highlight</b></td>
<td>This face is used for text highlighting in various contexts, such as when the mouse cursor is moved over a hyperlink.</td>
</tr>
<tr class="tcw">
<td><b>isearch</b></td>
<td>This face is used to highlight the current Isearch match (see <a href="#Incremental-Search">Incremental Search</a>).</td>
</tr>
<tr class="tcw">
<td><b>query-replace</b></td>
<td>This face is used to highlight the current Query Replace match (see <a href="#Replace">Replace</a>).</td>
</tr>
<tr class="tcw">
<td><b>lazy-highlight</b></td>
<td>This face is used to highlight "lazy matches" for Isearch and Query Replace (matches other than the current one).</td>
</tr>
<tr class="tcw">
<td><b>region</b></td>
<td>This face is used for displaying an active region (see <a href="#Mark">Mark</a>). When Emacs is built with GTK support, its colors are taken from the current GTK theme.</td>
</tr>
<tr class="tcw">
<td><b>secondary-selection</b></td>
<td>This face is used for displaying a secondary X selection (see <a href="#Secondary-Selection">Secondary Selection</a>).</td>
</tr>
<tr class="tcw">
<td><b>trailing-whitespace</b></td>
<td>The face for highlighting excess spaces and tabs at the end of a line when <b>show-trailing-whitespace</b> is non-nil (see <a href="#Useless-Whitespace">Useless Whitespace</a>).</td>
</tr>
<tr class="tcw">
<td><b>escape-glyph</b></td>
<td>The face for displaying control characters and escape sequences (see <a href="#Text-Display">Text Display</a>).</td>
</tr>
<tr class="tcw">
<td><b>nobreak-space</b></td>
<td>The face for displaying "no-break" space characters (see <a href="#Text-Display">Text Display</a>).</td>
</tr>
</table>
<p class="tab">The following faces control the appearance of parts of the Emacs frame:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>mode-line</b></td>
<td>This face is used for the mode line of the currently selected window, and for menu bars when toolkit menus are not used. By default, it's drawn with shadows for a "raised" effect on graphical displays, and drawn as the inverse of the default face on non-windowed terminals.</td>
</tr>
<tr class="tcw">
<td><b>mode-line-inactive</b></td>
<td>Like <b>mode-line</b>, but used for mode lines of the windows other than the selected one (if <b>mode-line-in-non-selected-windows</b> is non-nil). This face inherits from mode-line, so changes in that face affect mode lines in all windows.</td>
</tr>
<tr class="tcw">
<td><b>mode-line-highlight</b></td>
<td>Like <b>highlight</b>, but used for portions of text on mode lines.</td>
</tr>
<tr class="tcw">
<td><b>mode-line-buffer-id</b></td>
<td>This face is used for buffer identification parts in the mode line.</td>
</tr>
<tr class="tcw">
<td><b>header-line</b></td>
<td>Similar to <b>mode-line</b> for a window's header line, which appears at the top of a window only as the mode line appears at the bottom. Most windows do not have a header line&mdash;only some special modes, such Info mode, create one.</td>
</tr>
<tr class="tcw">
<td><b>vertical-border</b></td>
<td>This face is used for the vertical divider between windows on text terminals.</td>
</tr>
<tr class="tcw">
<td><b>minibuffer-prompt</b></td>
<td>This face is used for the prompt strings displayed in the minibuffer. By default, Emacs automatically adds this face to the value of <b>minibuffer-prompt-properties</b>, which is a list of text properties used to display the prompt text. (This variable takes effect when you enter the minibuffer.)</td>
</tr>
<tr class="tcw">
<td><b>fringe</b></td>
<td>The face for the fringes to the left and right of windows on graphic displays. (The fringes are the narrow portions of the Emacs frame between the text area and the window's right and left borders.) See <a href="#Fringes">Fringes</a>.</td>
</tr>
<tr class="tcw">
<td><b>cursor</b></td>
<td>The <b>:background</b> attribute of this face specifies the color of the text cursor. See <a href="#Cursor-Display">Cursor Display</a>.</td>
</tr>
<tr class="tcw">
<td><b>tooltip</b></td>
<td>This face is used for tooltip text. By default, if Emacs is built with GTK support, tooltips are drawn via GTK and this face has no effect. See <a href="#Tooltips">Tooltips</a>.</td>
</tr>
<tr class="tcw">
<td><b>mouse</b></td>
<td>This face determines the color of the mouse pointer.</td>
</tr>
</table>
<p class="tab">The following faces likewise control the appearance of parts of the Emacs frame, but only on text terminals, or when Emacs is built on X with no toolkit support. (For all other cases, the appearance of the respective frame elements is determined by system-wide settings.)</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>scroll-bar</b></td>
<td>This face determines the visual appearance of the scroll bar. See <a href="#Scroll-Bars">Scroll Bars</a>.</td>
</tr>
<tr class="tcw">
<td><b>tool-bar</b></td>
<td>This face determines the color of tool bar icons. See <a href="#Tool-Bars">Tool Bars</a>.</td>
</tr>
<tr class="tcw">
<td><b>menu</b></td>
<td>This face determines the colors and font of Emacs's menus. See <a href="#Menu-Bars">Menu Bars</a>.</td>
</tr>
</table>
<h2 id="Text-Scale">Text scale</h2>
<p class="tab">To increase the height of the default face in the current buffer, type <b>C-x C-+</b> or <b>C-x C-=</b>. To decrease it, type <b>C-x C--</b>. To restore the default (global) face height, type <b>C-x C-0</b>. These keys are all bound to the same command, <b>text-scale-adonly</b>, which looks at the last key typed to determine which action to take.<br><br>The final key of these commands may be repeated without the leading <b>C-x</b>. For instance, <b>C-x C-= C-= C-=</b> increases the face height by three steps. Each step scales the text height by a factor of 1.2; to change this factor, customize the variable <b>text-scale-mode-step</b>. As an exception, a numeric argument of 0 to the text-scale-adonly command restores the default height, similar to typing <b>C-x C-0</b>.<br><br>The commands <b>text-scale-increase</b> and <b>text-scale-decrease</b> increase or decrease the height of the default face, only like <b>C-x C-+</b> and <b>C-x C--</b> respectively. You may find it convenient to bind to these commands, rather than <b>text-scale-adonly</b>.<br><br>The command <b>text-scale-set</b> scales the height of the default face in the current buffer to an absolute level specified by its prefix argument. The above commands automatically enable the minor mode <b>text-scale-mode</b> if the current font scaling is other than 1, and disable it otherwise.</p>
<h2 id="Font-Lock">Font lock mode</h2>
<p class="tab">Font Lock mode is a minor mode, always local to a particular buffer, which assigns faces to (or "fontifies") the text in the buffer. Each buffer's major mode tells Font Lock mode which text to fontify; for instance, programming language modes fontify syntactically relevant constructs like <a href="/jargon/c/comment.htm">comments</a>, <a href="/jargon/s/string.htm">strings</a>, and <a href="/jargon/f/function.htm">function</a> names.<br><br>Font Lock mode is enabled by default. To toggle it in the current buffer, type <b>M-x font-lock-mode</b>. A positive numeric argument unconditionally enables Font Lock mode, and a negative or zero argument disables it.<br><br>Type <b>M-x global-font-lock-mode</b> to toggle Font Lock mode in all buffers. To impose this setting for future Emacs sessions, customize the variable <b>global-font-lock-mode</b> (see <a href="#Easy-Customization">Easy Customization</a>), or add the following line to your init file:</p>
<pre class="tab tcy">(global-font-lock-mode 0)</pre>
<p class="tab">If you have disabled Global Font Lock mode, you can still enable Font Lock for specific major modes by adding the function <b>font-lock-mode</b> to the mode hooks (see <a href="#Hooks">Hooks</a>). For example, to enable Font Lock mode for editing C files, you can do this:</p>
<pre class="tab tcy">(add-hook 'c-mode-hook 'font-lock-mode)</pre>
<p class="tab">Font Lock mode uses several specifically named faces to do its job, including <b>font-lock-string-face</b>, <b>font-lock-comment-face</b>, and others. The easiest way to find them all is to use <b>M-x customize-group &lt;RET&gt; font-lock-faces &lt;RET&gt;</b>. You can then use that customization buffer to customize the appearance of these faces. See <a href="#Face-Customization">Face Customization</a>.<br><br>You can customize the variable <b>font-lock-maximum-decoration</b> to alter the amount of fontification applied by Font Lock mode, for major modes that support this feature. The value should be a number (with 1 representing a minimal amount of fontification; some modes support levels as high as 3); or <b>t</b>, meaning "as high as possible" (the default). You can also specify different numbers for particular major modes; for example, to use level 1 for C/C++ modes, and the default level otherwise, use the value</p>
<pre class="tab tcy">'((c-mode . 1) (c++-mode . 1)))</pre>
<p class="tab">Comment and string fontification (or "syntactic" fontification) relies on analysis of the syntactic structure of the buffer text. For the sake of speed, some modes, including Lisp mode, rely on a special convention: an open-parenthesis or open-brace in the leftmost column always defines the beginning of a defun, and is thus always outside any string or comment. Therefore, avoid placing an open-parenthesis or open-brace in the leftmost column, if it's inside a string or comment. See <a href="#Left-Margin-Paren">Left Margin Paren</a>, for details.<br><br>The variable <b>font-lock-beginning-of-syntax-function</b>, which is always buffer-local, specifies how Font Lock mode can find a position guaranteed to be outside any comment or string. In modes which use the leftmost column parenthesis convention, the default value of the variable is <b>beginning-of-defun</b> that tells Font Lock mode to use the convention. If you set this variable to nil, Font Lock no longer relies on the convention. This avoids incorrect results, but the price is that, in some cases, fontification for a changed text must rescan buffer text from the beginning of the buffer. This can considerably slow down redisplay while scrolling, particularly if you are close to the end of a large buffer.<br><br>Font Lock highlighting patterns already exist for most modes, but you may want to fontify additional patterns. You can use the function <b>font-lock-add-keywords</b>, to add highlighting patterns for a particular mode. For example, to highlight '<b>FIXME:</b>' words in C comments, use this:</p>
<pre class="tab tcy">(add-hook 'c-mode-hook
	(lambda ()
		(font-lock-add-keywords
		 nil
		 '(("\\&lt;\\(FIXME\\):"
		 1
		 font-lock-warning-face
		 t))
		)
	)
)</pre>
<p class="tab">To remove keywords from the <b>font-lock</b> highlighting patterns, use the function <b>font-lock-remove-keywords</b>.</p>
<p class="tab">Fontifying large buffers can take a long time. To avoid large delays when a file is visited, Emacs initially fontifies only the visible portion of a buffer. As you scroll through the buffer, each portion that becomes visible is fontified as soon as it is displayed; this type of Font Lock is called Just-In-Time (or JIT) Lock. You can control how JIT Lock behaves, including telling it to perform fontification while idle, by customizing variables in the customization group '<b>jit-lock</b>'. See <a href="#Specific-Customization">Specific Customization</a>.</p>
<h2 id="Highlight-Interactively">Interactive highlighting</h2>
<p class="tab">Highlight Changes mode is a minor mode that highlights the parts of the buffer that were changed most recently, by giving that text a different face. To enable or disable Highlight Changes mode, use <b>M-x highlight-changes-mode</b>.<br><br>"Hi Lock" mode is a minor mode that highlights text that matches regular expressions you specify. For example, you can use it to highlight all the references to a certain variable in a program source file, highlight certain parts in a voluminous output of some program, or highlight certain names in an article. To enable or disable Hi Lock mode, use the command <b>M-x hi-lock-mode</b>. To enable Hi Lock mode for all buffers, use <b>M-x global-hi-lock-mode</b> or place (<b>global-hi-lock-mode 1</b>) in your .emacs file.<br><br>Hi Lock mode works like Font Lock mode (see <a href="#Font-Lock">Font Lock</a>), except that you specify explicitly the regular expressions to highlight. You control them with these commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>C-x w h</b> <i>regexp</i> <b>&lt;RET&gt;</b> <i>face</i> <b>&lt;RET&gt;</b></td>
<td>Highlight text that matches <i>regexp</i> using face <i>face</i> (<b>highlight-regexp</b>). The highlighting remains as long as the buffer is loaded. For example, to highlight all occurrences of the word "whim" using the default face (a yellow background) <b>C-x w h whim &lt;RET&gt; &lt;RET&gt;</b>. Any face can be used for highlighting, Hi Lock provides several of its own and these are pre-loaded into a list of default values. While being prompted for a face use <b>M-n</b> and <b>M-p</b> to cycle through them.<br><br>You can use this command multiple times, specifying various regular expressions to highlight in different ways.</td>
</tr>
<tr class="tcw">
<td><b>C-x w r</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Unhighlight <i>regexp</i> (<b>unhighlight-regexp</b>).<br><br>If you invoke this from the menu, you select the expression to unhighlight from a list. If you invoke this from the keyboard, you use the minibuffer. It shows the most recently added regular expression; use <b>M-p</b> to show the next older expression and <b>M-n</b> to select the next newer expression. (You can also type the expression by hand, with completion.) When the expression you want to unhighlight appears in the minibuffer, press <b>&lt;RET&gt;</b> to exit the minibuffer and unhighlight it.</td>
</tr>
<tr class="tcw">
<td><b>C-x w l</b> <i>regexp</i> <b>&lt;RET&gt;</b> <i>face</i> <b>&lt;RET&gt;</b></td>
<td>Highlight entire lines containing a match for regexp, using face <i>face</i> (<b>highlight-lines-matching-regexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x w b</b></td>
<td>Insert all the current highlighting regexp/face pairs into the buffer at point, with comment <a href="/jargon/d/delimite.htm">delimiters</a> to prevent them from changing your program. (This key binding runs the <b>hi-lock-write-interactive-patterns</b> command.)<br><br>These patterns are extracted from the comments, if appropriate, if you invoke <b>M-x hi-lock-find-patterns</b>, or if you visit the file while Hi Lock mode is enabled (since that runs <b>hi-lock-find-patterns</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x w i</b></td>
<td>Extract regexp/face pairs from comments in the current buffer (<b>hi-lock-find-patterns</b>). Thus, you can enter patterns interactively with <b>highlight-regexp</b>, store them into the file with <b>hi-lock-write-interactive-patterns</b>, edit them (perhaps including different faces for different parenthesized parts of the match), and finally use this command (<b>hi-lock-find-patterns</b>) to have Hi Lock highlight the edited patterns.<br><br>The variable <b>hi-lock-file-patterns-policy</b> controls whether Hi Lock mode should automatically extract and highlight patterns found in a file when it is visited. Its value can be <b>nil</b> (never highlight), <b>ask</b> (query the user), or a function. If it's a function, <b>hi-lock-find-patterns</b> calls it with the patterns as argument; if the function returns non-nil, the patterns are used. The default is <b>ask</b>. Note that patterns are always highlighted if you call <b>hi-lock-find-patterns</b> directly, regardless of the value of this variable.</td>
</tr>
</table>
<p class="tab">Also, <b>hi-lock-find-patterns</b> does nothing if the current major mode's symbol is a member of the list <b>hi-lock-exclude-modes</b>.</p>
<h2 id="Fringes">Window fringes</h2>
<p class="tab">On graphical displays, each Emacs window normally has narrow fringes on the left and right edges. The fringes are used to display symbols that provide information about the text in the window. You can type <b>M-x fringe-mode</b> to disable the fringes, or modify their width. This command affects fringes in all frames; to modify fringes on the selected frame only, use <b>M-x set-fringe-style</b>.<br><br>The most common use of the fringes is to indicate a continuation line (see <a href="#Continuation-Lines">Continuation Lines</a>). When one line of text is split into multiple screen lines, the left fringe shows a curving arrow for each screen line except the first, indicating that "this is not the real beginning". The right fringe shows a curving arrow for each screen line except the last, indicating that "this is not the real end". If the line's direction is <b>right-to-left</b> (see <a href="#Bidirectional-Editing">Bidirectional Editing</a>), the meanings of the curving arrows in the fringes are swapped.<br><br>The fringes indicate line truncation with short horizontal arrows meaning "there's more text on this line which is scrolled horizontally out of view". Clicking the mouse on one of the arrows scrolls the display horizontally in the direction of the arrow.<br><br>The fringes can also indicate other things, such as buffer boundaries (see <a href="#Displaying-Boundaries">Displaying Boundaries</a>), and where a program you are debugging is executing (see <a href="#Debuggers">Debuggers</a>).<br><br>The fringe is also used for drawing the cursor, if the current line is exactly as wide as the window and point is at the end of the line. To disable this, change the variable <b>overflow-newline-into-fringe</b> to nil; this causes Emacs to continue or truncate lines that are exactly as wide as the window.</p>
<h2 id="Displaying-Boundaries">Displaying boundaries</h2>
<p class="tab">On graphical displays, Emacs can indicate the buffer boundaries in the fringes. If you enable this feature, the first line and the last line are marked with angle images in the fringes. This can be combined with up and down arrow images which say whether it is possible to scroll the window.<br><br>The buffer-local variable <b>indicate-buffer-boundaries</b> controls how the buffer boundaries and window scrolling is indicated in the fringes. If the value is left or right, both angle and arrow bitmaps are displayed in the left or right fringe, respectively.<br><br>If value is an alist, each element <b>(indicator . position)</b> specifies the position of one of the indicators. The indicator must be one of <b>top</b>, <b>bottom</b>, <b>up</b>, <b>down</b>, or <b>t</b> which specifies the default position for the indicators not present in the alist. The position is one of <b>left</b>, <b>right</b>, or <b>nil</b> which specifies not to show this indicator.<br><br>For example, <b>((top . left) (t . right))</b> places the top angle bitmap in left fringe, the bottom angle bitmap in right fringe, and both arrow bitmaps in right fringe. To show only the angle bitmaps in the left fringe, but no arrow bitmaps, use <b>((top . left) (bottom . left))</b>.</p>
<h2 id="Useless-Whitespace">Useless whitespace</h2>
<p class="tab">It is easy to leave unnecessary spaces at the end of a line, or empty lines at the end of a buffer, without realizing it. In most cases, this trailing <a href="/jargon/w/whitspac.htm">whitespace</a> has no effect, but sometimes it is a nuisance.<br><br>You can make trailing whitespace at the end of a line visible by setting the buffer-local variable <b>show-trailing-whitespace</b> to <b>t</b>. Then Emacs displays trailing whitespace, using the face trailing-whitespace.<br><br>This feature does not apply when point is at the end of the line containing the whitespace. Strictly speaking, that is "trailing whitespace" nonetheless, but displaying it specially in that case looks ugly while you are typing in new text. In this special case, the location of point is enough to show you that the spaces are present.<br><br>Type <b>M-x delete-trailing-whitespace</b> to delete all trailing whitespace. This command deletes all extra spaces at the end of each line in the buffer, and all empty lines at the end of the buffer; to ignore the latter, change the variable <b>delete-trailing-lines</b> to <b>nil</b>. If the region is active, the command instead deletes extra spaces at the end of each line in the region.<br><br>On graphical displays, Emacs can indicate unused lines at the end of the window with a small image in the left fringe (see <a href="#Fringes">Fringes</a>). The image appears for screen lines that do not correspond to any buffer text, so blank lines at the end of the buffer stand out because they lack this image. To enable this feature, set the buffer-local variable <b>indicate-empty-lines</b> to a non-nil value. You can enable or disable this feature for all new buffers by setting the default value of this variable, e.g., <b>(setq-default indicate-empty-lines t)</b>.<br><br>Whitespace mode is a buffer-local minor mode that lets you "visualize" many kinds of whitespace in the buffer, by either drawing the whitespace characters with a special face or displaying them as special glyphs. To toggle this mode, type <b>M-x whitespace-mode</b>. The kinds of whitespace visualized are determined by the list variable <b>whitespace-style</b>. Here is a partial list of possible elements (see the variable's documentation for the full list):</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>face</b></td>
<td>Enable all visualizations which use special faces. This element has a special meaning: if it's absent from the list, none of the other visualizations take effect except <b>space-mark</b>, <b>tab-mark</b>, and <b>newline-mark</b>.</td>
</tr>
<tr class="tcw">
<td><b>trailing</b></td>
<td>Highlight trailing whitespace.</td>
</tr>
<tr class="tcw">
<td><b>tabs</b></td>
<td>Highlight <a href="/jargon/t/tab.htm">tab</a> characters.</td>
</tr>
<tr class="tcw">
<td><b>spaces</b></td>
<td>Highlight space and non-breaking space characters.</td>
</tr>
<tr class="tcw">
<td><b>lines</b></td>
<td>Highlight lines longer than 80 lines. To change the column limit, customize the variable <b>whitespace-line-column</b>.</td>
</tr>
<tr class="tcw">
<td><b>newline</b></td>
<td>Highlight newlines.</td>
</tr>
<tr class="tcw">
<td><b>empty</b></td>
<td>Highlight empty lines.</td>
</tr>
<tr class="tcw">
<td><b>space-mark</b></td>
<td>Draw space and non-breaking characters with a special glyph.</td>
</tr>
<tr class="tcw">
<td><b>tab-mark</b></td>
<td>Draw tab characters with a special glyph.</td>
</tr>
<tr class="tcw">
<td><b>newline-mark</b></td>
<td>Draw <a href="/jargon/n/newline.htm">newline</a> characters with a special glyph.</td>
</tr>
</table>
<h2 id="Selective-Display">Selective display</h2>
<p class="tab">Emacs can hide lines indented more than a given number of columns. You can use this to get an overview of a part of a program.<br><br>To hide lines in the current buffer, type <b>C-x $ (set-selective-display)</b> with a numeric argument <i>n</i>. Then lines with at least <i>n</i> columns of indentation disappear from the screen. The only indication of their presence is that three dots ('<b>...</b>') appear at the end of each visible line that is followed by one or more hidden ones.<br><br>The commands <b>C-n</b> and <b>C-p</b> move across the hidden lines as if they were not there.<br><br>The hidden lines are still present in the buffer, and most editing commands see them as usual, so you may find point in the middle of the hidden text. When this happens, the cursor appears at the end of the previous line, after the three dots. If point is at the end of the visible line, before the newline that ends it, the cursor appears before the three dots.<br><br>To make all lines visible again, type <b>C-x $</b> with no argument.<br><br>If you set the variable <b>selective-display-ellipses</b> to <b>nil</b>, the three dots do not appear at the end of a line that precedes hidden lines. Then there is no visible indication of the hidden lines. This variable becomes local automatically when set.<br><br>See also <a href="#Outline-Mode">Outline Mode</a> for another way to hide part of the text in a buffer.</p>
<h2 id="Optional-Mode-Line">Optional mode line features</h2>
<p class="tab">The buffer percentage <b>pos</b> indicates the percentage of the buffer above the top of the window. You can additionally display the size of the buffer by typing <b>M-x size-indication-mode</b> to turn on Size Indication mode. The size is displayed immediately following the buffer percentage like this:</p>
<pre class="tab">POS of SIZE</pre>
<p class="tab">Here SIZE is the human readable representation of the number of characters in the buffer, which means that <a href="/jargon/k/kilobyte.htm">k</a> for 10^3, <a href="/jargon/m/megabyte.htm">M</a> for 10^6, <a href="/jargon/g/gigabyte.htm">G</a> for 10^9, etc., are used to abbreviate.<br><br>The current line number of point appears in the mode line when Line Number mode is enabled. Use the command <b>M-x line-number-mode</b> to turn this mode on and off; normally it is on, by default. The line number appears after the buffer percentage <b>pos</b>, with the letter '<b>L</b>' to indicate what it is.<br><br>Similarly, you can display the current column number by turning on Column number mode with <b>M-x column-number-mode</b>. The column number is indicated by the letter '<b>C</b>'. However, when both of these modes are enabled, the line and column numbers are displayed in parentheses, the line number first, rather than with '<b>L</b>' and '<b>C</b>'. For example: '<b>(561,2)</b>'. See <a href="#Minor-Modes">Minor Modes</a>, for more information about minor modes and about how to use these commands.<br><br>If you have narrowed the buffer (see <a href="#Narrowing">Narrowing</a>), the displayed line number is relative to the accessible portion of the buffer. Thus, it isn't suitable as an argument to <b>goto-line</b>. (Use <b>what-line</b> command to see the line number relative to the whole file.)<br><br>If the buffer is very large (larger than the value of <b>line-number-display-limit</b>), Emacs won't compute the line number, because that would be too slow; therefore, the line number won't appear on the mode-line. To remove this limit, set <b>line-number-display-limit</b> to <b>nil</b>.<br><br>Line-number computation can also be slow if the lines in the buffer are too long. For this reason, Emacs doesn't display line numbers if the average width, in characters, of lines near point is larger than the value of <b>line-number-display-limit-width</b>. The default value is 200 characters.<br><br>Emacs can optionally display the time and system load in all mode lines. To enable this feature, type <b>M-x display-time</b> or customize the option <b>display-time-mode</b>. The information added to the mode line looks like this:</p>
<pre class="tab tcy">hh:mmpm l.ll</pre>
<p class="tab">Here <b>hh</b> and <b>mm</b> are the hour and minute, followed always by '<b>am</b>' or '<b>pm</b>'. <b>l.ll</b> is the average number, collected for the last few minutes, of processes in the whole system that were either running or ready to run (i.e., were waiting for an available processor). (Some fields may be missing if your operating system cannot support them.) If you prefer time display in 24-hour format, set the variable <b>display-time-24hr-format</b> to <b>t</b>.<br><br>The word '<b>Mail</b>' appears after the load level if there is mail for you that you have not read yet. On graphical displays, you can use an icon instead of '<b>Mail</b>' by customizing <b>display-time-use-mail-icon</b>; this may save some space on the mode line. You can customize <b>display-time-mail-face</b> to make the mail indicator prominent. Use <b>display-time-mail-file</b> to specify the mail file to check, or set <b>display-time-mail-directory</b> to specify the directory to check for incoming mail (any nonempty regular file in the directory is considered as "newly arrived mail").<br><br>When running Emacs on a laptop computer, you can display the battery charge on the mode-line, using the command <b>display-battery-mode</b> or customizing the variable <b>display-battery-mode</b>. The variable <b>battery-mode-line-format</b> determines the way the battery charge is displayed; the exact mode-line message depends on the operating system, and it usually shows the current battery charge as a percentage of the total charge.<br><br>On graphical displays, the mode line is drawn as a 3D box. If you don't like this effect, you can disable it by customizing the mode-line face and setting its box attribute to <b>nil</b>. See <a href="#Face-Customization">Face Customization</a>.<br><br>By default, the mode line of non-selected windows is displayed in a different face, called <b>mode-line-inactive</b>. Only the selected window is displayed in the mode-line face. This helps show which window is selected. When the minibuffer is selected, because it has no mode line, the window where you activated the minibuffer has its mode line displayed using <b>mode-line</b>; as a result, ordinary entry to the minibuffer does not change any mode lines.<br><br>You can disable use of <b>mode-line-inactive</b> by setting variable <b>mode-line-in-non-selected-windows</b> to <b>nil</b>; then all mode lines are displayed in the mode-line face.<br><br>You can customize the mode line display for each of the end-of-line formats by setting each of the variables <b>eol-mnemonic-unix</b>, <b>eol-mnemonic-dos</b>, <b>eol-mnemonic-mac</b>, and <b>eol-mnemonic-undecided</b> to the strings you prefer.</p>
<h2 id="Text-Display">How text is displayed</h2>
<p class="tab">Most characters are printing characters: when they appear in a buffer, they are displayed literally on the screen. Printing characters include <a href="/jargon/a/ascii.htm">ASCII</a> numbers, letters, and punctuation characters, and many non-ASCII characters.<br><br>The ASCII character set contains non-printing control characters. Two of these are displayed specially: the <a href="/jargon/n/newline.htm">newline</a> character (Unicode code point U+000A) is displayed by starting a new line, while the <a href="/jargon/t/tab.htm">tab</a> character (U+0009) is displayed as a space that extends to the next tab stop column (normally every 8 columns). The number of spaces per tab is controlled by the buffer-local variable <b>tab-width</b>, which must have an <a href="/jargon/i/integer.htm">integer</a> value between 1 and 1000, inclusive. Note that how the tab character in the buffer is displayed has nothing to do with the definition of <b>&lt;TAB&gt;</b> as a command.<br><br>Other ASCII control characters, whose codes are below U+0020 (<a href="/jargon/o/octal.htm">octal</a> 40, <a href="/jargon/d/decimal.htm">decimal</a> 32), are displayed as a caret ('<b>^</b>') followed by the non-control version of the character, with the escape-glyph face. For instance, the '<b>control-A</b>' character, U+0001, is displayed as '<b>^A</b>'.<br><br>The raw bytes with codes U+0080 (octal 200) through U+009F (octal 237) are displayed as octal escape sequences, with the escape-glyph face. For instance, character code U+0098 (octal 230) is displayed as '<b>\230</b>'. If you change the buffer-local variable <b>ctl-arrow</b> to <b>nil</b>, the ASCII control characters are also displayed as octal escape sequences instead of caret escape sequences.<br><br>Some non-ASCII characters have the same appearance as an ASCII space or hyphen (minus) character. Such characters can cause problems if they are entered into a buffer without your realization, e.g., by yanking; for instance, source code compilers often do not treat non-ASCII spaces as whitespace characters. To deal with this problem, Emacs displays such characters specially: it displays U+00A0 (no-break space) with the <b>nobreak-space</b> face, and it displays U+00AD (soft hyphen), U+2010 (hyphen), and U+2011 (non-breaking hyphen) with the <b>escape-glyph</b> face. To disable this, change the variable <b>nobreak-char-display</b> to <b>nil</b>. If you give this variable a non-nil and non-t value, Emacs instead displays such characters as a highlighted backslash followed by a space or hyphen.<br><br>You can customize the way any particular character code is displayed by means of a display table.<br><br>On graphical displays, some characters may have no glyphs in any of the fonts available to Emacs. These glyphless characters are normally displayed as boxes containing the <a href="/jargon/h/hex.htm">hexadecimal</a> character code. Similarly, on text terminals, characters that are not displayed using the terminal encoding (see <a href="#Terminal-Coding">Terminal Coding</a>) are normally displayed as question signs. You can control the display method by customizing the variable <b>glyphless-char-display-control</b>.</p>
<h2 id="Cursor-Display">Displaying the cursor</h2>
<p class="tab">On a text terminal, the cursor's appearance is controlled by the terminal, largely out of the control of Emacs. Some terminals offer two different cursors: a "visible" static cursor, and a "very visible" blinking cursor. By default, Emacs uses the very visible cursor, and switches to it when you start or resume Emacs. If the variable <b>visible-cursor</b> is nil when Emacs starts or resumes, it uses the normal cursor.<br><br>On a graphical display, many more properties of the text cursor is altered. To customize its color, change the <b>:background</b> attribute of the face named cursor (see <a href="#Face-Customization">Face Customization</a>). (The other attributes of this face have no effect; the text shown under the cursor is drawn using the frame's background color.) To change its shape, customize the buffer-local variable <b>cursor-type</b>; possible values are <b>box</b> (the default), <b>hollow</b> (a hollow box), <b>bar</b> (a vertical bar), <b>(bar . n)</b> (a vertical bar <b>n</b> pixels wide), <b>hbar</b> (a horizontal bar), <b>(hbar . n)</b> (a horizontal bar <b>n</b> pixels tall), or <b>nil</b> (no cursor at all).<br><br>To disable cursor blinking, change the variable <b>blink-cursor-mode</b> to <b>nil</b> (see <a href="#Easy-Customization">Easy Customization</a>), or add the line (<b>blink-cursor-mode 0</b>) to your init file. Alternatively, you can change how the cursor looks when it "blinks off" by customizing the list variable <b>blink-cursor-alist</b>. Each element in the list should have the form <b>(on-type . off-type)</b>; this means that if the cursor is displayed as <b>on-type</b> when it blinks on (where <b>on-type</b> is one of the cursor types described above), then it is displayed as <b>off-type</b> when it blinks off.<br><br>Some characters, such as tab characters, are "extra wide". When the cursor is positioned over such a character, it is normally drawn with the default character width. You can make the cursor stretch to cover wide characters, by changing the variable <b>x-stretch-cursor</b> to a non-nil value.<br><br>The cursor normally appears in non-selected windows as a non-blinking hollow box. (For a bar cursor, it instead appears as a thinner bar.) To turn off cursors in non-selected windows, change the variable <b>cursor-in-non-selected-windows</b> to <b>nil</b>.<br><br>To make the cursor even more visible, you can use HL Line mode, a minor mode that highlights the line containing point. Use <b>M-x hl-line-mode</b> to enable or disable it in the current buffer. <b>M-x global-hl-line-mode</b> enables or disables the same mode globally.</p>
<h2 id="Line-Truncation">Line truncation</h2>
<p class="tab">As an alternative to continuation (see <a href="#Continuation-Lines">Continuation Lines</a>), Emacs can display long lines by truncation. This means that all the characters that do not fit in the width of the screen or window do not appear at all. On graphical displays, a small straight arrow in the fringe indicates truncation at either end of the line. On text terminals, this is indicated with '<b>$</b>' signs in the leftmost and/or rightmost columns.<br><br>Horizontal scrolling automatically causes line truncation (see <a href="#Horizontal-Scrolling">Horizontal Scrolling</a>). You can explicitly enable line truncation for a particular buffer with the command <b>M-x toggle-truncate-lines</b>. This works by locally changing the variable <b>truncate-lines</b>. If that variable is non-nil, long lines are truncated; if it's nil, they are continued onto multiple screen lines. Setting the variable <b>truncate-lines</b> in any way makes it local to the current buffer; until that time, the default value, which is normally nil, is in effect.<br><br>If a split window becomes too narrow, Emacs may automatically enable line truncation. See <a href="#Split-Window">Split Window</a>, for the variable <b>truncate-partial-width-windows</b> which controls this.</p>
<h2 id="Visual-Line-Mode">Visual line mode</h2>
<p class="tab">Another alternative to ordinary line continuation is to use word wrap. Here, each long logical line is divided into two or more screen lines, like in ordinary line continuation. However, Emacs attempts to wrap the line at word boundaries near the right window edge. This makes the text easier to read, as wrapping does not occur in the middle of words.<br><br>Word wrap is enabled by Visual Line mode, an optional minor mode. To turn on Visual Line mode in the current buffer, type <b>M-x visual-line-mode</b>; repeating this command turns it off. You can also turn on Visual Line mode using the menu bar: in the Options menu, select the 'Line Wrapping in this Buffer' submenu, followed by the 'Word Wrap (Visual Line Mode)' menu item. While Visual Line mode is enabled, the mode-line shows the string '<b>wrap</b>' in the mode display. The command <b>M-x global-visual-line-mode</b> toggles Visual Line mode in all buffers.<br><br>In Visual Line mode, some editing commands work on-screen lines instead of logical lines: <b>C-a</b> (<b>beginning-of-visual-line</b>) moves to the beginning of the screen line, <b>C-e</b> (<b>end-of-visual-line</b>) moves to the end of the screen line, and <b>C-k</b> (<b>kill-visual-line</b>) kills text to the end of the screen line.<br><br>To move by logical lines, use the commands <b>M-x next-logical-line</b> and <b>M-x previous-logical-line</b>. These move point to the next logical line and the previous logical line respectively, regardless of whether Visual Line mode is enabled. If you use these commands frequently, it may be convenient to assign key bindings to them. See <a href="#Init-Rebinding">Init Rebinding</a>.<br><br>By default, word-wrapped lines do not display fringe indicators. Visual Line mode is often used to edit files that contain many long logical lines, so having a fringe indicator for each wrapped line would be visually distracting. You can change this by customizing the variable <b>visual-line-fringe-indicators</b>.</p>
<h2 id="Display-Custom">Customization of display</h2>
<p class="tab">This section describes variables that control miscellaneous aspects of the appearance of the Emacs screen. Beginning users can skip it.<br><br>If the variable <b>visible-bell</b> is non-nil, Emacs attempts to make the whole screen blink when it would normally make an audible bell sound. This variable has no effect if your terminal does not have a way to make the screen blink.<br><br>The variable <b>echo-keystrokes</b> controls the echoing of multi-character keys; its value is the number of seconds of pause required to cause echoing to start, or zero, meaning don't echo at all. The value takes effect when there is something to echo. See <a href="#Echo-Area">Echo Area</a>.<br><br>On graphical displays, Emacs displays the mouse pointer as an hourglass if Emacs is busy. To disable this feature, set the variable <b>display-hourglass</b> to nil. The variable <b>hourglass-delay</b> determines the number of seconds of "busy time" before the hourglass is shown; the default is 1.<br><br>If the mouse pointer lies inside an Emacs frame, Emacs makes it invisible each time you type a character to insert text, to prevent it from obscuring the text. (To be precise, the hiding occurs when you type a "self-inserting" character. See <a href="#Inserting-Text">Inserting Text</a>.) Moving the mouse pointer makes it visible again. To disable this feature, set the variable <b>make-pointer-invisible</b> to <b>nil</b>.<br><br>On graphical displays, the variable <b>underline-minimum-offset</b> determines the minimum distance between the baseline and underline, in pixels, for underlined text. By default, the value is 1; increasing it may improve the legibility of underlined text for certain fonts. (However, Emacs never draws the underline below the current line area.) The variable <b>x-underline-at-descent-line</b> determines how to draw underlined text. The default is <b>nil</b>, which means to draw it at the baseline level of the font; if you change it to nil, Emacs draws the underline at the same height as the font's descent line.<br><br>The variable <b>overline-margin</b> specifies the vertical position of an overline above the text, including the height of the overline itself, in pixels; the default is 2.<br><br>On some text terminals, bold face and inverse video together result in text that is hard to read. Call the function <b>tty-suppress-bold-inverse-default-colors</b> with a non-nil argument to suppress the effect of bold-face in this case.</p>
<h2 id="Search">Searching and replacement</h2>
<p class="tab">Like other editors, Emacs has commands to search for occurrences of a string. Emacs also has commands to replace occurrences of a string with a different string. There are also commands that do the same thing, but search for patterns instead of fixed strings.<br><br>You can also search multiple files under the control of a tags table (see <a href="#Tags-Search">Tags Search</a>) or through the Dired A command (see <a href="#Operating-on-Files">Operating on Files</a>), or ask the grep program to do it (see <a href="#Grep-Searching">Grep Searching</a>).</p>
<ul>
<li><a href="#Incremental-Search">Incremental Search</a>: Search happens as you type the string.</li>
<li><a href="#Nonincremental-Search">Nonincremental Search</a>: Specify entire string and then search.</li>
<li><a href="#Word-Search">Word Search</a>: Search for sequence of words.</li>
<li><a href="#Symbol-Search">Symbol Search</a>: Search for a source code symbol.</li>
<li><a href="#Regexp-Search">Regexp Search</a>: Search for match for a regexp.</li>
<li><a href="#Regexps">Regexps</a>: Syntax of regular expressions.</li>
<li><a href="#Regexp-Backslash">Regexp Backslash</a>: Regular expression constructs starting with &#96;\'.</li>
<li><a href="#Regexp-Example">Regexp Example</a>: A complex regular expression explained.</li>
<li><a href="#Search-Case">Search Case</a>: To ignore case while searching, or not.</li>
<li><a href="#Replace">Replace</a>: Search, and replace some or all matches.</li>
<li><a href="#Other-Repeating-Search">Other Repeating Search</a>: Operating on all matches for some regexp.</li>
</ul>
<h2 id="Incremental-Search">Incremental search</h2>
<p class="tab">The principal search command in Emacs is incremental: it begins searching as soon as you type the first character of the search string. As you type in the search string, Emacs shows you where the string (as you have typed it so far) would be found. When you have typed enough characters to identify the place you want, you can stop. Depending on what you plan to do next, you may or may not need to terminate the search explicitly with <b>&lt;RET&gt;</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>C-s</b></td>
<td>Incremental search forward (<b>isearch-forward</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-r</b></td>
<td>Incremental search backward (<b>isearch-backward</b>).</td>
</tr>
</table>
<ul>
<li><a href="#Basic-Isearch">Basic Isearch</a>: Basic incremental search commands.</li>
<li><a href="#Repeat-Isearch">Repeat Isearch</a>: Searching for the same string again.</li>
<li><a href="#Error-in-Isearch">Error in Isearch</a>: When your string is not found.</li>
<li><a href="#Special-Isearch">Special Isearch</a>: Special input in incremental search.</li>
<li><a href="#Isearch-Yank">Isearch Yank</a>: Commands that grab text into the search string or else edit the search string.</li>
<li><a href="#Isearch-Scroll">Isearch Scroll</a>: Scrolling during an incremental search.</li>
<li><a href="#Isearch-Minibuffer">Isearch Minibuffer</a>: Incremental search of the minibuffer history.</li>
</ul>
<h2 id="Basic-Isearch">Basics of incremental search</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>C-s</b></td>
<td>Begin incremental search (<b>isearch-forward</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-r</b></td>
<td>Begin reverse incremental search (<b>isearch-backward</b>).</td>
</tr>
</table>
<p class="tab"><b>C-s</b> (<b>isearch-forward</b>) starts a forward incremental search. It reads characters from the keyboard, and moves point only past the end of the next occurrence of those characters in the buffer.<br><br>For instance, if you type <b>C-s</b> and then <b>F</b>, that puts the cursor after the first '<b>F</b>' that occurs in the buffer after the starting point. Then if you then type <b>O</b>, the cursor moves to only after the first '<b>FO</b>'; the '<b>F</b>' in that '<b>FO</b>' might not be the first '<b>F</b>' previously found. After another O, the cursor moves to only after the first '<b>FOO</b>'.<br><br>At each step, Emacs highlights the current match -- the buffer text that matches the search string -- using the isearch face (see <a href="#Faces">Faces</a>). The current search string is also displayed in the echo area.<br><br>If you make a mistake typing the search string, type <b>&lt;DEL&gt;</b>. Each <b>&lt;DEL&gt;</b> cancels the last character of the search string.<br><br>When you are satisfied with the place you have reached, type <b>&lt;RET&gt;</b>. This stops searching, leaving the cursor where the search brought it. Also, any command not specially meaningful in searches stops the searching and is then executed. Thus, typing <b>C-a</b> exits the search and then moves to the beginning of the line. <b>&lt;RET&gt;</b> is necessary only if the next command you want to type is a printing character, <b>&lt;DEL&gt;</b>, <b>&lt;RET&gt;</b>, or another character that is special within searches (<b>C-q</b>, <b>C-w</b>, <b>C-r</b>, <b>C-s</b>, <b>C-y</b>, <b>M-y</b>, <b>M-r</b>, <b>M-c</b>, <b>M-e</b>, and some others described below).<br><br>As a special exception, entering <b>&lt;RET&gt;</b> when the search string is empty launches nonincremental search (see <a href="#Nonincremental-Search">Nonincremental Search</a>).<br><br>When you exit the incremental search, it adds the original value of point to the mark ring, without activating the mark; you can thus use <b>C-u C-&lt;SPC&gt;</b> to return to where you were before beginning the search. See <a href="#Mark-Ring">Mark Ring</a>. It only does this if the mark was not already active.<br><br>To search backwards, use <b>C-r</b> (<b>isearch-backward</b>) instead of <b>C-s</b> to start the search. A backward search finds matches that end before the starting point, only as a forward search finds matches that begin after it.</p>
<h2 id="Repeat-Isearch">Repeating incremental search</h2>
<p class="tab">Suppose you search forward for '<b>FOO</b>' and find a match, but not the one you expected to find: the '<b>FOO</b>' you were aiming for occurs later in the buffer. In this event, type another <b>C-s</b> to move to the next occurrence of the search string. You can repeat this any number of times. If you overshoot, you can cancel some <b>C-s</b> characters with <b>&lt;DEL&gt;</b>. Similarly, each <b>C-r</b> in a backward incremental search repeats the backward search.<br><br>If you pause for a little while during incremental search, Emacs highlights all the other possible matches for the search string that are present on the screen. This helps you anticipate where you can get to by typing <b>C-s</b> or <b>C-r</b> to repeat the search. The other matches are highlighted differently from the current match, using the customizable face <b>lazy-highlight</b> (see <a href="#Faces">Faces</a>). If you don't like this feature, you can disable it by setting <b>isearch-lazy-highlight</b> to <b>nil</b>.<br><br>After exiting a search, you can search for the same string again by typing only <b>C-s C-s</b>. The first <b>C-s</b> is the key that invokes incremental search, and the second <b>C-s</b> means "search again". Similarly, <b>C-r C-r</b> searches backward for the last search string. In determining the last search string, it doesn't matter whether the string was searched for with <b>C-s</b> or <b>C-r</b>.<br><br>If you are searching forward but you realize you were looking for something before the starting point, type <b>C-r</b> to switch to a backward search, leaving the search string unchanged. Similarly, <b>C-s</b> in a backward search switches to a forward search.<br><br>If a search is failing and you ask to repeat it by typing another <b>C-s</b>, it starts again from the beginning of the buffer. Repeating a failing reverse search with <b>C-r</b> starts again from the end. This is called wrapping around, and '<b>Wrapped</b>' appears in the search prompt once this has happened. If you keep on going past the original starting point of the search, it changes to '<b>Overwrapped</b>', which means that you are revisiting matches that you have already seen.<br><br>To reuse earlier search strings, use the search ring. The commands <b>M-p</b> and <b>M-n</b> move through the ring to pick a search string to reuse. These commands leave the selected search ring element in the minibuffer, where you can edit it.<br><br>To edit the current search string in the minibuffer without replacing it with items from the search ring, type <b>M-e</b>. Type <b>C-s</b> or <b>C-r</b> to finish editing the string and search for it.</p>
<h2 id="Error-in-Isearch">Errors in incremental Isearch</h2>
<p class="tab">If your string is not found at all, the echo area says 'Failing I-Search', and the cursor moves past the place where Emacs found as much of your string as it could. Thus, if you search for '<b>FOOT</b>', and there is no '<b>FOOT</b>', you might see the cursor after the '<b>FOO</b>' in '<b>FOOL</b>'. In the echo area, the part of the search string that failed to match is highlighted using the face <b>isearch-fail</b>.<br><br>At this point, there's several things you can do. If your string was mistyped, you can use <b>&lt;DEL&gt;</b> to erase some of it and correct it. If you like the place you have found, you can type <b>&lt;RET&gt;</b> to remain there. Or you can type <b>C-g</b>, which removes from the search string the characters that could not be found (the '<b>T</b>' in '<b>FOOT</b>'), leaving those that were found (the '<b>FOO</b>' in '<b>FOOT</b>'). A second <b>C-g</b> at that point cancels the search entirely, returning point to where it was when the search started.<br><br>The quit command, <b>C-g</b>, does special things during searches; only what it does depends on the status of the search. If the search has found what you specified and is waiting for input, <b>C-g</b> cancels the entire search, moving the cursor back to where you started the search. If <b>C-g</b> is typed when there are characters in the search string that have not been found (because Emacs is still searching for them, or because it has failed to find them), then the search string characters which have not been found are discarded from the search string. With them gone, the search is now successful and waiting for more input, so a second <b>C-g</b> will cancel the entire search.</p>
<h2 id="Special-Isearch">Special input for incremental search</h2>
<p class="tab">Some of the characters you type during incremental search have special effects.<br><br>By default, incremental search performs "lax" space matching: each space, or sequence of spaces, matches any sequence of one or more spaces in the text. Hence, 'foo bar' matches 'foo bar', 'foo bar', 'foo bar', and so on (but not '<b>foobar</b>'). More precisely, Emacs matches each sequence of space characters in the search string to a regular expression specified by the variable <b>search-whitespace-regexp</b>. For example, set it to '<b>"[[:space:]\n]+"</b>' to make spaces match sequences of newlines and spaces. To toggle lax space matching, type <b>M-s &lt;SPC&gt;</b> (<b>isearch-toggle-lax-whitespace</b>). To disable this feature entirely, change <b>search-whitespace-regexp</b> to nil; then each space in the search string matches exactly one space.<br><br>If the search string you entered contains only lower-case letters, the search is case-insensitive; as long as an upper-case letter exists in the search string, the search becomes case-sensitive. If you delete the upper-case character from the search string, it ceases to have this effect. See <a href="#Search-Case">Search Case</a>.<br><br>To search for a newline character, type <b>C-j</b>.<br><br>To search for other control characters, such as <b>&lt;control-S&gt;</b>, quote it by typing <b>C-q</b> first (see <a href="#Inserting-Text">Inserting Text</a>). To search for non-ASCII characters, you can either use <b>C-q</b> and enter its octal code, or use an input method (see <a href="#Input-Methods">Input Methods</a>). If an input method is enabled in the current buffer when you start the search, you can use it in the search string also. While typing the search string, you can toggle the input method with the command <b>C-\</b> (<b>isearch-toggle-input-method</b>). You can also turn on a non-default input method with <b>C-^</b> (<b>isearch-toggle-specified-input-method</b>), which prompts for the name of the input method. When an input method is active during incremental search, the search prompt includes the input method mnemonic, like this:</p>
<pre class="tab tcy">I-search [im]:</pre>
<p class="tab">Where <b>im</b> is the mnemonic of the active input method. Any input method you enable during incremental search remains enabled in the current buffer afterwards.<br><br>Typing <b>M-%</b> in incremental search invokes <b>query-replace</b> or <b>query-replace-regexp</b> (depending on search mode) with the current search string used as the string to replace. See <a href="#Query-Replace">Query Replace</a>.<br><br>Typing <b>M-&lt;TAB&gt;</b> in incremental search invokes <b>isearch-complete</b>, which attempts to complete the search string using the search ring as a list of completion alternatives. See <a href="#Completion">Completion</a>. In many operating systems, the <b>M-&lt;TAB&gt;</b> key sequence is captured by the window manager; you then need to rebind <b>isearch-complete</b> to another key sequence if you want to use it (see <a href="#Rebinding">Rebinding</a>).<br><br>When incremental search is active, you can type <b>C-h C-h</b> to access interactive help options, including a list of special key bindings. These key bindings are part of the keymap <b>isearch-mode-map</b> (see <a href="#Keymaps">Keymaps</a>).</p>
<h2 id="Isearch-Yank">Isearch yanking</h2>
<p class="tab">In incremental search, <b>C-y</b> (<b>isearch-yank-kill</b>) appends the current kill to the search string. <b>M-y</b> (<b>isearch-yank-pop</b>), if called after <b>C-y</b>, replaces that appended text with an earlier kill, similar to the usual <b>M-y</b> (<b>yank-pop</b>) command (see <a href="#Yanking">Yanking</a>). Mouse-2 appends the current X selection (see <a href="#Primary-Selection">Primary Selection</a>).<br><br><b>C-w</b> (<b>isearch-yank-word-or-char</b>) appends the next character or word at point to the search string. This is an easy way to search for another occurrence of the text at point. (The decision of whether to copy a character or a word is <a href="/jargon/h/heuristi.htm">heuristic</a>.)<br><br>Similarly, <b>M-s C-e</b> (<b>isearch-yank-line</b>) appends the rest of the current line to the search string. If point is already at the end of a line, it appends the next line.<br><br>If the search is currently case-insensitive, both <b>C-w</b> and <b>M-s C-e</b> convert the text they copy to lowercase, so that the search remains case-insensitive.<br><br><b>C-M-w</b> (<b>isearch-del-char</b>) deletes the last character from the search string, and <b>C-M-y</b> (<b>isearch-yank-char</b>) appends the character after point to the search string. An alternative method to add the character after point is to enter the minibuffer with <b>M-e</b> (see <a href="#Repeat-Isearch">Repeat Isearch</a>) and type <b>C-f</b> at the end of the search string in the minibuffer.</p>
<h2 id="Isearch-Scroll">Scrolling during incremental search</h2>
<p class="tab">Normally, scrolling commands exit incremental search. If you change the variable <b>isearch-allow-scroll</b> to a non-nil value, that enables the use of the scroll-bar, and keyboard scrolling commands like <b>C-v</b>, <b>M-v</b>, and <b>C-l</b> (see <a href="#Scrolling">Scrolling</a>). This applies only to calling these commands via their bound key sequences; typing <b>M-x</b> still exits the search. You can give prefix arguments to these commands in the usual way. This feature won't let you scroll the current match out of visibility, however.<br><br>The <b>isearch-allow-scroll</b> feature also affects some other commands, such as <b>C-x 2</b> (<b>split-window-below</b>) and <b>C-x ^</b> (<b>enlarge-window</b>), which don't exactly scroll but do affect where the text appears on the screen. It applies to any command whose name has a non-nil <b>isearch-scroll</b> property. So you can control which commands are affected by changing these properties.<br><br>For example, to make <b>C-h l</b> usable within an incremental search in all future Emacs sessions, use <b>C-h c</b> to find what command it runs (see <a href="#Key-Help">Key Help</a>), which is <b>view-lossage</b>. Then you can put the following line in your init file (see <a href="#Init-File">Init File</a>):</p>
<pre class="tab tcy">(put 'view-lossage 'isearch-scroll t)</pre>
<p class="tab">This feature is applied to any command that doesn't permanently change point, the buffer contents, the match data, the current buffer, or the selected window and frame. The command must not itself attempt an incremental search.</p>
<h2 id="Isearch-Minibuffer">Searching the minibuffer</h2>
<p class="tab">If you start an incremental search while the minibuffer is active, Emacs searches the contents of the minibuffer. Unlike searching an ordinary buffer, the search string is not shown in the echo area, because that is used to display the minibuffer.<br><br>If an incremental search fails in the minibuffer, it tries searching the minibuffer history. See <a href="#Minibuffer-History">Minibuffer History</a>. You can visualize the minibuffer and its history as a series of "pages", with the earliest history element on the first page and the current minibuffer on the last page. A forward search, <b>C-s</b>, searches forward to later pages; a reverse search, <b>C-r</b>, searches backwards to earlier pages. Like in ordinary buffer search, a failing search can wrap around, going from the last page to the first page or vice versa.<br><br>When the current match is on a history element, that history element is pulled into the minibuffer. If you exit the incremental search normally (e.g., by typing <b>&lt;RET&gt;</b>), it remains in the minibuffer afterwards. Canceling the search, with <b>C-g</b>, restores the contents of the minibuffer when you began the search.</p>
<h2 id="Nonincremental-Search">Non-incremental search</h2>
<p class="tab">Emacs also has conventional nonincremental search commands, which require you to type the entire search string before searching begins.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-s &lt;RET&gt;</b> <i>string</i> <b>&lt;RET&gt;</b></td>
<td>Search for <i>string</i>.</td>
</tr>
<tr class="tcw">
<td><b>C-r &lt;RET&gt;</b> <i>string</i> <b>&lt;RET&gt;</b></td>
<td>Search backward for <i>string</i>.</td>
</tr>
</table>
<p class="tab">To start a nonincremental search, first type <b>C-s &lt;RET&gt;</b>. This enters the minibuffer to read the search string; terminate the string with <b>&lt;RET&gt;</b>, and then the search takes place. If the string is not found, the search command signals an error.<br><br>When you type <b>C-s &lt;RET&gt;</b>, the <b>C-s</b> invokes incremental search as usual. That command is specially programmed to invoke the command for nonincremental search, <b>search-forward</b>, if the string you specify is empty. (Such an empty argument would otherwise be useless.) <b>C-r &lt;RET&gt;</b> does likewise, invoking the command <b>search-backward</b>.</p>
<h2 id="Word-Search">Word search</h2>
<p class="tab">A word search finds a sequence of words without regard to the type of punctuation between them. For instance, if you enter a search string that consists of two words separated by a single space, the search matches any sequence of those two words separated by one or more spaces, newlines, or other punctuation characters. This is particularly useful for searching text documents, because you don't have to worry whether the words you are looking for are separated by newlines or spaces.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:310px"><b>M-s w</b></td>
<td>If incremental search is active, toggle word search mode (<b>isearch-toggle-word</b>); otherwise, begin an incremental forward word search (<b>isearch-forward-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-s w &lt;RET&gt;</b> <i>words</i> <b>&lt;RET&gt;</b></td>
<td>Search for <i>words</i>, using a forward nonincremental word search.</td>
</tr>
<tr class="tcw">
<td><b>M-s w C-r &lt;RET&gt;</b> <i>words</i> <b>&lt;RET&gt;</b></td>
<td>Search backward for <i>words</i>, using a nonincremental word search.</td>
</tr>
</table>
<p class="tab">To begin a forward incremental word search, type <b>M-s w</b>. If incremental search is not already active, this runs the command <b>isearch-forward-word</b>. If incremental search is already active (whether a forward or backward search), <b>M-s w</b> switches to a word search while keeping the direction of the search and the current search string unchanged. You can toggle word search back off by typing <b>M-s w</b> again.<br><br>To begin a nonincremental word search, type <b>M-s w &lt;RET&gt;</b> for a forward search, or <b>M-s w C-r &lt;RET&gt;</b> for a backward search. These run the commands <b>word-search-forward</b> and <b>word-search-backward</b> respectively.<br><br>Incremental and nonincremental word searches differ slightly in the way they find a match. In a nonincremental word search, the last word in the search string must exactly match a whole word. In an incremental word search, the matching is more lax: the last word in the search string can match part of a word, so that the matching proceeds incrementally as you type. This additional laxity does not apply to the lazy highlight, which always matches whole words.</p>
<h2 id="Symbol-Search">Symbol search</h2>
<p class="tab">A symbol search is much like an ordinary search, except that the boundaries of the search must match the boundaries of a symbol. The meaning of symbol in this context depends on the major mode, and usually refers to a source code token, such as a Lisp symbol in Emacs Lisp mode. For instance, if you perform an incremental symbol search for the Lisp symbol <b>forward-word</b>, it would not match <b>isearch-forward-word</b>. This feature is thus mainly useful for searching source code.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:320px"><b>M-s _</b></td>
<td>If incremental search is active, toggle symbol search mode (<b>isearch-toggle-symbol</b>); otherwise, begin an incremental forward symbol search (<b>isearch-forward-symbol</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-s _ &lt;RET&gt;</b> <i>symbol</i> <b>&lt;RET&gt;</b></td>
<td>Search forward for <i>symbol</i>, nonincrementally.</td>
</tr>
<tr class="tcw">
<td><b>M-s _ C-r &lt;RET&gt;</b> <i>symbol</i> <b>&lt;RET&gt;</b></td>
<td>Search backward for <i>symbol</i>, nonincrementally.</td>
</tr>
</table>
<p class="tab">To begin a forward incremental symbol search, type <b>M-s _</b>. If incremental search is not already active, this runs the command <b>isearch-forward-symbol</b>. If incremental search is already active, <b>M-s _</b> switches to a symbol search, preserving the direction of the search and the current search string; you can disable symbol search by typing <b>M-s _</b> again. In incremental symbol search, only the beginning of the search string is required to match the beginning of a symbol.<br><br>To begin a nonincremental symbol search, type <b>M-s _ &lt;RET&gt;</b> for a forward search, or <b>M-s _ C-r &lt;RET&gt;</b> or a backward search. In nonincremental symbol searches, the beginning and end of the search string are required to match the beginning and end of a symbol, respectively.</p>
<h2 id="Regexp-Search">Regular expression search</h2>
<p class="tab">A <a href="/jargon/r/regex.htm">regular expression</a> (or regexp for short) is a pattern that denotes a class of alternative strings to match. Emacs provides both incremental and nonincremental ways to search for a match for a regexp. The syntax of regular expressions is explained in the next section.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>C-M-s</b></td>
<td>Begin incremental regexp search (<b>isearch-forward-regexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-r</b></td>
<td>Begin reverse incremental regexp search (<b>isearch-backward-regexp</b>).</td>
</tr>
</table>
<p class="tab">Incremental search for a regexp is done by typing <b>C-M-s</b> (<b>isearch-forward-regexp</b>), by invoking <b>C-s</b> with a prefix argument (whose value does not matter), or by typing <b>M-r</b> within a forward incremental search. This command reads a search string incrementally only like <b>C-s</b>, but it treats the search string as a regexp rather than looking for an exact match against the text in the buffer. Each time you add text to the search string, you make the regexp longer, and the new regexp is searched. To search backward for a regexp, use <b>C-M-r</b> (<b>isearch-backward-regexp</b>), <b>C-r</b> with a prefix argument, or <b>M-r</b> within a backward incremental search.<br><br>All of the special key sequences in an ordinary incremental search do similar things in an incremental regexp search. For instance, typing <b>C-s</b> immediately after starting the search retrieves the last incremental search regexp used and searches forward for it. Incremental regexp and non-regexp searches have independent defaults. They also have separate search rings, which you can access with <b>M-p</b> and <b>M-n</b>.<br><br>As in ordinary incremental search, any <b>&lt;SPC&gt;</b> typed in incremental regexp search matches any sequence of one or more whitespace characters. The variable <b>search-whitespace-regexp</b> specifies the regexp for the lax space matching, and <b>M-s &lt;SPC&gt;</b> (<b>isearch-toggle-lax-whitespace</b>) toggles the feature. See <a href="#Special-Isearch">Special Isearch</a>.<br><br>In some cases, adding characters to the regexp in an incremental regexp search can make the cursor move back and start again. For example, if you have searched for '<b>foo</b>' and you add '<b>\|bar</b>', the cursor backs up in case the first '<b>bar</b>' precedes the first '<b>foo</b>'. See <a href="#Regexps">Regexps</a>.<br><br>Forward and backward regexp search are not symmetrical, because regexp matching in Emacs always operates forward, starting with the beginning of the regexp. Thus, forward regexp search scans forward, trying a forward match at each possible starting position. Backward regexp search scans backward, trying a forward match at each possible starting position. These search methods are not mirror images.<br><br>Nonincremental search for a regexp is done with the commands <b>re-search-forward</b> and <b>re-search-backward</b>. You can invoke these with <b>M-x</b>, or by way of incremental regexp search with <b>C-M-s &lt;RET&gt;</b> and <b>C-M-r &lt;RET&gt;</b>.<br><br>If you use the incremental regexp search commands with a prefix argument, they perform ordinary string search, like <b>isearch-forward</b> and <b>isearch-backward</b>. See <a href="#Incremental-Search">Incremental Search</a>.</p>
<h2 id="Regexps">Syntax of regular expressions</h2>
<p class="tab">This manual describes regular expression features that users often use.<br><br>Regular expressions have a syntax where a few characters are special constructs and the rest are ordinary. An ordinary character matches that same character and nothing else. The special characters are '<b>$^.*+?[\</b>'. The character '<b>]</b>' is special if it ends a character alternative. The character '<b>-</b>' is special inside a character alternative. Any other character appearing in a regular expression is ordinary, unless a '<b>\</b>' precedes it. (When you use regular expressions in a Lisp program, each '<b>\</b>' must be doubled, see the example near the end of this section.)<br><br>For example, '<b>f</b>' is not a special character, so it is ordinary, and therefore '<b>f</b>' is a regular expression that matches the string '<b>f</b>' and no other string. (It does not match the string '<b>ff</b>'.) Likewise, '<b>o</b>' is a regular expression that matches only '<b>o</b>'. (When case distinctions are being ignored, these regexps also match '<b>F</b>' and '<b>O</b>', but we consider this a generalization of "the same string", rather than an exception.)<br><br>Any two regular expressions <b>a</b> and <b>b</b> can be concatenated. The result is a regular expression which matches a string if <b>a</b> matches some amount of the beginning of that string and <b>b</b> matches the rest of the string. For example, concatenating the regular expressions '<b>f</b>' and '<b>o</b>' gives the regular expression '<b>fo</b>', which matches only the string '<b>fo</b>'. Still, trivial. To do something nontrivial, you need to use one of the special characters. Here is a list of them:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>.</b></td>
<td>(Period) is a special character that matches any single character except a newline. For example, the regular expressions '<b>a.b</b>' matches any three-character string that begins with '<b>a</b>' and ends with '<b>b</b>'.</td>
</tr>
<tr class="tcw">
<td><b>*</b></td>
<td>(Asterisk) is not a construct by itself; it is a postfix operator that means to match the preceding regular expression repetitively any number of times, as many times as possible. Thus, '<b>o*</b>' matches any number of '<b>o</b>'s, including no '<b>o</b>'s.<br><br>'<b>*</b>' always applies to the smallest possible preceding expression. Thus, '<b>fo*</b>' has a repeating '<b>o</b>', not a repeating '<b>fo</b>'. It matches '<b>f</b>', '<b>fo</b>', '<b>foo</b>', etc.<br><br>The matcher processes a '<b>*</b>' construct by matching, immediately, as many repetitions as can be found. Then it continues with the rest of the pattern. If that fails, backtracking occurs, discarding some of the matches of the '<b>*</b>'-modified construct in case that makes it possible to match the rest of the pattern. For example, in matching '<b>ca*ar</b>' against the string '<b>caaar</b>', the '<b>a*</b>' first tries to match all three '<b>a</b>'s; but the rest of the pattern is '<b>ar</b>' and there is only '<b>r</b>' left to match, so this try fails. The next alternative is for '<b>a*</b>' to match only two '<b>a</b>'s. With this choice, the rest of the regexp matches successfully.</td>
</tr>
<tr class="tcw">
<td><b>+</b></td>
<td>(Plus sign) is a postfix operator, similar to '<b>*</b>' except that it must match the preceding expression at least once. Thus, '<b>ca+r</b>' matches the strings '<b>car</b>' and '<b>caaaar</b>' but not the string '<b>cr</b>', whereas '<b>ca*r</b>' matches all three strings.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>Is a postfix operator, similar to '<b>*</b>' except that it can match the preceding expression either once or not at all. Thus, '<b>ca?r</b>' matches '<b>car</b>' or '<b>cr</b>', and nothing else.</td>
</tr>
<tr class="tcw">
<td><b>*?</b>, <b>+?</b>, <b>??</b></td>
<td>These are non-greedy variants of the operators above. The normal operators '<b>*</b>', '<b>+</b>', '<b>?</b>' match as much as they can, as long as the overall regexp can still match. With a following '<b>?</b>', they will match as little as possible.<br><br>Thus, both '<b>ab*</b>' and '<b>ab*?</b>' can match the string '<b>a</b>' and the string '<b>abbbb</b>'; but if you try to match them both against the text '<b>abbb</b>', '<b>ab*</b>' will match it all (the longest valid match), while '<b>ab*?</b>' will match only '<b>a</b>' (the shortest valid match).<br><br>Non-greedy operators match the shortest possible string starting at a given starting point; in a forward search, though, the earliest possible starting point for match is always the one chosen. Thus, if you search for '<b>a.*?$</b>' against the text '<b>abbab</b>' followed by a newline, it matches the whole string. Since it can match starting at the first '<b>a</b>', it does.</td>
</tr>
<tr class="tcw">
<td><b>\{n\}</b></td>
<td>Is a postfix operator specifying n repetitions&mdash;that is, the preceding regular expression must match exactly n times in a row. For example, '<b>x\{4\}</b>' matches the string '<b>xxxx</b>' and nothing else.</td>
</tr>
<tr class="tcw">
<td><b>\{n,m\}</b></td>
<td>This is a postfix operator specifying between n and m repetitions&mdash;that is, the preceding regular expression must match at least n times, but no more than m times. If m is omitted, then there is no upper limit, but the preceding regular expression must match at least n times.<br><br>'<b>\{0,1\}</b>' is equivalent to '<b>?</b>'.<br><br>'<b>\{0,\}</b>' is equivalent to '<b>*</b>'.<br><br>'<b>\{1,\}</b>' is equivalent to '<b>+</b>'.</td>
</tr>
<tr class="tcw">
<td><b>[ ... ]</b></td>
<td>Is a character set, beginning with '<b>[</b>' and terminated by '<b>]</b>'.<br><br>In the simplest case, the characters between the two brackets are what this set can match. Thus, '<b>[ad]</b>' matches either one '<b>a</b>' or one '<b>d</b>', and '<b>[ad]*</b>' matches any string composed of only '<b>a</b>'s and '<b>d</b>'s (including the empty string). It follows that '<b>c[ad]*r</b>' matches '<b>cr</b>', '<b>car</b>', '<b>cdr</b>', '<b>caddaar</b>', etc.<br><br>You can also include character ranges in a character set, by writing the starting and ending characters with a '<b>-</b>' between them. Thus, '<b>[a-z]</b>' matches any lower-case ASCII letter. Ranges may be intermixed freely with individual characters, as in '<b>[a-z$%.]</b>', which matches any lower-case ASCII letter or '<b>$</b>', '<b>%</b>' or period.<br><br>You can also include certain special character classes in a character set. A '<b>[:</b>' and balancing '<b>:]</b>' enclose a character class inside a character alternative. For instance, '<b>[[:alnum:]]</b>' matches any letter or digit.<br><br>To include a '<b>]</b>' in a character set, you must make it the first character. For example, '<b>[]a]</b>' matches '<b>]</b>' or '<b>a</b>'. To include a '<b>-</b>', write '<b>-</b>' as the first or last character of the set, or put it after a range. Thus, '<b>[]-]</b>' matches both '<b>]</b>' and '<b>-</b>'.<br><br>To include '<b>^</b>' in a set, put it anywhere but at the beginning of the set. (At the beginning, it complements the set&mdash;see below.)<br><br>When you use a range in case-insensitive search, write both ends of the range in uppercase, or both in lowercase, or both should be non-letters. The behavior of a mixed-case range such as '<b>A-z</b>' is somewhat ill-defined, and it may change in future Emacs versions.</td>
</tr>
<tr class="tcw">
<td><b>[^ ... ]</b></td>
<td>'<b>[^</b>' begins a complemented character set, which matches any character except the ones specified. Thus, '<b>[^a-z0-9A-Z]</b>' matches all characters except ASCII letters and digits.<br><br>'<b>^</b>' is not special in a character set unless it is the first character. The character following the '<b>^</b>' is treated as if it were first (in other words, '<b>-</b>' and '<b>]</b>' are not special there).<br><br>A complemented character set can match a newline, unless newline is mentioned as one of the characters not to match. This is in contrast to the handling of regexps in programs such as grep.</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>(Caret) is a special character that matches the empty string, but only at the beginning of a line in the text being matched. Otherwise, it fails to match anything. Thus, '<b>^foo</b>' matches a '<b>foo</b>' that occurs at the beginning of a line.<br><br>For historical compatibility reasons, '<b>^</b>' can be used with this meaning only at the beginning of the regular expression, or after '<b>\(</b>' or '<b>\|</b>'.</td>
</tr>
<tr class="tcw">
<td><b>$</b></td>
<td>Is similar to '<b>^</b>' but matches only at the end of a line. Thus, '<b>x+$</b>' matches a string of one '<b>x</b>' or more at the end of a line.<br><br>For historical compatibility reasons, '<b>$</b>' can be used with this meaning only at the end of the regular expression, or before '<b>\)</b>' or '<b>\|</b>'.</td>
</tr>
<tr class="tcw">
<td><b>\</b></td>
<td>(Backslash) has two functions: it quotes the special characters (including '<b>\</b>'), and it introduces additional special constructs.<br><br>Because '<b>\</b>' quotes special characters, '<b>\$</b>' is a regular expression that matches only '<b>$</b>', and '<b>\[</b>' is a regular expression that matches only '<b>[</b>', etc.<br><br>See the following section for the special constructs that begin with '<b>\</b>'.</td>
</tr>
</table>
<p class="tab">Note: for historical compatibility, special characters are treated as ordinary ones if they are in contexts where their special meanings make no sense. For example, '<b>*foo</b>' treats '<b>*</b>' as ordinary since there is no preceding expression on which the '<b>*</b>' can act. It is poor practice to depend on this behavior; it is better to quote the special character, regardless of where it appears.<br><br>As a '<b>\</b>' is not special inside a character alternative, it can never remove the special meaning of '<b>-</b>' or '<b>]</b>'. So don't quote these characters when they have no special meaning either. This would not clarify anything, as backslashes can legitimately precede these characters where they have special meaning, as in '<b>[^\]</b>' ("[^\\]" for Lisp string syntax), which matches any single character except a backslash.</p>
<h2 id="Regexp-Backslash">Backslash in regular expressions</h2>
<p class="tab">For the most part, '<b>\</b>' followed by any character matches only that character. However, there's several exceptions: two-character sequences starting with '<b>\</b>' that have special meanings. The second character in the sequence is always an ordinary character when used on its own. Here is a table of '<b>\</b>' constructs.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>\|</b></td>
<td>Specifies an alternative. Two regular expressions a and b with '<b>\|</b>' between form an expression that matches some text if either a matches it or b matches it. It works by trying to match a, and if that fails, by trying to match b.<br><br>Thus, '<b>foo\|bar</b>' matches either '<b>foo</b>' or '<b>bar</b>' but no other string.<br><br>'<b>\|</b>' applies to the largest possible surrounding expressions. Only a surrounding '\( ... \)' grouping can limit the grouping power of '<b>\|</b>'.<br><br>Full backtracking capability exists to handle multiple uses of '<b>\|</b>'.</td>
</tr>
<tr class="tcw">
<td><b>\( ... \)</b></td>
<td>Is a grouping construct that serves three purposes:<br><br>1. To enclose a set of '<b>\|</b>' alternatives for other operations. Thus, '<b>\(foo\|bar\)x</b>' matches either '<b>foox</b>' or '<b>barx</b>'.<br><br>2. To enclose a complicated expression for the postfix operators '<b>*</b>', '<b>+</b>' and '<b>?</b>' to operate. Thus, '<b>ba\(na\)*</b>' matches '<b>bananana</b>', etc., with any (zero or more) number of '<b>na</b>' strings.<br><br>3. To record a matched substring for future reference. This last application is not a consequence of the idea of a parenthetical grouping; it is a separate feature that is assigned as a second meaning to the same '\( ... \)' construct. In practice there is usually no conflict between the two meanings; when there is a conflict, you can use a "shy" group.</td>
</tr>
<tr class="tcw">
<td><b>\(?: ... \)</b></td>
<td>Specifies a "shy" group that does not record the matched substring; you can't refer back to it with '<b>\d</b>'. This is useful in mechanically combining regular expressions, so that you can add groups for syntactic purposes without interfering with the numbering of the groups meant to be referred.</td>
</tr>
<tr class="tcw">
<td><b>\d</b></td>
<td>Matches the same text that matched the dth occurrence of a '\( ... \)' construct. This is called a back reference.<br><br>After the end of a '\( ... \)' construct, the matcher remembers the beginning and end of the text matched by that construct. Then, later on in the regular expression, you can use '<b>\</b>' followed by the digit d to mean "match the same text matched the dth time by the '\( ... \)' construct".<br><br>The strings matching the first nine '\( ... \)' constructs appearing in a regular expression are assigned numbers 1 through 9 in the order that the open-parentheses appear in the regular expression. So you can use '<b>\1</b>' through '<b>\9</b>' to refer to the text matched by the corresponding '\( ... \)' constructs.<br><br>For example, '<b>\(.*\)\1</b>' matches any newline-free string that is composed of two identical halves. The '<b>\(.*\)</b>' matches the first half, which may be anything, but the '<b>\1</b>' that follows must match the same text.<br><br>If a particular '\( ... \)' construct matches more than once (which can easily happen if it's followed by '<b>*</b>'), only the last match is recorded.</td>
</tr>
<tr class="tcw">
<td><b>\&#96;</b></td>
<td>Matches the empty string, but only at the beginning of the string or buffer (or its accessible portion) being matched against.</td>
</tr>
<tr class="tcw">
<td><b>\'</b></td>
<td>Matches the empty string, but only at the end of the string or buffer (or its accessible portion) being matched against.</td>
</tr>
<tr class="tcw">
<td><b>\=</b></td>
<td>Matches the empty string, but only at point.</td>
</tr>
<tr class="tcw">
<td><b>\b</b></td>
<td>Matches the empty string, but only at the beginning or end of a word. Thus, '<b>\bfoo\b</b>' matches any occurrence of '<b>foo</b>' as a separate word. '<b>\bballs?\b</b>' matches '<b>ball</b>' or '<b>balls</b>' as a separate word.<br><br>'<b>\b</b>' matches at the beginning or end of the buffer regardless of what text appears next to it.</td>
</tr>
<tr class="tcw">
<td><b>\B</b></td>
<td>Matches the empty string, but not at the beginning or end of a word.</td>
</tr>
<tr class="tcw">
<td><b>\&lt;</b></td>
<td>Matches the empty string, but only at the beginning of a word. '<b>\&lt;</b>' matches at the beginning of the buffer only if a word-constituent character follows.</td>
</tr>
<tr class="tcw">
<td><b>\&gt;</b></td>
<td>Matches the empty string, but only at the end of a word. '<b>\&gt;</b>' matches at the end of the buffer only if the contents end with a word-constituent character.</td>
</tr>
<tr class="tcw">
<td><b>\w</b></td>
<td>Matches any word-constituent character. The syntax table determines which characters these are. See Syntax Tables.</td>
</tr>
<tr class="tcw">
<td><b>\W</b></td>
<td>Matches any character that is not a word-constituent.</td>
</tr>
<tr class="tcw">
<td><b>\_&lt;</b></td>
<td>Matches the empty string, but only at the beginning of a symbol. A symbol is a sequence of one or more symbol-constituent characters. A symbol-constituent character is a character whose syntax is either '<b>w</b>' or '<b>_</b>'. '<b>\_&lt;</b>' matches at the beginning of the buffer only if a symbol-constituent character follows.</td>
</tr>
<tr class="tcw">
<td><b>\_&gt;</b></td>
<td>Matches the empty string, but only at the end of a symbol. '<b>\_&gt;</b>' matches at the end of the buffer only if the contents end with a symbol-constituent character.</td>
</tr>
<tr class="tcw">
<td><b>\s</b><i>c</i></td>
<td>Matches any character whose syntax is <i>c</i>. Here <i>c</i> is a character that designates a particular syntax class: thus, '<b>w</b>' for word constituent, '<b>-</b>' or ' ' for whitespace, '<b>.</b>' for ordinary punctuation, etc.</td>
</tr>
<tr class="tcw">
<td><b>\S</b><i>c</i></td>
<td>Matches any character whose syntax is not <i>c</i>.</td>
</tr>
<tr class="tcw">
<td><b>\c</b><i>c</i></td>
<td>Matches any character that belongs to the category <i>c</i>. For example, '<b>\cc</b>' matches Chinese characters, '<b>\cg</b>' matches Greek characters, etc. For the description of the known categories, type <b>M-x describe-categories &lt;RET&gt;</b>.</td>
</tr>
<tr class="tcw">
<td><b>\C</b><i>c</i></td>
<td>Matches any character that does not belong to category c.</td>
</tr>
</table>
<p class="tab">The constructs that pertain to words and syntax are controlled by the setting of the syntax table.</p>
<h2 id="Regexp-Example">Regular expression example</h2>
<p class="tab">Here is an example of a regexp: similar to the regexp that Emacs uses, by default, to recognize the end of a sentence, not including the following space (i.e., the variable <b>sentence-end-base</b>):</p>
<pre class="tab tcy">[.?!][]\"')}]*</pre>
<p class="tab">This contains two parts in succession: a character set matching period, '<b>?</b>', or '<b>!</b>', and a character set matching close-brackets, quotes, or parentheses, repeated zero or more times.</p>
<h2 id="Search-Case">Searching and case</h2>
<p class="tab">Searches in Emacs normally ignore the case of the text they are searching through, if you specify the text in lowercase. Thus, if you specify searching for '<b>foo</b>', then '<b>Foo</b>' and '<b>foo</b>' also match. Regexps, and in particular character sets, behave likewise: '<b>[ab]</b>' matches '<b>a</b>' or '<b>A</b>' or '<b>b</b>' or '<b>B</b>'.<br><br>An upper-case letter anywhere in the incremental search string makes the search case-sensitive. Thus, searching for '<b>Foo</b>' does not find '<b>foo</b>' or '<b>FOO</b>'. This applies to regular expression search and to string search. The effect ceases if you delete the upper-case letter from the search string.<br><br>Typing <b>M-c</b> within an incremental search toggles the case sensitivity of that search. The effect does not extend beyond the current incremental search to the next one, but it does override the effect of adding or removing an upper-case letter in the current search.<br><br>If you set the variable <b>case-fold-search</b> to nil, then all letters must match exactly, including case. This is a per-buffer variable; altering the variable normally affects only the current buffer, unless you change its default value. See <a href="#Locals">Locals</a>. This variable applies to nonincremental searches also, including those performed by the replace commands (see <a href="#Replace">Replace</a>) and the minibuffer history matching commands (see <a href="#Minibuffer-History">Minibuffer History</a>).<br><br>Several related variables control case-sensitivity of searching and matching for specific commands or activities. For instance, <b>tags-case-fold-search</b> controls case sensitivity for <b>find-tag</b>. To find these variables, do <b>M-x apropos-variable &lt;RET&gt; case-fold-search &lt;RET&gt;</b>.</p>
 <h2 id="Replace">Replacement commands</h2>
<p class="tab">Emacs provides several commands for performing <b>search-and-replace</b> operations. In addition to the simple <b>M-x replace-string</b> command, there is <b>M-%</b> (<b>query-replace</b>), which presents each occurrence of the pattern and asks you whether to replace it.<br><br>The replace commands normally operate on the text from point to the end of the buffer. When the region is active, they operate on it instead (see <a href="#Mark">Mark</a>). The basic replace commands replace one search string (or regexp) with one replacement string. It is possible to perform several replacements in parallel, using the command <b>expand-region-abbrevs</b> (see <a href="#Expanding-Abbrevs">Expanding Abbrevs</a>).<br><br>Unlike incremental search, the replacement commands do not use lax space matching (see <a href="#Special-Isearch">Special Isearch</a>) by default. To enable lax space matching for replacement, change the variable <b>replace-lax-whitespace</b> to <b>t</b>. (This only affects how Emacs finds the text to replace, not the replacement text.)</p>
<ul>
<li><a href="#Unconditional-Replace">Unconditional Replace</a>: Replacing all matches for a string.</li>
<li><a href="#Regexp-Replace">Regexp Replace</a>: Replacing all matches for a regexp.</li>
<li><a href="#Replacement-and-Case">Replacement and Case</a>: How replacements preserve case of letters.</li>
<li><a href="#Query-Replace">Query Replace</a>: How to use querying.</li>
</ul>
<h2 id="Unconditional-Replace">Unconditional replacement</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td>M-x replace-string <b>&lt;RET&gt;</b> <i>string</i> <b>&lt;RET&gt;</b> <i>newstring</i> <b>&lt;RET&gt;</b></td>
<td>Replace every occurrence of <i>string</i> with <i>newstring</i>.</td>
</tr>
</table>
<p class="tab">To replace every instance of '<b>foo</b>' after point with '<b>bar</b>', use the command <b>M-x replace-string</b> with the two arguments '<b>foo</b>' and '<b>bar</b>'. Replacement happens only in the text after point, so if you want to cover the whole buffer you must go to the beginning first. All occurrences up to the end of the buffer are replaced; to limit replacement to part of the buffer, activate the region around that part. When the region is active, replacement is limited to the region (see <a href="#Mark">Mark</a>).<br><br>When <b>replace-string</b> exits, it leaves point at the last occurrence replaced. It adds the prior position of point (where the <b>replace-string</b> command was issued) to the mark ring, without activating the mark; use <b>C-u C-&lt;SPC&gt;</b> to move back there. See <a href="#Mark-Ring">Mark Ring</a>.<br><br>A prefix argument restricts replacement to matches that are surrounded by word boundaries.<br><br>See <a href="#Replacement-and-Case">Replacement and Case</a>, for details about case-sensitivity in replace commands.</p>
<h2 id="Regexp-Replace">Regexp replacement</h2>
<p class="tab">The <b>M-x replace-string</b> command replaces exact matches for a single string. The similar command <b>M-x replace-regexp</b> replaces any match for a specified pattern.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>M-x replace-regexp &lt;RET&gt;</b> <i>regexp</i> <b>&lt;RET&gt; newstring &lt;RET&gt;</b></td>
<td>Replace every match for <i>regexp</i> with newstring.</td>
</tr>
</table>
<p class="tab">In <b>replace-regexp</b>, the newstring need not be constant: it can refer to all or part of what is matched by the regexp. '<b>\&amp;</b>' in newstring stands for the entire match being replaced. '<b>\d</b>' in newstring, where d is a digit, stands for whatever matched the dth parenthesized grouping in regexp. (This is called a "back reference".) '<b>\#</b>' refers to the count of replacements already made in this command, as a decimal number. In the first replacement, '<b>\#</b>' stands for '<b>0</b>'; in the second, for '<b>1</b>'; etc. For example,</p>
<p class="tab tcy">M-x replace-regexp &lt;RET&gt; c[ad]+r &lt;RET&gt; \&amp;-safe &lt;RET&gt;</p>
<p class="tab">Replaces (for example) '<b>cadr</b>' with '<b>cadr-safe</b>' and '<b>cddr</b>' with '<b>cddr-safe</b>'.</p>
<p class="tab tcy">M-x replace-regexp &lt;RET&gt; \(c[ad]+r\)-safe &lt;RET&gt; \1 &lt;RET&gt;</p>
<p class="tab">Performs the inverse transformation. To include a '<b>\</b>' in the text to replace with, you must enter '<b>\\</b>'.<br><br>If you want to enter part of the replacement string by hand each time, use '<b>\?</b>' in the replacement string. Each replacement asks you to edit the replacement string in the minibuffer, putting point where the '<b>\?</b>' was.<br><br>The remainder of this subsection is intended for specialized tasks and requires knowledge of Lisp. Most readers can skip it.<br><br>You can use Lisp expressions to calculate parts of the replacement string. To do this, write '<b>\,</b>' followed by the expression in the replacement string. Each replacement calculates the value of the expression and converts it to text without quoting (if it's a string, this means using the string's contents), and uses it in the replacement string in place of the expression itself. If the expression is a symbol, one space in the replacement string after the symbol name goes with the symbol name, so the value replaces them both.<br><br>Inside such an expression, you can use some special sequences. '<b>\&amp;</b>' and '<b>\n</b>' refer here, as usual, to the entire match as a string, and to a submatch as a string. '<b>\n</b>' may be multiple digits, and the value of '<b>\n</b>' is nil if subexpression n did not match. You can also use '<b>\#&amp;</b>' and '<b>\#n</b>' to refer to those matches as numbers (this is valid when the match or submatch has the form of a numeral). '<b>\#</b>' here too stands for the number of already-completed replacements.<br><br>Repeating our example to exchange '<b>x</b>' and '<b>y</b>', we can thus do it also this way:</p>
<p class="tab tcy">M-x replace-regexp &lt;RET&gt; \(x\)\|y &lt;RET&gt;<br><br>\,(if \1 "y" "x") &lt;RET&gt;</p>
<p class="tab">For computing replacement strings for '<b>\,</b>', the format function is often useful. For example, to add consecutively numbered strings like '<b>ABC00042</b>' to columns 73 to 80 (unless they are already occupied), you can use</p>
<p class="tab tcy">M-x replace-regexp &lt;RET&gt; ^.\{0,72\}$ &lt;RET&gt;<br><br>\,(format "%-72sABC%05d" \&amp; \#) &lt;RET&gt;</p>
<h2 id="Replacement-and-Case">Replace commands and case</h2>
<p class="tab">If the first argument of a replace command is all lowercase, the command ignores case while searching for occurrences to replace&mdash;provided <b>case-fold-search</b> is non-nil. If <b>case-fold-search</b> is set to nil, case is always significant in all searches.<br><br>Also, when the newstring argument is all or partly lowercase, replacement commands try to preserve the case pattern of each occurrence. Thus, the command</p>
<p class="tab tcy">M-x replace-string &lt;RET&gt; foo &lt;RET&gt; bar &lt;RET&gt;</p>
<p class="tab">Replaces a lowercase '<b>foo</b>' with a lowercase '<b>bar</b>', an all-caps '<b>FOO</b>' with '<b>BAR</b>', and a capitalized '<b>Foo</b>' with '<b>Bar</b>'. (These three alternatives -- lowercase, all caps, and capitalized -- are the only ones that <b>replace-string</b> can distinguish.)<br><br>If upper-case letters are used in the replacement string, they remain uppercase every time that text is inserted. If upper-case letters are used in the first argument, the second argument is always substituted exactly as given, with no case conversion. Likewise, if either <b>case-replace</b> or <b>case-fold-search</b> is set to nil, replacement is done without case conversion.</p>
<h2 id="Query-Replace">Query replace</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:380px"><b>M-%</b> <i>string</i> <b>&lt;RET&gt;</b> <i>newstring</i> <b>&lt;RET&gt;</b></td>
<td>Replace some occurrences of <i>string</i> with <i>newstring</i>.</td>
</tr>
<tr class="tcw">
<td><b>C-M-%</b> <i>regexp</i> <b>&lt;RET&gt;</b> <i>newstring</i> <b>&lt;RET&gt;</b></td>
<td>Replace some matches for <i>regexp</i> with <i>newstring</i>.</td>
</tr>
</table>
<p class="tab">If you want to change only some of the occurrences of '<b>foo</b>' to '<b>bar</b>', not all of them, use <b>M-%</b> (<b>query-replace</b>). This command finds occurrences of '<b>foo</b>' one by one, displays each occurrence and asks you whether to replace it. Aside from querying, <b>query-replace</b> works only like <b>replace-string</b> (see <a href="#Unconditional-Replace">Unconditional Replace</a>). In particular, it preserves case provided <b>case-replace</b> is non-nil, as it normally is (see <a href="#Replacement-and-Case">Replacement and Case</a>). A numeric argument means to consider only occurrences that are bounded by word-delimiter characters.<br><br><b>C-M-%</b> performs regexp search and replace (<b>query-replace-regexp</b>). It works like <b>replace-regexp</b> except that it queries like <b>query-replace</b>.<br><br>These commands highlight the current match using the face <b>query-replace</b>. They highlight other matches using lazy-highlight only like incremental search (see <a href="#Incremental-Search">Incremental Search</a>). By default, <b>query-replace-regexp</b> shows the substituted replacement string for the current match in the minibuffer. If you want to keep special sequences '<b>\&amp;</b>' and '<b>\n</b>' unexpanded, customize <b>query-replace-show-replacement</b> variable.<br><br>The characters you can type when you are shown a match for the string or regexp are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>&lt;SPC&gt;</b></td>
<td>To replace the occurrence with newstring.</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b></td>
<td>To skip to the next occurrence without replacing this one.</td>
</tr>
<tr class="tcw">
<td><b>,</b></td>
<td>(Comma) to replace this occurrence and display the result. You are then asked for another input character to say what to do next. Since the replacement has already been made, &lt;DEL&gt; and &lt;SPC&gt; are equivalent in this situation; both move to the next occurrence.<br><br>You can type <b>C-r</b> at this point (see below) to alter the replaced text. You can also type <b>C-x u</b> to undo the replacement; this exits the <b>query-replace</b>, so if you want to do further replacement you must use <b>C-x &lt;ESC&gt; &lt;ESC&gt; &lt;RET&gt;</b> to restart (see <a href="#Repetition">Repetition</a>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b></td>
<td>To exit without doing any more replacements.</td>
</tr>
<tr class="tcw">
<td><b>.</b></td>
<td>(Period) to replace this occurrence and then exit without searching for more occurrences.</td>
</tr>
<tr class="tcw">
<td><b>!</b></td>
<td>To replace all remaining occurrences without asking again.</td>
</tr>
<tr class="tcw">
<td><b>Y</b></td>
<td>(Upper-case Y) to replace all remaining occurrences in all remaining buffers in multi-buffer replacements (like the Dired &#96;Q' command which performs query replace on selected files). It answers this question and all subsequent questions in the series with "yes", without further user interaction.</td>
</tr>
<tr class="tcw">
<td><b>N</b></td>
<td>(Upper-case N) to skip to the next buffer in multi-buffer replacements without replacing remaining occurrences in the current buffer. It answers this question "no", gives up on the questions for the current buffer, and continues to the next buffer in the sequence.</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>To go back to the position of the previous occurrence (or what used to be an occurrence), in case you changed it by mistake or want to reexamine it.</td>
</tr>
<tr class="tcw">
<td><b>C-r</b></td>
<td>To enter a recursive editing level, in case the occurrence needs to be edited rather than only replaced with newstring. When you are done, exit the recursive editing level with <b>C-M-c</b> to proceed to the next occurrence. See <a href="#Recursive-Edit">Recursive Edit</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-w</b></td>
<td>To delete the occurrence, and then enter a recursive editing level as in <b>C-r</b>. Use the recursive edit to insert text to replace the deleted occurrence of string. When done, exit the recursive editing level with <b>C-M-c</b> to proceed to the next occurrence.</td>
</tr>
<tr class="tcw">
<td><b>e</b></td>
<td>To edit the replacement string in the minibuffer. When you exit the minibuffer by typing <b>&lt;RET&gt;</b>, the minibuffer contents replace the current occurrence of the pattern. They also become the new replacement string for any further occurrences.</td>
</tr>
<tr class="tcw">
<td><b>C-l</b></td>
<td>To redisplay the screen. Then you must type another character to specify what to do with this occurrence.</td>
</tr>
<tr class="tcw">
<td><b>C-h</b></td>
<td>To display a message summarizing these options. Then you must type another character to specify what to do with this occurrence.</td>
</tr>
</table>
<p class="tab">Some other characters are aliases for the ones listed above: <b>y</b>, <b>n</b> and <b>q</b> are equivalent to <b>&lt;SPC&gt;, &lt;DEL&gt; and &lt;RET&gt;</b>.<br><br>Aside from this, any other character exits the <b>query-replace</b>, and is then reread as part of a key sequence. Thus, if you type <b>C-k</b>, it exits the <b>query-replace</b> and then kills to end of line.<br><br>To restart a <b>query-replace</b> once it is exited, use <b>C-x &lt;ESC&gt; &lt;ESC&gt;</b>, which repeats the <b>query-replace</b> because it used the minibuffer to read its arguments. See <a href="#Repetition">C-x &lt;ESC&gt; &lt;ESC&gt;</a>.<br><br>See <a href="#Operating-on-Files">Operating on Files</a>, for the Dired Q command which performs query replace on selected files. See also <a href="#Transforming-File-Names">Transforming File Names</a>, for Dired commands to rename, copy, or link files by replacing regexp matches in file names.</p>
<h2 id="Other-Repeating-Search">Other search-and-loop commands</h2>
<p class="tab">Here are some other commands that find matches for a regular expression. They all ignore case in matching, if the pattern contains no upper-case letters and <b>case-fold-search</b> is non-nil. Aside from occur and its variants, all operate on the text from point to the end of the buffer, or on the region if it's active.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>M-x multi-isearch-buffers</b></td>
<td>Prompt for one or more buffer names, ending with <b>&lt;RET&gt;</b>; then, begin a multi-buffer incremental search in those buffers. (If the search fails in one buffer, the next <b>C-s</b> tries searching the next specified buffer, and so forth.) With a prefix argument, prompt for a regexp and begin a multi-buffer incremental search in buffers matching that regexp.</td>
</tr>
<tr class="tcw">
<td><b>M-x multi-isearch-buffers-regexp</b></td>
<td>This command is only like <b>multi-isearch-buffers</b>, except it performs an incremental regexp search.</td>
</tr>
<tr class="tcw">
<td><b>M-x occur</b></td>
<td>Prompt for a regexp, and display a list showing each line in the buffer containing a match for it. To limit the search to part of the buffer, narrow to that part (see <a href="#Narrowing">Narrowing</a>). A numeric argument <i>n</i> specifies that <i>n</i> lines of context are to be displayed before and after each matching line.<br><br>In the *Occur* buffer, you can click each entry, or move point there and type <b>&lt;RET&gt;</b>, to visit the corresponding position in the buffer that was searched. <b>o</b> and <b>C-o</b> display the match in another window; <b>C-o</b> does not select it. Alternatively, you can use the <b>C-x &#96;</b> (<b>next-error</b>) command to visit the occurrences one by one (see <a href="#Compilation-Mode">Compilation Mode</a>).<br><br>Typing <b>e</b> in the *Occur* buffer switches to Occur Edit mode, where edits made to the entries are also applied to the text in the originating buffer. Type <b>C-c C-c</b> to return to Occur mode.<br><br>The command <b>M-x list-matching-lines</b> is a synonym for <b>M-x occur</b>.</td>
</tr>
<tr class="tcw">
<td><b>M-s o</b></td>
<td>Run occur using the search string of the last incremental string search. You can also run <b>M-s o</b> when an incremental search is active; this uses the current search string.</td>
</tr>
<tr class="tcw">
<td><b>M-x multi-occur</b></td>
<td>This command is only like <b>occur</b>, except it can search through multiple buffers. It asks you to specify the buffer names one by one.</td>
</tr>
<tr class="tcw">
<td><b>M-x multi-occur-in-matching-buffers</b></td>
<td>This command is similar to <b>multi-occur</b>, except the buffers to search are specified by a regular expression that matches visited file names. With a prefix argument, it uses the regular expression to match buffer names instead.</td>
</tr>
<tr class="tcw">
<td><b>M-x how-many</b></td>
<td>Prompt for a regexp, and print the number of matches for it in the buffer after point. If the region is active, this operates on the region instead.</td>
</tr>
<tr class="tcw">
<td><b>M-x flush-lines</b></td>
<td>Prompt for a regexp, and delete each line containing a match for it, operating on the text after point. This command deletes the current line if it contains a match starting after point. If the region is active, it operates on the region instead; if a line partially contained in the region contains a match entirely contained in the region, it is deleted.<br><br>If a match is split across lines, <b>flush-lines</b> deletes all those lines. It deletes the lines before starting to look for the next match; hence, it ignores a match starting on the same line at which another match ended.</td>
</tr>
<tr class="tcw">
<td><b>M-x keep-lines</b></td>
<td>Prompt for a regexp, and delete each line that does not contain a match for it, operating on the text after point. If point is not at the beginning of a line, this command always keeps the current line. If the region is active, the command operates on the region instead; it never deletes lines that are only partially contained in the region (a newline that ends a line counts as part of that line).<br><br>If a match is split across lines, this command keeps all those lines.</td>
</tr>
</table>
<h2 id="Fixit">Commands for fixing typos</h2>
<p class="tab">In this chapter we describe commands that are useful when you catch a mistake while editing. The most fundamental of these commands is the undo command <b>C-/</b> (also bound to <b>C-x u</b> and <b>C-_</b>). This undoes a single command, or a part of a command (as in the case of <b>query-replace</b>), or several consecutive character insertions. Consecutive repetitions of <b>C-/</b> undo earlier and earlier changes, back to the limit of the undo information available.<br><br>Aside from the commands described here, you can erase text using deletion commands such as <b>&lt;DEL&gt;</b> (<b>delete-backward-char</b>). These were described earlier in this manual. See <a href="#Erasing">Erasing</a>.</p>
<ul>
<li><a href="#Undo">Undo</a>: The Undo commands.</li>
<li><a href="#Transpose">Transpose</a>: Exchanging two characters, words, lines, lists...</li>
<li><a href="#Fixing-Case">Fixing Case</a>: Correcting case of last word entered.</li>
<li><a href="#Spelling">Spelling</a>: Apply spelling checker to a word, or a whole file.</li>
</ul>
<h2 id="Undo">Undo</h2>
<p class="tab">The undo command reverses recent changes in the buffer's text. Each buffer records changes individually, and the undo command always applies to the current buffer. You can undo all the changes in a buffer for as far back as the buffer's records go. Usually, each editing command makes a separate entry in the undo records, but some commands such as query-replace divide their changes into multiple entries for flexibility in undoing. Consecutive character insertion commands are usually grouped together into a single undo record, to make undoing less tedious.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-/</b>, <b>C-x u</b>, <b>C-_</b></td>
<td>Undo one entry in the current buffer's undo records (<b>undo</b>).</td>
</tr>
</table>
<p class="tab">To begin to undo, type <b>C-/</b> (or its aliases, <b>C-_</b> or <b>C-x u)</b>. This undoes the most recent change in the buffer, and moves point back to where it was before that change. Consecutive repetitions of <b>C-/</b> (or its aliases) undo earlier and earlier changes in the current buffer. If all the recorded changes have already been undone, the undo command signals an error.<br><br>Any command other than an undo command breaks the sequence of undo commands. Starting from that moment, the entire sequence of undo commands that you have only performed are themselves placed into the undo record, as a single set of changes. Therefore, to re-apply changes you have undone, type <b>C-f</b> or any other command that harmlessly breaks the sequence of undoing; then type <b>C-/</b> to undo the undo command.<br><br>Alternatively, if you want to resume undoing, without redoing previous undo commands, use <b>M-x undo-only</b>. This is like undo, but will not redo changes you have only undone.<br><br>If you notice that a buffer was modified accidentally, the easiest way to recover is to type <b>C-/</b> repeatedly until the stars disappear from the front of the mode line (see <a href="#Mode-Line">Mode Line</a>). Whenever an undo command makes the stars disappear from the mode line, it indicates the buffer contents are the same as they were when the file was last read in or saved. If you do not remember whether you changed the buffer deliberately, type <b>C-/</b> once. When you see the last change you made undone, you will see whether it was an intentional change. If it was an accident, leave it undone. If it was deliberate, redo the change as described above.<br><br>When there is an active region, any use of undo performs selective undo: it undoes the most recent change in the region, instead of the entire buffer. However, when Transient Mark mode is off (see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>), <b>C-/</b> always operates on the entire buffer, ignoring the region. In this case, you can perform selective undo by supplying a prefix argument to the undo command: <b>C-u C-/</b>. To undo further changes in the same region, repeat the undo command (no prefix argument is needed).<br><br>Some specialized buffers do not make undo records. Buffers whose names start with spaces never do; these buffers are used internally by Emacs to hold text that users don't normally look at or edit.<br><br>When the undo information for a buffer becomes too large, Emacs discards the oldest records from time to time (during garbage collection). You can specify how much undo information to keep by setting the variables <b>undo-limit</b>, <b>undo-strong-limit</b>, and <b>undo-outer-limit</b>. Their values are expressed in bytes.<br><br>The variable <b>undo-limit</b> sets a soft limit: Emacs keeps undo data for enough commands to reach this size, and perhaps exceed it, but does not keep data for any earlier commands beyond that. Its default value is 80000. The variable <b>undo-strong-limit</b> sets a stricter limit: any previous command (though not the most recent one) that pushes the size past this amount is forgotten. The default value of <b>undo-strong-limit</b> is 120000. Regardless of the values of those variables, the most recent change is never discarded unless it gets bigger than <b>undo-outer-limit</b> (normally 12,000,000). At that point, Emacs discards the undo data and warns you about it. This is the only situation where you cannot undo the last command. If this happens, you can increase the value of <b>undo-outer-limit</b> to make it even less likely to happen in the future. But if you didn't expect the command to create such large undo data, then it is probably a bug.</p>
<h2 id="Transpose">Transposing text</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>C-t</b></td>
<td>Transpose two characters (<b>transpose-chars</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-t</b></td>
<td>Transpose two words (<b>transpose-words</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-t</b></td>
<td>Transpose two balanced expressions (<b>transpose-sexps</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-t</b></td>
<td>Transpose two lines (<b>transpose-lines</b>).</td>
</tr>
</table>
<p class="tab">The common error of transposing two characters can be fixed, when they are adjacent, with the <b>C-t</b> command (<b>transpose-chars</b>). Normally, <b>C-t</b> transposes the two characters on either side of point. When given at the end of a line, rather than transposing the last character of the line with the newline, which would be useless, <b>C-t</b> transposes the last two characters on the line. So, if you catch your transposition error right away, you can fix it with only a <b>C-t</b>. If you don't catch it so fast, you must move the cursor back between the two transposed characters before you type <b>C-t</b>. If you transposed a space with the last character of the word before it, the word motion commands are a good way of getting there. Otherwise, a reverse search (<b>C-r</b>) is often the best way. See <a href="#Search">Search</a>.<br><br><b>M-t</b> transposes the word before point with the word after point (<b>transpose-words</b>). It moves point forward over a word, dragging the word preceding or containing point forward as well. The punctuation characters between the words do not move. For example, 'FOO, BAR' transposes into 'BAR, FOO' rather than 'BAR FOO,'.<br><br><b>C-M-t</b> (<b>transpose-sexps</b>) is a similar command for transposing two expressions (see <a href="#Expressions">Expressions</a>), and <b>C-x C-t</b> (<b>transpose-lines</b>) exchanges lines. They work like <b>M-t</b> except as regards what units of text they transpose.<br><br>A numeric argument to a transpose command serves as a repeat count: it tells the transpose command to move the character (word, expression, line) before or containing point across other characters (words, expressions, lines). For example, <b>C-u 3 C-t</b> moves the character before point forward across three other characters. It would change '<b>f-!-oobar</b>' into '<b>oobf-!-ar</b>'. This is equivalent to repeating <b>C-t</b> three times. <b>C-u - 4 M-t</b> moves the word before point backward across four words. <b>C-u - C-M-t</b> would cancel the effect of plain <b>C-M-t</b>.<br><br>A numeric argument of zero is assigned a special meaning (because otherwise a command with a repeat count of zero would do nothing): to transpose the character (word, expression, line) ending after point with the one ending after the mark.</p>
<h2 id="Fixing-Case">Case conversion</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>M-- M-l</b></td>
<td>Convert last word to lowercase. Note Meta-- is Meta-minus.</td>
</tr>
<tr class="tcw">
<td><b>M-- M-u</b></td>
<td>Convert last word to all uppercase.</td>
</tr>
<tr class="tcw">
<td><b>M-- M-c</b></td>
<td>Convert last word to lowercase with capital initial.</td>
</tr>
</table>
<p class="tab">A very common error is to type words in the wrong case. Because of this, the word case-conversion commands <b>M-l</b>, <b>M-u</b> and <b>M-c</b> have a special feature when used with a negative argument: they do not move the cursor. As soon as you see you have mistyped the last word, you can case-convert it and go on typing. See <a href="#Case">Case</a>.</p>
<h2 id="Spelling">Checking and correcting spelling</h2>
<p class="tab">This section describes the commands to check the spelling of a single word or of a portion of a buffer. These commands only work if the spelling checker program Aspell, Ispell or Hunspell is installed. These programs are not part of Emacs, but one of them is usually installed in GNU/Linux and other free operating systems. See <a href="/unix/aspell.htm">Aspell</a>.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>M-$</b></td>
<td>Check and correct spelling of the word at point (<b>ispell-word</b>). If the region is active, do it for all words in the region instead.</td>
</tr>
<tr class="tcw">
<td><b>M-x ispell</b></td>
<td>Check and correct spelling of all words in the buffer. If the region is active, do it for all words in the region instead.</td>
</tr>
<tr class="tcw">
<td><b>M-x ispell-buffer</b></td>
<td>Check and correct spelling in the buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x ispell-region</b></td>
<td>Check and correct spelling in the region.</td>
</tr>
<tr class="tcw">
<td><b>M-x ispell-message</b></td>
<td>Check and correct spelling in a draft mail message, excluding cited material.</td>
</tr>
<tr class="tcw">
<td><b>M-x ispell-change-dictionary &lt;RET&gt;</b> <i>dict</i> <b>&lt;RET&gt;</b></td>
<td>Restart the Aspell/Ispell/Hunspell process, using <i>dict</i> as the dictionary.</td>
</tr>
<tr class="tcw">
<td><b>M-x ispell-kill-ispell</b></td>
<td>Kill the Aspell/Ispell/Hunspell subprocess.</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;TAB&gt;</b>, <b>&lt;ESC&gt; &lt;TAB&gt;</b></td>
<td>Complete the word before point based on the spelling dictionary (<b>ispell-complete-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x flyspell-mode</b></td>
<td>Enable Flyspell mode, which highlights all misspelled words.</td>
</tr>
<tr class="tcw">
<td><b>M-x flyspell-prog-mode</b></td>
<td>Enable Flyspell mode for comments and strings only.</td>
</tr>
</table>
<p class="tab">To check the spelling of the word around or before point, and optionally correct it as well, type <b>M-$</b> (<b>ispell-word</b>). If a region is active, <b>M-$</b> checks the spelling of all words in the region. See <a href="#Mark">Mark</a>. (When Transient Mark mode is off, <b>M-$</b> always acts on the word around or before point, ignoring the region; see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>.)<br><br>Similarly, the command <b>M-x ispell</b> performs spell-checking in the region if one is active, or in the entire buffer otherwise. The commands <b>M-x ispell-buffer</b> and <b>M-x ispell-region</b> explicitly perform spell-checking on the entire buffer or the region respectively. To check spelling in an e-mail message you are writing, use <b>M-x ispell-message</b>; that command checks the whole buffer, except for material that is indented or appears to be cited from other messages. See <a href="#Sending-Mail">Sending Mail</a>.<br><br>When one of these commands encounters what appears to be an incorrect word, it asks you what to do. It usually displays a list of numbered "near-misses"&mdash;words that are close to the incorrect word. Then you must type a single-character response. Here are the valid responses:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>digit</b></td>
<td>Replace the word, only this time, with one of the displayed near-misses. Each near-miss is listed with a digit; type that digit to select it.</td>
</tr>
<tr class="tcw">
<td><b>&lt;SPC&gt;</b></td>
<td>Skip this word&mdash;continue to consider it incorrect, but don't change it here.</td>
</tr>
<tr class="tcw">
<td><b>r</b> <i>new</i> <b>&lt;RET&gt;</b></td>
<td>Replace the word, only this time, with <i>new</i>. (The replacement string is rescanned for more spelling errors.)</td>
</tr>
<tr class="tcw">
<td><b>R</b> <i>new</i> <b>&lt;RET&gt;</b></td>
<td>Replace the word with <i>new</i>, and do a query-replace so you can replace it elsewhere in the buffer if you want. (The replacements are rescanned for more spelling errors.)</td>
</tr>
<tr class="tcw">
<td><b>a</b></td>
<td>Accept the incorrect word&mdash;treat it as correct, but only in this editing session.</td>
</tr>
<tr class="tcw">
<td><b>A</b></td>
<td>Accept the incorrect word&mdash;treat it as correct, but only in this editing session and for this buffer.</td>
</tr>
<tr class="tcw">
<td><b>i</b></td>
<td>Insert this word in your private dictionary file so that Aspell or Ispell or Hunspell considers it correct from now on, even in future sessions.</td>
</tr>
<tr class="tcw">
<td><b>m</b></td>
<td>Like <b>i</b>, but you can also specify dictionary completion information.</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Insert the lower-case version of this word in your private dictionary file.</td>
</tr>
<tr class="tcw">
<td><b>l</b> <i>word</i> <b>&lt;RET&gt;</b></td>
<td>Look in the dictionary for words that match <i>word</i>. These words become the new list of "near-misses"; you can select one of them as the replacement by typing a digit. You can use '<b>*</b>' in word as a wildcard.</td>
</tr>
<tr class="tcw">
<td><b>C-g</b>, <b>X</b></td>
<td>Quit interactive spell checking, leaving point at the word that was being checked. You can restart checking again afterward with <b>C-u M-$</b>.</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Quit interactive spell checking and move point back to where it was when you started spell checking.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Quit interactive spell checking and kill the spell-checker subprocess.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>Show the list of options.</td>
</tr>
</table>
<p class="tab">In Text mode and related modes, <b>M-&lt;TAB&gt;</b> (<b>ispell-complete-word</b>) performs in-buffer completion based on spelling correction. Insert the beginning of a word, and then type <b>M-&lt;TAB&gt;</b>; this shows a list of completions. (If your window manager intercepts <b>M-&lt;TAB&gt;</b>, <b>type &lt;ESC&gt; &lt;TAB&gt;</b> or <b>C-M-i</b>.) Each completion is listed with a digit or character; type that digit or character to choose it.<br><br>Once started, the Aspell or Ispell or Hunspell subprocess continues to run, waiting for something to do, so that subsequent spell checking commands complete more quickly. If you want to get rid of the process, use <b>M-x ispell-kill-ispell</b>. This is not usually necessary, as the process uses no processor time except when you do spelling correction.<br><br>Ispell, Aspell and Hunspell look up spelling in two dictionaries: the standard dictionary and your dictionary. The standard dictionary is specified by the variable <b>ispell-local-dictionary</b> or, if that is nil, by the variable ispell-dictionary. If both are nil, the spelling program's default dictionary is used. The command <b>M-x ispell-change-dictionary</b> sets the standard dictionary for the buffer and then restarts the subprocess, so that it uses a different standard dictionary. Your personal dictionary is specified by the variable <b>ispell-personal-dictionary</b>. If that is nil, the spelling program looks for a personal dictionary in a default location.<br><br>A separate dictionary is used for word completion. The variable <b>ispell-complete-word-dict</b> specifies the file name of this dictionary. The completion dictionary must be different because it cannot use root and affix information. For some languages, there is a spell checking dictionary but no word completion dictionary.<br><br>Flyspell mode is a minor mode that performs automatic spell checking as you type. When it finds a word that it does not recognize, it highlights that word. Type <b>M-x flyspell-mode</b> to toggle Flyspell mode in the current buffer. To enable Flyspell mode in all text mode buffers, add <b>flyspell-mode</b> to <b>text-mode-hook</b>. See <a href="#Hooks">Hooks</a>.<br><br>When Flyspell mode highlights a word as misspelled, you can click it with Mouse-2 to display a menu of possible corrections and actions. You can also correct the word by editing it manually in any way you like.<br><br>Flyspell Prog mode works only like ordinary Flyspell mode, except that it only checks words in comments and string constants. This feature is useful for editing programs. Type <b>M-x flyspell-prog-mode</b> to enable or disable this mode in the current buffer. To enable this mode in all programming mode buffers, add <b>flyspell-prog-mode</b> to <b>prog-mode-hook</b> (see <a href="#Hooks">Hooks</a>).</p>
<h2 id="Keyboard-Macros">Keyboard macros</h2>
<p class="tab">In this chapter we describe how to record a sequence of editing commands so you can repeat it conveniently later.<br><br>A keyboard macro is a command defined by an Emacs user to stand for another sequence of keys. For example, if you discover that you are about to type <b>C-n M-d C-d</b> forty times, you can speed your work by defining a keyboard macro to do <b>C-n M-d C-d</b>, and then executing it 39 more times.<br><br>You define a keyboard macro by executing and recording the commands that are its definition. Put differently, as you define a keyboard macro, the definition is being executed for the first time. This way, you can see the effects of your commands, so that you don't have to figure them out in your head. When you close the definition, the keyboard macro is defined and also is, in effect, executed once. You can then do the whole thing over again by invoking the macro.<br><br>Keyboard macros differ from ordinary Emacs commands in that they are written in the Emacs command language rather than in Lisp. This makes it easier for the novice to write them, and makes them more convenient as temporary hacks. However, the Emacs command language is not powerful enough as a programming language to be useful for writing anything intelligent or general. For such things, Lisp must be used.</p>
<ul>
<li><a href="#Basic-Keyboard-Macro">Basic Keyboard Macro</a>: Defining and running keyboard macros.</li>
<li><a href="#Keyboard-Macro-Ring">Keyboard Macro Ring</a>: Where previous keyboard macros are saved.</li>
<li><a href="#Keyboard-Macro-Counter">Keyboard Macro Counter</a>: Inserting incrementing numbers in macros.</li>
<li><a href="#Keyboard-Macro-Query">Keyboard Macro Query</a>: Making keyboard macros do different things each time.</li>
<li><a href="#Save-Keyboard-Macro">Save Keyboard Macro</a>: Giving keyboard macros names; saving them in files.</li>
<li><a href="#Edit-Keyboard-Macro">Edit Keyboard Macro</a>: Editing keyboard macros.</li>
<li><a href="#Keyboard-Macro-Step_002dEdit">Keyboard Macro Step-Edit</a>: Interactively executing and editing a keyboard macro.</li>
</ul>
<h2 id="Basic-Keyboard-Macro">Basic macro use</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>&lt;F3&gt;</b></td>
<td>Start defining a keyboard macro (<b>kmacro-start-macro-or-insert-counter</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;F4&gt;</b></td>
<td>If a keyboard macro is being defined, end the definition; otherwise, execute the most recent keyboard macro (<b>kmacro-end-or-call-macro</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u &lt;F3&gt;</b></td>
<td>Re-execute last keyboard macro, then append keys to its definition.</td>
</tr>
<tr class="tcw">
<td><b>C-u C-u &lt;F3&gt;</b></td>
<td>Append keys to the last keyboard macro without re-executing it.</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k r</b></td>
<td>Run the last keyboard macro on each line that begins in the region (<b>apply-macro-to-region-lines</b>).</td>
</tr>
</table>
<p class="tab">To start defining a keyboard macro, type <b>&lt;F3&gt;</b>. From then on, your keys continue to be executed, but also become part of the definition of the macro. '<b>Def</b>' appears in the mode line to remind you of what is happening. When you are finished, type <b>&lt;F4&gt;</b> (<b>kmacro-end-or-call-macro</b>) to terminate the definition. For example,</p>
<pre class="tab tcy">&lt;F3&gt; M-f foo &lt;F4&gt;</pre>
<p class="tab">Defines a macro to move forward a word and then insert '<b>foo</b>'. Note that <b>&lt;F3&gt;</b> and <b>&lt;F4&gt;</b> do not become part of the macro.<br><br>After defining the macro, you can call it with <b>&lt;F4&gt;</b>. For the above example, this has the same effect as typing <b>M-f foo</b> again. (Note the two roles of the <b>&lt;F4&gt;</b> command: it ends the macro if you are defining one, or calls the last macro otherwise.) You can also supply <b>&lt;F4&gt;</b> with a numeric prefix argument '<b>n</b>', which means to invoke the macro '<b>n</b>' times. An argument of zero repeats the macro indefinitely, until it gets an error or you type <b>C-g</b> (or, on MS-DOS, <b>C-&lt;BREAK&gt;</b>).<br><br>The above example demonstrates a handy trick that you can employ with keyboard macros: if you want to repeat an operation at regularly spaced places in the text, include a motion command as part of the macro. In this case, repeating the macro inserts the string '<b>foo</b>' after each successive word.<br><br>After terminating the definition of a keyboard macro, you can append more keystrokes to its definition by typing <b>C-u &lt;F3&gt;</b>. This is equivalent to plain <b>&lt;F3&gt;</b> followed by retyping the whole definition so far. As a consequence, it re-executes the macro as previously defined. If you change the variable <b>kmacro-execute-before-append</b> to nil, the existing macro is not re-executed before appending to it (the default is <b>t</b>). You can also add to the end of the definition of the last keyboard macro without re-executing it by typing <b>C-u C-u &lt;F3&gt;</b>.<br><br>When a command reads an argument with the minibuffer, your minibuffer input becomes part of the macro along with the command. So when you replay the macro, the command gets the same argument as when you entered the macro. For example,</p>
<pre class="tab tcy">&lt;F3&gt; C-a C-k C-x b foo &lt;RET&gt; C-y C-x b &lt;RET&gt; &lt;F4&gt;</pre>
<p class="tab">Defines a macro that kills the current line, yanks it into the buffer '<b>foo</b>', then returns to the original buffer.<br><br>Most keyboard commands work as usual in a keyboard macro definition, with some exceptions. Typing <b>C-g</b> (<b>keyboard-quit</b>) quits the keyboard macro definition. Typing <b>C-M-c</b> (<b>exit-recursive-edit</b>) can be unreliable: it works as you'd expect if exiting a recursive edit that started in the macro, but if it exits a recursive edit that started before you invoked the keyboard macro, it also necessarily exits the keyboard macro too. Mouse events are also unreliable, even though you can use them in a keyboard macro: when the macro replays the mouse event, it uses the original mouse position of that event, the position that the mouse had while you were defining the macro. The effect of this may be hard to predict.<br><br>The command <b>C-x C-k r</b> (<b>apply-macro-to-region-lines</b>) repeats the last defined keyboard macro on each line that begins in the region. It does this line by line, by moving point to the beginning of the line and then executing the macro.<br><br>In addition to the <b>&lt;F3&gt;</b> and <b>&lt;F4&gt;</b> commands described above, Emacs also supports an older set of key bindings for defining and executing keyboard macros. To begin a macro definition, type <b>C-x ( (kmacro-start-macro)</b>; as with <b>&lt;F3&gt;</b>, a prefix argument appends this definition to the last keyboard macro. To end a macro definition, type <b>C-x ) (kmacro-end-macro)</b>. To execute the most recent macro, type <b>C-x e (kmacro-end-and-call-macro)</b>. If you enter <b>C-x e</b> while defining a macro, the macro is terminated and executed immediately. Immediately after typing <b>C-x e</b>, you can type <b>&lt;e&gt;</b> repeatedly to immediately repeat the macro one or more times. You can also give <b>C-x e</b> a repeat argument, only like <b>&lt;F4&gt;</b>.<br><br><b>C-x )</b> can be given a repeat count as an argument. This means to repeat the macro right after defining it. The macro definition itself counts as the first repetition, as it is executed as you define it, so <b>C-u 4 C-x )</b> executes the macro immediately 3 additional times.</p>
<h2 id="Keyboard-Macro-Ring">The keyboard macro ring</h2>
<p class="tab">All defined keyboard macros are recorded in the keyboard macro ring. There is only one keyboard macro ring, shared by all buffers.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:130px"><b>C-x C-k C-k</b></td>
<td>Execute the keyboard macro at the head of the ring (<b>kmacro-end-or-call-macro-repeat</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k C-n</b></td>
<td>Rotate the keyboard macro ring to the next macro (defined earlier) (<b>kmacro-cycle-ring-next</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k C-p</b></td>
<td>Rotate the keyboard macro ring to the previous macro (defined later) (<b>kmacro-cycle-ring-previous</b>).</td>
</tr>
</table>
<p class="tab">All commands which operate on the keyboard macro ring use the same <b>C-x C-k</b> prefix. Most of these commands can be executed and repeated immediately after each other without repeating the <b>C-x C-k</b> prefix. For example,</p>
<pre class="tab tcy">C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d</pre>
<p class="tab">will rotate the keyboard macro ring to the "second previous" macro, execute the resulting head macro three times, rotate back to the original head macro, execute that once, rotate to the "previous" macro, execute that, and finally delete it from the macro ring.<br><br>The command <b>C-x C-k C-k</b> (<b>kmacro-end-or-call-macro-repeat</b>) executes the keyboard macro at the head of the macro ring. You can repeat the macro immediately by typing another <b>C-k</b>, or you can rotate the macro ring immediately by typing <b>C-n</b> or <b>C-p</b>.<br><br>When a keyboard macro is being defined, <b>C-x C-k C-k</b> behaves like <b>&lt;F4&gt;</b> except that, immediately afterward, you can use most key bindings of this section without the <b>C-x C-k</b> prefix. For instance, another <b>C-k</b> will re-execute the macro.<br><br>The commands <b>C-x C-k C-n</b> (<b>kmacro-cycle-ring-next</b>) and <b>C-x C-k C-p</b> (<b>kmacro-cycle-ring-previous</b>) rotate the macro ring, bringing the next or previous keyboard macro to the head of the macro ring. The definition of the new head macro is displayed in the echo area. You can continue to rotate the macro ring immediately by repeating only <b>C-n</b> and <b>C-p</b> until the desired macro is at the head of the ring. To execute the new macro ring head immediately, only type <b>C-k</b>.<br><br>Note that Emacs treats the head of the macro ring as the "last defined keyboard macro". For instance, <b>&lt;F4&gt;</b> will execute that macro, and <b>C-x C-k n</b> gives it a name.<br><br>The maximum number of macros stored in the keyboard macro ring is determined by the customizable variable <b>kmacro-ring-max</b>.</p>
<h2 id="Keyboard-Macro-Counter">The keyboard macro counter</h2>
<p class="tab">Each keyboard macro has an associated counter, which is initialized to 0 when you start defining the macro. This counter allows you to insert a number into the buffer that depends on the number of times the macro is called. The counter is incremented each time its value is inserted into the buffer.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>&lt;F3&gt;</b></td>
<td>In a keyboard macro definition, insert the keyboard macro counter value in the buffer (<b>kmacro-start-macro-or-insert-counter</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k C-i</b></td>
<td>Insert the keyboard macro counter value in the buffer (<b>kmacro-insert-counter</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k C-c</b></td>
<td>Set the keyboard macro counter (<b>kmacro-set-counter</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k C-a</b></td>
<td>Add the prefix arg to the keyboard macro counter (<b>kmacro-add-counter</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k C-f</b></td>
<td>Specify the format for inserting the keyboard macro counter (<b>kmacro-set-format</b>).</td>
</tr>
</table>
<p class="tab">When you are defining a keyboard macro, the command <b>&lt;F3&gt;</b> (<b>kmacro-start-macro-or-insert-counter</b>) inserts the current value of the keyboard macro's counter into the buffer, and increments the counter by 1. (If you are not defining a macro, <b>&lt;F3&gt;</b> begins a macro definition instead. See <a href="#Basic-Keyboard-Macro">Basic Keyboard Macro</a>.) You can use a numeric prefix argument to specify a different increment. If you only specify a <b>C-u</b> prefix, that is the same as an increment of zero: it inserts the current counter value without changing it.<br><br>As an example, let us show how the keyboard macro counter can build a numbered list. Consider the following key sequence:</p>
<pre class="tab tcy">&lt;F3&gt; C-a &lt;F3&gt; . &lt;SPC&gt; &lt;F4&gt;</pre>
<p class="tab">As part of this keyboard macro definition, the string '0. ' was inserted into the beginning of the current line. If you now move somewhere else in the buffer and type <b>&lt;F4&gt;</b> to invoke the macro, the string '1. ' is inserted at the beginning of that line. Subsequent invocations insert '2. ', '3. ', and so forth.<br><br>The command <b>C-x C-k C-i</b> (<b>kmacro-insert-counter</b>) does the same thing as <b>&lt;F3&gt;</b>, but it can be used outside a keyboard macro definition. When no keyboard macro is being defined or executed, it inserts and increments the counter of the macro at the head of the keyboard macro ring.<br><br>The command <b>C-x C-k C-c</b> (<b>kmacro-set-counter</b>) sets the current macro counter to the value of the numeric argument. If you use it inside the macro, it operates on each repetition of the macro. If you specify only <b>C-u</b> as the prefix, while executing the macro, that resets the counter to the value it had at the beginning of the current repetition of the macro (undoing any increments so far in this repetition).<br><br>The command <b>C-x C-k C-a</b> (<b>kmacro-add-counter</b>) adds the prefix argument to the current macro counter. With only <b>C-u</b> as argument, it resets the counter to the last value inserted by any keyboard macro. (Normally, when you use this, the last insertion is in the same macro and it is the same counter.)<br><br>The command <b>C-x C-k C-f</b> (<b>kmacro-set-format</b>) prompts for the format to use when inserting the macro counter. The default format is '<b>%d</b>', which means to insert the number in decimal without any padding. You can exit with empty minibuffer to reset the format to this default. You can specify any format string that the format function accepts and that makes sense with a single integer extra argument. Do not put the format string inside double quotes when you insert it in the minibuffer.<br><br>If you use this command while no keyboard macro is being defined or executed, the new format affects all subsequent macro definitions. Existing macros continue to use the format in effect when they were defined. If you set the format while defining a keyboard macro, this affects the macro being defined from that point on, but it does not affect subsequent macros. Execution of the macro, at each step, uses the format in effect at that step during its definition. Changes to the macro format during execution of a macro, like the corresponding changes during its definition, have no effect on subsequent macros.<br><br>The format set by <b>C-x C-k C-f</b> does not affect insertion of numbers stored in registers.<br><br>If you use a register as a counter, incrementing it on each repetition of the macro, that accomplishes the same thing as a keyboard macro counter. See <a href="#Number-Registers">Number Registers</a>. For most purposes, it is simpler to use a keyboard macro counter.</p>
<h2 id="Keyboard-Macro-Query">Executing macros with variations</h2>
<p class="tab">In a keyboard macro, you can create an effect similar to that of <b>query-replace</b>, in that the macro asks you each time around whether to make a change.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>C-x q</b></td>
<td>When this point is reached during macro execution, ask for confirmation (<b>kbd-macro-query</b>).</td>
</tr>
</table>
<p class="tab">While defining the macro, type <b>C-x q</b> at the point where you want the query to occur. During macro definition, the <b>C-x q</b> does nothing, but when you run the macro later, <b>C-x q</b> asks you interactively whether to continue.<br><br>The valid responses when <b>C-x q</b> asks are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>&lt;SPC&gt;</b> (or <b>y</b>)</td>
<td>Continue executing the keyboard macro.</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b> (or <b>n</b>)</td>
<td>Skip the remainder of this repetition of the macro, and start right away with the next repetition.</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b> (or <b>q</b>)</td>
<td>Skip the remainder of this repetition and cancel further repetitions.</td>
</tr>
<tr class="tcw">
<td><b>C-r</b></td>
<td>Enter a recursive editing level, where you can perform editing that is not part of the macro. When you exit the recursive edit using <b>C-M-c</b>, you are asked again how to continue with the keyboard macro. If you type a <b>&lt;SPC&gt;</b> at this time, the rest of the macro definition is executed. It is up to you to leave point and the text in a state such that the rest of the macro will do what you want.</td>
</tr>
</table>
<p class="tab"><b>C-u C-x q</b>, which is <b>C-x q</b> with a numeric argument, performs a completely different function. It enters a recursive edit reading input from the keyboard, both when you type it during the definition of the macro, and when it is executed from the macro. During definition, the editing you do inside the recursive edit does not become part of the macro. During macro execution, the recursive edit gives you a chance to do some particularized editing on each repetition. See <a href="#Recursive-Edit">Recursive Edit</a>.</p>
<h2 id="Save-Keyboard-Macro">Naming and saving keyboard macros</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>C-x C-k n</b></td>
<td>Give a command name (for the duration of the Emacs session) to the most recently defined keyboard macro (<b>kmacro-name-last-macro</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k b</b></td>
<td>Bind the most recently defined keyboard macro to a key sequence (for the duration of the session) (<b>kmacro-bind-to-key</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x insert-kbd-macro</b></td>
<td>Insert in the buffer a keyboard macro's definition, as Lisp code.</td>
</tr>
</table>
<p class="tab">If you want to save a keyboard macro for later use, you can give it a name using <b>C-x C-k n</b> (<b>kmacro-name-last-macro</b>). This reads a name as an argument using the minibuffer and defines that name to execute the last keyboard macro, in its current form. (If you later add to the definition of this macro, that does not alter the name's definition as a macro.) The macro name is a Lisp symbol, and defining it in this way makes it a valid command name for calling with <b>M-x</b> or for binding a key to with <b>global-set-key</b> (see <a href="#Keymaps">Keymaps</a>). If you specify a name with a prior definition other than a keyboard macro, an error message is shown and nothing is changed.<br><br>You can also bind the last keyboard macro (in its current form) to a key, using <b>C-x C-k b</b> (<b>kmacro-bind-to-key</b>) followed by the key sequence you want to bind. You can bind to any key sequence in the global keymap, but since most key sequences already have other bindings, select the key sequence carefully. If you try to bind to a key sequence with an existing binding (in any keymap), this command asks you for confirmation before replacing the existing binding.<br><br>To avoid problems caused by overriding existing bindings, the key sequences <b>C-x C-k 0</b> through <b>C-x C-k 9</b> and <b>C-x C-k A</b> through <b>C-x C-k Z</b> are reserved for your keyboard macro bindings. In fact, to bind to one of these key sequences, you only need to type the digit or letter rather than the whole key sequences. For example,</p>
<pre class="tab tcy">C-x C-k b 4</pre>
<p class="tab">Binds the last keyboard macro to the key sequence <b>C-x C-k 4</b>.<br><br>Once a macro has a command name, you can save its definition in a file. Then it can be used in another editing session. First, visit the file where you want to save the definition. Then use this command:</p>
<pre class="tab tcy">M-x insert-kbd-macro &lt;RET&gt; macroname &lt;RET&gt;</pre>
<p class="tab">This inserts some Lisp code that, when executed later, defines the same macro with the same definition it has now. (You need not understand Lisp code to do this, because <b>insert-kbd-macro</b> writes the Lisp code for you.) Then save the file. You can load the file later with load-file (see <a href="#Lisp-Libraries">Lisp Libraries</a>). If the file you save in is your init file <b>~/.emacs</b> (see <a href="#Init-File">Init File</a>) then the macro is defined each time you run Emacs.<br><br>If you give <b>insert-kbd-macro</b> a numeric argument, it makes additional Lisp code to record the keys (if any) that you have bound to macroname, so that the macro is reassigned the same keys when you load the file.</p>
<h2 id="Edit-Keyboard-Macro">Editing a keyboard macro</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>C-x C-k C-e</b></td>
<td>Edit the last defined keyboard macro (<b>kmacro-edit-macro</b>).</td>
</tr>
<tr class="tcw">
<td>C-x C-k e name <b>&lt;RET&gt;</b></td>
<td>Edit a previously defined keyboard macro name (<b>edit-kbd-macro</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-k l</b></td>
<td>Edit the last 300 keystrokes as a keyboard macro (<b>kmacro-edit-lossage</b>).</td>
</tr>
</table>
<p class="tab">You can edit the last keyboard macro by typing <b>C-x C-k C-e</b> or <b>C-x C-k &lt;RET&gt;</b> (<b>kmacro-edit-macro</b>). This formats the macro definition in a buffer and enters a specialized major mode for editing it. Type <b>C-h m</b> once in that buffer to display details of how to edit the macro. When you are finished editing, type <b>C-c C-c</b>.<br><br>You can edit a named keyboard macro or a macro bound to a key by typing <b>C-x C-k e</b> (<b>edit-kbd-macro</b>). Follow that with the keyboard input that you would use to invoke the macro: <b>C-x e</b> or <b>M-x name</b> or some other key sequence.<br><br>You can edit the last 300 keystrokes as a macro by typing <b>C-x C-k l</b> (<b>kmacro-edit-lossage</b>).</p>
<h2 id="Keyboard-Macro-Step_002dEdit">Stepwise editing a keyboard macro</h2>
<p class="tab">You can interactively replay and edit the last keyboard macro, one command at a time, by typing <b>C-x C-k &lt;SPC&gt;</b> (<b>kmacro-step-edit-macro</b>). Unless you quit the macro using <b>q</b> or <b>C-g</b>, the edited macro replaces the last macro on the macro ring.<br><br>This macro editing feature shows the last macro in the minibuffer together with the first (or next) command to be executed, and prompts you for an action. You can enter <b>?</b> to get a summary of your options. These actions are available:</p>
<ul>
<li><b>&lt;SPC&gt;</b> and <b>y</b> execute the current command, and advance to the next command in the keyboard macro.</li>
<li><b>n</b>, <b>d</b>, and <b>&lt;DEL&gt;</b> skip and delete the current command.</li>
<li><b>f</b> skips the current command in this execution of the keyboard macro, but doesn't delete it from the macro.</li>
<li><b>&lt;TAB&gt;</b> executes the current command, and all similar commands immediately following the current command; for example, <b>&lt;TAB&gt;</b> may be used to insert a sequence of characters (corresponding to a sequence of <b>self-insert-command</b> commands).</li>
<li><b>c</b> continues execution (without further editing) until the end of the keyboard macro. If execution terminates normally, the edited macro replaces the original keyboard macro.</li>
<li><b>C-k</b> skips and deletes the rest of the keyboard macro, terminates step-editing, and replaces the original keyboard macro with the edited macro.</li>
<li><b>q</b> and <b>C-g</b> cancels the step-editing of the keyboard macro; discarding any changes made to the keyboard macro.</li>
<li><b>i KEY... C-j</b> reads and executes a series of key sequences (not including the final <b>C-j</b>), and inserts them before the current command in the keyboard macro, without advancing over the current command.</li>
<li><b>I KEY...</b> reads one key sequence, executes it, and inserts it before the current command in the keyboard macro, without advancing over the current command.</li>
<li><b>r KEY... C-j</b> reads and executes a series of key sequences (not including the final <b>C-j</b>), and replaces the current command in the keyboard macro with them, advancing over the inserted key sequences.</li>
<li><b>R KEY...</b> reads one key sequence, executes it, and replaces the current command in the keyboard macro with that key sequence, advancing over the inserted key sequence.</li>
<li><b>a KEY... C-j</b> executes the current command, then reads and executes a series of key sequences (not including the final <b>C-j</b>), and inserts them after the current command in the keyboard macro; it then advances over the current command and the inserted key sequences.</li>
<li><b>A KEY... C-j</b> executes the rest of the commands in the keyboard macro, then reads and executes a series of key sequences (not including the final <b>C-j</b>), and appends them at the end of the keyboard macro; it then terminates the step-editing and replaces the original keyboard macro with the edited macro.</li>
</ul>
<h2 id="Files">File handling</h2>
<p class="tab">The operating system stores data permanently in named files, so most of the text you edit with Emacs comes from a file and is ultimately stored in a file.<br><br>To edit a file, you must tell Emacs to read the file and prepare a buffer containing a copy of the file's text. This is called visiting the file. Editing commands apply directly to text in the buffer; that is, to the copy inside Emacs. Your changes appear in the file itself only when you save the buffer back into the file.<br><br>In addition to visiting and saving files, Emacs can delete, copy, rename, and append to files, keep multiple versions of them, and operate on file directories.</p>
<ul>
<li><a href="#File-Names">File Names</a>: How to type and edit file-name arguments.</li>
<li><a href="#Visiting">Visiting</a>: Visiting a file prepares Emacs to edit the file.</li>
<li><a href="#Saving">Saving</a>: Saving makes your changes permanent.</li>
<li><a href="#Reverting">Reverting</a>: Reverting cancels all the changes not saved.</li>
<li><a href="#Autorevert">Autorevert</a>: Auto Reverting non-file buffers.</li>
<li><a href="#Auto-Save">Auto Save</a>: Auto Save periodically protects against loss of data.</li>
<li><a href="#File-Aliases">File Aliases</a>: Handling multiple names for one file.</li>
<li><a href="#Directories">Directories</a>: Creating, deleting, and listing file directories.</li>
<li><a href="#Comparing-Files">Comparing Files</a>: Finding where two files differ.</li>
<li><a href="#Diff-Mode">Diff Mode</a>: Mode for editing file differences.</li>
<li><a href="#Misc-File-Ops">Misc File Ops</a>: Other things you can do on files.</li>
<li><a href="#Compressed-Files">Compressed Files</a>: Accessing compressed files.</li>
<li><a href="#File-Archives">File Archives</a>: Operating on tar, zip, jar etc. archive files.</li>
<li><a href="#Remote-Files">Remote Files</a>: Accessing files on other machines.</li>
<li><a href="#Quoted-File-Names">Quoted File Names</a>: Quoting special characters in file names.</li>
<li><a href="#File-Name-Cache">File Name Cache</a>: Completion against a list of files you often use.</li>
<li><a href="#File-Conveniences">File Conveniences</a>: Convenience Features for Finding Files.</li>
<li><a href="#Filesets">Filesets</a>: Handling sets of files.</li>
</ul>
<h2 id="File-Names">File names</h2>
<p class="tab">Many Emacs commands that operate on a file require you to specify the file name, using the minibuffer (see <a href="#Minibuffer-File">Minibuffer File</a>).<br><br>While in the minibuffer, you can use the usual completion and history commands (see <a href="#Minibuffer">Minibuffer</a>). Note that file name completion ignores file names whose extensions appear in the variable completion-ignored-extensions (see <a href="#Completion-Options">Options</a>). Note also that most commands use "permissive completion with confirmation" for reading file names: you are allowed to submit a nonexistent file name, but if you type <b>&lt;RET&gt;</b> immediately after completing up to a nonexistent file name, Emacs prints '<b>[Confirm]</b>' and you must type a second <b>&lt;RET&gt;</b> to confirm. See <a href="#Completion-Exit">Completion Exit</a>, for details.<br><br>Each buffer has a default directory, stored in the buffer-local variable <b>default-directory</b>. Whenever Emacs reads a file name using the minibuffer, it usually inserts the default directory into the minibuffer as the initial contents. You can inhibit this insertion by changing the variable <b>insert-default-directory</b> to nil (see <a href="#Minibuffer-File">Minibuffer File</a>). Regardless, Emacs always assumes that any relative file name is relative to the default directory, e.g., entering a file name without a directory specifies a file in the default directory.<br><br>When you visit a file, Emacs sets <b>default-directory</b> in the visiting buffer to the directory of its file. When you create a new buffer that is not visiting a file, via a command like <b>C-x b</b>, its default directory is usually copied from the buffer that was current at the time (see <a href="#Select-Buffer">Select Buffer</a>). You can use the command <b>M-x pwd</b> to see the value of <b>default-directory</b> in the current buffer. The command M-x cd prompts for a directory name, and sets the buffer's <b>default-directory</b> to that directory (doing this does not change the buffer's file name, if any).<br><br>As an example, when you visit the file /u/rms/gnu/gnu.tasks, the default directory is set to /u/rms/gnu/. If you invoke a command that reads a file name, entering only '<b>foo</b>' in the minibuffer, with a directory omitted, specifies the file /u/rms/gnu/foo; entering '<b>../.login</b>' specifies /u/rms/.login; and entering '<b>new/foo</b>' specifies /u/rms/gnu/new/foo.<br><br>When typing a file name into the minibuffer, you can make use of a few shortcuts: a double slash is interpreted as "ignore everything before the second slash in the pair", and '<b>~/</b>' is interpreted as your home directory. See <a href="#Minibuffer-File">Minibuffer File</a>.<br><br>The character '<b>$</b>' is used to substitute an <a href="/jargon/e/envivari.htm">environment variable</a> into a file name. The name of the environment variable consists of all the alphanumeric characters after the '<b>$</b>'; alternatively, it can be enclosed in braces after the '<b>$</b>'. For example, if you have used the shell command export FOO=rms/hacks to set up an environment variable named FOO, then both /u/$FOO/test.c and /u/${FOO}/test.c are abbreviations for /u/rms/hacks/test.c. If the environment variable is not defined, no substitution occurs, so that the character '<b>$</b>' stands for itself. Note that environment variables affect Emacs only if they are applied before Emacs is started.</p>
<p class="tab" id="File-Names-with-_0024">To access a file with '<b>$</b>' in its name, if the '<b>$</b>' causes expansion, type '<b>$$</b>'. This pair is converted to a single '<b>$</b>' at the same time that variable substitution is performed for a single '<b>$</b>'. Alternatively, quote the whole file name with '<b>/:</b>' (see <a href="#Quoted-File-Names">Quoted File Names</a>). File names which begin with a literal '<b>~</b>' should also be quoted with '<b>/:</b>'.</p>
<p class="tab">You can include non-ASCII characters in file names. See <a href="#File-Name-Coding">File Name Coding</a>.</p>
<h2 id="Visiting">Visiting files</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>C-x C-f</b></td>
<td>Visit a file (<b>find-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-r</b></td>
<td>Visit a file for viewing, without allowing changes to it (<b>find-file-read-only</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-v</b></td>
<td>Visit a different file instead of the one visited last (<b>find-alternate-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 f</b></td>
<td>Visit a file, in another window (<b>find-file-other-window</b>). Don't alter what is displayed in the selected window.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 f</b></td>
<td>Visit a file, in a new frame (<b>find-file-other-frame</b>). Don't alter what is displayed in the selected frame.</td>
</tr>
<tr class="tcw">
<td><b>M-x find-file-literally</b></td>
<td>Visit a file with no conversion of the contents.</td>
</tr>
</table>
<p class="tab">Visiting a file means reading its contents into an Emacs buffer so you can edit them. Emacs makes a new buffer for each file that you visit.<br><br>To visit a file, type <b>C-x C-f</b> (<b>find-file</b>) and use the minibuffer to enter the name of the desired file. While in the minibuffer, you can abort the command by typing <b>C-g</b>. See <a href="#File-Names">File Names</a>, for details about entering file names into minibuffers.<br><br>If the specified file exists but the system does not allow you to read it, an error message is displayed in the echo area. Otherwise, you can tell that <b>C-x C-f</b> has completed successfully by the appearance of new text on the screen, and by the buffer name shown in the mode line (see <a href="#Mode-Line">Mode Line</a>). Emacs normally constructs the buffer name from the file name, omitting the directory name. For example, a file named <b>/usr/rms/emacs.tex</b> is visited in a buffer named '<b>emacs.tex</b>'. If there is already a buffer with that name, Emacs constructs a unique name; the normal method is to append '<b>&lt;2&gt;</b>', '<b>&lt;3&gt;</b>', and so on, but you can select other methods. See <a href="#Uniquify">Uniquify</a>.<br><br>To create a new file, only visit it using the same command, <b>C-x C-f</b>. Emacs displays '(New file)' in the echo area, but in other respects behaves as if you had visited an existing empty file.<br><br>After visiting a file, the changes you make with editing commands are made in the Emacs buffer. They do not take effect in the visited file, until you save the buffer (see <a href="#Saving">Saving</a>). If a buffer contains changes that have not been saved, we say the buffer is modified. This implies that some changes are lost if the buffer is not saved. The mode line displays two stars near the left margin to indicate that the buffer is modified.<br><br>If you visit a file that is already in Emacs, <b>C-x C-f</b> switches to the existing buffer instead of making another copy. Before doing so, it checks whether the file has changed since you last visited or saved it. If the file has changed, Emacs offers to reread it.<br><br>If you try to visit a file larger than <b>large-file-warning-threshold</b> (the default is 10000000, which is about 10 megabytes), Emacs asks you for confirmation first. You can answer <b>y</b> to proceed with visiting the file. Note, however, that Emacs cannot visit files that are larger than the maximum Emacs buffer size, which is limited by the amount of memory Emacs can allocate and by the integers that Emacs can represent (see <a href="#Buffers">Buffers</a>). If you try, Emacs displays an error message saying that the maximum buffer size was exceeded.<br><br>If the file name you specify contains shell-style wildcard characters, Emacs visits all the files that match it. (On case-insensitive filesystems, Emacs matches the wildcards disregarding the letter case.) Wildcards include '<b>?</b>', '<b>*</b>', and '<b>[...]</b>' sequences. To enter the wildcard '<b>?</b>' in a file name in the minibuffer, you need to type <b>C-q ?</b>. See <a href="#Quoted-File-Names">Quoted File Names</a>, for information on how to visit a file whose name actually contains wildcard characters. You can disable the wildcard feature by customizing <b>find-file-wildcards</b>.<br><br>If you visit the wrong file unintentionally by typing its name incorrectly, type <b>C-x C-v</b> (<b>find-alternate-file</b>) to visit the file you wanted. <b>C-x C-v</b> is similar to <b>C-x C-f</b>, but it kills the current buffer (after first offering to save it if it's modified). When <b>C-x C-v</b> reads the file name to visit, it inserts the entire default file name in the buffer, with point only after the directory part; this is convenient if you made a slight error in typing the name.<br><br>If you "visit" a file that is actually a directory, Emacs invokes Dired, the Emacs directory browser. See <a href="#Dired">Dired</a>. You can disable this behavior by setting the variable <b>find-file-run-dired</b> to <b>nil</b>; in that case, it is an error to try to visit a directory.<br><br>Files that are actually collections of other files, or file archives, are visited in special modes which invoke a Dired-like environment to allow operations on archive members. See <a href="#File-Archives">File Archives</a>, for more about these features.<br><br>If you visit a file that the operating system won't let you modify, or that is marked read-only, Emacs makes the buffer read-only too, so that you won't go ahead and make changes that you'll have trouble saving afterward. You can make the buffer writable with <b>C-x C-q</b> (<b>read-only-mode</b>). See <a href="#Misc-Buffer">Misc Buffer</a>.<br><br>If you want to visit a file as read-only to protect yourself from entering changes accidentally, visit it with the command <b>C-x C-r</b> (<b>find-file-read-only</b>) instead of <b>C-x C-f</b>.<br><br><b>C-x 4 f</b> (<b>find-file-other-window</b>) is like <b>C-x C-f</b> except that the buffer containing the specified file is selected in another window. The window that was selected before <b>C-x 4 f</b> continues to show the same buffer it was already showing. If this command is used when only one window is being displayed, that window is split in two, with one window showing the same buffer as before, and the other one showing the newly requested file. See <a href="#Windows">Windows</a>.<br><br><b>C-x 5 f</b> (<b>find-file-other-frame</b>) is similar, but opens a new frame, or selects any existing frame showing the specified file. See <a href="#Frames">Frames</a>.<br><br>On graphical displays, there are two additional methods for visiting files. Firstly, when Emacs is built with a suitable GUI toolkit, commands invoked with the mouse (by clicking the menu bar or tool bar) use the toolkit's standard "File Selection" dialog instead of prompting for the file name in the minibuffer. On GNU/Linux platforms, Emacs does this when built with <a href="/jargon/g/gtk.htm">GTK</a>, LessTif, and Motif toolkits; on Microsoft Windows and Mac, the GUI version does that by default. For information on how to customize this, see <a href="#Dialog-Boxes">Dialog Boxes</a>.<br><br>Secondly, Emacs supports "drag-and-drop": dropping a file into an ordinary Emacs window visits the file using that window. As an exception, dropping a file into a window displaying a Dired buffer moves or copies the file into the displayed directory. For details, see <a href="#Drag-and-Drop">Drag and Drop</a>, and <a href="#Misc-Dired-Features">Misc Dired Features</a>.<br><br>Each time you visit a file, Emacs automatically scans its contents to detect what character encoding and end-of-line convention it uses, and converts these to Emacs's internal encoding and end-of-line convention in the buffer. When you save the buffer, Emacs performs the inverse conversion, writing the file to disk with its original encoding and end-of-line convention. See <a href="#Coding-Systems">Coding Systems</a>.<br><br>If you want to edit a file as a sequence of ASCII characters with no special encoding or conversion, use the <b>M-x find-file-literally</b> command. This visits a file, like <b>C-x C-f</b>, but does not do format conversion, character code conversion (see <a href="#Coding-Systems">Coding Systems</a>), or automatic uncompression (see <a href="#Compressed-Files">Compressed Files</a>), and does not add a final newline because of <b>require-final-newline</b> (see <a href="#Customize-Save">Customize Save</a>). If you have already visited the same file in the usual (non-literal) manner, this command asks you whether to visit it literally instead.<br><br>Two special hook variables allow extensions to modify the operation of visiting files. Visiting a file that does not exist runs the functions in <b>find-file-not-found-functions</b>; this variable holds a list of functions, which are called one by one (with no arguments) until one of them returns non-nil. This is not a normal hook, and the name ends in '<b>-functions</b>' rather than '<b>-hook</b>' to indicate that fact.<br><br>Successful visiting of any file, whether existing or not, calls the functions in <b>find-file-hook</b>, with no arguments. This variable is a normal hook. In the case of a nonexistent file, the <b>find-file-not-found-functions</b> are run first. See <a href="#Hooks">Hooks</a>.<br><br>There's several ways to specify automatically the major mode for editing the file (see <a href="#Choosing-Modes">Choosing Modes</a>), and to specify local variables defined for that file (see <a href="#File-Variables">File Variables</a>).</p>
<h2 id="Saving">Saving files</h2>
<p class="tab">Saving a buffer in Emacs means writing its contents back into the file that was visited in the buffer.</p>
<ul>
<li><a href="#Save-Commands">Save Commands</a>: Commands for saving files.</li>
<li><a href="#Backup">Backup</a>: How Emacs saves the old version of your file.</li>
<li><a href="#Customize-Save">Customize Save</a>: Customizing the saving of files.</li>
<li><a href="#Interlocking">Interlocking</a>: How Emacs protects against simultaneous editing of one file by two users.</li>
<li><a href="#File-Shadowing">Shadowing</a>: Copying files to "shadows" automatically.</li>
<li><a href="#Timestamps">Timestamps</a>: Emacs can update timestamps on saved files.</li>
</ul>
<h2 id="Save-Commands">Commands for saving files</h2>
<p class="tab">These are the commands that relate to saving and writing files.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>C-x C-s</b></td>
<td>Save the current buffer to its file (<b>save-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x s</b></td>
<td>Save any or all buffers to their files (<b>save-some-buffers</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-~</b></td>
<td>Forget that the current buffer is changed (<b>not-modified</b>). With prefix argument (<b>C-u</b>), mark the current buffer as changed.</td>
</tr>
<tr class="tcw">
<td><b>C-x C-w</b></td>
<td>Save the current buffer with a specified file name (<b>write-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x set-visited-file-name</b></td>
<td>Change the file name under which the current buffer is saved.</td>
</tr>
</table>
<p class="tab">When you want to save the file and make your changes permanent, type <b>C-x C-s</b> (<b>save-buffer</b>). After saving is finished, <b>C-x C-s</b> displays a message like this:</p>
<pre class="tab">Wrote /u/rms/gnu/gnu.tasks</pre>
<p class="tab">If the current buffer is not modified (no changes are made in it since the buffer was created or last saved), saving is not really done, because it would have no effect. Instead, <b>C-x C-s</b> displays a message like this in the echo area:</p>
<pre class="tab">(No changes need to be saved)</pre>
<p class="tab">With a prefix argument, <b>C-u C-x C-s</b>, Emacs also marks the buffer to be backed up when the next save is done. See <a href="#Backup">Backup</a>.<br><br>The command <b>C-x s</b> (<b>save-some-buffers</b>) offers to save any or all modified buffers. It asks you what to do with each buffer. The possible responses are analogous to those of <b>query-replace</b>:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>y</b></td>
<td>Save this buffer and ask about the rest of the buffers.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Don't save this buffer, but ask about the rest of the buffers.</td>
</tr>
<tr class="tcw">
<td><b>!</b></td>
<td>Save this buffer and all the rest with no more questions.</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b></td>
<td>Terminate <b>save-some-buffers</b> without any more saving.</td>
</tr>
<tr class="tcw">
<td><b>.</b></td>
<td>Save this buffer, then exit <b>save-some-buffers</b> without even asking about other buffers.</td>
</tr>
<tr class="tcw">
<td><b>C-r</b></td>
<td>View the buffer about which you are currently being asked. When you exit View mode, you get back to <b>save-some-buffers</b>, which asks the question again.</td>
</tr>
<tr class="tcw">
<td><b>d</b></td>
<td>Diff the buffer against its corresponding file, so you can see what changes you would be saving. This calls the command <b>diff-buffer-with-file</b> (see <a href="#Comparing-Files">Comparing Files</a>).</td>
</tr>
<tr class="tcw">
<td><b>C-h</b></td>
<td>Display a help message about these options.</td>
</tr>
</table>
<p class="tab"><b>C-x C-c</b>, the key sequence to exit Emacs, invokes <b>save-some-buffers</b> and therefore asks the same questions.<br><br>If you have changed a buffer but do not want to save the changes, take some action to prevent it. Otherwise, each time you use <b>C-x s or C-x C-c</b>, you are liable to save this buffer by mistake. One thing you can do is type <b>M-~</b> (<b>not-modified</b>), which clears out the indication that the buffer is modified. If you do this, none of the save commands believe the buffer needs to be saved. ('<b>~</b>' is often used as a mathematical symbol for &#96;not'; thus <b>M-~</b> is &#96;not', metafied.) Alternatively, you can cancel all the changes made since the file was visited or saved, by reading the text from the file again. This is called reverting. See <a href="#Reverting">Reverting</a>. (You could also undo all the changes by repeating the undo command <b>C-x u</b> until you have undone all the changes; but reverting is easier.)<br><br><b>M-x set-visited-file-name</b> alters the name of the file that the current buffer is visiting. It reads the new file name using the minibuffer. Then it marks the buffer as visiting that file name, and changes the buffer name correspondingly. <b>set-visited-file-name</b> does not save the buffer in the newly visited file; it only alters the records inside Emacs in case you do save later. It also marks the buffer as "modified" so that <b>C-x C-s</b> in that buffer saves.<br><br>If you want to mark the buffer as visiting a different file and save it right away, use <b>C-x C-w</b> (<b>write-file</b>). This is equivalent to <b>set-visited-file-name</b> followed by <b>C-x C-s</b>, except that <b>C-x C-w</b> asks for confirmation if the file exists. <b>C-x C-s</b> used on a buffer that is not visiting a file has the same effect as <b>C-x C-w</b>; that is, it reads a file name, marks the buffer as visiting that file, and saves it there. The default file name in a buffer that is not visiting a file is made by combining the buffer name with the buffer's default directory (see <a href="#File-Names">File Names</a>).<br><br>If the new file name implies a major mode, then <b>C-x C-w</b> switches to that major mode, in most cases. The command <b>set-visited-file-name</b> also does this. See <a href="#Choosing-Modes">Choosing Modes</a>.<br><br>If Emacs is about to save a file and sees that the date of the latest version on disk does not match what Emacs last read or wrote, Emacs notifies you of this fact, because it probably indicates a problem caused by simultaneous editing and requires your immediate attention.</p>
<h2 id="Backup">Backing up files</h2>
<p class="tab">On most operating systems, rewriting a file automatically destroys all record of what the file used to contain. Thus, saving a file from Emacs throws away the old contents of the file&mdash;or it would, except that Emacs carefully copies the old contents to another file, called the backup file, before actually saving.<br><br>Emacs makes a backup for a file only the first time the file is saved from a buffer. No matter how many times you subsequently save the file, its backup remains unchanged. However, if you kill the buffer and then visit the file again, a new backup file is made.<br><br>For most files, the variable <b>make-backup-files</b> determines whether to make backup files. On most operating systems, its default value is <b>t</b>, so that Emacs does write backup files.<br><br>For files managed by a version control system (see <a href="#Version-Control">Version Control</a>), the variable <b>vc-make-backup-files</b> determines whether to make backup files. By default, it is <b>nil</b>, as backup files are redundant when you store all the previous versions in a version control system. See <a href="#General-VC-Options">Options</a>.<br><br>At your option, Emacs can keep either a single backup for each file, or make a series of numbered backup files for each file that you edit. See <a href="#Backup-Names">Backup Names</a>.<br><br>The default value of the <b>backup-enable-predicate</b> variable prevents backup files being written for files in the directories used for temporary files, specified by <b>temporary-file-directory</b> or <b>small-temporary-file-directory</b>.<br><br>You can explicitly tell Emacs to make another backup file from a buffer, even though that buffer was saved before. If you save the buffer with <b>C-u C-x C-s</b>, the version thus saved is made into a backup file if you save the buffer again. <b>C-u C-u C-x C-s</b> saves the buffer, but first makes the previous file contents into a new backup file. <b>C-u C-u C-u C-x C-s</b> does both things: it makes a backup from the previous contents, and arranges to make another from the newly saved contents if you save again.</p>
<ul>
<li><a href="#Backup-Names">Names</a>: How backup files are named.</li>
<li><a href="#Backup-Deletion">Deletion</a>: Emacs deletes excess numbered backups.</li>
<li><a href="#Backup-Copying">Copying</a>: Backups can be made by copying or renaming.</li>
</ul>
<h2 id="Backup-Names">Single or numbered backups</h2>
<p class="tab">When Emacs makes a backup file, its name is normally constructed by appending '<b>~</b>' to the file name being edited; thus, the backup file for eval.c would be eval.c~.<br><br>If access control stops Emacs from writing backup files under the usual names, it writes the backup file as <b>~/.emacs.d/%backup%~</b>. Only one such file can exist, so only the most recently made such backup is available.<br><br>Emacs can also make numbered backup files. Numbered backup file names contain '<b>.~</b>', the number, and another '<b>~</b>' after the original file name. Thus, the backup files of <b>eval.c</b> would be called <b>eval.c.~1~</b>, <b>eval.c.~2~</b>, and so on, through names like <b>eval.c.~259~</b> and beyond.<br><br>The variable <b>version-control</b> determines whether to make single backup files or multiple numbered backup files. Its possible values are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>nil</b></td>
<td>Make numbered backups for files that have numbered backups already. Otherwise, make single backups. This is the default.</td>
</tr>
<tr class="tcw">
<td><b>t</b></td>
<td>Make numbered backups.</td>
</tr>
<tr class="tcw">
<td><b>never</b></td>
<td>Never make numbered backups; always make single backups.</td>
</tr>
</table>
<p class="tab">The usual way to set this variable is globally, through your init file or the customization buffer. However, you can set <b>version-control</b> locally in an individual buffer to control the making of backups for that buffer's file (see <a href="#Locals">Locals</a>). You can have Emacs set <b>version-control</b> locally whenever you visit a given file (see <a href="#File-Variables">File Variables</a>). Some modes, such as Rmail mode, set this variable.<br><br>If you set the environment variable <b>VERSION_CONTROL</b>, to tell various GNU utilities what to do with backup files, Emacs also obeys the environment variable by setting the Lisp variable <b>version-control</b> accordingly at startup. If the environment variable's value is '<b>t</b>' or '<b>numbered</b>', then <b>version-control</b> becomes <b>t</b>; if the value is '<b>nil</b>' or '<b>existing</b>', then <b>version-control</b> becomes <b>nil</b>; if it's '<b>never</b>' or '<b>simple</b>', then <b>version-control</b> becomes <b>never</b>.<br><br>You can customize the variable <b>backup-directory-alist</b> to specify that files matching certain patterns should be backed up in specific directories. This variable applies to both single and numbered backups. A typical use is to add an element ("." . dir) to make all backups in the directory with absolute name <b>dir</b>; Emacs modifies the backup file names to avoid clashes between files with the same names originating in different directories. Alternatively, adding, ("." . ".~") would make backups in the invisible subdirectory .~ of the original file's directory. Emacs creates the directory, if necessary, to make the backup.<br><br>If you define the variable <b>make-backup-file-name-function</b> to a suitable Lisp function, that overrides the usual way Emacs constructs backup file names.</p>
<h2 id="Backup-Deletion">Automatic deletion of backups</h2>
<p class="tab">To prevent excessive consumption of disk space, Emacs can delete numbered backup versions automatically. Generally Emacs keeps the first few backups and the latest few backups, deleting any between. This happens every time a new backup is made.<br><br>The two variables <b>kept-old-versions</b> and <b>kept-new-versions</b> control this deletion. Their values are, respectively, the number of oldest (<b>lowest-numbered</b>) backups to keep and the number of newest (<b>highest-numbered</b>) ones to keep, each time a new backup is made. The backups in the middle (excluding those oldest and newest) are the excess middle versions: those backups are deleted. These variables' values are used when it is time to delete excess versions, only after a new backup version is made; the newly made backup is included in the count in <b>kept-new-versions</b>. By default, both variables are 2.<br><br>If <b>delete-old-versions</b> is <b>t</b>, Emacs deletes the excess backup files silently. If it's <b>nil</b>, the default, Emacs asks you whether it should delete the excess backup versions. If it has any other value, then Emacs never automatically deletes backups.<br><br>Dired's <b>.</b> (Period) command can also be used to delete old versions. See <a href="#Dired-Deletion">Dired Deletion</a>.</p>
<h2 id="Backup-Copying">Copying vs. renaming</h2>
<p class="tab">Backup files can be made by copying the old file or by renaming it. This makes a difference when the old file has multiple names (<a href="/jargon/h/hardlink.htm">hard links</a>). If the old file is renamed into the backup file, then the alternate names become names for the backup file. If the old file is copied instead, then the alternate names remain names for the file that you are editing, and the contents accessed by those names are the new contents.<br><br>The method of making a backup file may also affect the file's owner and group. If copying is used, these do not change. If renaming is used, you become the file's owner, and the file's group becomes the default (different operating systems have different defaults for the group).<br><br>The choice of renaming or copying is made as follows:</p>
<ul>
<li>If the variable <b>backup-by-copying</b> is non-nil (the default is <b>nil</b>), use copying.</li>
<li>Otherwise, if the variable <b>backup-by-copying-when-linked</b> is non-nil (the default is <b>nil</b>), and the file has multiple names, use copying.</li>
<li>Otherwise, if the variable <b>backup-by-copying-when-mismatch</b> is non-nil (the default is <b>t</b>), and renaming would change the file's owner or group, use copying. If you change backup-by-copying-when-mismatch to nil, Emacs checks the numeric user-id of the file's owner. If this is higher than backup-by-copying-when-privileged-mismatch, then it behaves as though backup-by-copying-when-mismatch is non-nil.</li>
<li>Otherwise, renaming is the default choice.</li>
</ul>
<p class="tab">When a file is managed with a version control system (see <a href="#Version-Control">Version Control</a>), Emacs does not normally make backups in the usual way for that file. But check-in and check-out are similar in some ways to making backups. One unfortunate similarity is that these operations often break hard links, disconnecting the file name you visited from any alternate names for the same file. This has nothing to do with Emacs&mdash;the version control system does it.</p>
<h2 id="Customize-Save">Customizing the saving of files</h2>
<p class="tab">If the value of the variable <b>require-final-newline</b> is <b>t</b>, saving or writing a file silently puts a newline at the end if there isn't already one there. If the value is <b>visit</b>, Emacs adds a newline at the end of any file that doesn't have one, only after it visits the file. (This marks the buffer as modified, and you can undo it.) If the value is <b>visit-save</b>, Emacs adds such newlines both on visiting and on saving. If the value is <b>nil</b>, Emacs leaves the end of the file unchanged; any other non-nil value means to asks you whether to add a newline. The default is <b>nil</b>.<br><br>Some major modes are designed for specific kinds of files that are always supposed to end in newlines. Such major modes set the variable <b>require-final-newline</b> to the value of <b>mode-require-final-newline</b>, which defaults to <b>t</b>. By setting the latter variable, you can control how these modes handle final newlines.<br><br>When Emacs saves a file, it invokes the <b>fsync</b> system call to force the data immediately out to disk. This is important for safety if the system crashes or in case of power outage. However, it can be disruptive on laptops using power saving, as it may force a disk spin-up each time you save a file. If you accept an increased risk of data loss, you can set <b>write-region-inhibit-fsync</b> to a non-nil value to disable the synchronization.</p>
<h2 id="Interlocking">Protection against simultaneous editing</h2>
<p class="tab">Simultaneous editing occurs when two users visit the same file, both make changes, and then both save them. If nobody is informed that this is happening, whichever user saves first would later find that his changes were lost.<br><br>On some systems, Emacs notices immediately when the second user starts to change the file, and issues an immediate warning. On all systems, Emacs checks when you save the file, and warns if you are about to overwrite another user's changes. You can prevent loss of the other user's work by taking the proper corrective action instead of saving the file.<br><br>When you make the first modification in an Emacs buffer that is visiting a file, Emacs records that the file is locked by you. (It does this by creating a specially-named symbolic link in the same directory.) Emacs removes the lock when you save the changes. The idea is that the file is locked whenever an Emacs buffer visiting it has unsaved changes.<br><br>You can prevent the creation of lock files by setting the variable <b>create-lockfiles</b> to <b>nil</b>. Caution: by doing so, you lose the benefits that this feature provides.<br><br>If you begin to modify the buffer while the visited file is locked by someone else, this constitutes a collision. When Emacs detects a collision, it asks you what to do, by calling the Lisp function <b>ask-user-about-lock</b>. You can redefine this function for the sake of customization. The standard definition of this function asks you a question and accepts three possible answers:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>s</b></td>
<td>Steal the lock. Whoever was already changing the file loses the lock, and you gain the lock.</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Proceed. Go ahead and edit the file despite its being locked by someone else.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Quit. This causes an error (<b>file-locked</b>), and the buffer contents remain unchanged&mdash;the modification you were trying to make does not actually take place.</td>
</tr>
</table>
<p class="tab">If Emacs or the operating system crashes, this may leave behind lock files that are stale, so you may occasionally get warnings about spurious collisions. When you determine that the collision is spurious, only use <b>p</b> to tell Emacs to go ahead.<br><br>Note that locking works on the basis of a file name; if a file has multiple names, Emacs does not prevent two users from editing it simultaneously under different names.<br><br>A lock file cannot be written in some circumstances, e.g., if Emacs lacks the system permissions or the system does not support symbolic links. In these cases, Emacs can still detect the collision when you try to save a file, by checking the file's <b>last-modification</b> date. If the file has changed since the last time Emacs visited or saved it, that implies that changes were made in some other way, and are lost if Emacs proceeds with saving. Emacs then displays a warning message and asks for confirmation before saving; answer <b>yes</b> to save, and <b>no</b> or <b>C-g</b> cancel the save.<br><br>If you are notified that simultaneous editing has already taken place, one way to compare the buffer to its file is the <b>M-x diff-buffer-with-file</b> command. See <a href="#Comparing-Files">Comparing Files</a>.</p>
<h2 id="File-Shadowing">Shadowing files</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>M-x shadow-initialize</b></td>
<td>Set up file shadowing.</td>
</tr>
<tr class="tcw">
<td><b>M-x shadow-define-literal-group</b></td>
<td>Declare a single file to be shared between sites.</td>
</tr>
<tr class="tcw">
<td><b>M-x shadow-define-regexp-group</b></td>
<td>Make all files that match each of a group of files be shared between hosts.</td>
</tr>
<tr class="tcw">
<td><b>M-x shadow-define-cluster &lt;RET&gt; name &lt;RET&gt;</b></td>
<td>Define a shadow file cluster name.</td>
</tr>
<tr class="tcw">
<td><b>M-x shadow-copy-files</b></td>
<td>Copy all pending shadow files.</td>
</tr>
<tr class="tcw">
<td><b>M-x shadow-cancel</b></td>
<td>Cancel the instruction to shadow some files.</td>
</tr>
</table>
<p class="tab">You can arrange to keep identical shadow copies of certain files in more than one place&mdash;possibly on different machines. To do this, first you must set up a shadow file group, which is a set of identically-named files shared between a list of sites. The file group is permanent and applies to further Emacs sessions and the current one. Once the group is set up, every time you exit Emacs, it copies the file you edited to the other files in its group. You can also do the copying without exiting Emacs, by typing <b>M-x shadow-copy-files</b>.<br><br>To set up a shadow file group, use <b>M-x shadow-define-literal-group</b> or <b>M-x shadow-define-regexp-group</b>. See their documentation strings for further information.<br><br>Before copying a file to its shadows, Emacs asks for confirmation. You can answer "no" to bypass copying of this file, this time. If you want to cancel the shadowing permanently for a certain file, use <b>M-x shadow-cancel</b> to eliminate or change the shadow file group.<br><br>A shadow cluster is a group of hosts that share directories, so that copying to or from one of them is sufficient to update the file on all of them. Each shadow cluster has a name, and specifies the network address of a primary host (the one we copy files to), and a regular expression that matches the <a href="/jargon/h/hostname.htm">hostnames</a> of all the other hosts in the cluster. You can define a shadow cluster with <b>M-x shadow-define-cluster</b>.</p>
<h2 id="Timestamps">Updating timestamps automatically</h2>
<p class="tab">You can arrange to put a timestamp in a file, so that it is updated automatically each time you edit and save the file. The timestamp must be in the first eight lines of the file, and insert it like this:</p>
<pre class="tab tcy">Time-stamp: &lt;&gt;</pre>
<p class="tab">Or like this:</p>
<pre class="tab tcy">Time-stamp: " "</pre>
<p class="tab">Then add the function <b>time-stamp</b> to the hook <b>before-save-hook</b> (see <a href="#Hooks">Hooks</a>). When you save the file, this function then automatically updates the timestamp with the current date and time. You can also use the command <b>M-x time-stamp</b> to update the timestamp manually. For other customizations, see the Custom group <b>time-stamp</b>. Note that the timestamp is formatted according to your locale setting (see <a href="#Environment">Environment</a>).</p>
<h2 id="Reverting">Reverting the buffer</h2>
<p class="tab">If you have made extensive changes to a file-visiting buffer and then change your mind, you can revert the changes and go back to the saved version of the file. To do this, type <b>M-x revert-buffer</b>. Since reverting unintentionally could lose a lot of work, Emacs asks for confirmation first.<br><br>The <b>revert-buffer</b> command tries to position point in such a way that, if the file was edited only slightly, you are at approximately the same part of the text as before. But if you have made major changes, point may end up in a totally different location.<br><br>Reverting marks the buffer as "not modified". It also clears the buffer's undo history (see <a href="#Undo">Undo</a>). Thus, the reversion cannot be undone: if you change your mind yet again, you can't use the undo commands to bring the reverted changes back.<br><br>Some kinds of buffers that are not associated with files, such as Dired buffers, can also be reverted. For them, reverting means recalculating their contents. Buffers created explicitly with <b>C-x b</b> cannot be reverted; <b>revert-buffer</b> reports an error if you try.<br><br>When you edit a file that changes automatically and frequently -- for example, a log of output from a process that continues to run -- it may be useful for Emacs to revert the file without querying you. To request this behavior, set the variable <b>revert-without-query</b> to a list of regular expressions. When a file name matches one of these regular expressions, <b>find-file</b> and <b>revert-buffer</b> revert it automatically if it has changed, provided the buffer itself is not modified. (If you have edited the text, it would be wrong to discard your changes.)<br><br>You can also tell Emacs to revert buffers periodically. To do this for a specific buffer, enable the minor mode Auto-Revert mode by typing <b>M-x auto-revert-mode</b>. This automatically reverts the current buffer every five seconds; you can change the interval through the variable <b>auto-revert-interval</b>. To do the same for all file buffers, type <b>M-x global-auto-revert-mode</b> to enable Global Auto-Revert mode. These minor modes do not check or revert remote files, because that is usually too slow.<br><br>One use of Auto-Revert mode is to "tail" a file such as a system log, so that changes made to that file by other programs are continuously displayed. To do this, only move the point to the end of the buffer, and it stays there as the file contents change. However, if you are sure that the file only changes by growing at the end, use Auto-Revert Tail mode instead (<b>auto-revert-tail-mode</b>). It is more efficient for this. Auto-Revert Tail mode works also for remote files.<br><br>See <a href="#VC-Undo">VC Undo</a>, for commands to revert to earlier versions of files under version control. See <a href="#VC-Mode-Line">VC Mode Line</a>, for Auto Revert peculiarities when visiting files under version control.</p>
<h2 id="Autorevert">Auto-reverting non-file buffers</h2>
<p class="tab">Global Auto Revert Mode normally only reverts file buffers. There are two ways to auto-revert certain non-file buffers: by enabling Auto Revert Mode in those buffers (using <b>M-x auto-revert-mode</b>); and by setting <b>global-auto-revert-non-file-buffers</b> to a non-nil value. The latter enables Auto Reverting for all types of buffers for which it is implemented (listed in the menu below).<br><br>Like file buffers, non-file buffers should normally not revert while you are working on them, or while they contain information that might get lost after reverting. Therefore, they do not revert if they are "modified". This can get tricky, because deciding when a non-file buffer should be marked modified is usually more difficult than for file buffers.<br><br>Another tricky detail is that, for efficiency reasons, Auto Revert often does not try to detect all possible changes in the buffer, only changes that are "major" or easy to detect. Hence, enabling auto-reverting for a non-file buffer does not always guarantee that all information in the buffer is up-to-date, and does not necessarily make manual reverts useless.<br><br>At the other extreme, certain buffers automatically revert every <b>auto-revert-interval</b> seconds. (This currently only applies to the Buffer Menu.) In this case, Auto Revert does not print any messages while reverting, even when <b>auto-revert-verbose</b> is non-nil.<br><br>The details depend on the particular types of buffers and are explained in the corresponding sections.</p>
<ul>
<li><a href="#Auto-Reverting-the-Buffer-Menu">Auto Reverting the Buffer Menu</a>: Auto Revert of the Buffer Menu.</li>
<li><a href="#Auto-Reverting-Dired">Auto Reverting Dired</a>: Auto Revert of Dired buffers.</li>
<li><a href="#Supporting-additional-buffers">Supporting additional buffers</a>: How to add more Auto Revert support.</li>
</ul>
<h2 id="Auto-Reverting-the-Buffer-Menu">Auto-reverting the buffer menu</h2>
<p class="tab">If auto-reverting of non-file buffers is enabled, the Buffer Menu automatically reverts every <b>auto-revert-interval</b> seconds, whether there is a need for it or not. (It would probably take longer to check whether there is a need than to actually revert.)<br><br>If the Buffer Menu inappropriately gets marked modified, only revert it manually using <b>g</b> and auto-reverting resumes. However, if you marked certain buffers to get deleted or to be displayed, you have to be careful, because reverting erases all marks. The fact that adding marks sets the buffer's modified flag prevents Auto Revert from automatically erasing the marks.</p>
<h2 id="Auto-Reverting-Dired">Auto-reverting dired buffers</h2>
<p class="tab">Auto-reverting Dired buffers currently works on GNU or Unix style operating systems. It may not work satisfactorily on some other systems.<br><br>Dired buffers only auto-revert when the file list of the buffer's main directory changes (e.g., when a new file is added). They do not auto-revert when information about a particular file changes (e.g., when the size changes) or when inserted subdirectories change. To be sure that all listed information is up-to-date, you have to manually revert using <b>g</b>, even if auto-reverting is enabled in the Dired buffer. Sometimes, you might get the impression that modifying or saving files listed in the main directory actually does cause auto-reverting. This is because making changes to a file, or saving it, very often causes changes in the directory itself; for instance, through backup files or auto-save files. However, this is not guaranteed.<br><br>If the Dired buffer is marked modified and there are no changes you want to protect, then most of the time you can make auto-reverting resume by manually reverting the buffer using <b>g</b>. There is one exception. If you flag or mark files, you can safely revert the buffer. This does not erase the flags or marks (unless the marked file is deleted, of course). However, the buffer stays modified, even after reverting, and auto-reverting does not resume. This is because, if you flag or mark files, you may be working on the buffer and you might not want the buffer to change without warning. If you want auto-reverting to resume in the presence of marks and flags, mark the buffer non-modified using <b>M-~</b>. However, adding, deleting, or changing marks or flags marks it modified again.<br><br>Remote Dired buffers are not auto-reverted (because it may be slow). Neither are Dired buffers that you used shell wildcards or file arguments to list only some of the files. *Find* and *Locate* buffers do not auto-revert either.</p>
<h2 id="Supporting-additional-buffers">Adding support for auto-reverting additional buffers</h2>
<p class="tab">This section is intended for Elisp programmers who would like to add support for auto-reverting new types of buffers.<br><br>To support auto-reverting the buffer must first of all have a <b>revert-buffer-function</b>. See <a href="#Reverting">Reverting</a>.<br><br>Also, it must have a <b>buffer-stale-function</b>.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>buffer-stale-function</b></td>
<td>The value of this variable is a function to check whether a non-file buffer needs reverting. This should be a function with one optional argument noconfirm. The function should return non-nil if the buffer should be reverted. The buffer is current when this function is called.<br><br>While this function is mainly intended for use in auto-reverting, it could be used for other purposes as well. For instance, if auto-reverting is not enabled, it could be used to warn the user that the buffer needs reverting. The idea behind the <b>noconfirm</b> argument is that it should be t if the buffer is going to be reverted without asking the user and nil if the function is only going to be used to warn the user that the buffer is out of date. In particular, for use in auto-reverting, <b>noconfirm</b> is <b>t</b>. If the function is only going to be used for auto-reverting, you can ignore the <b>noconfirm</b> argument.<br><br>If you only want to automatically auto-revert every <b>auto-revert-interval</b> seconds (like the Buffer Menu), use:<br><br><pre class="tcy">(set (make-local-variable 'buffer-stale-function) #'(lambda (&amp;optional noconfirm) 'fast))</pre> in the buffer's mode function.<br><br>The special return value '<b>fast</b>' tells the caller that the need for reverting was not checked, but that reverting the buffer is fast. It also tells Auto Revert not to print any revert messages, even if <b>auto-revert-verbose</b> is non-nil. This is important, as getting revert messages every <b>auto-revert-interval</b> seconds can be very annoying. The information provided by this return value could also be useful if the function is consulted for purposes other than auto-reverting.</td>
</tr>
</table>
<p class="tab">Once the buffer has a <b>revert-buffer-function</b> and a <b>buffer-stale-function</b>, several problems usually remain.<br><br>The buffer only auto-reverts if it's marked unmodified. Hence, you need to make sure that various functions mark the buffer modified if and only if either the buffer contains information that might be lost by reverting, or there is reason to believe that the user might be inconvenienced by auto-reverting, because he is actively working on the buffer. The user can always override this by manually adonlying the modified status of the buffer. To support this, calling the <b>revert-buffer-function</b> on a buffer that is marked unmodified should always keep the buffer marked unmodified.<br><br>It is important to assure that point does not continuously jump around as a consequence of auto-reverting. Of course, moving point might be inevitable if the buffer radically changes.<br><br>Make sure that the <b>revert-buffer-function</b> does not print messages that unnecessarily duplicate Auto Revert's own messages, displayed if <b>auto-revert-verbose</b> is <b>t</b>, and effectively override a nil value for <b>auto-revert-verbose</b>. Hence, adapting a mode for auto-reverting often involves getting rid of such messages. This is especially important for buffers that automatically revert every <b>auto-revert-interval</b> seconds.<br><br>If the new auto-reverting is part of Emacs, mention it in the documentation string of <b>global-auto-revert-non-file-buffers</b>.<br><br>Similarly, add a section to this chapter. This section should at the very least make clear whether enabling auto-reverting for the buffer reliably assures that all information in the buffer is completely up-to-date (or would be after <b>auto-revert-interval</b> seconds).</p>
<h2 id="Auto-Save">Auto-saving: protecting against disasters</h2>
<p class="tab">From time to time, Emacs automatically saves each visited file in a separate file, without altering the file you actually use. This is called auto-saving. It prevents you from losing more than a limited amount of work if the system crashes.<br><br>When Emacs determines that it is time for auto-saving, it considers each buffer, and each is auto-saved if auto-saving is enabled for it and it was changed since the last time it was auto-saved. The message '<b>Auto-saving...</b>' is displayed in the echo area during auto-saving, if any files are actually auto-saved. Errors occurring during auto-saving are caught so that they do not interfere with the execution of commands you are typing.</p>
<ul>
<li><a href="#Auto-Save-Files">Files</a>: The file where auto-saved changes are actually made until you save the file.</li>
<li><a href="#Auto-Save-Control">Control</a>: Controlling when and how often to auto-save.</li>
<li><a href="#Recover">Recover</a>: Recovering text from auto-save files.</li>
</ul>
<h2 id="Auto-Save-Files">Auto-save files</h2>
<p class="tab">Auto-saving does not normally save in the files that you visited, because it can be very undesirable to save a change that you did not want to make permanent. Instead, auto-saving is done in a different file called the auto-save file, and the visited file is changed only when you request saving explicitly (such as with <b>C-x C-s</b>).<br><br>Normally, the auto-save file name is made by appending '<b>#</b>' to the front and rear of the visited file name. Thus, a buffer visiting file foo.c is auto-saved in a file #foo.c#. Most buffers that are not visiting files are auto-saved only if you request it explicitly; when they are auto-saved, the auto-save file name is made by appending '<b>#</b>' to the front and rear of buffer name, then adding digits and letters at the end for uniqueness. For example, the *mail* buffer where you compose messages to be sent might be auto-saved in a file named #*mail*#704juu. Auto-save file names are made this way unless you reprogram parts of Emacs to do something different (the functions <b>make-auto-save-file-name</b> and <b>auto-save-file-name-p</b>). The file name to be used for auto-saving in a buffer is calculated when auto-saving is turned on in that buffer.<br><br>The variable <b>auto-save-file-name-transforms</b> allows a degree of control over the auto-save file name. It lets you specify a series of regular expressions and replacements to transform the auto save file name. The default value puts the auto-save files for remote files (see <a href="#Remote-Files">Remote Files</a>) into the temporary file directory on the local machine.<br><br>When you delete a substantial part of the text in a large buffer, auto save turns off temporarily in that buffer. This is because if you deleted the text unintentionally, you might find the auto-save file more useful if it contains the deleted text. To reenable auto-saving after this happens, save the buffer with <b>C-x C-s</b>, or use <b>C-u 1 M-x auto-save-mode</b>.<br><br>If you want auto-saving to be done in the visited file rather than in a separate auto-save file, set the variable <b>auto-save-visited-file-name</b> to a non-nil value. In this mode, there is no real difference between auto-saving and explicit saving.<br><br>A buffer's auto-save file is deleted when you save the buffer in its visited file. (You can inhibit this by setting the variable <b>delete-auto-save-files</b> to <b>nil</b>.) Changing the visited file name with <b>C-x C-w</b> or <b>set-visited-file-name</b> renames any auto-save file to go with the new visited name.</p>
<h2 id="Auto-Save-Control">Controlling auto-saving</h2>
<p class="tab">Each time you visit a file, auto-saving is turned on for that file's buffer if the variable <b>auto-save-default</b> is non-nil (but not in batch mode; see <a href="#Initial-Options">Options</a>). The default for this variable is <b>t</b>, so auto-saving is the usual practice for file-visiting buffers. To toggle auto-saving in the current buffer, type <b>M-x auto-save-mode</b>. Auto Save mode acts as a buffer-local minor mode (see <a href="#Minor-Modes">Minor Modes</a>).<br><br>Emacs auto-saves periodically based on how many characters you have typed since the last auto-save. The variable <b>auto-save-interval</b> specifies how many characters there are between auto-saves. By default, it is 300. Emacs doesn't accept values that are too small: if you customize <b>auto-save-interval</b> to a value less than 20, Emacs behaves as if the value is 20.<br><br>Auto-saving also takes place when you stop typing for a while. By default, it does this after 30 seconds of idleness (at this time, Emacs may also perform garbage collection. To change this interval, customize the variable <b>auto-save-timeout</b>. The actual time is longer if the current buffer is long; this is a heuristic which aims to keep out of your way when you are editing long buffers, where auto-save takes an appreciable amount of time. Auto-saving during idle periods accomplishes two things: first, it makes sure all your work is saved if you go away from the terminal for a while; second, it may avoid some auto-saving while you are actually typing.<br><br>Emacs also does auto-saving whenever it gets a fatal error. This includes killing the Emacs job with a shell command such as 'kill %emacs', or disconnecting a network connection.<br><br>You can perform an auto-save explicitly with the command <b>M-x do-auto-save</b>.</p>
<h2 id="Recover">Recovering data from auto-saves</h2>
<p class="tab">You can use the contents of an auto-save file to recover from a loss of data with the command <b>M-x recover-file &lt;RET&gt; file &lt;RET&gt;</b>. This visits file and then (after your confirmation) restores the contents from its auto-save file #file#. You can then save with C-x C-s to put the recovered text into file itself. For example, to recover file foo.c from its auto-save file #foo.c#, do:</p>
<pre class="tab tcy">M-x recover-file &lt;RET&gt; foo.c &lt;RET&gt; yes &lt;RET&gt; C-x C-s</pre>
<p class="tab">Before asking for confirmation, <b>M-x recover-file</b> displays a directory listing describing the specified file and the auto-save file, so you can compare their sizes and dates. If the auto-save file is older, <b>M-x recover-file</b> does not offer to read it.<br><br>If Emacs or the computer crashes, you can recover all the files you were editing from their auto save files with the command <b>M-x recover-session</b>. This first shows you a list of recorded interrupted sessions. Move point to the one you choose, and type <b>C-c C-c</b>. Then <b>recover-session</b> asks about each of the files that were being edited during that session, asking whether to recover that file. If you answer <b>y</b>, it calls <b>recover-file</b>, which works in its normal fashion. It shows the dates of the original file and its auto-save file, and asks once again whether to recover that file.<br><br>When <b>recover-session</b> is done, the files you've chosen to recover are present in Emacs buffers. Then save them. Only this&mdash;saving them&mdash;updates the files themselves.<br><br>Emacs records information about interrupted sessions in files named .saves-pid-hostname in the directory ~/.emacs.d/auto-save-list/. This directory is determined by the variable <b>auto-save-list-file-prefix</b>. If you set <b>auto-save-list-file-prefix</b> to <b>nil</b>, sessions are not recorded for recovery.</p>
<h2 id="File-Aliases">File name aliases</h2>
<p class="tab">Symbolic links and hard links both make it possible for several file names to refer to the same file. Hard links are alternate names that refer directly to the file; all the names are equally valid, and no one of them is preferred. By contrast, a symbolic link is a kind of defined alias: when <b>foo</b> is a symbolic link to <b>bar</b>, you can use either name to refer to the file, but <b>bar</b> is the real name, while <b>foo</b> is only an alias. More complex cases occur when symbolic links point to directories.<br><br>Normally, if you visit a file which Emacs is already visiting under a different name, Emacs displays a message in the echo area and uses the existing buffer visiting that file. This can happen on systems that support hard or symbolic links, or if you use a long file name on a system that truncates long file names, or on a case-insensitive file system. You can suppress the message by setting the variable <b>find-file-suppress-same-file-warnings</b> to a non-nil value. You can disable this feature entirely by setting the variable <b>find-file-existing-other-name</b> to <b>nil</b>: then if you visit the same file under two different names, you get a separate buffer for each file name.<br><br>If the variable <b>find-file-visit-truename</b> is non-nil, then the file name recorded for a buffer is the file's truename (made by replacing all symbolic links with their target names), rather than the name you specify. Setting <b>find-file-visit-truename</b> also implies the effect of <b>find-file-existing-other-name</b>.<br><br>Sometimes, a directory is ordinarily accessed through a symbolic link, and you may want Emacs to preferentially show its "linked" name. To do this, customize <b>directory-abbrev-alist</b>. Each element in this list should have the form <b>(from . to)</b>, which means to replace <b>from</b> with <b>to</b> whenever from appears in a directory name. The <b>from</b> string is a regular expression (see <a href="#Regexps">Regexps</a>). It is matched against directory names anchored at the first character, and should start with '<b>\&#96;</b>' (to support directory names with embedded newlines, which would defeat '<b>^</b>'). The to string should be an ordinary absolute directory name pointing to the same directory. Do not use '<b>~</b>' to stand for a home directory in the to string; Emacs performs these substitutions separately. Here's an example, from a system on which <b>/home/fsf</b> is normally accessed through a symbolic link named <b>/fsf</b>:</p>
<pre class="tab tcy">(("\\&#96;/home/fsf" . "/fsf"))</pre>
<h2 id="Directories">File directories</h2>
<p class="tab">The file system groups files into directories. A directory listing is a list of all the files in a directory. Emacs provides commands to create and delete directories, and to make directory listings in brief format (file names only) and verbose format (sizes, dates, and authors included). Emacs includes a directory browser feature called Dired; see <a href="#Dired">Dired</a>.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>C-x C-d dir-or-pattern &lt;RET&gt;</b></td>
<td>Display a brief directory listing (<b>list-directory</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u C-x C-d dir-or-pattern &lt;RET&gt;</b></td>
<td>Display a verbose directory listing.</td>
</tr>
<tr class="tcw">
<td><b>M-x make-directory &lt;RET&gt;</b> <i>dirname</i> <b>&lt;RET&gt;</b></td>
<td>Create a new directory named <i>dirname</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x delete-directory &lt;RET&gt;</b> <i>dirname</i> <b>&lt;RET&gt;</b></td>
<td>Delete the directory named <i>dirname</i>. If it'sn't empty, you are asked whether you want to delete it recursively.</td>
</tr>
</table>
<p class="tab">The command to display a directory listing is <b>C-x C-d</b> (<b>list-directory</b>). It reads using the minibuffer a file name that is either a directory to be listed or a wildcard-containing pattern for the files to be listed. For example,</p>
<pre class="tab tcy">C-x C-d /u2/emacs/etc &lt;RET&gt;</pre>
<p class="tab">Lists all the files in the directory /u2/emacs/etc. Here is an example of specifying a file name pattern:</p>
<pre class="tab tcy">C-x C-d /u2/emacs/src/*.c &lt;RET&gt;</pre>
<p class="tab">Normally, <b>C-x C-d</b> displays a brief directory listing containing only file names. A numeric argument (regardless of value) tells it to make a verbose listing including sizes, dates, and owners (like 'ls -l').<br><br>The text of a directory listing is mostly obtained by running <a href="/unix/uls.htm">ls</a> in an inferior process. Two Emacs variables control the switches passed to ls: <b>list-directory-brief-switches</b> is a string giving the switches to use in brief listings ("-CF" by default), and <b>list-directory-verbose-switches</b> is a string giving the switches to use in a verbose listing ("-l" by default).<br><br>In verbose directory listings, Emacs adds information about the amount of free space on the disk containing the directory. To do this, it runs the program specified by <b>directory-free-space-program</b> with arguments <b>directory-free-space-args</b>.<br><br>The command <b>M-x delete-directory</b> prompts for a directory name using the minibuffer, and deletes the directory if it's empty. If the directory is not empty, you are asked whether you want to delete it recursively. On systems with a "Trash" (or "Recycle Bin") feature, you can make this command move the specified directory to the Trash instead of deleting it outright, by changing the variable <b>delete-by-moving-to-trash</b> to <b>t</b>. See <a href="#Misc-File-Ops">Misc File Ops</a>, for more information about using the Trash.</p>
<h2 id="Comparing-Files">Comparing files</h2>
<p class="tab">The command <b>M-x</b> diff prompts for two file names, using the minibuffer, and displays the differences between the two files in a buffer named *diff*. This works by running the diff program, using options taken from the variable <b>diff-switches</b>. The value of <b>diff-switches</b> should be a string; the default is "-c" to specify a context diff. See <a href="/unix/udiff.htm">Diff</a>, for more information about the diff program.<br><br>The output of the diff command is shown using a major mode called <a href="#Diff-Mode">Diff mode</a>.<br><br>The command <b>M-x diff-backup</b> compares a specified file with its most recent backup. If you specify the name of a backup file, <b>diff-backup</b> compares that backup file with the source file. In all other respects, this behaves like <b>M-x diff</b>.<br><br>The command <b>M-x diff-buffer-with-file</b> compares a specified buffer with its corresponding file. This shows you what changes you would make to the file if you save the buffer.<br><br>The command <b>M-x compare-windows</b> compares the text in the current window with that in the next window. (For more information about windows in Emacs, see <a href="#Windows">Windows</a>.) Comparison starts at point in each window, after pushing each initial point value on the mark ring in its respective buffer. Then it moves point forward in each window, one character at a time, until it reaches characters that don't match. Then the command exits.<br><br>If point in the two windows is followed by non-matching text when the command starts, <b>M-x compare-windows</b> tries heuristically to advance up to matching text in the two windows, and then exits. So if you use <b>M-x compare-windows</b> repeatedly, each time it either skips one matching range or finds the start of another.<br><br>With a numeric argument, compare-windows ignores changes in whitespace. If the variable <b>compare-ignore-case</b> is non-nil, the comparison ignores differences in case as well. If the variable <b>compare-ignore-whitespace</b> is non-nil, <b>compare-windows</b> normally ignores changes in whitespace, and a prefix argument turns that off. You can use M-x smerge-mode to turn on Smerge mode, a minor mode for editing output from the diff3 program. This is often the result of a failed merge from a version control system "update" outside VC, due to conflicting changes to a file. Smerge mode provides commands to resolve conflicts by selecting specific changes.<br><br>See <a href="#Emerge">Emerge</a>, for the Emerge facility, which provides a powerful interface for merging files.</p>
<h2 id="Diff-Mode">Diff mode</h2>
<p class="tab">Diff mode is a major mode used for the output of <b>M-x diff</b> and other similar commands. This kind of output is called a patch, because it can be passed to the patch command to automatically apply the specified changes. To select Diff mode manually, type <b>M-x diff-mode</b>.<br><br>The changes specified in a patch are grouped into hunks, which are contiguous chunks of text that contain one or more changed lines. Hunks can also include unchanged lines to provide context for the changes. Each hunk is preceded by a hunk header, which specifies the old and new line numbers at which the hunk occurs. Diff mode highlights each hunk header, to distinguish it from the actual contents of the hunk.<br><br>You can edit a Diff mode buffer like any other buffer. (If it's read-only, you need to make it writable first. See <a href="#Misc-Buffer">Misc Buffer</a>.) Whenever you change a hunk, Diff mode attempts to automatically correct the line numbers in the hunk headers, to ensure that the patch remains "correct". To disable automatic line number correction, change the variable <b>diff-update-on-the-fly</b> to <b>nil</b>.<br><br>Diff mode treats each hunk as an "error message", similar to Compilation mode. Thus, you can use commands such as <b>C-x '</b> to visit the corresponding source locations. See <a href="#Compilation-Mode">Compilation Mode</a>.<br><br>Also, Diff mode provides the following commands to navigate, manipulate and apply parts of patches:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>M-n</b></td>
<td>Move to the next hunk-start (<b>diff-hunk-next</b>).<br><br>This command has a side effect: it refines the hunk you move to, highlighting its changes with better granularity. To disable this feature, type <b>M-x diff-auto-refine-mode</b> to toggle off the minor mode Diff Auto-Refine mode. To disable Diff Auto Refine mode by default, add this to your init file (see <a href="#Hooks">Hooks</a>):<br><br><pre class="tcy">(add-hook 'diff-mode-hook (lambda () (diff-auto-refine-mode -1)))</pre></td>
</tr>
<tr class="tcw">
<td><b>M-p</b></td>
<td>Move to the previous hunk-start (<b>diff-hunk-prev</b>). Like <b>M-n</b>, this has the side-effect of refining the hunk you move to, unless you disable Diff Auto-Refine mode.</td>
</tr>
<tr class="tcw">
<td><b>M-}</b></td>
<td>Move to the next <b>file-start</b>, in a multi-file patch (<b>diff-file-next</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-{</b></td>
<td>Move to the previous file-start, in a multi-file patch (<b>diff-file-prev</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-k</b></td>
<td>Kill the hunk at point (<b>diff-hunk-kill</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-K</b></td>
<td>In a multi-file patch, kill the current file part. (<b>diff-file-kill</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-a</b></td>
<td>Apply this hunk to its target file (<b>diff-apply-hunk</b>). With a prefix argument of <b>C-u</b>, revert this hunk.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-b</b></td>
<td>Highlight the changes of the hunk at point with a finer granularity (<b>diff-refine-hunk</b>). This allows you to see exactly which parts of each changed line were actually changed.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-c</b></td>
<td>Go to the source file and line corresponding to this hunk (<b>diff-goto-source</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-e</b></td>
<td>Start an Ediff session with the patch (<b>diff-ediff-patch</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-n</b></td>
<td>Restrict the view to the current hunk (<b>diff-restrict-view</b>). See <a href="#Narrowing">Narrowing</a>. With a prefix argument of <b>C-u</b>, restrict the view to the current file of a multiple-file patch. To widen again, use <b>C-x n w</b> (<b>widen</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-r</b></td>
<td>Reverse the direction of comparison for the entire buffer (<b>diff-reverse-direction</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b></td>
<td>Split the hunk at point (<b>diff-split-hunk</b>). This is for manually editing patches, and only works with the unified diff format produced by the <b>-u</b> or <b>--unified</b> options to the diff program. If you need to split a hunk in the context diff format produced by the <b>-c</b> or <b>--context</b> options to diff, first convert the buffer to the unified diff format with <b>C-c C-u</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-d</b></td>
<td>Convert the entire buffer to the context diff format (<b>diff-unified-context</b>). With a prefix argument, convert only the text in the region.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-u</b></td>
<td>Convert the entire buffer to unified diff format (<b>diff-context-unified</b>). With a prefix argument, convert unified format to context format. When the mark is active, convert only the text in the region.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-w</b></td>
<td>Refine the current hunk so that it disregards changes in whitespace (<b>diff-refine-hunk</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 A</b></td>
<td>Generate a ChangeLog entry, like <b>C-x 4 a</b> does (see <a href="#Change-Log">Change Log</a>), for each one of the hunks (<b>diff-add-change-log-entries-other-window</b>). This creates a skeleton of the log of changes that you can later fill with the actual descriptions of the changes. <b>C-x 4</b> a itself in Diff mode operates on behalf of the current hunk's file, but gets the function name from the patch itself. This is useful for making log entries for functions that are deleted by the patch.</td>
</tr>
</table>
<p class="tab">Patches sometimes include trailing whitespace on modified lines, as an unintentional and undesired change. There are two ways to deal with this problem. Firstly, if you enable Whitespace mode in a Diff buffer (see <a href="#Useless-Whitespace">Useless Whitespace</a>), it automatically highlights trailing whitespace in modified lines. Secondly, you can use the command <b>M-x diff-delete-trailing-whitespace</b>, which searches for trailing whitespace in the lines modified by the patch, and removes that whitespace in both the patch and the patched source file(s). This command does not save the modifications that it makes, so you can decide whether to save the changes (the list of modified files is displayed in the echo area). With a prefix argument, it tries to modify the original source files rather than the patched source files.</p>
<h2 id="Misc-File-Ops">Miscellaneous file operations</h2>
<p class="tab">Emacs has commands for performing other operations on files. All operate on one file; they do not accept wildcard file names.<br><br><b>M-x delete-file</b> prompts for a file and deletes it. If you are deleting many files in one directory, it may be more convenient to use Dired rather than <b>delete-file</b>. See <a href="#Dired-Deletion">Dired Deletion</a>.<br><br><b>M-x move-file-to-trash</b> moves a file into the system Trash (or Recycle Bin). This is a facility available on most operating systems; files that are moved into the Trash can be brought back later if you change your mind.<br><br>By default, Emacs deletion commands do not use the Trash. To use the Trash (when it is available) for common deletion commands, change the variable <b>delete-by-moving-to-trash</b> to <b>t</b>. This affects the commands <b>M-x delete-file</b> and <b>M-x delete-directory</b> (see <a href="#Directories">Directories</a>), and the deletion commands in Dired (see <a href="#Dired-Deletion">Dired Deletion</a>). Supplying a prefix argument to <b>M-x delete-file</b> or <b>M-x delete-directory</b> makes them delete outright, instead of using the Trash, regardless of <b>delete-by-moving-to-trash</b>.<br><br>If a file is under version control (see <a href="#Version-Control">Version Control</a>), delete it using <b>M-x vc-delete-file</b> instead of <b>M-x delete-file</b>. See <a href="#VC-Delete_002fRename">Delete/Rename</a>.<br><br><b>M-x copy-file</b> reads the file old and writes a new file named new with the same contents.<br><br><b>M-x copy-directory</b> copies directories, similar to the <a href="/unix/ucp.htm">cp -r</a> shell command. It prompts for a directory <i>old</i> and a destination <i>new</i>. If <i>new</i> is an existing directory, it creates a copy of the <i>old</i> directory and puts it in <i>new</i>. If <i>new</i> is not an existing directory, it copies all the contents of old into a new directory named <i>new</i>.<br><br><b>M-x rename-file</b> reads two file names old and new using the minibuffer, then renames file <i>old</i> as <i>new</i>. If the file name <i>new</i> already exists, you must confirm with yes or renaming is not done; this is because renaming causes the old meaning of the name new to be lost. If <i>old</i> and <i>new</i> are on different file systems, the file <i>old</i> is copied and deleted. If the argument <i>new</i> is only a directory name, the real <i>new</i> name is in that directory, with the same non-directory component as <i>old</i>. For example, <b>M-x rename-file &lt;RET&gt; ~/foo &lt;RET&gt; /tmp &lt;RET&gt; renames ~/foo to /tmp/foo</b>. The same rule applies to all the remaining commands in this section. All of them ask for confirmation when the new file name already exists, too.<br><br>If a file is under version control (see <a href="#Version-Control">Version Control</a>), rename it using <b>M-x vc-rename-file</b> instead of <b>M-x rename-file</b>. See <a href="#VC-Delete_002fRename">VC Delete/Rename</a>.<br><br><b>M-x add-name-to-file</b> adds an additional name to an existing file without removing its old name. The new name is created as a "hard link" to the existing file. The new name must belong on the same file system where the file is located. On Microsoft Windows, this command works only if the file resides in an NTFS file system. On MS-DOS, it works by copying the file.<br><br><b>M-x make-symbolic-link</b> reads two file names <i>target</i> and <i>linkname</i>, then creates a symbolic link named <i>linkname</i>, which points at target. The effect is that future attempts to open file linkname will refer to whatever file is named target at the time the opening is done, or gets an error if the name target is nonexistent at that time. This command does not expand the argument <i>target</i>, so that it allows you to specify a relative name as the target of the link. On Microsoft Windows, this command works only on Windows Vista and later.<br><br><b>M-x insert-file</b> (also <b>C-x i</b>) inserts a copy of the contents of the specified file into the current buffer at point, leaving point unchanged before the contents. The position after the inserted contents is added to the mark ring, without activating the mark (see <a href="#Mark-Ring">Mark Ring</a>).<br><br><b>M-x insert-file-literally</b> is like <b>M-x insert-file</b>, except the file is inserted "literally": it is treated as a sequence of ASCII characters with no special encoding or conversion, similar to the <b>M-x find-file-literally</b> command (see <a href="#Visiting">Visiting</a>).<br><br><b>M-x write-region</b> is the inverse of <b>M-x insert-file</b>; it copies the contents of the region into the specified file. <b>M-x append-to-file</b> adds the text of the region to the end of the specified file. See <a href="#Accumulating-Text">Accumulating Text</a>. The variable <b>write-region-inhibit-fsync</b> applies to these commands, and saving files; see <a href="#Customize-Save">Customize Save</a>.<br><br><b>M-x set-file-modes</b> reads a file name followed by a file mode, and applies that file mode to the specified file. File modes, also called file permissions, determine whether a file can be read, written to, or executed, and by whom. This command reads file modes using the same symbolic or octal format accepted by the chmod command; for instance, '<b>u+x</b>' means to add execution permission for the user who owns the file. It has no effect on operating systems that do not support file modes. <a href="/unix/uchmod.htm">chmod</a> is a convenience alias for this function.</p>
<h2 id="Compressed-Files">Accessing compressed files</h2>
<p class="tab">Emacs automatically uncompresses compressed files when you visit them, and automatically recompresses them if you alter them and save them. Emacs recognizes compressed files by their file names. File names ending in '<b>.gz</b>' indicate a file compressed with <a href="/jargon/g/gzip.htm">gzip</a>. Other endings indicate other compression programs.<br><br>Automatic uncompression and compression apply to all the operations that Emacs uses the contents of a file. This includes visiting it, saving it, inserting its contents into a buffer, loading it, and byte compiling it.<br><br>To disable this feature, type the command <b>M-x auto-compression-mode</b>. You can disable it permanently by customizing the variable <b>auto-compression-mode</b>.</p>
<h2 id="File-Archives">File archives</h2>
<p class="tab">A file whose name ends in '<b>.tar</b>' is normally an archive made by the <a href="/unix/utar.htm">tar</a> program. Emacs views these files in a special mode called Tar mode which provides a Dired-like list of the contents (see <a href="#Dired">Dired</a>). You can move around through the list only as you would in Dired, and visit the subfiles contained in the archive. However, not all Dired commands are available in Tar mode.<br><br>If Auto Compression mode is enabled (see <a href="#Compressed-Files">Compressed Files</a>), then Tar mode is used also for compressed archives&mdash;files with extensions '<b>.tgz</b>', .tar.Z and .tar.gz.<br><br>The keys <b>e</b>, <b>f</b> and <b>&lt;RET&gt;</b> all extract a component file into its own buffer. You can edit it there, and if you save the buffer, the edited version replaces the version in the Tar buffer. Clicking with the mouse on the file name in the Tar buffer does likewise. <b>v</b> extracts a file into a buffer in View mode (see <a href="#View-Mode">View Mode</a>). <b>o</b> extracts the file and displays it in another window, so you could edit the file and operate on the archive simultaneously.<br><br><b>d</b> marks a file for deletion when you later use <b>x</b>, and <b>u</b> unmarks a file, as in Dired. <b>C</b> copies a file from the archive to disk and <b>R</b> renames a file in the archive. <b>g</b> reverts the buffer from the archive on disk. The keys <b>M</b>, <b>G</b>, and <b>O</b> change the file's permission bits, group, and owner, respectively.<br><br>Saving the Tar buffer writes a new version of the archive to disk with the changes you made to the components.<br><br>You don't need the tar program to use Tar mode; Emacs reads the archives directly. However, accessing compressed archives requires the appropriate uncompression program.<br><br>A separate but similar Archive mode is used for <b>arc</b>, <a href="/jargon/j/jar.htm">jar</a>, <b>lzh</b>, <a href="/jargon/z/zip.htm">zip</a>, <a href="/jargon/r/rar.htm">rar</a>, <b>7z</b>, and <b>zoo</b> archives, and <b>exe</b> files that are <a href="/jargon/s/selfextf.htm">self-extracting</a> <a href="/jargon/e/execfile.htm">executables</a>.<br><br>The key bindings of Archive mode are similar to those in Tar mode, with the addition of the <b>m</b> key which marks a file for subsequent operations, and <b>M-&lt;DEL&gt;</b> which unmarks all the marked files. Also, the a key toggles the display of detailed file information, for those archive types where it won't fit in a single line. Operations such as renaming a subfile, or changing its mode or owner, are supported only for some of the archive formats.<br><br>Unlike Tar mode, Archive mode runs the archiving programs to unpack and repack archives. However, you don't need these programs to look at the archive table of contents, only to extract or manipulate the subfiles in the archive. Details of the program names and their options can be set in the '<b>Archive</b>' Customize group.</p>
<h2 id="Remote-Files">Remote files</h2>
<p class="tab">You can refer to files on other machines using a special file name syntax:</p>
<pre class="tab tcy">/host:filename
/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="93e6e0f6e1d3fbfce0e7">[email&#160;protected]</a>:filename
/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a5d0d6c0d7e5cdcad6d1">[email&#160;protected]</a>#port:filename
/method:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0b7e786e794b6364787f">[email&#160;protected]</a>:filename
/method:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0c797f697e4c64637f78">[email&#160;protected]</a>#port:filename</pre>
<p class="tab">To carry out this request, Emacs uses a remote-login program such as <a href="/jargon/f/ftp.htm">ftp</a>, <a href="/jargon/s/ssh.htm">ssh</a>, <a href="/unix/urlogin.htm">rlogin</a>, or <a href="/jargon/t/telnet.htm">telnet</a>. You can always specify in the file name which method to use: for example, <b>/ftp:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="afdadccaddefc7c0dcdb">[email&#160;protected]</a>:filename</b> uses FTP, whereas <b>/ssh:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e297918790a28a8d9196">[email&#160;protected]</a>:filename uses ssh</b>. When you don't specify a method in the file name, Emacs chooses the method as follows:</p>
<ul>
<li>If the hostname starts with '<b>ftp.</b>' (with dot), Emacs uses FTP.</li>
<li>If the username is '<b>ftp</b>' or '<b>anonymous</b>', Emacs uses FTP.</li>
<li>If the variable tramp-default-method is set to '<b>ftp</b>', Emacs uses FTP.</li>
<li>If ssh-agent is running, Emacs uses scp.</li>
<li>Otherwise, Emacs uses ssh.</li>
</ul>
<p class="tab">You can entirely turn off the remote file name feature by setting the variable <b>tramp-mode</b> to <b>nil</b>. You can turn off the feature in individual cases by quoting the file name with '<b>/:</b>' (see <a href="#Quoted-File-Names">Quoted File Names</a>).<br><br>Remote file access through FTP is handled by the Ange-FTP package, which is documented in the following. Remote file access through the other methods is handled by the Tramp package, which has its own manual.<br><br>When the Ange-FTP package is used, Emacs logs in through FTP using the name <b>user</b>, if that is specified in the remote file name. If user is unspecified, Emacs logs in using your username on the local system; but if you set the variable <b>ange-ftp-default-user</b> to a string, that string is used instead. When logging in, Emacs may also ask for a password.<br><br>For performance reasons, Emacs does not make backup files for files accessed vian FTP by default. To make it do so, change the variable <b>ange-ftp-make-backup-files</b> to a non-nil value.<br><br>By default, auto-save files for remote files are made in the temporary file directory on the local machine, as specified by the variable <b>auto-save-file-name-transforms</b>. See <a href="#Auto-Save-Files">Auto Save Files</a>.<br><br>To visit files accessible by anonymous FTP, you use special usernames '<b>anonymous</b>' or '<b>ftp</b>'. Passwords for these usernames are handled specially. The variable <b>ange-ftp-generate-anonymous-password</b> controls what happens: if the value of this variable is a string, then that string is used as the password; if non-nil (the default), then the value of <b>user-mail-address</b> is used; if nil, then Emacs prompts you for a password as usual (see <a href="#Passwords">Passwords</a>).<br><br>Sometimes you may be unable to access files on a remote machine because a <a href="/jargon/f/firewall.htm">firewall</a> between blocks the connection for security reasons. If you can log in on a gateway machine from which the target files are accessible, and whose FTP server supports gatewaying features, you can still use remote file names; all you have to do is specify the name of the gateway machine by setting the variable <b>ange-ftp-gateway-host</b>, and set <b>ange-ftp-smart-gateway</b> to <b>t</b>. Otherwise, you can make remote file names work, but the procedure is complex. You can read the instructions by typing <b>M-x finder-commentary &lt;RET&gt; ange-ftp &lt;RET&gt;</b>.</p>
<h2 id="Quoted-File-Names">Quoted file names</h2>
<p class="tab">You can quote an absolute file name to prevent special characters and syntax in it from having their special effects. The way to do this is to add '<b>/:</b>' at the beginning.<br><br>For example, you can quote a local file name which appears remote, to prevent it from being treated as a remote file name. Thus, if you have a directory named <b>/foo:</b> and a file named <b>bar</b> in it, you can refer to that file in Emacs as '<b>/:/foo:/bar</b>'.<br><br>'<b>/:</b>' can also prevent '<b>~</b>' from being treated as a special character for a user's home directory. For example, <b>/:/tmp/~hack</b> refers to a file whose name is <b>~hack</b> in the directory <b>/tmp</b>.<br><br>Quoting with '<b>/:</b>' is also a way to enter in the minibuffer a file name containing '<b>$</b>'. In order for this to work, the '<b>/:</b>' must be at the beginning of the minibuffer contents. (You can also double each '<b>$</b>'; see <a href="#File-Names-with-_0024">File Names with $</a>.)<br><br>You can also quote wildcard characters with '<b>/:</b>', for visiting. For example, <b>/:/tmp/foo*bar</b> visits the file <b>/tmp/foo*bar</b>.<br><br>Another method of getting the same result is to enter <b>/tmp/foo[*]bar</b>, which is a wildcard specification that matches only <b>/tmp/foo*bar</b>. However, in many cases there is no need to quote the wildcard characters because even unquoted they give the right result. For example, if the only file name in <b>/tmp</b> that starts with '<b>foo</b>' and ends with '<b>bar</b>' is <b>foo*bar</b>, then specifying <b>/tmp/foo*bar</b> will visit only <b>/tmp/foo*bar</b>.</p>
<h2 id="File-Name-Cache">File name cache</h2>
<p class="tab">You can use the file name cache to make it easy to locate a file by name, without having to remember exactly where it is located. When typing a file name in the minibuffer, <b>C-&lt;tab&gt;</b> (<b>file-cache-minibuffer-complete</b>) completes it using the file name cache. If you repeat <b>C-&lt;tab&gt;</b>, that cycles through the possible completions of what you had originally typed. (However, note that the <b>C-&lt;tab&gt;</b> character cannot be typed on most text terminals.)<br><br>The file name cache does not fill up automatically. Instead, you load file names into the cache using these commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>M-x file-cache-add-directory &lt;RET&gt;</b> <i>directory</i> <b>&lt;RET&gt;</b></td>
<td>Add each file name in <i>directory</i> to the file name cache.</td>
</tr>
<tr class="tcw">
<td><b>M-x file-cache-add-directory-using-find &lt;RET&gt;</b> <i>directory</i> <b>&lt;RET&gt;</b></td>
<td>Add each file name in <i>directory</i> and all its nested subdirectories to the file name cache.</td>
</tr>
<tr class="tcw">
<td><b>M-x file-cache-add-directory-using-locate &lt;RET&gt;</b> <i>directory</i> <b>&lt;RET&gt;</b></td>
<td>Add each file name in <i>directory</i> and all its nested subdirectories to the file name cache, using <a href="/unix/ulocate.htm">locate</a> to find them all.</td>
</tr>
<tr class="tcw">
<td><b>M-x file-cache-add-directory-list &lt;RET&gt;</b> <i>variable</i> <b>&lt;RET&gt;</b></td>
<td>Add each file name in each directory listed in <i>variable</i> to the file name cache. <i>variable</i> should be a Lisp variable whose value is a list of directory names, like <b>load-path</b>.</td>
</tr>
<tr class="tcw">
<td><b>M-x file-cache-clear-cache &lt;RET&gt;</b></td>
<td>Clear the cache; that is, remove all file names from it.</td>
</tr>
</table>
<p class="tab">The file name cache is not persistent: it is kept and maintained only for the duration of the Emacs session. You can view the contents of the cache with the <b>file-cache-display</b> command.</p>
<h2 id="File-Conveniences">Convenience features for finding files</h2>
<p class="tab">In this section, we introduce some convenient facilities for finding recently-opened files, reading file names from a buffer, and viewing image files.<br><br>If you enable Recentf mode, with <b>M-x recentf-mode</b>, the '<b>File</b>' menu includes a submenu containing a list of recently opened files. <b>M-x recentf-save-list</b> saves the current <b>recent-file-list</b> to a file, and <b>M-x recentf-edit-list</b> edits it.<br><br>The <b>M-x ffap</b> command generalizes <b>find-file</b> with more powerful heuristic defaults (see <a href="#FFAP">FFAP</a>), often based on the text at point. Partial Completion mode offers other features extending <b>find-file</b>, which can be used with <b>ffap</b>. See <a href="#Completion-Options">Options</a>.<br><br>Visiting image files automatically selects Image mode. In this major mode, you can type <b>C-c C-c</b> (<b>image-toggle-display</b>) to toggle between displaying the file as an image in the Emacs buffer, and displaying its underlying text (or raw byte) representation. Displaying the file as an image works only if Emacs is compiled with support for displaying such images. If the displayed image is wider or taller than the frame, the usual point motion keys (<b>C-f</b>, <b>C-p</b>, and so forth) cause different parts of the image to be displayed. If the image is animated, the command <b>&lt;RET&gt;</b> (<b>image-toggle-animation</b>) starts or stops the animation. Animation plays once, unless the option <b>image-animate-loop</b> is non-nil. Currently, Emacs only supports animation in <a href="/jargon/g/gif.htm">GIF</a> files.<br><br>If Emacs was compiled with support for the ImageMagick library, it can use ImageMagick to render a wide variety of images. The variable <b>imagemagick-enabled-types</b> lists the image types that Emacs may render using ImageMagick; each element in the list should be an internal ImageMagick name for an image type, as a symbol or an equivalent string (e.g., BMP for <a href="/jargon/b/bmp.htm">.bmp images</a>). To enable ImageMagick for all possible image types, change <b>imagemagick-enabled-types</b> to <b>t</b>. The variable <b>imagemagick-types-inhibit</b> lists the image types which should never be rendered using ImageMagick, regardless of the value of <b>imagemagick-enabled-types</b> (the default list includes types like C and HTML, which ImageMagick can render as an "image" but Emacs should not). To disable ImageMagick entirely, change <b>imagemagick-types-inhibit</b> to <b>t</b>.<br><br>The Image-Dired package can also be used to view images as thumbnails. See <a href="#Image_002dDired">Image-Dired</a>.</p>
<h2 id="Filesets">Filesets</h2>
<p class="tab">If you regularly edit a certain group of files, you can define them as a fileset. This lets you perform certain operations, such as visiting, <b>query-replace</b>, and shell commands on all the files at once. To make use of filesets, you must first add the expression (<b>filesets-init</b>) to your init file (see <a href="#Init-File">Init File</a>). This adds a '<b>Filesets</b>' menu to the menu bar.<br><br>The simplest way to define a fileset is by adding files to it one at a time. To add a file to fileset name, visit the file and type <b>M-x filesets-add-buffer &lt;RET&gt; name &lt;RET&gt;</b>. If there is no fileset name, this creates a new one, which initially contains only the current file. The command <b>M-x filesets-remove-buffer</b> removes the current file from a fileset.<br><br>You can also edit the list of filesets directly, with <b>M-x filesets-edit</b> (or by choosing '<b>Edit Filesets</b>' from the '<b>Filesets</b>' menu). The editing is performed in a Customize buffer (see <a href="#Easy-Customization">Easy Customization</a>). Normally, a fileset is a simple list of files, but you can also define a fileset as a regular expression matching file names. Examples of these more complicated filesets are shown in the Customize buffer. Remember to select '<b>Save for future sessions</b>' if you want to use the same filesets in future Emacs sessions.<br><br>You can use the command <b>M-x filesets-open</b> to visit all the files in a fileset, and <b>M-x filesets-close</b> to close them. Use <b>M-x filesets-run-cmd</b> to run a shell command on all the files in a fileset. These commands are also available from the '<b>Filesets</b>' menu, where each existing fileset is represented by a submenu.<br><br>See <a href="#Version-Control">Version Control</a>, for a different concept of "filesets": groups of files bundled together for version control operations. Filesets of that type are unnamed, and do not persist across Emacs sessions.</p>
<h2 id="Buffers">Using multiple buffers</h2>
<p class="tab">The text you are editing in Emacs resides in an object called a buffer. Each time you visit a file, a buffer is used to hold the file's text. Each time you invoke Dired, a buffer is used to hold the directory listing. If you send a message with <b>C-x m</b>, a buffer is used to hold the text of the message. When you ask for a command's documentation, that appears in a buffer named *Help*.<br><br>Each buffer has a unique name, which can be of any length. When a buffer is displayed in a window, its name is shown in the mode line (see <a href="#Mode-Line">Mode Line</a>). The distinction between upper and lowercase matters in buffer names. Most buffers are made by visiting files, and their names are derived from the files' names; however, you can also create an empty buffer with any name you want. A newly started Emacs has several buffers, including one named *scratch*, which can be used for evaluating Lisp expressions and is not associated with any file (see <a href="#Lisp-Interaction">Lisp Interaction</a>).<br><br>At any time, one and only one buffer is selected; we call it the current buffer. We sometimes say that a command operates on "the buffer"; this really means that it operates on the current buffer. When there is only one Emacs window, the buffer displayed in that window is current. When there are multiple windows, the buffer displayed in the selected window is current. See <a href="#Windows">Windows</a>.<br><br>Aside from its textual contents, each buffer records several pieces of information, such as what file it is visiting (if any), whether it is modified, and what major mode and minor modes are in effect (see <a href="#Modes">Modes</a>). These are stored in buffer-local variables&mdash;variables with a different value in each buffer. See <a href="#Locals">Locals</a>.<br><br>A buffer's size cannot be larger than some maximum, which is defined by the largest buffer position representable by Emacs integers. This is because Emacs tracks buffer positions using that data type. For typical 64-bit machines, this maximum buffer size is 2^61 - 2 bytes, or about 2 EiB. For typical 32-bit machines, the maximum is usually 2^29 - 2 bytes, or about 512 MiB. Buffer sizes are also limited by the amount of memory in the system.</p>
<ul>
<li><a href="#Select-Buffer">Select Buffer</a>: Creating a new buffer or reselecting an old one.</li>
<li><a href="#List-Buffers">List Buffers</a>: Getting a list of buffers that exist.</li>
<li><a href="#Misc-Buffer">Misc Buffer</a>: Renaming; changing read-onlyness; copying text.</li>
<li><a href="#Kill-Buffer">Kill Buffer</a>: Killing buffers you no longer need.</li>
<li><a href="#Several-Buffers">Several Buffers</a>: How to go through the list of all buffers and operate variously on several of them.</li>
<li><a href="#Indirect-Buffers">Indirect Buffers</a>: An indirect buffer shares the text of another buffer.</li>
<li><a href="#Buffer-Convenience">Buffer Convenience</a>: Convenience and customization features for buffer handling.</li>
</ul>
<h2 id="Select-Buffer">Creating and selecting buffers</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-x b</b> <i>buffer</i> <b>&lt;RET&gt;</b></td>
<td>Select or create a buffer named <i>buffer</i> (<b>switch-to-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 b</b> <i>buffer</i> <b>&lt;RET&gt;</b></td>
<td>Similar, but select <i>buffer</i> in another window (<b>switch-to-buffer-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 b</b> <i>buffer</i> <b>&lt;RET&gt;</b></td>
<td>Similar, but select <i>buffer</i> in a separate frame (<b>switch-to-buffer-other-frame</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;LEFT&gt;</b></td>
<td>Select the previous buffer in the buffer list (<b>previous-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RIGHT&gt;</b></td>
<td>Select the next buffer in the buffer list (<b>next-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u M-g M-g</b>, <b>C-u M-g g</b></td>
<td>Read a number <i>n</i> and move to line <i>n</i> in the most recently selected buffer other than the current buffer.</td>
</tr>
</table>
<p class="tab">The <b>C-x b</b> (<b>switch-to-buffer</b>) command reads a buffer name using the minibuffer. Then it makes that buffer current, and displays it in the currently-selected window. An empty input specifies the buffer that was current most recently among those not now displayed in any window.<br><br>While entering the buffer name, you can use the usual completion and history commands (see <a href="#Minibuffer">Minibuffer</a>). Note that <b>C-x b</b>, and related commands, use "permissive completion with confirmation" for minibuffer completion: if you type <b>&lt;RET&gt;</b> immediately after completing up to a nonexistent buffer name, Emacs prints '<b>[Confirm]</b>' and you must type a second <b>&lt;RET&gt;</b> to submit that buffer name. See <a href="#Completion-Exit">Completion Exit</a>, for details.<br><br>If you specify a buffer that does not exist, <b>C-x b</b> creates a new, empty buffer that is not visiting any file, and selects it for editing. The default value of the variable major-mode determines the new buffer's major mode; the default value is Fundamental mode. See <a href="#Major-Modes">Major Modes</a>. One reason to create a new buffer is to use it for making temporary notes. If you try to save it, Emacs asks for the file name to use, and the buffer's major mode is re-established taking that file name into account (see <a href="#Choosing-Modes">Choosing Modes</a>).<br><br>For conveniently switching between a few buffers, use the commands <b>C-x &lt;LEFT&gt;</b> and <b>C-x &lt;RIGHT&gt;</b>. <b>C-x &lt;LEFT&gt;</b> (<b>previous-buffer</b>) selects the previous buffer (following the order of most recent selection in the current frame), while <b>C-x &lt;RIGHT&gt;</b> (<b>next-buffer</b>) moves through buffers in the reverse direction.<br><br>To select a buffer in a window other than the current one, type <b>C-x 4 b</b> (<b>switch-to-buffer-other-window</b>). This prompts for a buffer name using the minibuffer, displays that buffer in another window, and selects that window.<br><br>Similarly, <b>C-x 5 b</b> (<b>switch-to-buffer-other-frame</b>) prompts for a buffer name, displays that buffer in another frame, and selects that frame. If the buffer is already being shown in a window on another frame, Emacs selects that window and frame instead of creating a new frame.<br><br>See <a href="#Displaying-Buffers">Displaying Buffers</a>, for how and where the <b>C-x 4 b</b> and <b>C-x 5 b</b> commands get the window and/or frame to display.<br><br>Also, <b>C-x C-f</b>, and any other command for visiting a file, can also be used to switch to an existing file-visiting buffer. See <a href="#Visiting">Visiting</a>.<br><br><b>C-u M-g M-g</b>, that is <b>goto-line</b> with a plain prefix argument, reads a number <i>n</i> using the minibuffer, selects the most recently selected buffer other than the current buffer in another window, and then moves point to the beginning of line number <i>n</i> in that buffer. This is mainly useful in a buffer that refers to line numbers in another buffer: if point is on or only after a number, <b>goto-line</b> uses that number as the default for <i>n</i>. Note that prefix arguments other than only <b>C-u</b> behave differently. <b>C-u 4 M-g M-g</b> goes to line 4 in the current buffer, without reading a number from the minibuffer. (Remember that <b>M-g M-g</b> without prefix argument reads a number <i>n</i> and then moves to line number <i>n</i> in the current buffer. See <a href="#Moving-Point">Moving Point</a>.)<br><br>Emacs uses buffer names that start with a space for internal purposes. It treats these buffers specially in minor ways&mdash;for example, by default they do not record undo information. It is best to avoid using such buffer names yourself.</p>
<h2 id="List-Buffers">Listing existing buffers</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x C-b</b></td>
<td>List the existing buffers (<b>list-buffers</b>).</td>
</tr>
</table>
<p class="tab">To display a list of existing buffers, type <b>C-x C-b</b>. Each line in the list shows one buffer's name, major mode and visited file. The buffers are listed in the order that they were current; the buffers that were current most recently come first.<br><br>'<b>.</b>' in the first field of a line indicates that the buffer is current. '<b>%</b>' indicates a read-only buffer. '<b>*</b>' indicates that the buffer is "modified". If several buffers are modified, it may be time to save some with <b>C-x s</b> (see <a href="#Save-Commands">Save Commands</a>). Here is an example of a buffer list:</p>
<pre class="tab">CRM Buffer                Size  Mode              File
. * .emacs                3294  Emacs-Lisp        ~/.emacs
 %  *Help*                 101  Help
    search.c             86055  C                 ~/cvs/emacs/src/search.c
 %  src                  20959  Dired by name     ~/cvs/emacs/src/
  * *mail*                  42  Mail
 %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
 %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
    *scratch*              191  Lisp Interaction
  * *Messages*            1554  Fundamental
</pre>
<p class="tab">The buffer *Help* was made by a help request (see <a href="#Help">Help</a>); it is not visiting any file. The buffer <b>src</b> was made by Dired on the directory <b>~/cvs/emacs/src/</b>. You can list only buffers that are visiting files by giving the command a prefix argument, as in <b>C-u C-x C-b</b>.<br><br><b>list-buffers</b> omits buffers whose names begin with a space, unless they visit files: such buffers are used internally by Emacs.</p>
<h2 id="Misc-Buffer">Miscellaneous buffer operations</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>C-x C-q</b></td>
<td>Toggle read-only status of buffer (<b>read-only-mode</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x rename-buffer &lt;RET&gt; name &lt;RET&gt;</b></td>
<td>Change the name of the current buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x rename-uniquely</b></td>
<td>Rename the current buffer by adding '<b>&lt;number&gt;</b>' to the end.</td>
</tr>
<tr class="tcw">
<td><b>M-x view-buffer &lt;RET&gt;</b> <i>buffer</i> <b>&lt;RET&gt;</b></td>
<td>Scroll through buffer <i>buffer</i>. See <a href="#View-Mode">View Mode</a>.</td>
</tr>
</table>
<p class="tab">A buffer can be read-only, which means that commands to change its contents are not allowed. The mode line indicates read-only buffers with '<b>%%</b>' or '<b>%*</b>' near the left margin. Read-only buffers are usually made by subsystems such as Dired and Rmail that have special commands to operate on the text; also by visiting a file whose access control says you cannot write it.<br><br>The command <b>C-x C-q</b> (<b>read-only-mode</b>) makes a read-only buffer writable, and makes a writable buffer read-only. This works by setting the variable <b>buffer-read-only</b>, which has a local value in each buffer and makes the buffer read-only if its value is non-nil. If you change the option <b>view-read-only</b> to a non-nil value, making the buffer read-only with <b>C-x C-q</b> also enables View mode in the buffer (see <a href="#View-Mode">View Mode</a>).<br><br><b>M-x rename-buffer</b> changes the name of the current buffer. You specify the new name as a minibuffer argument; there is no default. If you specify a name that is in use for some other buffer, an error happens and no renaming is done. <b>M-x rename-uniquely</b> renames the current buffer to a similar name with a numeric suffix added to make it both different and unique. This command does not need an argument. It is useful for creating multiple shell buffers: if you rename the *shell* buffer, then do <b>M-x shell</b> again, it makes a new shell buffer named *shell*; meanwhile, the old shell buffer continues to exist under its new name. This method is also good for mail buffers, compilation buffers, and most Emacs features that create special buffers with particular names. (With some of these features, such as <b>M-x compile</b>, <b>M-x grep</b>, you need to switch to some other buffer before using the command again, otherwise it will reuse the current buffer despite the name change.)<br><br>The commands <b>M-x append-to-buffer</b> and <b>M-x insert-buffer</b> can also be used to copy text from one buffer to another. See <a href="#Accumulating-Text">Accumulating Text</a>.</p>
<h2 id="Kill-Buffer">Killing buffers</h2>
<p class="tab">If you continue an Emacs session for a while, you may accumulate a large number of buffers. You may then find it convenient to kill the buffers you no longer need. On most operating systems, killing a buffer releases its space back to the operating system so that other programs can use it. Here are some commands for killing buffers:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>C-x k</b> <i>bufname</i> <b>&lt;RET&gt;</b></td>
<td>Kill buffer <i>bufname</i> (<b>kill-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x kill-some-buffers</b></td>
<td>Offer to kill each buffer, one by one.</td>
</tr>
<tr class="tcw">
<td><b>M-x kill-matching-buffers</b></td>
<td>Offer to kill all buffers matching a regular expression.</td>
</tr>
</table>
<p class="tab"><b>C-x k</b> (<b>kill-buffer</b>) kills one buffer, whose name you specify in the minibuffer. The default, used if you type only <b>&lt;RET&gt;</b> in the minibuffer, is to kill the current buffer. If you kill the current buffer, another buffer becomes current: one that was current in the recent past but is not displayed in any window now. If you ask to kill a file-visiting buffer that is modified, then you must confirm with <b>yes</b> before the buffer is killed.<br><br>The command <b>M-x kill-some-buffers</b> asks about each buffer, one by one. An answer of <b>y</b> means to kill the buffer, only like <b>kill-buffer</b>. This command ignores buffers whose names begin with a space, which are used internally by Emacs.<br><br>The command <b>M-x kill-matching-buffers</b> prompts for a regular expression and kills all buffers whose names match that expression. See <a href="#Regexps">Regexps</a>. Like <b>kill-some-buffers</b>, it asks for confirmation before each kill. This command normally ignores buffers whose names begin with a space, which are used internally by Emacs. To kill internal buffers as well, call <b>kill-matching-buffers</b> with a prefix argument.<br><br>The Buffer Menu feature is also convenient for killing various buffers. See <a href="#Several-Buffers">Several Buffers</a>.<br><br>If you want to do something special every time a buffer is killed, you can add hook functions to the hook <b>kill-buffer-hook</b> (see <a href="#Hooks">Hooks</a>).<br><br>If you run one Emacs session for a period of days, as many people do, it can fill up with buffers that you used several days ago. The command <b>M-x clean-buffer-list</b> is a convenient way to purge them; it kills all the unmodified buffers that you have not used for a long time. An ordinary buffer is killed if it has not been displayed for three days; however, you can specify certain buffers that should never be killed automatically, and others that should be killed if they are unused for a mere hour.<br><br>You can also have this buffer purging done for you, once a day, by enabling Midnight mode. Midnight mode operates each day at midnight; at that time, it runs <b>clean-buffer-list</b>, or whichever functions you have placed in the normal hook <b>midnight-hook</b> (see <a href="#Hooks">Hooks</a>). To enable Midnight mode, use the Customization buffer to set the variable <b>midnight-mode</b> to <b>t</b>. See <a href="#Easy-Customization">Easy Customization</a>.</p>
<h2 id="Several-Buffers">Operating on several buffers</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:320px"><b>M-x buffer-menu</b></td>
<td>Begin editing a buffer listing all Emacs buffers.</td>
</tr>
<tr class="tcw">
<td><b>M-x buffer-menu-other-window</b></td>
<td>Similar, but do it in another window.</td>
</tr>
</table>
<p class="tab">The Buffer Menu opened by <b>C-x C-b</b> (see <a href="#List-Buffers">List Buffers</a>) does not merely list buffers. It also allows you to perform various operations on buffers, through an interface similar to Dired (see <a href="#Dired">Dired</a>). You can save buffers, kill them (here called deleting them, for consistency with Dired), or display them.<br><br>To use the Buffer Menu, type <b>C-x C-b</b> and switch to the window displaying the *Buffer List* buffer. You can also type <b>M-x buffer-menu</b> to open the Buffer Menu in the selected window. Alternatively, the command <b>M-x buffer-menu-other-window</b> opens the Buffer Menu in another window, and selects that window.<br><br>The Buffer Menu is a read-only buffer, and can be changed only through the special commands described in this section. The usual cursor motion commands can be used in this buffer. The following commands apply to the buffer described on the current line:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>d</b></td>
<td>Flag the buffer for deletion (<b>killing</b>), then move point to the next line (<b>Buffer-menu-delete</b>). The deletion flag is indicated by the character '<b>D</b>' on the line, before the buffer name. The deletion occurs only when you type the <b>x</b> command (see below).</td>
</tr>
<tr class="tcw">
<td><b>C-d</b></td>
<td>Like <b>d</b>, but move point up instead of down (<b>Buffer-menu-delete-backwards</b>).</td>
</tr>
<tr class="tcw">
<td><b>s</b></td>
<td>Flag the buffer for saving (<b>Buffer-menu-save</b>). The save flag is indicated by the character '<b>S</b>' on the line, before the buffer name. The saving occurs only when you type <b>x</b>. You may request both saving and deletion for the same buffer.</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Perform all flagged deletions and saves (<b>Buffer-menu-execute</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Remove all flags from the current line, and move down (<b>Buffer-menu-unmark</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b></td>
<td>Move to the previous line and remove all flags on that line (<b>Buffer-menu-backup-unmark</b>).</td>
</tr>
</table>
<p class="tab">The commands for adding or removing flags, <b>d</b>, <b>C-d</b>, <b>s</b> and <b>u</b>, all accept a numeric argument as a repeat count.<br><br>The following commands operate immediately on the buffer listed on the current line. They also accept a numeric argument as a repeat count.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>~</b></td>
<td>Mark the buffer as unmodified (<b>Buffer-menu-not-modified</b>). See <a href="#Save-Commands">Save Commands</a>.</td>
</tr>
<tr class="tcw">
<td><b>%</b></td>
<td>Toggle the buffer's read-only status (<b>Buffer-menu-toggle-read-only</b>). See <a href="#Misc-Buffer">Misc Buffer</a>.</td>
</tr>
<tr class="tcw">
<td><b>t</b></td>
<td>Visit the buffer as a tags table (<b>Buffer-menu-visit-tags-table</b>). See <a href="#Select-Tags-Table">Select Tags Table</a>.</td>
</tr>
</table>
<p class="tab">The following commands are used to select another buffer or buffers:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>q</b></td>
<td>Quit the Buffer Menu (<b>quit-window</b>). The most recent formerly visible buffer is displayed in its place.</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b>, <b>f</b></td>
<td>Select this line's buffer, replacing the *Buffer List* buffer in its window (<b>Buffer-menu-this-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>o</b></td>
<td>Select this line's buffer in another window, as if by <b>C-x 4 b</b>, leaving *Buffer List* visible (<b>Buffer-menu-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-o</b></td>
<td>Display this line's buffer in another window, without selecting it (<b>Buffer-menu-switch-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>1</b></td>
<td>Select this line's buffer in a full-frame window (<b>Buffer-menu-1-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>2</b></td>
<td>Set up two windows on the current frame, with this line's buffer selected in one, and a previously current buffer (aside from *Buffer List*) in the other (<b>Buffer-menu-2-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>b</b></td>
<td>Bury this line's buffer (<b>Buffer-menu-bury</b>).</td>
</tr>
<tr class="tcw">
<td><b>m</b></td>
<td>Mark this line's buffer to be displayed in another window if you exit with the <b>v</b> command (<b>Buffer-menu-mark</b>). The display flag is indicated by the character '<b>&gt;</b>' at the beginning of the line. (A single buffer may not have both deletion and display flags.)</td>
</tr>
<tr class="tcw">
<td><b>v</b></td>
<td>Select this line's buffer, and also display in other windows any buffers flagged with the <b>m</b> command (<b>Buffer-menu-select</b>). If you have not flagged any buffers, this command is equivalent to 1.</td>
</tr>
</table>
<p class="tab">The following commands affect the entire buffer list:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>S</b></td>
<td>Sort the Buffer Menu entries according to their values in the column at point. With a numeric prefix argument <i>n</i>, sort according to the <i>n</i>-th column (<b>tabulated-list-sort</b>).</td>
</tr>
<tr class="tcw">
<td><b>T</b></td>
<td>Delete, or reinsert, lines for non-file buffers <b>Buffer-menu-toggle-files-only</b>). This command toggles the inclusion of such buffers in the buffer list.</td>
</tr>
</table>
<p class="tab">Normally, the buffer *Buffer List* is not updated automatically when buffers are created and killed; its contents are only text. If you have created, deleted or renamed buffers, the way to update *Buffer List* to show what you have done is to type <b>g</b> (<b>revert-buffer</b>). You can make this happen regularly every <b>auto-revert-interval</b> seconds if you enable Auto Revert mode in this buffer, as long as it is not marked modified. Global Auto Revert mode applies to the *Buffer List* buffer only if <b>global-auto-revert-non-file-buffers</b> is non-nil. See <a href="#Autorevert">global-auto-revert-non-file-buffers</a>, for details.</p>
<h2 id="Indirect-Buffers">Indirect buffers</h2>
<p class="tab">An indirect buffer shares the text of some other buffer, which is called the base buffer of the indirect buffer. In some ways it is a buffer analogue of a symbolic link between files.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>M-x make-indirect-buffer &lt;RET&gt;</b> <i>base-buffer</i> <b>&lt;RET&gt;</b> <i>indirect-name</i> <b>&lt;RET&gt;</b></td>
<td>Create an indirect buffer named <i>indirect-name</i> with base buffer <i>base-buffer</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x clone-indirect-buffer &lt;RET&gt;</b></td>
<td>Create an indirect buffer that is a twin copy of the current buffer.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 c</b></td>
<td>Create an indirect buffer that is a twin copy of the current buffer, and select it in another window (<b>clone-indirect-buffer-other-window</b>).</td>
</tr>
</table>
<p class="tab">The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other. But in all other respects, the indirect buffer and its base buffer are completely separate. They can have different names, different values of point, different narrowing, different markers, different major modes, and different local variables.<br><br>An indirect buffer cannot visit a file, but its base buffer can. If you try to save the indirect buffer, that actually works by saving the base buffer. Killing the base buffer effectively kills the indirect buffer, but killing an indirect buffer has no effect on its base buffer.<br><br>One way to use indirect buffers is to display multiple views of an outline. See <a href="#Outline-Views">Outline Views</a>.<br><br>A quick and handy way to make an indirect buffer is with the command <b>M-x clone-indirect-buffer</b>. It creates and selects an indirect buffer whose base buffer is the current buffer. With a numeric argument, it prompts for the name of the indirect buffer; otherwise it uses the name of the current buffer, with a '<b>&lt;n&gt;</b>' suffix added. <b>C-x 4 c</b> (<b>clone-indirect-buffer-other-window</b>) works like <b>M-x clone-indirect-buffer</b>, but it selects the new buffer in another window. These functions run the hook <b>clone-indirect-buffer-hook</b> after creating the indirect buffer.<br><br>The more general way to make an indirect buffer is with the command <b>M-x make-indirect-buffer</b>. It creates an indirect buffer named <b>indirect-name</b> from a buffer <b>base-buffer</b>, prompting for both using the minibuffer.</p>
<h2 id="Buffer-Convenience">Convenience features and customization of buffer handling</h2>
<p class="tab">This section describes several modes and features that make it more convenient to switch between buffers.</p>
<ul>
<li><a href="#Uniquify">Uniquify</a>: Making buffer names unique with directory parts.</li>
<li><a href="#Iswitchb">Iswitchb</a>: Switching between buffers with substrings.</li>
<li><a href="#Buffer-Menus">Buffer Menus</a>: Configurable buffer menu.</li>
</ul>
<h2 id="Uniquify">Making buffer names unique</h2>
<p class="tab">When several buffers visit identically-named files, Emacs must give the buffers distinct names. The usual method for making buffer names unique adds '<b>&lt;2&gt;</b>', '<b>&lt;3&gt;</b>', etc. to the end of the buffer names (all but one of them).<br><br>Other methods work by adding parts of each file's directory to the buffer name. To select one, load the library uniquify (e.g., using <b>(require 'uniquify)</b>), and customize the variable <b>uniquify-buffer-name-style</b> (see <a href="#Easy-Customization">Easy Customization</a>).<br><br>To begin with, the forward naming method includes part of the file's directory name at the beginning of the buffer name; using this method, buffers visiting the files <b>/u/rms/tmp/Makefile</b> and <b>/usr/projects/zaphod/Makefile</b> would be named '<b>tmp/Makefile</b>' and '<b>zaphod/Makefile</b>', respectively (instead of '<b>Makefile</b>' and '<b>Makefile&lt;2&gt;</b>').<br><br>In contrast, the post-forward naming method would call the buffers '<b>Makefile|tmp</b>' and '<b>Makefile|zaphod</b>', and the reverse naming method would call them '<b>Makefile\tmp</b>' and '<b>Makefile\zaphod</b>'. The nontrivial difference between <b>post-forward</b> and reverse occurs when only one directory name is not enough to distinguish two files; then reverse puts the directory names in reverse order, so that <b>/top/middle/file</b> becomes '<b>file\middle\top</b>', while <b>post-forward</b> puts them in forward order after the file name, as in '<b>file|top/middle</b>'.<br><br>Which rule to follow for putting the directory names in the buffer name is not important if you are going to look at the buffer names before you type one. But as an experienced user, if you know the rule, you won't have to look. And then you may find that one rule or another is easier for you to remember and apply quickly.</p>
<h2 id="Iswitchb">Switching between buffers using substrings</h2>
<p class="tab">Iswitchb global minor mode provides convenient switching between buffers using substrings of their names. It replaces the normal definitions of <b>C-x b</b>, <b>C-x 4 b</b>, <b>C-x 5 b</b>, and <b>C-x 4 C-o</b> with alternative commands that are somewhat "smarter".<br><br>When one of these commands prompts you for a buffer name, you can type in only a substring of the name you want to choose. As you enter the substring, Iswitchb mode continuously displays a list of buffers that match the substring you have typed.<br><br>At any time, you can type <b>&lt;RET&gt;</b> to select the first buffer in the list. So the way to select a particular buffer is to make it the first in the list. There are two ways to do this. You can type more of the buffer name and thus reduce the list, excluding unwanted buffers above the desired one. Alternatively, you can use <b>C-s</b> and <b>C-r</b> to rotate the list until the desired buffer is first.<br><br><b>&lt;TAB&gt;</b> while entering the buffer name performs completion on the string you have entered, based on the displayed list of buffers.<br><br>To enable Iswitchb mode, type <b>M-x iswitchb-mode</b>, or customize the variable <b>iswitchb-mode</b> to <b>t</b> (see <a href="#Easy-Customization">Easy Customization</a>).</p>
<h2 id="Buffer-Menus">Customizing buffer menus</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px">M-x bs-show</td>
<td>Make a list of buffers similarly to <b>M-x list-buffers</b> but customizable.</td>
</tr>
</table>
<p class="tab"><b>M-x bs-show</b> pops up a buffer list similar to the one normally displayed by <b>C-x C-b</b> but which you can customize. If you prefer this to the usual buffer list, you can bind this command to <b>C-x C-b</b>. To customize this buffer list, use the bs Custom group (see <a href="#Easy-Customization">Easy Customization</a>).<br><br>MSB global minor mode ("MSB" stands for "mouse select buffer") provides a different and customizable mouse buffer menu which you may prefer. It replaces the bindings of <b>mouse-buffer-menu</b>, normally on <b>C-Down-Mouse-1</b>, and the menu bar buffer menu. You can customize the menu in the msb Custom group.</p>
<h2 id="Windows">Multiple windows</h2>
<p class="tab">Emacs can split a frame into two or many windows. Multiple windows can display parts of different buffers, or different parts of one buffer. Multiple frames always imply multiple windows, because each frame has its own set of windows. Each window belongs to one and only one frame.</p>
<ul>
<li><a href="#Basic-Window">Basic Window</a>: Introduction to Emacs windows.</li>
<li><a href="#Split-Window">Split Window</a>: New windows are made by splitting existing windows.</li>
<li><a href="#Other-Window">Other Window</a>: Moving to another window or doing something to it.</li>
<li><a href="#Pop-Up-Window">Pop Up Window</a>: Finding a file or buffer in another window.</li>
<li><a href="#Change-Window">Change Window</a>: Deleting windows and changing their sizes.</li>
<li><a href="#Displaying-Buffers">Displaying Buffers</a>: How Emacs picks a window for displaying a buffer.</li>
<li><a href="#Window-Convenience">Window Convenience</a>: Convenience functions for window handling.</li>
</ul>
<h2 id="Basic-Window">Concepts of Emacs windows</h2>
<p class="tab">Each Emacs window displays one Emacs buffer at any time. A single buffer may appear in more than one window; if it does, any changes in its text are displayed in all the windows where it appears. But these windows can show different parts of the buffer, because each window has its own value of point.<br><br>At any time, one Emacs window is the selected window; the buffer this window is displaying is the current buffer. On graphical displays, the point is indicated by a solid blinking cursor in the selected window, and by a hollow box in non-selected windows. On text terminals, the cursor is drawn only in the selected window. See <a href="#Cursor-Display">Cursor Display</a>.<br><br>Commands to move point affect the value of point for the selected Emacs window only. They do not change the value of point in other Emacs windows, even those showing the same buffer. The same is true for buffer-switching commands such as <b>C-x b</b>; they do not affect other windows at all. However, there are other commands such as <b>C-x 4 b</b> that select a different window and switch buffers in it. Also, all commands that display information in a window, including (for example) <b>C-h f</b> (<b>describe-function</b>) and <b>C-x C-b</b> (<b>list-buffers</b>), work by switching buffers in a non-selected window without affecting the selected window.<br><br>When multiple windows show the same buffer, they can have different regions, because they can have different values of point. However, they all have the same value for the mark, because each buffer has only one mark position.<br><br>Each window has its own mode line, which displays the buffer name, modification status and major and minor modes of the buffer that is displayed in the window. The selected window's mode line appears in a different color. See <a href="#Mode-Line">Mode Line</a>, for details.</p>
<h2 id="Split-Window">Splitting windows</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>C-x 2</b></td>
<td>Split the selected window into two windows, one above the other (<b>split-window-below</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 3</b></td>
<td>Split the selected window into two windows, positioned side by side (<b>split-window-right</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-Mouse-2</b></td>
<td>In the mode line of a window, split that window.</td>
</tr>
</table>
<p class="tab"><b>C-x 2</b> (<b>split-window-below</b>) splits the selected window into two windows, one above the other. After splitting, the selected window is the upper one, and the newly split-off window is below. Both windows have the same value of point as before, and display the same portion of the buffer (or as close to it as possible). If necessary, the windows are scrolled to keep point on-screen. By default, the two windows each get half the height of the original window. A positive numeric argument specifies how many lines to give to the top window; a negative numeric argument specifies how many lines to give to the bottom window.<br><br>If you change the variable <b>split-window-keep-point</b> to <b>nil</b>, <b>C-x 2</b> instead adonlys the portion of the buffer displayed by the two windows, and the value of point in each window, to keep the text on the screen as close as possible to what it was before; furthermore, if point was in the lower half of the original window, the bottom window is selected instead of the upper one.<br><br><b>C-x 3</b> (<b>split-window-right</b>) splits the selected window into two side-by-side windows. The left window is the selected one; the right window displays the same portion of the same buffer, and has the same value of point. A positive numeric argument specifies how many columns to give the left window; a negative numeric argument specifies how many columns to give the right window.<br><br>When you split a window with <b>C-x 3</b>, each resulting window occupies less than the full width of the frame. If it becomes too narrow, the buffer may be difficult to read if continuation lines are in use (see <a href="#Continuation-Lines">Continuation Lines</a>). Therefore, Emacs automatically switches to line truncation if the window width becomes narrower than 50 columns. This truncation occurs regardless of the value of the variable <b>truncate-lines</b> (see <a href="#Line-Truncation">Line Truncation</a>); it is instead controlled by the variable <b>truncate-partial-width-windows</b>. If the value of this variable is a positive integer (the default is 50), that specifies the minimum width for a partial-width window before automatic line truncation occurs; if the value is <b>nil</b>, automatic line truncation is disabled; and for any other non-nil value, Emacs truncates lines in every partial-width window regardless of its width.<br><br>On text terminals, side-by-side windows are separated by a vertical divider which is drawn using the <b>vertical-border</b> face.<br><br>If you click <b>C-Mouse-2</b> in the mode line of a window, that splits the window, putting a vertical divider where you click. Depending on how Emacs is compiled, you can also split a window by clicking <b>C-Mouse-2</b> in the scroll bar, which puts a horizontal divider where you click (this feature does not work when Emacs uses GTK+ scroll bars).</p>
<h2 id="Other-Window">Using other windows</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>C-x o</b></td>
<td>Select another window (<b>other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-v</b></td>
<td>Scroll the next window (<b>scroll-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>Mouse-1</b></td>
<td><b>Mouse-1</b>, in the text area of a window, selects the window and moves point to the position clicked. Clicking in the mode line selects the window without moving point in it.</td>
</tr>
</table>
<p class="tab">With the keyboard, you can switch windows by typing <b>C-x o</b> (<b>other-window</b>). That is an <b>o</b>, for "other", not a zero. When there are more than two windows, this command moves through all the windows in a cyclic order, generally top to bottom and left to right. After the rightmost and bottommost window, it goes back to the one at the upper left corner. A numeric argument means to move several steps in the cyclic order of windows. A negative argument moves around the cycle in the opposite order. When the minibuffer is active, the minibuffer is the last window in the cycle; you can switch from the minibuffer window to one of the other windows, and later switch back and finish supplying the minibuffer argument that is requested. See <a href="#Minibuffer-Edit">Minibuffer Edit</a>. The usual scrolling commands (see <a href="#Display">Display</a>) apply to the selected window only, but there is one command to scroll the next window. <b>C-M-v</b> (<b>scroll-other-window</b>) scrolls the window that <b>C-x o</b> would select. It takes arguments, positive and negative, like <b>C-v</b>. (In the minibuffer, <b>C-M-v</b> scrolls the help window associated with the minibuffer, if any, rather than the next window in the standard cyclic order; see <a href="#Minibuffer-Edit">Minibuffer Edit</a>.)<br><br>If you set <b>mouse-autoselect-window</b> to a non-nil value, moving the mouse over a different window selects that window. This feature is off by default.</p>
<h2 id="Pop-Up-Window">Displaying in another window</h2>
<p class="tab"><b>C-x 4</b> is a prefix key for a variety of commands that switch to a buffer in a different window&mdash;either another existing window, or a new window created by splitting the selected window. See <a href="#Window-Choice">Window Choice</a>, for how Emacs picks or creates the window to use.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:260px"><b>C-x 4 b bufname &lt;RET&gt;</b></td>
<td>Select buffer bufname in another window (<b>switch-to-buffer-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 C-o bufname &lt;RET&gt;</b></td>
<td>Display buffer bufname in some window, without trying to select it (<b>display-buffer</b>). See <a href="#Displaying-Buffers">Displaying Buffers</a>, for details about how the window is chosen.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 f <i>filename</i> &lt;RET&gt;</b></td>
<td>Visit file <i>filename</i> and select its buffer in another window (<b>find-file-other-window</b>). See <a href="#Visiting">Visiting</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 d</b> <i>directory</i> <b>&lt;RET&gt;</b></td>
<td>Select a Dired buffer for directory <i>directory</i> in another window (<b>dired-other-window</b>). See <a href="#Dired">Dired</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 m</b></td>
<td>Start composing a mail message, similar to <b>C-x m</b> (see <a href="#Sending-Mail">Sending Mail</a>), but in another window (<b>mail-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 .</b></td>
<td>Find a tag in the current tags table, similar to <b>M-.</b> (see <a href="#Tags">Tags</a>), but in another window (<b>find-tag-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 r</b> <i>filename</i> <b>&lt;RET&gt;</b></td>
<td>Visit file <i>filename</i> read-only, and select its buffer in another window (<b>find-file-read-only-other-window</b>). See <a href="#Visiting">Visiting</a>.</td>
</tr>
</table>
<h2 id="Change-Window">Deleting and rearranging windows</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x 0</b></td>
<td>Delete the selected window (<b>delete-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 1</b></td>
<td>Delete all windows in the selected frame except the selected window (<b>delete-other-windows</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 0</b></td>
<td>Delete the selected window and kill the buffer that was showing in it (<b>kill-buffer-and-window</b>). The last character in this key sequence is a zero.</td>
</tr>
<tr class="tcw">
<td><b>C-x ^</b></td>
<td>Make selected window taller (<b>enlarge-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x }</b></td>
<td>Make selected window wider (<b>enlarge-window-horizontally</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x {</b></td>
<td>Make selected window narrower (<b>shrink-window-horizontally</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x -</b></td>
<td>Shrink this window if its buffer doesn't need so many lines (<b>shrink-window-if-larger-than-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x +</b></td>
<td>Make all windows the same height (<b>balance-windows</b>).</td>
</tr>
</table>
<p class="tab">To delete the selected window, type <b>C-x 0</b> (<b>delete-window</b>). Once a window is deleted, the space that it occupied is given to an adjacent window (but not the minibuffer window, even if that is active at the time). Deleting the window has no effect on the buffer it used to display; the buffer continues to exist, and you can still switch to with <b>C-x b</b>.<br><br><b>C-x 4 0</b> (<b>kill-buffer-and-window</b>) is a stronger command than <b>C-x 0</b>; it kills the current buffer and then deletes the selected window.<br><br><b>C-x 1</b> (<b>delete-other-windows</b>) deletes all the windows, except the selected one; the selected window expands to use the whole frame. (This command cannot be used while the minibuffer window is active; attempting to do so signals an error.)<br><br>The command <b>C-x ^</b> (<b>enlarge-window</b>) makes the selected window one line taller, taking space from a vertically adjacent window without changing the height of the frame. With a positive numeric argument, this command increases the window height by that many lines; with a negative argument, it reduces the height by that many lines. If there are no vertically adjacent windows (i.e., the window is at the full frame height), that signals an error. The command also signals an error if you attempt to reduce the height of any window below a certain minimum number of lines, specified by the variable <b>window-min-height</b> (the default is 4).<br><br>Similarly, <b>C-x }</b> (<b>enlarge-window-horizontally</b>) makes the selected window wider, and <b>C-x {</b> (<b>shrink-window-horizontally</b>) makes it narrower. These commands signal an error if you attempt to reduce the width of any window below a certain minimum number of columns, specified by the variable <b>window-min-width</b> (the default is 10).<br><br><b>C-x -</b> (<b>shrink-window-if-larger-than-buffer</b>) reduces the height of the selected window, if it's taller than necessary to show the whole text of the buffer it is displaying. It gives the extra lines to other windows in the frame.<br><br>You can also use <b>C-x +</b> (<b>balance-windows</b>) to even out the heights of all the windows in the selected frame.<br><br>Mouse clicks on the mode line provide another way to change window heights and to delete windows. See <a href="#Mode-Line-Mouse">Mode Line Mouse</a>.</p>
<h2 id="Displaying-Buffers">Displaying a buffer in a window</h2>
<p class="tab">It is a common Emacs operation to display or "pop up" some buffer in response to a user command. There are different ways that commands do this.<br><br>Many commands, like <b>C-x C-f</b> (<b>find-file</b>), display the buffer by "taking over" the selected window, expecting that the user's attention is diverted to that buffer. These commands usually work by calling <b>switch-to-buffer</b> internally (see <a href="#Select-Buffer">Select Buffer</a>).<br><br>Some commands try to display "intelligently", trying not to take over the selected window, e.g., by splitting off a new window and displaying the desired buffer there. Such commands, which include the various help commands (see <a href="#Help">Help</a>), work by calling <b>display-buffer</b> internally. See <a href="#Window-Choice">Window Choice</a>, for details.<br><br>Other commands do the same as <b>display-buffer</b>, and additionally select the displaying window so that you can begin editing its buffer. The command <b>C-x &#96;</b> (<b>next-error</b>) is one example (see <a href="#Compilation-Mode">Compilation Mode</a>). Such commands work by calling the function <b>pop-to-buffer</b> internally.<br><br>Commands with names ending in <b>-other-window</b> behave like <b>display-buffer</b>, except that they never display in the selected window. Several of these commands are bound in the <b>C-x 4</b> prefix key (see <a href="#Pop-Up-Window">Pop Up Window</a>).<br><br>Commands with names ending in <b>-other-frame</b> behave like <b>display-buffer</b>, except that they (1) never display in the selected window and (2) prefer to create a new frame to display the desired buffer instead of splitting a window&mdash;as though the variable pop-up-frames is set to t (see <a href="#Window-Choice">Window Choice</a>). Several of these commands are bound in the <b>C-x 5</b> prefix key.</p>
<ul class="arrow noprint">
<li><a href="#Window-Choice">Window Choice</a>: How display-buffer works.</li>
</ul>
<h2 id="Window-Choice">How display-buffer works</h2>
<p class="tab">The <b>display-buffer</b> command (and commands that call it internally) chooses a window to display by following the steps given below.</p>
<ul>
<li>First, check if the buffer should be displayed in the selected window regardless of other considerations. You can tell Emacs to do this by adding the desired buffer's name to the list <b>same-window-buffer-names</b>, or adding a matching regular expression to the list <b>same-window-regexps</b>. By default, these variables are <b>nil</b>, so this step is skipped.</li>
<li>Otherwise, if the buffer is already displayed in an existing window, "reuse" that window. Normally, only windows on the selected frame are considered, but windows on other frames are also reusable if you change <b>pop-up-frames</b> (see below) to <b>t</b>.</li>
<li>Otherwise, optionally create a new frame and display the buffer there. By default, this step is skipped. To enable it, change the variable <b>pop-up-frames</b> to a non-nil value. The special value <b>graphic-only</b> means to do this only on graphical displays.</li>
<li>Otherwise, try to create a new window by splitting the selected window, and display the buffer in that new window. The split can be either vertical or horizontal, depending on the variables <b>split-height-threshold</b> and <b>split-width-threshold</b>. These variables should have integer values. If <b>split-height-threshold</b> is smaller than the selected window's height, the split puts the new window below. Otherwise, if <b>split-width-threshold</b> is smaller than the window's width, the split puts the new window on the right. If neither condition holds, Emacs tries to split so that the new window is below&mdash;but only if the window was not split before (to avoid excessive splitting).</li>
<li>Otherwise, display the buffer in an existing window on the selected frame.</li>
<li>If all the above methods fail for whatever reason, create a new frame and display the buffer there.</li>
</ul>
<h2 id="Window-Convenience">Convenience features for window handling</h2>
<p class="tab">Winner mode is a global minor mode that records the changes in the window configuration (i.e., how the frames are partitioned into windows), so that you can "undo" them. You can toggle Winner mode with <b>M-x winner-mode</b>, or by customizing the variable <b>winner-mode</b>. When the mode is enabled, <b>C-c left</b> (<b>winner-undo</b>) undoes the last window configuration change. If you change your mind while undoing, you can redo the changes you had undone using <b>C-c right</b> (<b>M-x winner-redo</b>).<br><br>Follow mode (<b>M-x follow-mode</b>) synchronizes several windows on the same buffer so that they always display adjacent sections of that buffer. See <a href="#Follow-Mode">Follow Mode</a>.<br><br>The Windmove package defines commands for moving directionally between neighboring windows in a frame. <b>M-x windmove-right</b> selects the window immediately to the right of the currently selected one, and similarly for the "left", "up", and "down" counterparts. <b>M-x windmove-default-keybindings</b> binds these commands to <b>S-right</b> etc.; doing so disables shift selection for those keys (see <a href="#Shift-Selection">Shift Selection</a>).<br><br>The command <b>M-x compare-windows</b> lets you compare the text shown in different windows. See <a href="#Comparing-Files">Comparing Files</a>.<br><br>Scroll All mode (<b>M-x scroll-all-mode</b>) is a global minor mode that causes scrolling commands and point motion commands to apply to every single window.</p>
<h2 id="Frames">Frames and graphical displays</h2>
<p class="tab">When Emacs is started on a graphical display, e.g., on the <a href="/jargon/x/xwin.htm">X Window System</a>, it occupies a graphical system-level "window". In this manual, we call this a frame, reserving the word "window" for the part of the frame used for displaying a buffer. A frame initially contains one window, but it can be subdivided into multiple windows (see <a href="#Windows">Windows</a>). A frame normally also contains a menu bar, tool bar, and echo area.<br><br>You can also create additional frames (see <a href="#Creating-Frames">Creating Frames</a>). All frames created in the same Emacs session have access to the same underlying buffers and other data. For instance, if a buffer is being shown in more than one frame, any changes made to it in one frame show up immediately in the other frames too.<br><br>Typing <b>C-x C-c</b> closes all the frames on the current display, and ends the Emacs session if it has no frames open on any other displays (see <a href="#Exiting">Exiting</a>). To close only the selected frame, type <b>C-x 5 0</b>.<br><br>This chapter describes Emacs features specific to graphical displays (particularly mouse commands), and features for managing multiple frames. On text terminals, many of these features are unavailable. However, it is still possible to create multiple "frames" on text terminals; such frames are displayed one at a time, filling the entire terminal screen (see <a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>). It is also possible to use the mouse on some text terminals (see <a href="#Text_002dOnly-Mouse">Text-Only Mouse</a>, for doing so on GNU and Unix systems).</p>
<ul>
<li><a href="#Mouse-Commands">Mouse Commands</a>: Moving, cutting, and pasting, with the mouse.</li>
<li><a href="#Word-And-Line-Mouse">Word and Line Mouse</a>: Mouse commands for selecting whole words or lines.</li>
<li><a href="#Mouse-References">Mouse References</a>: Using the mouse to select an item from a list.</li>
<li><a href="#Menu-Mouse-Clicks">Menu Mouse Clicks</a>: Mouse clicks that bring up menus.</li>
<li><a href="#Mode-Line-Mouse">Mode Line Mouse</a>: Mouse clicks on the mode line.</li>
<li><a href="#Creating-Frames">Creating Frames</a>: Creating additional Emacs frames with various contents.</li>
<li><a href="#Frame-Commands">Frame Commands</a>: Iconifying, deleting, and switching frames.</li>
<li><a href="#Fonts">Fonts</a>: Changing the frame font.</li>
<li><a href="#Speedbar">Speedbar</a>: How to make and use a speedbar frame.</li>
<li><a href="#Multiple-Displays">Multiple Displays</a>: How one Emacs instance can talk to several displays.</li>
<li><a href="#Frame-Parameters">Frame Parameters</a>: Changing the colors and other modes of frames.</li>
<li><a href="#Scroll-Bars">Scroll Bars</a>: How to enable and disable scroll bars; how to use them.</li>
<li><a href="#Drag-and-Drop">Drag and Drop</a>: Using drag-and-drop to open files and insert text.</li>
<li><a href="#Menu-Bars">Menu Bars</a>: Enabling and disabling the menu bar.</li>
<li><a href="#Tool-Bars">Tool Bars</a>: Enabling and disabling the tool bar.</li>
<li><a href="#Dialog-Boxes">Dialog Boxes</a>: Controlling use of dialog boxes.</li>
<li><a href="#Tooltips">Tooltips</a>: Displaying information at the current mouse position.</li>
<li><a href="#Mouse-Avoidance">Mouse Avoidance</a>: Preventing the mouse pointer from obscuring text.</li>
<li><a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>: Multiple frames on terminals showing only one.</li>
<li><a href="#Text_002dOnly-Mouse">Text-Only Mouse</a>: Using the mouse in text terminals.</li>
</ul>
<h2 id="Mouse-Commands">Mouse commands for words and lines</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>Mouse-1</b></td>
<td>Move point to where you click (<b>mouse-set-point</b>).</td>
</tr>
<tr class="tcw">
<td><b>Drag-Mouse-1</b></td>
<td>Activate the region around the text selected by dragging, and put the text in the primary selection (<b>mouse-set-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>Mouse-2</b></td>
<td>Move point to where you click, and insert the contents of the primary selection there (<b>mouse-yank-primary</b>).</td>
</tr>
<tr class="tcw">
<td><b>Mouse-3</b></td>
<td>If the region is active, move the nearer end of the region to the click position; otherwise, set mark at the current value of point and point at the click position. Save the resulting region in the kill ring; on a second click, kill it (<b>mouse-save-then-kill</b>).</td>
</tr>
</table>
<p class="tab">The most basic mouse command is <b>mouse-set-point</b>, which is invoked by clicking with the left mouse button, <b>Mouse-1</b>, in the text area of a window. This moves point to the position where you clicked. If that window was not the selected window, it becomes the selected window.<br><br>Normally, if the frame you clicked in was not the selected frame, it is made the selected frame, in addition to selecting the window and setting the cursor. On the X Window System, you can change this by setting the variable <b>x-mouse-click-focus-ignore-position</b> to <b>t</b>. In that case, the initial click on an unselected frame only selects the frame, without doing anything else; clicking again selects the window and sets the cursor position.<br><br>Holding down Mouse-1 and "dragging" the mouse over a stretch of text activates the region around that text (<b>mouse-set-region</b>), placing the mark where you started holding down the mouse button, and point where you release it (see <a href="#Mark">Mark</a>). Also, the text in the region becomes the primary selection (see <a href="#Primary-Selection">Primary Selection</a>).<br><br>If you change the variable <b>mouse-drag-copy-region</b> to a non-nil value, dragging the mouse over a stretch of text also adds the text to the kill ring. The default is <b>nil</b>.<br><br>If you move the mouse off the top or bottom of the window while dragging, the window scrolls at a steady rate until you move the mouse back into the window. This way, you can select regions that don't fit entirely on the screen. The number of lines scrolled per step depends on how far away from the window edge the mouse has gone; the variable <b>mouse-scroll-min-lines</b> specifies a minimum step size.<br><br>Clicking with the middle mouse button, Mouse-2, moves point to the position where you clicked and inserts the contents of the primary selection (<b>mouse-yank-primary</b>). See <a href="#Primary-Selection">Primary Selection</a>. This behavior is consistent with other X applications. Alternatively, you can rebind Mouse-2 to <b>mouse-yank-at-click</b>, which performs a yank at point.<br><br>If you change the variable <b>mouse-yank-at-point</b> to a non-nil value, Mouse-2 does not move point; it inserts the text at point, regardless of where you clicked or even which of the frame's windows you clicked. This variable affects both <b>mouse-yank-primary</b> and <b>mouse-yank-at-click</b>.<br><br>Clicking with the right mouse button, Mouse-3, runs the command <b>mouse-save-then-kill</b>. This performs several actions depending on where you click and the status of the region:</p>
<ul>
<li>If no region is active, clicking Mouse-3 activates the region, placing the mark where point was and point at the clicked position.</li>
<li>If a region is active, clicking Mouse-3 adonlys the nearer end of the region by moving it to the clicked position. The adonlyed region's text is copied to the kill ring; if the text in the original region was already on the kill ring, it replaces it there.</li>
<li>If you originally specified the region using a double or triple Mouse-1, so that the region is defined to consist of entire words or lines (see <a href="#Word-And-Line-Mouse">Word and Line Mouse</a>), then adonlying the region with Mouse-3 also proceeds by entire words or lines.</li>
<li>If you use Mouse-3 a second time consecutively, at the same place, that kills the region already selected. Thus, the simplest way to kill text with the mouse is to click Mouse-1 at one end, then click Mouse-3 twice at the other end. To copy the text into the kill ring without deleting it from the buffer, press Mouse-3 only once&mdash;or only drag across the text with Mouse-1. Then you can copy it elsewhere by yanking it.</li>
</ul>
<p class="tab">The <b>mouse-save-then-kill</b> command also obeys the variable <b>mouse-drag-copy-region</b> (described above). If the value is non-nil, then whenever the command sets or adonlys the active region, the text in the region is also added to the kill ring. If the latest kill ring entry had been added the same way, that entry is replaced rather than making a new entry.<br><br>Whenever you set the region using any of the mouse commands described above, the mark is deactivated by any subsequent unshifted cursor motion command, in addition to the usual ways of deactivating the mark. See <a href="#Shift-Selection">Shift Selection</a>.<br><br>Some mice have a "wheel" which can be used for scrolling. Emacs supports scrolling windows with the mouse wheel, by default, on most graphical displays. To toggle this feature, use <b>M-x mouse-wheel-mode</b>. The variables <b>mouse-wheel-follow-mouse</b> and <b>mouse-wheel-scroll-amount</b> determine where and by how much buffers are scrolled. The variable <b>mouse-wheel-progressive-speed</b> determines whether the scroll speed is linked to how fast you move the wheel.</p>
<h2 id="Word-And-Line-Mouse">Mouse commands for words and lines</h2>
<p class="tab">These variants of Mouse-1 select entire words or lines at a time. Emacs activates the region around the selected text, which is also copied to the kill ring.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>Double-Mouse-1</b></td>
<td>Select the text around the word which you click.<br><br>Double-clicking a character with &quot;symbol&quot; syntax (such as underscore, in C mode) selects the symbol surrounding that character. Double-clicking a character with open- or close-parenthesis syntax selects the parenthetical grouping which that character starts or ends. Double-clicking a character with string-delimiter syntax (such as a single-quote or double-quote in C) selects the string constant (Emacs uses heuristics to figure out whether that character is the beginning or the end of it).</td>
</tr>
<tr class="tcw">
<td><b>Double-Drag-Mouse-1</b></td>
<td>Select the text you drag across, in the form of whole words.</td>
</tr>
<tr class="tcw">
<td><b>Triple-Mouse-1</b></td>
<td>Select the line you click.</td>
</tr>
<tr class="tcw">
<td><b>Triple-Drag-Mouse-1</b></td>
<td>Select the text you drag across, in the form of whole lines.</td>
</tr>
</table>
<h2 id="Mouse-References">Following references with the mouse</h2>
<p class="tab">Some Emacs buffers include buttons, or hyperlinks: pieces of text that perform some action (e.g., following a reference) when activated (e.g., by clicking them). Usually, a button's text is visually highlighted: it is underlined, or a box is drawn around it. If you move the mouse over a button, the shape of the mouse cursor changes and the button lights up. If you change the variable <b>mouse-highlight</b> to <b>nil</b>, Emacs disables this highlighting.<br><br>You can activate a button by moving point to it and typing <b>&lt;RET&gt;</b>, or by clicking either Mouse-1 or Mouse-2 on the button. For example, in a Dired buffer, each file name is a button; activating it causes Emacs to visit that file (see <a href="#Dired">Dired</a>). In a *Compilation* buffer, each error message is a button, and activating it visits the source code for that error (see <a href="#Compilation">Compilation</a>).<br><br>Although clicking Mouse-1 on a button usually activates the button, if you hold the mouse button down for a few seconds before releasing it (specifically, for more than 450 milliseconds), then Emacs moves point where you clicked, without activating the button. In this way, you can use the mouse to move point over a button without activating it. Dragging the mouse over or onto a button has its usual behavior of setting the region, and does not activate the button.<br><br>You can change how Mouse-1 applies to buttons by customizing the variable <b>mouse-1-click-follows-link</b>. If the value is a positive integer, that determines how long you need to hold the mouse button down for, in milliseconds, to cancel button activation; the default is 450, as described in the previous paragraph. If the value is <b>nil</b>, Mouse-1 only sets point where you clicked, and does not activate buttons. If the value is double, double clicks activate buttons but single clicks only set point.<br><br>Normally, Mouse-1 on a button activates the button even if it's in a non-selected window. If you change the variable <b>mouse-1-click-in-non-selected-windows</b> to <b>nil</b>, Mouse-1 on a button in an unselected window moves point to the clicked position and selects that window, without activating the button.</p>
<h2 id="Menu-Mouse-Clicks">Mouse clicks for menus</h2>
<p class="tab">Several mouse clicks with the <b>&lt;Ctrl&gt;</b> and <b>&lt;SHIFT&gt;</b> modifiers bring up menus.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>C-Mouse-1</b></td>
<td>This menu is for selecting a buffer.<br><br>The MSB ("mouse select buffer") global minor mode makes this menu smarter and more customizable. See <a href="#Buffer-Menus">Buffer Menus</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-Mouse-2</b></td>
<td>This menu contains entries for examining faces and other text properties, and well as for setting them (the latter is mainly useful when editing enriched text; see <a href="#Enriched-Text">Enriched Text</a>).</td>
</tr>
<tr class="tcw">
<td><b>C-Mouse-3</b></td>
<td>This menu is <b>mode-specific</b>. For most modes if Menu-bar mode is on, this menu has the same items as all the mode-specific menu-bar menus put together. Some modes may specify a different menu for this button. If Menu Bar mode is off, this menu contains all the items which would be present in the menu bar&mdash;not only the mode-specific ones&mdash;so that you can access them without having to display the menu bar.</td>
</tr>
<tr class="tcw">
<td><b>S-Mouse-1</b></td>
<td>This menu is for changing the default face in the window's buffer. See <a href="#Text-Scale">Text Scale</a>.</td>
</tr>
</table>
<p class="tab">Some graphical applications use Mouse-3 for a mode-specific menu. If you prefer Mouse-3 in Emacs to bring up such a menu instead of running the <b>mouse-save-then-kill</b> command, rebind Mouse-3 by adding the following line to your init file (see <a href="#Init-Rebinding">Init Rebinding</a>):</p>
<pre class="tab tcy">(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)</pre>
<h2 id="Mode-Line-Mouse">Mode line mouse commands</h2>
<p class="tab">You can use mouse clicks on window mode lines to select and manipulate windows.<br><br>Some areas of the mode line, such as the buffer name, and major and minor mode names, have special mouse bindings. These areas are highlighted when you hold the mouse over them, and information about the special bindings is displayed (see <a href="#Tooltips">Tooltips</a>). This section's commands do not apply in those areas.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>Mouse-1</b></td>
<td>Mouse-1 on a mode line selects the window where it belongs. By dragging Mouse-1 on the mode line, you can move it, thus changing the height of the windows above and below. Changing heights with the mouse in this way never deletes windows, it only refuses to make any window smaller than the minimum height.</td>
</tr>
<tr class="tcw">
<td><b>Mouse-2</b></td>
<td>Mouse-2 on a mode line expands that window to fill its frame.</td>
</tr>
<tr class="tcw">
<td><b>Mouse-3</b></td>
<td>Mouse-3 on a mode line deletes the window where it belongs. If the frame has only one window, it does nothing.</td>
</tr>
<tr class="tcw">
<td><b>C-Mouse-2</b></td>
<td>C-Mouse-2 on a mode line splits that window, producing two side-by-side windows with the boundary running through the click position (see <a href="#Split-Window">Split Window</a>).</td>
</tr>
</table>
<p class="tab">Furthermore, by clicking and dragging Mouse-1 on the divider between two side-by-side mode lines, you can move the vertical boundary to the left or right.</p>
<h2 id="Creating-Frames">Creating frames</h2>
<p class="tab">The prefix key <b>C-x 5</b> is analogous to <b>C-x 4</b>. Whereas each <b>C-x 4</b> command pops up a buffer in a different window in the selected frame (see <a href="#Pop-Up-Window">Pop Up Window</a>), the <b>C-x 5</b> commands use a different frame. If an existing visible or iconified ("minimized") frame already displays the requested buffer, that frame is raised and deiconified ("un-minimized"); otherwise, a new frame is created on the current display terminal.<br><br>The various <b>C-x 5</b> commands differ in how they find or create the buffer to select:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-x 5 2</b></td>
<td>Create a new frame (<b>make-frame-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 b</b> <i>bufname</i> <b>&lt;RET&gt;</b></td>
<td>Select buffer <i>bufname</i> in another frame. This runs <b>switch-to-buffer-other-frame</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 f</b> <i>filename</i> <b>&lt;RET&gt;</b></td>
<td>Visit file <i>filename</i> and select its buffer in another frame. This runs <b>find-file-other-frame</b>. See <a href="#Visiting">Visiting</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 d</b> <i>directory</i> <b>&lt;RET&gt;</b></td>
<td>Select a Dired buffer for directory in another frame. This runs <b>dired-other-frame</b>. See <a href="#Dired">Dired</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 m</b></td>
<td>Start composing a mail message in another frame. This runs <b>mail-other-frame</b>. It is the other-frame variant of <b>C-x m</b>. See <a href="#Sending-Mail">Sending Mail</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 .</b></td>
<td>Find a tag in the current tag table in another frame. This runs <b>find-tag-other-frame</b>, the multiple-frame variant of <b>M-..</b> See <a href="#Tags">Tags</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 r</b> <i>filename</i> <b>&lt;RET&gt;</b></td>
<td>Visit file <i>filename</i> read-only, and select its buffer in another frame. This runs <b>find-file-read-only-other-frame</b>. See <a href="#Visiting">Visiting</a>.</td>
</tr>
</table>
<p class="tab">You can control the appearance and behavior of the newly-created frames by specifying frame parameters. See <a href="#Frame-Parameters">Frame Parameters</a>.</p>
<h2 id="Frame-Commands">Frame commands</h2>
<p class="tab">The following commands are used to delete and operate on frames:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x 5 0</b></td>
<td>Delete the selected frame (<b>delete-frame</b>). This signals an error if there is only one frame.</td>
</tr>
<tr class="tcw">
<td><b>C-z</b></td>
<td>Minimize (or "iconify) the selected Emacs frame (<b>suspend-frame</b>). See <a href="#Exiting">Exiting</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 o</b></td>
<td>Select another frame, and raise it. If you repeat this command, it cycles through all the frames on your terminal.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 1</b></td>
<td>Delete all frames on the current terminal, except the selected one.</td>
</tr>
</table>
<p class="tab">The <b>C-x 5 0</b> (<b>delete-frame</b>) command deletes the selected frame. However, it will refuse to delete the last frame in an Emacs session, to prevent you from losing the ability to interact with the Emacs session. Note that when Emacs is run as a daemon (see <a href="#Emacs-Server">Emacs Server</a>), there is always a "virtual frame" that remains after all the ordinary, interactive frames are deleted. In this case, <b>C-x 5 0</b> can delete the last interactive frame; you can use <b>emacsclient</b> to reconnect to the Emacs session.<br><br>The <b>C-x 5 1</b> (<b>delete-other-frames</b>) command deletes all other frames on the current terminal (this terminal refers to either a graphical display, or a text terminal; see <a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>). If the Emacs session has frames open on other graphical displays or text terminals, those are not deleted.<br><br>The <b>C-x 5 o</b> (<b>other-frame</b>) command selects the next frame on the current terminal. If you are using Emacs on the X Window System with a window manager that selects (or gives focus to) whatever frame the mouse cursor is over, you have to change the variable <b>focus-follows-mouse</b> to <b>t</b> for this command to work properly. Then invoking <b>C-x 5 o</b> also warps the mouse cursor to the chosen frame.</p>
<h2 id="Fonts">Fonts</h2>
<p class="tab">By default, Emacs displays text on graphical displays using a 12-point monospace font. There are different ways to specify a different font:</p>
<ul>
<li>Click '<b>Set Default Font</b>' in the '<b>Options</b>' menu. To save this for future sessions, click '<b>Save Options</b>' in the '<b>Options</b>' menu.</li>
<li>Add a line to your init file, modifying the variable <b>default-frame-alist</b> to specify the font parameter (see <a href="#Frame-Parameters">Frame Parameters</a>), like this: <pre class="tab tcy">(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10"))</pre></li>
<li>Add an '<b>emacs.font</b>' X resource setting to your X resource file, like this: <pre class="tab tcy">emacs.font: DejaVu Sans Mono-12</pre> You must restart X, or use the <b>xrdb</b> command, for the X resources file to take effect. See <a href="#Resources">Resources</a>. Do not quote font names in X resource files.</li>
<li>If you are running Emacs on the GNOME desktop, you can tell Emacs to use the default system font by setting the variable <b>font-use-system-font</b> to <b>t</b> (the default is <b>nil</b>). For this to work, Emacs must be compiled with Gconf support.</li>
<li>Use the command line option '<b>-fn</b>' (or '<b>--font</b>'). See <a href="#Font-X">Font X</a>.</li>
</ul>
<p class="tab">To check what font you're currently using, the <b>C-u C-x =</b> command can be helpful. It describes the character at point, and names the font that it's rendered.<br><br>On X, there are four different ways to express a "font name". The first is to use a Fontconfig pattern. Fontconfig patterns have the following form:</p>
<pre class="tab tcy"><i>fontname</i>[-<i>fontsize</i>][:<i>name1</i>=<i>values1</i>][:<i>name2</i>=<i>values2</i>]...</pre>
<p class="tab">In this format, any of the elements in braces may be omitted. Here, fontname is the family name of the font, such as '<b>Monospace</b>' or '<b>DejaVu Sans Mono</b>'; fontsize is the point size of the font (one printer's point is about 1/72 of an inch); and the '<b>name=values</b>' entries specify settings such as the slant and weight of the font. Each values may be a single value, or a list of values separated by commas. Also, some property values are valid with only one kind of property name, where the '<b>name=</b>' part may be omitted.<br><br>Here is a list of common font properties:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px">'<b>slant</b>'</td>
<td>One of '<b>italic</b>', '<b>oblique</b>', or '<b>roman</b>'.</td>
</tr>
<tr class="tcw">
<td>'<b>weight</b>'</td>
<td>One of '<b>light</b>', '<b>medium</b>', '<b>demibold</b>', '<b>bold</b>' or '<b>black</b>'.</td>
</tr>
<tr class="tcw">
<td>'<b>style</b>'</td>
<td>Some fonts define special styles which are a combination of slant and weight. For instance, '<b>Dejavu Sans</b>' defines the '<b>book</b>' style, which overrides the slant and weight properties.</td>
</tr>
<tr class="tcw">
<td>'<b>width</b>'</td>
<td>One of '<b>condensed</b>', '<b>normal</b>', or '<b>expanded</b>'.</td>
</tr>
<tr class="tcw">
<td>'<b>spacing</b>'</td>
<td>One of '<b>monospace</b>', '<b>proportional</b>', '<b>dual-width</b>', or '<b>charcell</b>'.</td>
</tr>
</table>
<p class="tab">Here are examples of Fontconfig patterns:</p>
<pre class="tab tcy">Monospace
Monospace-12
Monospace-12:bold
DejaVu Sans Mono:bold:italic
Monospace-12:weight=bold:slant=italic</pre>
<p class="tab">For a more detailed description of Fontconfig patterns, see the Fontconfig manual, which is distributed with Fontconfig and available online at <a href="https://www.freedesktop.org/software/fontconfig/fontconfig-user.html" class="external">freedesktop.org</a>.<br><br>The second way to specify a font is to use a GTK font pattern. These have the syntax</p>
<pre class="tab tcy"><i>fontname</i> [<i>properties</i>] [<i>fontsize</i>]</pre>
<p class="tab">Where <i>fontname</i> is the family name, <i>properties</i> is a list of property values separated by spaces, and <i>fontsize</i> is the point size. The properties that you may specify for GTK font patterns are as follows:</p>
<ul>
<li>Slant properties: '<b>Italic</b>' or '<b>Oblique</b>'. If omitted, the default (roman) slant is implied.</li>
<li>Weight properties: '<b>Bold</b>', '<b>Book</b>', '<b>Light</b>', '<b>Medium</b>', '<b>Semi-bold</b>', or '<b>Ultra-light</b>'. If omitted, '<b>Medium</b>' weight is implied.</li>
<li>Width properties: '<b>Semi-Condensed</b>' or '<b>Condensed</b>'. If omitted, a default width is used.</li>
</ul>
<p class="tab">Here are examples of GTK font patterns:</p>
<ul>
<li><b>Monospace 12</b></li>
<li><b>Monospace Bold Italic 12</b></li>
</ul>
<p class="tab">The third way to specify a font is to use an XLFD (X Logical Font Description). This is the traditional method for specifying fonts under X. Each XLFD consists of fourteen words or numbers, separated by dashes, like this:</p>
<pre class="tab tcy">-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1</pre>
<p class="tab">A wildcard character ('<b>*</b>') in an XLFD matches any sequence of characters (including none), and '<b>?</b>' matches any single character. However, matching is implementation-dependent, and can be inaccurate when wildcards match dashes in a long name. For reliable results, supply all 14 dashes and use wildcards only within a field. Case is insignificant in an XLFD. The syntax for an XLFD is as follows:</p>
<pre class="tab tcy">-<i>maker</i>-<i>family</i>-<i>weight</i>-<i>slant</i>-<i>widthtype</i>-<i>style</i>...
...-<i>pixels</i>-<i>height</i>-<i>horiz</i>-<i>vert</i>-<i>spacing</i>-<i>width</i>-<i>registry</i>-<i>encoding</i></pre>
<p class="tab">The entries have the following meanings:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>maker</b></td>
<td>The name of the font manufacturer.</td>
</tr>
<tr class="tcw">
<td><b>family</b></td>
<td>The name of the font family (e.g., '<b>courier</b>').</td>
</tr>
<tr class="tcw">
<td><b>weight</b></td>
<td>The font weight; normally either '<b>bold</b>', '<b>medium</b>' or '<b>light</b>'. Some font names support other values.</td>
</tr>
<tr class="tcw">
<td><b>slant</b></td>
<td>The font slant; normally '<b>r</b>' (roman), '<b>i</b>' (italic), '<b>o</b>' (oblique), '<b>ri</b>' (reverse italic), or '<b>ot</b>' (other). Some font names support other values.</td>
</tr>
<tr class="tcw">
<td><b>widthtype</b></td>
<td>The font width; normally '<b>normal</b>', '<b>condensed</b>', '<b>semicondensed</b>', or '<b>extended</b>'. Some font names support other values.</td>
</tr>
<tr class="tcw">
<td><b>style</b></td>
<td>An optional additional style name. Usually it is empty; most XLFDs have two hyphens in a row at this point.</td>
</tr>
<tr class="tcw">
<td><b>pixels</b></td>
<td>The font height, in pixels.</td>
</tr>
<tr class="tcw">
<td><b>height</b></td>
<td>The font height on the screen, measured in tenths of a printer's point. This is the point size of the font, times ten. For a given vertical resolution, height and pixels are proportional; therefore, it is common to specify only one of them and use '<b>*</b>' for the other.</td>
</tr>
<tr class="tcw">
<td><b>horiz</b></td>
<td>The horizontal resolution, in pixels per inch, of the screen for which the font is intended.</td>
</tr>
<tr class="tcw">
<td><b>vert</b></td>
<td>The vertical resolution, in pixels per inch, of the screen for which the font is intended. Normally the resolution of the fonts on your system is the right value for your screen; therefore, you normally specify '<b>*</b>' for this and <b>horiz</b>.</td>
</tr>
<tr class="tcw">
<td><b>spacing</b></td>
 <td>This is '<b>m</b>' (monospace), '<b>p</b>' (proportional) or '<b>c</b>' (character cell).</td>
</tr>
<tr class="tcw">
<td><b>width</b></td>
<td>The average character width, in pixels, multiplied by ten.</td>
</tr>
<tr class="tcw">
<td><b>registry</b>, <b>encoding</b></td>
<td>The X font character set that the font depicts. (X font character sets are not the same as Emacs character sets, but they are similar.) You can use the xfontsel program to check which choices you have. Normally, use '<b>iso8859</b>' for Registry and '<b>1</b>' for encoding.</td>
</tr>
</table>
<p class="tab">The fourth and final method of specifying a font is to use a "font nickname". Certain fonts have shorter nicknames, which you can use instead of a normal font specification. For instance, '<b>6x13</b>' is equivalent to</p>
<pre class="tab tcy">-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1</pre>
<p class="tab">On X, Emacs recognizes two types of fonts: client-side fonts, which are provided by the Xft and Fontconfig libraries, and server-side fonts, which are provided by the X server itself. Most client-side fonts support advanced font features such as <a href="/jargon/a/antialias.htm">antialiasing</a> and subpixel hinting, while server-side fonts do not. Fontconfig and GTK patterns match only client-side fonts.<br><br>You probably want to use a fixed-width default font&mdash;that is, a font where all characters have the same width. For Xft and Fontconfig fonts, you can use the fc-list command to list the available fixed-width fonts, like this:</p>
<pre class="tab tcy">fc-list :spacing=mono fc-list :spacing=charcell</pre>
<p class="tab">For server-side X fonts, you can use the <b>xlsfonts</b> program to list the available fixed-width fonts, like this:</p>
<pre class="tab tcy">xlsfonts -fn '*x*' | egrep "^[0-9]+x[0-9]+"</pre>
<pre class="tab tcy">xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'</pre>
<pre class="tab tcy">xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'</pre>
<p class="tab">Any font with '<b>m</b>' or '<b>c</b>' in the spacing field of the XLFD is a fixed-width font. To see what a particular font looks like, use the xfd command. For example:</p>
<pre class="tab tcy">xfd -fn 6x13</pre>
<p class="tab">Displays the entire font '<b>6x13</b>'.<br><br>While running Emacs, you can also set the font of a specific kind of text (see <a href="#Faces">Faces</a>), or a particular frame (see <a href="#Frame-Parameters">Frame Parameters</a>).</p>
<h2 id="Speedbar">Speedbar frames</h2>
<p class="tab">The speedbar is a special frame for conveniently navigating in or operating on another frame. The speedbar, when it exists, is always associated with a specific frame, called its attached frame; all speedbar operations act on that frame.<br><br>Type <b>M-x speedbar</b> to create the speedbar and associate it with the current frame. To dismiss the speedbar, type <b>M-x speedbar</b> again, or select the speedbar and type <b>q</b>. (You can also delete the speedbar frame like any other Emacs frame.) If you want to associate the speedbar with a different frame, dismiss it and call <b>M-x speedbar</b> from that frame.<br><br>The speedbar can operate in various modes. Its default mode is File Display mode, which shows the files in the current directory of the selected window of the attached frame, one file per line. Clicking a file name visits that file in the selected window of the attached frame, and clicking a directory name shows that directory in the speedbar (see <a href="#Mouse-References">Mouse References</a>). Each line also has a box, '<b>[+]</b>' or '<b>&lt;+&gt;</b>', that you can click to expand the contents of that item. Expanding a directory adds the contents of that directory to the speedbar display, underneath the directory's own line. Expanding an ordinary file adds a list of the tags in that file to the speedbar display; you can click a tag name to jump to that tag in the selected window of the attached frame. When a file or directory is expanded, the '<b>[+]</b>' changes to '<b>[-]</b>'; you can click that box to contract the item, hiding its contents.<br><br>You navigate through the speedbar using the keyboard, too. Typing <b>&lt;RET&gt;</b> while point is on a line in the speedbar is equivalent to clicking the item on the current line, and <b>&lt;SPC&gt;</b> expands or contracts the item. <b>U</b> displays the parent directory of the current directory. To copy, delete, or rename the file on the current line, type <b>C</b>, <b>D</b>, and <b>R</b> respectively. To create a new directory, type <b>M</b>.<br><br>Another general-purpose speedbar mode is Buffer Display mode; in this mode, the speedbar displays a list of Emacs buffers. To switch to this mode, type <b>b</b> in the speedbar. To return to File Display mode, type <b>f</b>. You can also change the display mode by clicking mouse-3 anywhere in the speedbar window (or mouse-1 on the mode-line) and selecting '<b>Displays</b>' in the pop-up menu.<br><br>Some major modes, including Rmail mode, Info, and GUD, have specialized ways of putting useful items into the speedbar for you to select. For example, in Rmail mode, the speedbar shows a list of Rmail files, and lets you move the current message to another Rmail file by clicking its '<b>&lt;M&gt;</b>' box.<br><br>For more details on using and programming the speedbar, See <a href="#Speedbar">Speedbar</a>.</p>
<h2 id="Multiple-Displays">Multiple displays</h2>
<p class="tab">A single Emacs can talk to more than one X display. Initially, Emacs uses only one display&mdash;the one specified with the DISPLAY environment variable or with the '<b>--display</b>' option (see <a href="#Initial-Options">Options</a>). To connect to another display, use the <b>command make-frame-on-display</b>:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>M-x make-frame-on-display &lt;RET&gt;</b> <i>display</i> <b>&lt;RET&gt;</b></td>
<td>Create a new frame on display <i>display</i>.</td>
</tr>
</table>
<p class="tab">A single X server can handle more than one screen. When you open frames on two screens belonging to one server, Emacs knows they share a single keyboard, and it treats all the commands arriving from these screens as a single stream of input.<br><br>When you open frames on different X servers, Emacs makes a separate input stream for each server. Each server also has its own selected frame. The commands you enter with a particular X server apply to that server's selected frame.</p>
<h2 id="Frame-Parameters">Frame parameters</h2>
<p class="tab">You can control the default appearance and behavior of all frames by specifying a default list of frame parameters in the variable <b>default-frame-alist</b>. Its value should be a list of entries, each specifying a parameter name and a value for that parameter. These entries take effect whenever Emacs creates a new frame, including the initial frame.<br><br>For example, you can add the following lines to your init file (see <a href="#Init-File">Init File</a>) to set the default frame width to 90 character columns, the default frame height to 40 character rows, and the default font to '<b>Monospace-10</b>':</p>
<pre class="tab tcy">(add-to-list 'default-frame-alist '(width . 90))</pre>
<pre class="tab tcy">(add-to-list 'default-frame-alist '(height . 40))</pre>
<pre class="tab tcy">(add-to-list 'default-frame-alist '(font . "Monospace-10"))</pre>
<p class="tab">You can also specify a list of frame parameters which apply to only the initial frame, by customizing the variable <b>initial-frame-alist</b>.<br><br>If Emacs is compiled to use an X toolkit, frame parameters that specify colors and fonts don't affect menus and the menu bar, as those are drawn by the toolkit and not directly by Emacs.</p>
<h2 id="Scroll-Bars">Scroll bars</h2>
<p class="tab">On graphical displays, there is a scroll bar on the side of each Emacs window. Clicking Mouse-1 on the scroll bar's up and down buttons scrolls the window by one line at a time. Clicking Mouse-1 above or below the scroll bar's inner box scrolls the window by nearly the entire height of the window, like <b>M-v</b> and <b>C-v</b> respectively (see <a href="#Moving-Point">Moving Point</a>). Dragging the inner box scrolls continuously.<br><br>If Emacs is compiled on the X Window System without X toolkit support, the scroll bar behaves differently. Clicking Mouse-1 anywhere on the scroll bar scrolls forward like <b>C-v</b>, while Mouse-3 scrolls backward like <b>M-v</b>. Clicking Mouse-2 in the scroll bar lets you drag the inner box up and down.<br><br>To toggle the use of scroll bars, type <b>M-x scroll-bar-mode</b>. This command applies to all frames, including frames yet to be created. To toggle scroll bars for only the selected frame, use the command <b>M-x toggle-scroll-bar</b>.<br><br>To control the use of scroll bars at startup, customize the variable <b>scroll-bar-mode</b>. Its value should be either <b>right</b> (put scroll bars on the right side of windows), <b>left</b> (put them on the left), or <b>nil</b> (disable scroll bars). By default, Emacs puts scroll bars on the right if it was compiled with GTK+ support on the X Window System, and on Microsoft Windows or Mac OS; Emacs puts scroll bars on the left if compiled on the X Window System without GTK+ support (following the old convention for X applications).<br><br>You can also use the X resource '<b>verticalScrollBars</b>' to enable or disable the scroll bars (see <a href="#Resources">Resources</a>). To control the scroll bar width, change the <b>scroll-bar-width</b> frame parameter (see <a href="#Frame-Parameters">Frame Parameters</a>).</p>
<h2 id="Drag-and-Drop">Drag and drop</h2>
<p class="tab">In most graphical desktop environments, Emacs has basic support for drag-and-drop operations. For instance, dropping text onto an Emacs frame inserts the text where it is dropped. Dropping a file onto an Emacs frame visits that file. As a special case, dropping the file on a Dired buffer moves or copies the file (according to the conventions of the application it came from) into the directory displayed in that buffer.<br><br>Dropping a file normally visits it in the window where you drop it. If you prefer to visit the file in a new window in such cases, customize the variable <b>dnd-open-file-other-window</b>.<br><br>The XDND and Motif drag-and-drop protocols, and the old KDE 1.x protocol, are currently supported.</p>
<h2 id="Menu-Bars">Menu bars</h2>
<p class="tab">You can toggle the use of menu bars with <b>M-x menu-bar-mode</b>. With no argument, this command toggles Menu Bar mode, a global minor mode. With an argument, the command turns Menu Bar mode on if the argument is positive, off if the argument is not positive. To control the use of menu bars at startup, customize the variable <b>menu-bar-mode</b>.<br><br>Expert users often turn off the menu bar, especially on text terminals, where this makes one additional line available for text. If the menu bar is off, you can still pop up a menu of its contents with <b>C-Mouse-3</b> on a display which supports pop-up menus. See <a href="#Menu-Mouse-Clicks">Menu Mouse Clicks</a>.<br><br>See <a href="#Menu-Bar">Menu Bar</a>, for information on how to invoke commands with the menu bar. See <a href="#X-Resources">X Resources</a>, for how to customize the menu bar menus' visual appearance.</p>
<h2 id="Tool-Bars">Tool bars</h2>
<p class="tab">On graphical displays, Emacs puts a tool bar at the top of each frame, only below the menu bar. This is a row of icons which you can click with the mouse to invoke various commands.<br><br>The global (default) tool bar contains general commands. Some major modes define their tool bars; whenever a buffer with such a major mode is current, the mode's tool bar replaces the global tool bar.<br><br>To toggle the use of tool bars, type <b>M-x tool-bar-mode</b>. This command applies to all frames, including frames yet to be created. To control the use of tool bars at startup, customize the variable <b>tool-bar-mode</b>.<br><br>When Emacs is compiled with GTK+ support, each tool bar item can consist of an image, or a text label, or both. By default, Emacs follows the Gnome desktop's tool bar style setting; if none is defined, it displays tool bar items as only images. To impose a specific tool bar style, customize the variable <b>tool-bar-style</b>.<br><br>You can also control the placement of the tool bar for the GTK+ tool bar with the frame parameter <b>tool-bar-position</b>. See <a href="#Frame-Parameters">Frame Parameters</a>.</p>
<h2 id="Dialog-Boxes">Using dialog boxes</h2>
<p class="tab">A dialog box is a special kind of menu for asking you a yes-or-no question or some other special question. Many Emacs commands use a dialog box to ask a yes-or-no question, if you used the mouse to invoke the command that led to the question.<br><br>To disable the use of dialog boxes, change the variable <b>use-dialog-box</b> to <b>nil</b>. In that case, Emacs always performs yes-or-no prompts using the echo area and keyboard input. This variable also controls whether to use file selection windows (but those are not supported on all platforms).<br><br>A file selection window is a special kind of dialog box for asking for file names. You can customize the variable <b>use-file-dialog</b> to suppress the use of file selection windows, even if you still want other kinds of dialogs. This variable has no effect if you have suppressed all dialog boxes with the variable <b>use-dialog-box</b>.<br><br>When Emacs is compiled with GTK+ support, it uses the GTK+ "file chooser" dialog. Emacs adds an additional toggle button to this dialog, which you can use to enable or disable the display of hidden files (files starting with a dot) in that dialog. If you want this toggle to be activated by default, change the variable <b>x-gtk-show-hidden-files</b> to <b>t</b>. Also, Emacs adds help text to the GTK+ file chooser dialog; to disable this help text, change the variable <b>x-gtk-file-dialog-help-text</b> to <b>nil</b>.</p>
<h2 id="Tooltips">Tooltips</h2>
<p class="tab">Tooltips are small windows that display text information at the current mouse position. They activate when there is a pause in mouse movement over some significant piece of text in a window, or the mode line, or some other part of the Emacs frame such as a tool bar button or menu item.<br><br>You can toggle the use of tooltips with the command <b>M-x tooltip-mode</b>. When Tooltip mode is disabled, the help text is displayed in the echo area instead. To control the use of tooltips at startup, customize the variable <b>tooltip-mode</b>.<br><br>The variables <b>tooltip-delay</b> specifies how long Emacs should wait before displaying a tooltip. For additional customization options for displaying tooltips, use <b>M-x customize-group &lt;RET&gt; tooltip &lt;RET&gt;</b>.<br><br>If Emacs is built with GTK+ support, it displays tooltips via GTK+, using the default appearance of GTK+ tooltips. To disable this, change the variable <b>x-gtk-use-system-tooltips</b> to <b>nil</b>. If you do this, or if Emacs is built without GTK+ support, most attributes of the tooltip text are specified by the tooltip face, and by X resources (see <a href="#X-Resources">X Resources</a>).<br><br>GUD tooltips are special tooltips showing the values of variables when debugging a program with GUD. See <a href="#Debugger-Operation">Debugger Operation</a>.</p>
<h2 id="Mouse-Avoidance">Mouse avoidance</h2>
<p class="tab">On graphical terminals, the mouse pointer may obscure the text in the Emacs frame. Emacs provides two methods to avoid this problem.<br><br>Firstly, Emacs hides the mouse pointer each time you type a self-inserting character, if the pointer lies inside an Emacs frame; moving the mouse pointer makes it visible again. To disable this feature, set the variable <b>make-pointer-invisible</b> to <b>nil</b>.<br><br>Secondly, you can use Mouse Avoidance mode, a minor mode, to keep the mouse pointer away from point. To use Mouse Avoidance mode, customize the variable <b>mouse-avoidance-mode</b>. You can set this to various values to move the mouse in several ways:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>banish</b></td>
<td>Move the pointer to a corner of the frame on any key-press. You can customize the variable <b>mouse-avoidance-banish-position</b> to specify where the pointer goes when it is banished.</td>
</tr>
<tr class="tcw">
<td><b>exile</b></td>
<td>Banish the pointer only if the cursor gets too close, and allow it to return once the cursor is out of the way.</td>
</tr>
<tr class="tcw">
<td><b>jump</b></td>
<td>If the cursor gets too close to the pointer, displace the pointer by a random distance and direction.</td>
</tr>
<tr class="tcw">
<td><b>animate</b></td>
<td>Like <b>jump</b>, but shows steps along the way for illusion of motion.</td>
</tr>
<tr class="tcw">
<td><b>cat-and-mouse</b></td>
<td>The same as <b>animate</b>.</td>
</tr>
<tr class="tcw">
<td><b>proteus</b></td>
<td>Like <b>animate</b>, but changes the shape of the mouse pointer too.</td>
</tr>
</table>
<p class="tab">You can also use the command <b>M-x mouse-avoidance-mode</b> to enable the mode. Whenever Mouse Avoidance mode moves the mouse, it also raises the frame.</p>
<h2 id="Non_002dWindow-Terminals">Non-window terminals</h2>
<p class="tab">On a text terminal, Emacs can display only one Emacs frame at a time. However, you can still create multiple Emacs frames, and switch between them. Switching frames on these terminals is much like switching between different window configurations.<br><br>Use <b>C-x 5 2</b> to create a new frame and switch to it; use <b>C-x 5 o</b> to cycle through the existing frames; use <b>C-x 5 0</b> to delete the current frame.<br><br>Each frame has a number to distinguish it. If your terminal can display only one frame at a time, the selected frame's number <b>n</b> appears near the beginning of the mode line, in the form '<b>Fn</b>'.<br><br>'<b>Fn</b>' is in fact the frame's initial name. You can give frames more meaningful names if you want, and you can select a frame by its name. Use the command <b>M-x set-frame-name &lt;RET&gt; name &lt;RET&gt;</b> to specify a new name for the selected frame, and use <b>M-x select-frame-by-name &lt;RET&gt; name &lt;RET&gt;</b> to select a frame according to its name. The name you specify appears in the mode line when the frame is selected.</p>
<h2 id="Text_002dOnly-Mouse">Using a mouse in text terminals</h2>
<p class="tab">Some text terminals support mouse clicks in the terminal window.<br><br>In a terminal emulator which is compatible with xterm, you can use <b>M-x xterm-mouse-mode</b> to give Emacs control over simple uses of the mouse; only non-modified single clicks are supported. The normal xterm mouse functionality for such clicks is still available by holding down the Shift key when you press the mouse button. Xterm Mouse mode is a global minor mode (see <a href="#Minor-Modes">Minor Modes</a>). Repeating the command turns the mode off again.<br><br>In the console on GNU/Linux, you can use <b>M-x gpm-mouse-mode</b> to enable mouse support. You must have the gpm server installed and running on your system for this to work.</p>
<h2 id="International">International character set support</h2>
<p class="tab">Emacs supports a wide variety of international character sets, including European and Vietnamese variants of the Latin alphabet, and Cyrillic, Devanagari (for Hindi and Marathi), Ethiopic, Greek, Han (for Chinese and Japanese), Hangul (for Korean), Hebrew, IPA, Kannada, Lao, Malayalam, Tamil, Thai, Tibetan, and Vietnamese scripts. Emacs also supports various encodings of these characters used by other internationalized software, such as word processors and mailers.<br><br>Emacs allows editing text with international characters by supporting all the related activities:</p>
<ul>
<li>You can visit files with non-ASCII characters, save non-ASCII text, and pass non-ASCII text between Emacs and programs it invokes (such as compilers, spell-checkers, and mailers). Setting your language environment (see <a href="#Language-Environments">Language Environments</a>) takes care of setting up the coding systems and other options for a specific language or culture. Alternatively, you can specify how Emacs should encode or decode text for each command; see <a href="#Text-Coding">Text Coding</a>.</li>
<li>You can display non-ASCII characters encoded by the various scripts. This works using appropriate fonts on graphics displays (see <a href="#Defining-Fontsets">Defining Fontsets</a>), and by sending special codes to text displays (see <a href="#Terminal-Coding">Terminal Coding</a>). If some characters are displayed incorrectly, refer to <a href="#Undisplayable-Characters">Undisplayable Characters</a>, which describes possible problems and explains how to solve them.</li>
<li>Characters from scripts whose natural ordering of text is from right to left are reordered for display (see <a href="#Bidirectional-Editing">Bidirectional Editing</a>). These scripts include Arabic, Hebrew, Syriac, Thaana, and a few others.</li>
<li>You can insert non-ASCII characters or search for them. To do that, you can specify an input method (see <a href="#Select-Input-Method">Select Input Method</a>) suitable for your language, or use the default input method set up when you chose your language environment. If your keyboard can produce non-ASCII characters, you can select an appropriate keyboard coding system (see <a href="#Terminal-Coding">Terminal Coding</a>), and Emacs accepts those characters. Latin-1 characters can also be input using the <b>C-x 8</b> prefix, see <a href="#Unibyte-Mode">Unibyte Mode</a>. With the X Window System, your locale should be set to an appropriate value to make sure Emacs interprets keyboard input correctly; see <a href="#Language-Environments">locales</a>.</li>
</ul>
<p class="tab">The rest of this chapter describes these issues in detail.</p>
<ul>
<li><a href="#International-Chars">International Chars</a>: Basic concepts of multibyte characters.</li>
<li><a href="#Disabling-Multibyte">Disabling Multibyte</a>: Controlling whether to use multibyte characters.</li>
<li><a href="#Language-Environments">Language Environments</a>: Setting things up for the language you use.</li>
<li><a href="#Input-Methods">Input Methods</a>: Entering text characters not on your keyboard.</li>
<li><a href="#Select-Input-Method">Select Input Method</a>: Specifying your choice of input methods.</li>
<li><a href="#Coding-Systems">Coding Systems</a>: Character set conversion when you read and write files.</li>
<li><a href="#Recognize-Coding">Recognize Coding</a>: How Emacs figures out which conversion to use.</li>
<li><a href="#Specify-Coding">Specify Coding</a>: Specifying a file's coding system explicitly.</li>
<li><a href="#Output-Coding">Output Coding</a>: Choosing coding systems for output.</li>
<li><a href="#Text-Coding">Text Coding</a>: Choosing conversion to use for file text.</li>
<li><a href="#Communication-Coding">Communication Coding</a>: Coding systems for interprocess communication.</li>
<li><a href="#File-Name-Coding">File Name Coding</a>: Coding systems for file names.</li>
<li><a href="#Terminal-Coding">Terminal Coding</a>: Specifying coding systems for converting terminal input and output.</li>
<li><a href="#Fontsets">Fontsets</a>: Fontsets are collections of fonts that cover the whole spectrum of characters.</li>
<li><a href="#Defining-Fontsets">Defining Fontsets</a>: Defining a new fontset.</li>
<li><a href="#Modifying-Fontsets">Modifying Fontsets</a>: Modifying an existing fontset.</li>
<li><a href="#Undisplayable-Characters">Undisplayable Characters</a>: When characters don't display.</li>
<li><a href="#Unibyte-Mode">Unibyte Mode</a>: You can pick one European character set to use without multibyte characters.</li>
<li><a href="#Charsets">Charsets</a>: How Emacs groups its internal character codes.</li>
<li><a href="#Bidirectional-Editing">Bidirectional Editing</a>: Support for right-to-left scripts.</li>
</ul>
<h2 id="International-Chars">Introduction to international character sets</h2>
<p class="tab">The users of international character sets and scripts have established many more-or-less standard coding systems for storing files. These coding systems are often multibyte, meaning that sequences of two or more bytes are used to represent individual non-ASCII characters.<br><br>Internally, Emacs uses its own multibyte character encoding, which is a superset of the Unicode standard. This internal encoding allows characters from almost every known script to be intermixed in a single buffer or string. Emacs translates between the multibyte character encoding and other coding systems when reading and writing files, and when exchanging data with subprocesses.<br><br>The command <b>C-h h</b> (<b>view-hello-file</b>) displays the file <b>etc/HELLO</b>, which illustrates various scripts by showing how to say "hello" in many languages. If some characters can't be displayed on your terminal, they appear as '<b>?</b>' or as hollow boxes (see <a href="#Undisplayable-Characters">Undisplayable Characters</a>).<br><br>Keyboards, even in the countries where these character sets are used, generally don't have keys for all the characters in them. You can insert characters your keyboard does not support, using <b>C-q</b> (<b>quoted-insert</b>) or <b>C-x 8 &lt;RET&gt;</b> (<b>insert-char</b>). See <a href="#Inserting-Text">Inserting Text</a>. Emacs also supports various input methods, often one for each script or language, which make it easier to type characters in the script. See <a href="#Input-Methods">Input Methods</a>.<br><br>The prefix key <b>C-x &lt;RET&gt;</b> is used for commands that pertain to multibyte characters, coding systems, and input methods.<br><br>The command <b>C-x =</b> (<b>what-cursor-position</b>) shows information about the character at point. In addition to the character position, which was described in Position Info, this command displays how the character is encoded. For instance, it displays the following line in the echo area for the character '<b>c</b>':</p>
<pre class="tab tcy">Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53</pre>
<p class="tab">The four values after '<b>Char:</b>' describe the character that follows point, first by showing it and then by giving its character code in decimal, octal and hex. For a non-ASCII multibyte character, these are followed by '<b>file</b>' and the character's representation, in hex, in the buffer's coding system, if that coding system encodes the character safely and with a single byte (see <a href="#Coding-Systems">Coding Systems</a>). If the character's encoding is longer than one byte, Emacs shows '<b>file ...</b>'.<br><br>As a special case, if the character lies in the range 128 (0200 octal) through 159 (0237 octal), it stands for a "raw" byte that does not correspond to any specific displayable character. Such a "character" lies in the eight-bit-control character set, and is displayed as an escaped octal character code. In this case, <b>C-x =</b> shows '<b>part of display ...</b>' instead of '<b>file</b>'.<br><br>With a prefix argument (<b>C-u C-x =</b>), this command displays a detailed description of the character in a window:</p>
<ul>
<li>The character set name, and the codes that identify the character within that character set; <a href="/jargon/a/ascii.htm">ASCII</a> characters are identified as belonging to the ascii character set.</li>
<li>The character's syntax and categories.</li>
<li>The character's encodings, both internally in the buffer, and externally if you were to save the file.</li>
<li>What keys to type to input the character in the current input method (if it supports the character).</li>
<li>If you are running Emacs on a graphical display, the font name and glyph code for the character. If you are running Emacs on a text terminal, the code(s) sent to the terminal.</li>
<li>The character's text properties, including any non-default faces used to display the character, and any overlays containing it.</li>
</ul>
<p class="tab">Here's an example showing the Latin-1 character A with grave accent, in a buffer whose coding system is <b>utf-8-unix</b>:</p>
<pre class="tab">             position: 1 of 1 (0%), column: 0
            character: &Agrave; (displayed as &Agrave;) (codepoint 192, #o300, #xc0)
    preferred charset: unicode (Unicode (ISO10646))
code point in charset: 0xC0
               syntax: w       which means: word
             category: .:Base, L:Left-to-right (strong),
                       j:Japanese, l:Latin, v:Viet
          buffer code: #xC3 #x80
            file code: not encodable by coding system undecided-unix
              display: by this font (glyph code)
    xft:-unknown-DejaVu Sans Mono-normal-normal-
        normal-*-13-*-*-*-m-0-iso10646-1 (#x82)
Character code properties: customize what to show
  name: LATIN CAPITAL LETTER A WITH GRAVE
  old-name: LATIN CAPITAL LETTER A GRAVE
  general-category: Lu (Letter, Uppercase)
  decomposition: (65 768) ('A' '&#96;')
</pre>
<h2 id="Disabling-Multibyte">Disabling multibyte characters</h2>
<p class="tab">By default, Emacs starts in multibyte mode: it stores the contents of buffers and strings using an internal encoding that represents non-ASCII characters using multi-byte sequences. Multibyte mode allows you to use all the supported languages and scripts without limitations.<br><br>Under very special circumstances, you may want to disable multibyte character support, for a specific buffer. When multibyte characters are disabled in a buffer, we call that unibyte mode. In unibyte mode, each character in the buffer has a character code ranging from 0 through 255 (0377 octal); 0 through 127 (0177 octal) represent ASCII characters, and 128 (0200 octal) through 255 (0377 octal) represent non-ASCII characters.<br><br>To edit a particular file in unibyte representation, visit it using <b>find-file-literally</b>. See <a href="#Visiting">Visiting</a>. You can convert a multibyte buffer to unibyte by saving it to a file, killing the buffer, and visiting the file again with <b>find-file-literally</b>. Alternatively, you can use <b>C-x &lt;RET&gt; c</b> (<b>universal-coding-system-argument</b>) and specify '<b>raw-text</b>' as the coding system with which to visit or save a file. See <a href="#Text-Coding">Text Coding</a>. Unlike <b>find-file-literally</b>, finding a file as '<b>raw-text</b>' doesn't disable format conversion, uncompression, or auto mode selection.<br><br>Emacs normally loads Lisp files as multibyte. This includes the Emacs initialization file, .emacs, and the initialization files of packages such as Gnus. However, you can specify unibyte loading for a particular Lisp file, by adding an entry '<b>coding: raw-text</b>' in a file local variables section. See <a href="#Specify-Coding">Specify Coding</a>. Then that file is always loaded as unibyte text. You can also load a Lisp file as unibyte, on any one occasion, by typing <b>C-x &lt;RET&gt; c raw-text &lt;RET&gt;</b> immediately before loading it.<br><br>The buffer-local variable enable-multibyte-characters is non-nil in multibyte buffers, and <b>nil</b> in unibyte ones. The mode line also indicates whether a buffer is multibyte or not. See <a href="#Mode-Line">Mode Line</a>. With a graphical display, in a multibyte buffer, the portion of the mode line that indicates the character set has a tooltip that (amongst other things) says that the buffer is multibyte. In a unibyte buffer, the character set indicator is absent. Thus, in a unibyte buffer (when using a graphical display) there is normally nothing before the indication of the visited file's end-of-line convention (colon, backslash, etc.), unless you are using an input method.<br><br>You can turn off multibyte support in a specific buffer by invoking the command <b>toggle-enable-multibyte-characters</b> in that buffer.</p>
<h2 id="Language-Environments">Language environments</h2>
<p class="tab">All supported character sets are supported in Emacs buffers whenever multibyte characters are enabled; there is no need to select a particular language to display its characters. However, it is important to select a language environment to set various defaults. Roughly speaking, the language environment represents a choice of preferred script rather than a choice of language.<br><br>The language environment controls which coding systems to recognize when reading text (see <a href="#Recognize-Coding">Recognize Coding</a>). This applies to files, incoming mail, and any other text you read into Emacs. It may also specify the default coding system to use when you create a file. Each language environment also specifies a default input method.<br><br>To select a language environment, customize <b>current-language-environment</b> or use the command <b>M-x set-language-environment</b>. It makes no difference which buffer is current when you use this command, because the effects apply globally to the Emacs session. The supported language environments (see the variable <b>language-info-alist</b>) include:</p>
<ul>
<li><b>ASCII</b></li>
<li><b>Belarusian</b></li>
<li><b>Bengali</b></li>
<li><b>Brazilian Portuguese</b></li>
<li><b>Bulgarian</b></li>
<li><b>Cham</b></li>
<li><b>Chinese-BIG5</b></li>
<li><b>Chinese-CNS</b></li>
<li><b>Chinese-EUC-TW</b></li>
<li><b>Chinese-GB</b></li>
<li><b>Chinese-GBK</b></li>
<li><b>Chinese-GB18030</b></li>
<li><b>Croatian</b></li>
<li><b>Cyrillic-Alt</b></li>
<li><b>Cyrillic-ISO</b></li>
<li><b>Cyrillic-KOI8</b></li>
<li><b>Czech</b></li>
<li><b>Devanagari</b></li>
<li><b>Dutch</b></li>
<li><b>English</b></li>
<li><b>Esperanto</b></li>
<li><b>Ethiopic</b></li>
<li><b>French</b></li>
<li><b>Georgian</b></li>
<li><b>German</b></li>
<li><b>Greek</b></li>
<li><b>Gujarati</b></li>
<li><b>Hebrew</b></li>
<li><b>IPA</b></li>
<li><b>Italian</b></li>
<li><b>Japanese</b></li>
<li><b>Kannada</b></li>
<li><b>Khmer</b></li>
<li><b>Korean</b></li>
<li><b>Lao</b></li>
<li><b>Latin-1</b></li>
<li><b>Latin-2</b></li>
<li><b>Latin-3</b></li>
<li><b>Latin-4</b></li>
<li><b>Latin-5</b></li>
<li><b>Latin-6</b></li>
<li><b>Latin-7</b></li>
<li><b>Latin-8</b> (Celtic)</li>
<li><b>Latin-9</b> (updated Latin-1 with the Euro sign)</li>
<li><b>Latvian</b></li>
<li><b>Lithuanian</b></li>
<li><b>Malayalam</b></li>
<li><b>Oriya</b></li>
<li><b>Polish</b></li>
<li><b>Punjabi</b></li>
<li><b>Romanian</b></li>
<li><b>Russian</b></li>
<li><b>Sinhala</b></li>
<li><b>Slovak</b></li>
<li><b>Slovenian</b></li>
<li><b>Spanish</b></li>
<li><b>Swedish</b></li>
<li><b>TaiViet</b></li>
<li><b>Tajik</b></li>
<li><b>Tamil</b></li>
<li><b>Telugu</b></li>
<li><b>Thai</b></li>
<li><b>Tibetan</b></li>
<li><b>Turkish</b></li>
<li><b>UTF-8</b> (for a setup which prefers Unicode characters and files encoded in UTF-8)</li>
<li><b>Ukrainian</b></li>
<li><b>Vietnamese</b></li>
<li><b>Welsh</b></li>
<li><b>Windows-1255</b> (for a setup which prefers Cyrillic characters and files encoded in Windows-1255).</li>
</ul>
<p class="tab">To display the script(s) used by your language environment on a graphical display, you need to have suitable fonts. See <a href="#Fontsets">Fontsets</a>, for more details about setting up your fonts.<br><br>Some operating systems let you specify the character-set locale you are using by setting the locale environment variables LC_ALL, LC_CTYPE, or LANG. (If more than one of these is set, the first one that is nonempty specifies your locale for this purpose.) During startup, Emacs looks up your character-set locale's name in the system locale alias table, matches its canonical name against entries in the value of the variables <b>locale-charset-language-names</b> and <b>locale-language-names</b> (the former overrides the latter), and selects the corresponding language environment if a match is found. It also adonlys the display table and terminal coding system, the locale coding system, the preferred coding system as needed for the locale, and&mdash;last but not least&mdash;the way Emacs decodes non-ASCII characters sent by your keyboard.<br><br>If you modify the LC_ALL, LC_CTYPE, or LANG environment variables while running Emacs (using <b>M-x setenv</b>), you may want to invoke the <b>set-locale-environment</b> function afterwards to readonly the language environment from the new locale.<br><br>The <b>set-locale-environment</b> function normally uses the preferred coding system established by the language environment to decode system messages. But if your locale matches an entry in the variable <b>locale-preferred-coding-systems</b>, Emacs uses the corresponding coding system instead. For example, if the locale '<b>ja_JP.PCK</b>' matches <b>japanese-shift-jis</b> in <b>locale-preferred-coding-systems</b>, Emacs uses that encoding even though it might normally use <b>japanese-iso-8bit</b>.<br><br>You can override the language environment chosen at startup with explicit use of the command <b>set-language-environment</b>, or with customization of <b>current-language-environment</b> in your init file.<br><br>To display information about the effects of a certain language environment <b>lang-env</b>, use the command <b>C-h L lang-env &lt;RET&gt;</b> (<b>describe-language-environment</b>). This tells you which languages this language environment is useful for, and lists the character sets, coding systems, and input methods that go with it. It also shows some sample text to illustrate scripts used in this language environment. If you give an empty input for <b>lang-env</b>, this command describes the chosen language environment. You can customize any language environment with the normal hook <b>set-language-environment-hook</b>. The command <b>set-language-environment</b> runs that hook after setting up the new language environment. The hook functions can test for a specific language environment by checking the variable <b>current-language-environment</b>. This hook is where non-default settings are placed for specific language environments, such as coding systems for keyboard input and terminal output, the default input method, etc.<br><br>Before it starts to set up the new language environment, <b>set-language-environment</b> first runs the hook <b>exit-language-environment-hook</b>. This hook is useful for undoing customizations that were made with <b>set-language-environment-hook</b>. For instance, if you set up a special key binding in a specific language environment using <b>set-language-environment-hook</b>, set up <b>exit-language-environment-hook</b> to restore the normal binding for that key.</p>
<h2 id="Input-Methods">Input methods</h2>
<p class="tab">An input method is a kind of character conversion designed specifically for interactive input. In Emacs, each language often has its own input method; sometimes several languages that use the same characters can share one input method. A few languages support several input methods.<br><br>The simplest kind of input method works by mapping ASCII letters into another alphabet; this allows you to use one other alphabet instead of ASCII. The Greek and Russian input methods work this way.<br><br>A more powerful technique is composition: converting sequences of characters into one letter. Many European input methods use composition to produce a single non-ASCII letter from a sequence that consists of a letter followed by accent characters (or vice versa). For example, some methods convert the sequence <b>o ^</b> into a single accented letter. These input methods don't have any special commands; all they do is compose sequences of printing characters.<br><br>The input methods for syllabic scripts often use mapping followed by composition. The input methods for Thai and Korean work this way. First, letters are mapped into symbols for particular sounds or tone marks; then, sequences of these that make up a whole syllable are mapped into one syllable sign.<br><br>Chinese and Japanese require more complex methods. In Chinese input methods, first you enter the phonetic spelling of a Chinese word (in input method <b>chinese-py</b>, among others), or a sequence of portions of the character (input methods <b>chinese-4corner</b> and <b>chinese-sw</b>, and others). One input sequence often corresponds to many possible Chinese characters. You select the one you mean using keys such as <b>C-f</b>, <b>C-b</b>, <b>C-n</b>, <b>C-p</b> (or the arrow keys), and digits, which have special meanings in this situation.<br><br>The possible characters are conceptually arranged in several rows, with each row holding up to 10 alternatives. Normally, Emacs displays only one row at a time, in the echo area; <b>(i/j)</b> appears at the beginning, to indicate that this is the <b>i</b>th row out of a total of <b>j</b> rows. Type <b>C-n</b> or <b>C-p</b> to display the next row or the previous row.<br><br>Type <b>C-f</b> and <b>C-b</b> to move forward and backward among the alternatives in the current row. As you do this, Emacs highlights the current alternative with a special color; type <b>C-&lt;SPC&gt;</b> to select the current alternative and use it as input. The alternatives in the row are also numbered; the number appears before the alternative. Typing a number selects the associated alternative of the current row and uses it as input.<br><br><b>&lt;TAB&gt;</b> in these Chinese input methods displays a buffer showing all the possible characters at once; then clicking Mouse-2 on one of them selects that alternative. The keys <b>C-f</b>, <b>C-b</b>, <b>C-n</b>, <b>C-p</b>, and digits continue to work as usual, but they do the highlighting in the buffer showing the possible characters, rather than in the echo area.<br><br>In Japanese input methods, first you input a whole word using phonetic spelling; then, after the word is in the buffer, Emacs converts it into one or more characters using a large dictionary. One phonetic spelling corresponds to some different Japanese words; to select one of them, use <b>C-n</b> and <b>C-p</b> to cycle through the alternatives.<br><br>Sometimes it is useful to cut off input method processing so that the characters you have only entered will not combine with subsequent characters. For example, in input method <b>latin-1-postfix</b>, the sequence <b>o ^</b> combines to form an '<b>o</b>' with an accent. What if you want to enter them as separate characters?<br><br>One way is to type the accent twice; this is a special feature for entering the separate letter and accent. For example, <b>o ^ ^</b> gives you the two characters '<b>o^</b>'. Another way is to type another letter after the o&mdash;something that won't combine with that&mdash;and immediately delete it. For example, you could type <b>o o &lt;DEL&gt; ^</b> to get separate '<b>o</b>' and '<b>^</b>'.<br><br>Another method, more general but not quite as easy to type, is to use <b>C-\ C-\</b> between two characters to stop them from combining. This is the command <b>C-\</b> (<b>toggle-input-method</b>) used twice. See <a href="#Select-Input-Method">Select Input Method</a>.<br><br><b>C-\ C-\</b> is especially useful inside an incremental search, because it stops waiting for more characters to combine, and starts searching for what you have already entered.<br><br>To find out how to input the character after point using the current input method, type <b>C-u C-x =</b>. See <a href="#Position-Info">Position Info</a>.<br><br>The variables <b>input-method-highlight-flag</b> and <b>input-method-verbose-flag</b> control how input methods explain what is happening. If <b>input-method-highlight-flag</b> is non-nil, the partial sequence is highlighted in the buffer (for most input methods; some disable this feature). If <b>input-method-verbose-flag</b> is non-nil, the list of possible characters to type next is displayed in the echo area (but not when you are in the minibuffer).<br><br>Another facility for typing characters not on your keyboard is <b>C-x 8 &lt;RET&gt;</b> (<b>insert-char</b>) to insert a single character based on its Unicode name or code-point; see <a href="#Inserting-Text">Inserting Text</a>.</p>
<h2 id="Select-Input-Method">Selecting an input method</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>C-\</b></td>
<td>Enable or disable use of the selected input method (<b>toggle-input-method</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RET&gt; C-\ method &lt;RET&gt;</b></td>
<td>Select a new input method for the current buffer (<b>set-input-method</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h I method &lt;RET&gt;</b>, <b>C-h C-\ method &lt;RET&gt;</b></td>
<td>Describe the input method (<b>describe-input-method</b>). By default, it describes the current input method (if any). This description should give you the full details of how to use any particular input method.</td>
</tr>
<tr class="tcw">
<td><b>M-x list-input-methods</b></td>
<td>Display a list of all the supported input methods.</td>
</tr>
</table>
<p class="tab">To choose an input method for the current buffer, use <b>C-x &lt;RET&gt; C-\</b> (<b>set-input-method</b>). This command reads the input method name from the minibuffer; the name normally starts with the language environment that it is used with. The variable <b>current-input-method</b> records which input method is selected.<br><br>Input methods use various sequences of ASCII characters to stand for non-ASCII characters. Sometimes it is useful to turn off the input method temporarily. To do this, type <b>C-\</b> (<b>toggle-input-method</b>). To reenable the input method, type <b>C-\</b> again.<br><br>If you type <b>C-\</b> and you have not yet selected an input method, it prompts you to specify one. This has the same effect as using <b>C-x &lt;RET&gt; C-\</b> to specify an input method.<br><br>When invoked with a numeric argument, as in <b>C-u C-\</b>, <b>toggle-input-method</b> always prompts you for an input method, suggesting the most recently selected one as the default.<br><br>Selecting a language environment specifies a default input method for use in various buffers. When you have a default input method, you can select it in the current buffer by typing <b>C-\</b>. The variable <b>default-input-method</b> specifies the default input method (<b>nil</b> means there is none).<br><br>In some language environments, which support different input methods, you might want to use an input method different from the default chosen by <b>set-language-environment</b>. You can instruct Emacs to select a different default input method for a certain language environment, if you want, using <b>set-language-environment-hook</b> (see <b>set-language-environment-hook</b>). For example:</p>
<pre class="tab tcy">(defun my-chinese-setup ()
     "Set up my private Chinese environment."
     (if (equal current-language-environment "Chinese-GB")
         (setq default-input-method "chinese-tonepy")))
   (add-hook 'set-language-environment-hook 'my-chinese-setup)
</pre>
<p class="tab">This sets the default input method to be <b>chinese-tonepy</b> whenever you choose a Chinese-GB language environment.<br><br>You can instruct Emacs to activate a certain input method automatically. For example:</p>
<pre class="tab tcy">(add-hook 'text-mode-hook (lambda () (set-input-method "german-prefix")))
</pre>
<p class="tab">This automatically activates the input method "german-prefix" in Text mode.<br><br>Some input methods for alphabetic scripts work by (in effect) remapping the keyboard to emulate various keyboard layouts commonly used for those scripts. How to do this remapping properly depends on your actual keyboard layout. To specify which layout your keyboard has, use the command <b>M-x quail-set-keyboard-layout</b>.<br><br>You can use the command <b>M-x quail-show-key</b> to show what key (or key sequence) to type to input the character following point, using the selected keyboard layout. The command <b>C-u C-x =</b> also shows that information, in addition to other information about the character.<br><br><b>M-x list-input-methods</b> displays a list of all the supported input methods. The list gives information about each input method, including the string that stands for it in the mode line.</p>
<h2 id="Coding-Systems">Coding systems</h2>
<p class="tab">Users of various languages have established many more-or-less standard coding systems for representing them. Emacs does not use these coding systems internally; instead, it converts from various coding systems to its own system when reading data, and converts the internal coding system to other coding systems when writing data. Conversion is possible in reading or writing files, in sending or receiving from the terminal, and in exchanging data with subprocesses.<br><br>Emacs assigns a name to each coding system. Most coding systems are used for one language, and the name of the coding system starts with the language name. Some coding systems are used for several languages; their names usually start with '<b>iso</b>'. There are also special coding systems, such as <b>no-conversion</b>, <b>raw-text</b>, and <b>emacs-internal</b>.<br><br>A special class of coding systems, collectively known as codepages, is designed to support text encoded by Microsoft Windows and MS-DOS software. The names of these coding systems are <b>cpnnnn</b>, where <b>nnnn</b> is a 3- or 4-digit number of the codepage. You can use these encodings only like any other coding system; for example, to visit a file encoded in codepage 850, type <b>C-x &lt;RET&gt; c cp850 &lt;RET&gt; C-x C-f filename &lt;RET&gt;</b>.<br><br>In addition to converting various representations of non-ASCII characters, a coding system can perform end-of-line conversion. Emacs handles three different conventions for how to separate lines in a file: newline ("unix"), carriage-return linefeed ("dos"), and only carriage-return ("mac").</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-h C coding &lt;RET&gt;</b></td>
<td>Describe coding system coding (<b>describe-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-h C &lt;RET&gt;</b></td>
<td>Describe the coding systems currently in use.</td>
</tr>
<tr class="tcw">
<td><b>M-x list-coding-systems</b></td>
<td>Display a list of all the supported coding systems.</td>
</tr>
</table>
<p class="tab">The command <b>C-h C</b> (<b>describe-coding-system</b>) displays information about particular coding systems, including the end-of-line conversion specified by those coding systems. You can specify a coding system name as the argument; alternatively, with an empty argument, it describes the coding systems currently selected for various purposes, both in the current buffer and as the defaults, and the priority list for recognizing coding systems (see <a href="#Recognize-Coding">Recognize Coding</a>).<br><br>To display a list of all the supported coding systems, type <b>M-x list-coding-systems</b>. The list gives information about each coding system, including the letter that stands for it in the mode line (see <a href="#Mode-Line">Mode Line</a>).<br><br>Each of the coding systems that appear in this list&mdash;except for no-conversion, which means no conversion of any kind&mdash;specifies how and whether to convert printing characters, but leaves the choice of end-of-line conversion to be decided based on the contents of each file. For example, if the file appears to use the sequence carriage-return linefeed to separate lines, DOS end-of-line conversion is used.<br><br>Each of the listed coding systems has three variants, which specify exactly what to do for end-of-line conversion:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px">...<b>-unix</b></td>
<td>Don't do any end-of-line conversion; assume the file uses newline to separate lines. (This is the convention normally used on Unix and GNU systems, and Mac OS X.)</td>
</tr>
<tr class="tcw">
<td>...<b>-dos</b></td>
<td>Assume the file uses carriage-return linefeed to separate lines, and do the appropriate conversion. (This is the convention normally used on Microsoft systems.)</td>
</tr>
<tr class="tcw">
<td>...<b>-mac</b></td>
<td>Assume the file uses carriage-return to separate lines, and do the appropriate conversion. (This was the convention used on the Macintosh system before OS X.)</td>
</tr>
</table>
<p class="tab">These variant coding systems are omitted from the <b>list-coding-systems</b> display for brevity, as they are entirely predictable. For example, the coding system iso-latin-1 has variants iso-latin-1-unix, iso-latin-1-dos and iso-latin-1-mac.<br><br>The coding systems <b>unix</b>, <b>dos</b>, and <b>mac</b> are aliases for <b>undecided-unix</b>, <b>undecided-dos</b>, and <b>undecided-mac</b>, respectively. These coding systems specify only the end-of-line conversion, and leave the character code conversion to be deduced from the text itself.<br><br>The coding system <b>raw-text</b> is good for a file which is mainly ASCII text, but may contain byte values above 127 that are not meant to encode non-ASCII characters. With <b>raw-text</b>, Emacs copies those byte values unchanged, and sets <b>enable-multibyte-characters</b> to <b>nil</b> in the current buffer so that they are interpreted properly. <b>raw-text</b> handles end-of-line conversion in the usual way, based on the data encountered, and has the usual three variants to specify the kind of end-of-line conversion to use.<br><br>In contrast, the coding system <b>no-conversion</b> specifies no character code conversion at all&mdash;none for non-ASCII byte values and none for end of line. This is useful for reading or writing binary files, tar files, and other files that must be examined verbatim. It, too, sets <b>enable-multibyte-characters</b> to <b>nil</b>.<br><br>The easiest way to edit a file with no conversion of any kind is with the <b>M-x find-file-literally</b> command. This uses no-conversion, and also suppresses other Emacs features that might convert the file contents before you see them. See <a href="#Visiting">Visiting</a>.<br><br>The coding system <b>emacs-internal</b> (or <b>utf-8-emacs</b>, which is equivalent) indicates the file contains non-ASCII characters stored with the internal Emacs encoding. This coding system handles end-of-line conversion based on the data encountered, and has the usual three variants to specify the kind of end-of-line conversion.</p>
<h2 id="Recognize-Coding">Recognizing coding systems</h2>
<p class="tab">Whenever Emacs reads a given piece of text, it tries to recognize which coding system to use. This applies to files being read, output from subprocesses, text from X selections, etc. Emacs can select the right coding system automatically most of the time&mdash;once you have specified your preferences.<br><br>Some coding systems can be recognized or distinguished by which byte sequences appear in the data. However, there are coding systems that are not distinguished, not even potentially. For example, there is no way to distinguish between Latin-1 and Latin-2; they use the same byte values with different meanings.<br><br>Emacs handles this situation by means of a priority list of coding systems. Whenever Emacs reads a file, if you do not specify the coding system to use, Emacs checks the data against each coding system, starting with the first in priority and working down the list, until it finds a coding system that fits the data. Then it converts the file contents assuming that they are represented in this coding system.<br><br>The priority list of coding systems depends on the selected language environment (see <a href="#Language-Environments">Language Environments</a>). For example, if you use French, you probably want Emacs to prefer Latin-1 to Latin-2; if you use Czech, you probably want Latin-2 to be preferred. This is one of the reasons to specify a language environment.<br><br>However, you can alter the coding system priority list in detail with the command <b>M-x prefer-coding-system</b>. This command reads the name of a coding system from the minibuffer, and adds it to the front of the priority list, so that it is preferred to all others. If you use this command several times, each use adds one element to the front of the priority list.<br><br>If you use a coding system that specifies the end-of-line conversion type, such as iso-8859-1-dos, what this means is that Emacs should attempt to recognize iso-8859-1 with priority, and should use DOS end-of-line conversion when it does recognize iso-8859-1.<br><br>Sometimes a file name indicates which coding system to use for the file. The variable <b>file-coding-system-alist</b> specifies this correspondence. There is a special function <b>modify-coding-system-alist</b> for adding elements to this list. For example, to read and write all '<b>.txt</b>' files using the coding system <b>chinese-iso-8bit</b>, you can execute this Lisp expression:</p>
<pre class="tab tcy">(modify-coding-system-alist 'file "\\.txt\\'" 'chinese-iso-8bit)</pre>
<p class="tab">The first argument should be <b>file</b>, the second argument should be a regular expression that determines which files this applies to, and the third argument says which coding system to use for these files.<br><br>Emacs recognizes which kind of end-of-line conversion to use based on the contents of the file: if it sees only carriage-returns, or only carriage-return linefeed sequences, then it chooses the end-of-line conversion accordingly. You can inhibit the automatic use of end-of-line conversion by setting the variable <b>inhibit-eol-conversion</b> to non-nil. If you do that, DOS-style files are displayed with the '<b>^M</b>' characters visible in the buffer; some people prefer this to the more subtle '<b>(DOS)</b>' end-of-line type indication near the left edge of the mode line (see <a href="#Mode-Line">eol-mnemonic</a>).<br><br>By default, the automatic detection of coding system is sensitive to escape sequences. If Emacs sees a sequence of characters that begin with an escape character, and the sequence is valid as an ISO-2022 code, that tells Emacs to use one of the ISO-2022 encodings to decode the file.<br><br>However, there may be cases that you want to read escape sequences in a file as is. In such a case, you can set the variable <b>inhibit-iso-escape-detection</b> to non-nil. Then the code detection ignores any escape sequences, and never uses an ISO-2022 encoding. The result is that all escape sequences become visible in the buffer.<br><br>The default value of inhibit-iso-escape-detection is nil. We recommend you not change it permanently, only for one specific operation. That's because some Emacs Lisp source files in the Emacs distribution contain non-ASCII characters encoded in the coding system iso-2022-7bit, and they won't be decoded correctly when you visit those files if you suppress the escape sequence detection. The variables <b>auto-coding-alist</b> and <b>auto-coding-regexp-alist</b> are the strongest way to specify the coding system for certain patterns of file names, or for files containing certain patterns, respectively. These variables even override '<b>-*-coding:-*-</b>' tags in the file itself (see <a href="#Specify-Coding">Specify Coding</a>). For example, Emacs uses <b>auto-coding-alist</b> for tar and archive files, to prevent it from being confused by a '<b>-*-coding:-*-</b>' tag in a member of the archive and thinking it applies to the archive file as a whole.<br><br>Another way to specify a coding system is with the variable <b>auto-coding-functions</b>. For example, one of the builtin <b>auto-coding-functions</b> detects the encoding for <a href="/jargon/x/xml.htm">XML</a> files. Unlike the previous two, this variable does not override any '<b>-*-coding:-*-</b>' tag.<br><br>When you get new mail in Rmail, each message is translated automatically from the coding system it is written in, as if it were a separate file. This uses the priority list of coding systems that you have specified. If a MIME message specifies a character set, Rmail obeys that specification. For reading and saving Rmail files themselves, Emacs uses the coding system specified by the variable <b>rmail-file-coding-system</b>. The default value is <b>nil</b>, which means that Rmail files are not translated (they are read and written in the Emacs internal character code).</p>
<h2 id="Specify-Coding">Specifying a file's coding system</h2>
<p class="tab">If Emacs recognizes the encoding of a file incorrectly, you can reread the file using the correct coding system with <b>C-x &lt;RET&gt; r</b> (<b>revert-buffer-with-coding-system</b>). This command prompts for the coding system to use. To see what coding system Emacs actually used to decode the file, look at the coding system mnemonic letter near the left edge of the mode line (see <a href="#Mode-Line">Mode Line</a>), or type <b>C-h C</b> (<b>describe-coding-system</b>).<br><br>You can specify the coding system for a particular file in the file itself, using the '<b>-*-...-*-</b>' construct at the beginning, or a local variables list at the end (see <a href="#File-Variables">File Variables</a>). You do this by defining a value for the "variable" named coding. Emacs does not really have a variable coding; instead of setting a variable, this uses the specified coding system for the file. For example, '<b>-*-mode: C; coding: latin-1;-*-</b>' specifies use of the Latin-1 coding system, and C mode. When you specify the coding explicitly in the file, that overrides <b>file-coding-system-alist</b>.</p>
<h2 id="Output-Coding">Choosing coding systems for output</h2>
<p class="tab">Once Emacs has chosen a coding system for a buffer, it stores that coding system in <b>buffer-file-coding-system</b>. That makes it the default for operations that write from this buffer into a file, such as <b>save-buffer</b> and <b>write-region</b>. You can specify a different coding system for further file output from the buffer using <b>set-buffer-file-coding-system</b> (see <a href="#Text-Coding">Text Coding</a>).<br><br>You can insert any character Emacs supports into any Emacs buffer, but most coding systems can only handle a subset of these characters. Therefore, the characters you insert cannot be encoded with the coding system that is used to save the buffer. For example, you could visit a text file in Polish, encoded in iso-8859-2, and add some Russian words to it. When you save that buffer, Emacs cannot use the current value of <b>buffer-file-coding-system</b>, because the characters you added cannot be encoded by that coding system.<br><br>When that happens, Emacs tries the most-preferred coding system (set by <b>M-x prefer-coding-system</b> or <b>M-x set-language-environment</b>). If that coding system can safely encode all the characters in the buffer, Emacs uses it, and stores its value in <b>buffer-file-coding-system</b>. Otherwise, Emacs displays a list of coding systems suitable for encoding the buffer's contents, and asks you to choose one of those coding systems.<br><br>If you insert the unsuitable characters in a mail message, Emacs behaves a bit differently. It additionally checks whether the most-preferred coding system is recommended for use in MIME messages; if not, it informs you of this fact and prompts you for another coding system. This is so you won't inadvertently send a message encoded in a way your recipient's mail software has difficulty decoding. (You can still use an unsuitable coding system if you enter its name at the prompt.)<br><br>When you send a mail message (see <a href="#Sending-Mail">Sending Mail</a>), Emacs has four different ways to determine the coding system to use for encoding the message text. It tries the buffer's own value of <b>buffer-file-coding-system</b>, if that is non-nil. Otherwise, it uses the value of <b>sendmail-coding-system</b>, if that is non-nil. The third way is to use the default coding system for new files, which is controlled by your choice of language environment, if that is non-nil. If all these three values are <b>nil</b>, Emacs encodes outgoing mail using the Latin-1 coding system.</p>
<h2 id="Text-Coding">Specifying a coding system for file text</h2>
<p class="tab">In cases where Emacs does not automatically choose the right coding system for a file's contents, you can use these commands to specify one:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>C-x &lt;RET&gt; f coding &lt;RET&gt;</b></td>
<td>Use coding system coding to save or revisit the file in the current buffer (<b>set-buffer-file-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RET&gt; c coding &lt;RET&gt;</b></td>
<td>Specify coding system coding for the immediately following command (<b>universal-coding-system-argument</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RET&gt; r coding &lt;RET&gt;</b></td>
<td>Revisit the current file using the coding system coding (<b>revert-buffer-with-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x recode-region &lt;RET&gt; right &lt;RET&gt; wrong &lt;RET&gt;</b></td>
<td>Convert a region that was decoded using coding system wrong, decoding it using coding system right instead.</td>
</tr>
</table>
<p class="tab">The command <b>C-x &lt;RET&gt; f</b> (<b>set-buffer-file-coding-system</b>) sets the file coding system for the current buffer (i.e., the coding system to use when saving or reverting the file). You specify which coding system using the minibuffer. You can also invoke this command by clicking with Mouse-3 on the coding system indicator in the mode line (see <a href="#Mode-Line">Mode Line</a>).<br><br>If you specify a coding system that does not handle all the characters in the buffer, Emacs warns you about the troublesome characters, and ask you to choose another coding system, when you try to save the buffer (see <a href="#Output-Coding">Output Coding</a>).<br><br>You can also use this command to specify the end-of-line conversion (see <a href="#Coding-Systems">end-of-line conversion</a>) for encoding the current buffer. For example, <b>C-x &lt;RET&gt; f dos &lt;RET&gt;</b> causes Emacs to save the current buffer's text with DOS-style carriage-return linefeed line endings.<br><br>Another way to specify the coding system for a file is when you visit the file. First use the command <b>C-x &lt;RET&gt; c</b> (<b>universal-coding-system-argument</b>); this command uses the minibuffer to read a coding system name. After you exit the minibuffer, the specified coding system is used for the immediately following command.<br><br>So if the immediately following command is <b>C-x C-f</b>, for example, it reads the file using that coding system (and records the coding system for when you later save the file). Or if the immediately following command is <b>C-x C-w</b>, it writes the file using that coding system. When you specify the coding system for saving in this way, instead of with <b>C-x &lt;RET&gt; f</b>, there is no warning if the buffer contains characters that the coding system cannot handle.<br><br>Other file commands affected by a specified coding system include <b>C-x i</b> and <b>C-x C-v</b>, and the other-window variants of <b>C-x C-f</b>. <b>C-x &lt;RET&gt; c</b> also affects commands that start subprocesses, including <b>M-x shell</b> (see <a href="#Shell">Shell</a>). If the immediately following command does not use the coding system, then <b>C-x &lt;RET&gt; c</b> ultimately has no effect.<br><br>An easy way to visit a file with no conversion is with the <b>M-x find-file-literally</b> command. See <a href="#Visiting">Visiting</a>.<br><br>The default value of the variable <b>buffer-file-coding-system</b> specifies the choice of coding system to use when you create a new file. It applies when you find a new file, and when you create a buffer and then save it in a file. Selecting a language environment often sets this variable to a good choice of default coding system for that language environment.<br><br>If you visit a file with a wrong coding system, you can correct this with <b>C-x &lt;RET&gt; r</b> (<b>revert-buffer-with-coding-system</b>). This visits the current file again, using a coding system you specify.<br><br>If a piece of text has already been inserted into a buffer using the wrong coding system, you can redo the decoding of it using <b>M-x recode-region</b>. This prompts you for the proper coding system, then for the wrong coding system that was used, and does the conversion. It first encodes the region using the wrong coding system, then decodes it again using the proper coding system.</p>
<h2 id="Communication-Coding">Coding systems for interprocess communication</h2>
<p class="tab">This section explains how to specify coding systems for use in communication with other processes.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>C-x &lt;RET&gt; x coding &lt;RET&gt;</b></td>
<td>Use coding system coding for transferring selections to and from other graphical applications (<b>set-selection-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RET&gt; X coding &lt;RET&gt;</b></td>
<td>Use coding system coding for transferring one selection&mdash;the next one&mdash;to or from another graphical application (<b>set-next-selection-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RET&gt; p input-coding &lt;RET&gt; output-coding &lt;RET&gt;</b></td>
 <td>Use coding systems <b>input-coding</b> and <b>output-coding</b> for subprocess input and output in the current buffer (<b>set-buffer-process-coding-system</b>).</td>
</tr>
</table>
<p class="tab">The command <b>C-x &lt;RET&gt; x</b> (<b>set-selection-coding-system</b>) specifies the coding system for sending selected text to other windowing applications, and for receiving the text of selections made in other applications. This command applies to all subsequent selections, until you override it using the command again. The command <b>C-x &lt;RET&gt; X</b> (<b>set-next-selection-coding-system</b>) specifies the coding system for the next selection made in Emacs or read by Emacs.<br><br>The variable <b>x-select-request-type</b> specifies the data type to request from the X Window System for receiving text selections from other applications. If the value is <b>nil</b> (the default), Emacs tries UTF8_STRING and COMPOUND_TEXT, in this order, and uses various heuristics to choose the more appropriate of the two results; if none of these succeed, Emacs falls back on STRING. If the value of <b>x-select-request-type</b> is one of the symbols COMPOUND_TEXT, UTF8_STRING, STRING, or TEXT, Emacs uses only that request type. If the value is a list of some of these symbols, Emacs tries only the request types in the list, in order, until one of them succeeds, or until the list is exhausted.<br><br>The command <b>C-x &lt;RET&gt; p</b> (<b>set-buffer-process-coding-system</b>) specifies the coding system for input and output to a subprocess. This command applies to the current buffer; normally, each subprocess has its own buffer, and thus you can use this command to specify translation to and from a particular subprocess by giving the command in the corresponding buffer.<br><br>You can also use <b>C-x &lt;RET&gt; c</b> (<b>universal-coding-system-argument</b>) only before the command that runs or starts a subprocess, to specify the coding system for communicating with that subprocess. See <a href="#Text-Coding">Text Coding</a>.<br><br>The default for translation of process input and output depends on the current language environment.<br><br>The variable <b>locale-coding-system</b> specifies a coding system to use when encoding and decoding system strings such as system error messages and <b>format-time-string</b> formats and timestamps. That coding system is also used for decoding non-ASCII keyboard input on the X Window System. Choose a coding system that is compatible with the underlying system's text representation, which is normally specified by one of the environment variables LC_ALL, LC_CTYPE, and LANG. (The first one, in the order specified above, whose value is nonempty is the one that determines the text representation.)</p>
<h2 id="File-Name-Coding">Coding systems for file names</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:280px"><b>C-x &lt;RET&gt; F</b> <i>coding</i> <b>&lt;RET&gt;</b></td>
<td>Use coding system <i>coding</i> for encoding and decoding file names (<b>set-file-name-coding-system</b>).</td>
</tr>
</table>
<p class="tab">The command <b>C-x &lt;RET&gt; F</b> (<b>set-file-name-coding-system</b>) specifies a coding system to use for encoding file names. It has no effect on reading and writing the contents of files.<br><br>In fact, all this command does is set the value of the variable <b>file-name-coding-system</b>. If you set the variable to a coding system name (as a Lisp symbol or a string), Emacs encodes file names using that coding system for all file operations. This makes it possible to use non-ASCII characters in file names&mdash;or, at least, those non-ASCII characters that the specified coding system can encode.<br><br>If <b>file-name-coding-system</b> is <b>nil</b>, Emacs uses a default coding system determined by the selected language environment, and stored in the <b>default-file-name-coding-system</b> variable. In the default language environment, non-ASCII characters in file names are not encoded specially; they appear in the file system using the internal Emacs representation.<br><br>Warning: if you change <b>file-name-coding-system</b> (or the language environment) in the middle of an Emacs session, problems can result if you have already visited files whose names were encoded using the earlier coding system and cannot be encoded (or are encoded differently) under the new coding system. If you try to save one of these buffers under the visited file name, saving may use the wrong file name, or it may encounter an error. If such a problem happens, use <b>C-x C-w</b> to specify a new file name for that buffer.<br><br>If a mistake occurs when encoding a file name, use the command <b>M-x recode-file-name</b> to change the file name's coding system. This prompts for an existing file name, its old coding system, and the coding system that you want to convert.</p>
<h2 id="Terminal-Coding">Coding systems for terminal I/O</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:280px"><b>C-x &lt;RET&gt; t</b> <i>coding</i> <b>&lt;RET&gt;</b></td>
<td>Use coding system <i>coding</i> for terminal output (<b>set-terminal-coding-system</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;RET&gt; k</b> <i>coding</i> <b>&lt;RET&gt;</b></td>
<td>Use coding system <i>coding</i> for keyboard input (<b>set-keyboard-coding-system</b>).</td>
</tr>
</table>
<p class="tab">The command <b>C-x &lt;RET&gt; t</b> (<b>set-terminal-coding-system</b>) specifies the coding system for terminal output. If you specify a character code for terminal output, all characters output to the terminal are translated into that coding system.<br><br>This feature is useful for certain character-only terminals built to support specific languages or character sets&mdash;for example, European terminals that support one of the ISO Latin character sets. You need to specify the terminal coding system when using multibyte text, so that Emacs knows which characters the terminal can actually handle.<br><br>By default, output to the terminal is not translated at all, unless Emacs can deduce the proper coding system from your terminal type or your locale specification (see <a href="#Language-Environments">Language Environments</a>).<br><br>The command <b>C-x &lt;RET&gt; k</b> (<b>set-keyboard-coding-system</b>), or the variable <b>keyboard-coding-system</b>, specifies the coding system for keyboard input. Character-code translation of keyboard input is useful for terminals with keys that send non-ASCII graphic characters&mdash;for example, some terminals designed for ISO Latin-1 or subsets of it.<br><br>By default, keyboard input is translated based on your system locale setting. If your terminal does not really support the encoding implied by your locale (for example, if you find it inserts a non-ASCII character if you type <b>M-i</b>), you need to set <b>keyboard-coding-system</b> to <b>nil</b> to turn off encoding. You can do this by putting</p>
<pre class="tab tcy">(set-keyboard-coding-system nil)</pre>
<p class="tab">In your init file.<br><br>There is a similarity between using a coding system translation for keyboard input, and using an input method: both define sequences of keyboard input that translate into single characters. However, input methods are designed to be convenient for interactive use by humans, and the sequences that are translated are often sequences of ASCII printing characters. Coding systems often translate sequences of non-graphic characters.</p>
<h2 id="Fontsets">Fontsets</h2>
<p class="tab">A font often defines shapes for a single alphabet or script. Therefore, displaying the entire range of scripts that Emacs supports requires a collection of many fonts. In Emacs, such a collection is called a fontset. A fontset is defined by a list of font specifications, each assigned to handle a range of character codes, and may fall back on another fontset for characters that are not covered by the fonts it specifies.<br><br>Each fontset has a name, like a font. However, while fonts are stored in the system and the available font names are defined by the system, fontsets are defined within Emacs itself. Once you have defined a fontset, you can use it within Emacs by specifying its name, anywhere that you could use a single font. Of course, Emacs fontsets can use only the fonts that the system supports. If some characters appear on the screen as empty boxes or hex codes, this indicates the fontset in use for them has no font for those characters. In this case, or if the characters are shown, but not as you would like, you may need to install extra fonts. Your operating system may have optional fonts that you can install; or you can install the GNU Intlfonts package, which includes fonts for most supported scripts.<br><br>Emacs creates three fontsets automatically: the standard fontset, the startup fontset and the default fontset. The default fontset is most likely to have fonts for a wide variety of non-ASCII characters, and is the default fallback for the other two fontsets, and if you set a default font rather than fontset. However, it does not specify font family names, so results can be somewhat random if you use it directly. You can specify use of a particular fontset by starting Emacs with the '<b>-fn</b>' option. For example,</p>
<pre class="tab tcy">emacs -fn fontset-standard</pre>
<p class="tab">You can also specify a fontset with the '<b>Font</b>' resource (see <a href="#X-Resources">X Resources</a>).<br><br>If no fontset is specified for use, then Emacs uses an ASCII font, with '<b>fontset-default</b>' as a fallback for characters the font does not cover. The standard fontset is only used if explicitly requested, despite its name.<br><br>A fontset does not necessarily specify a font for every character code. If a fontset specifies no font for a certain character, or if it specifies a font that does not exist on your system, then it cannot display that character properly. It displays that character as a hex code or thin space or an empty box instead. (See <a href="#Text-Display">glyphless characters</a>, for details.)</p>
<h2 id="Defining-Fontsets">Defining fontsets</h2>
<p class="tab">When running on X, Emacs creates a standard fontset automatically according to the value of <b>standard-fontset-spec</b>. This fontset's name is</p>
<pre class="tab tcy">-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard</pre>
<p class="tab">Or only '<b>fontset-standard</b>' for short.<br><br>On GNUstep and Mac OS X, the standard fontset is created using the value of <b>ns-standard-fontset-spec</b>, and on Microsoft Windows it is created using the value of <b>w32-standard-fontset-spec</b>.<br><br>Bold, italic, and bold-italic variants of the standard fontset are created automatically. Their names have '<b>bold</b>' instead of '<b>medium</b>', or '<b>i</b>' instead of '<b>r</b>', or both.<br><br>Emacs generates a fontset automatically, based on any default ASCII font that you specify with the '<b>Font</b>' resource or the '<b>-fn</b>' argument, or the default font that Emacs found when it started. This is the startup fontset and its name is <b>fontset-startup</b>. It does this by replacing the <b>charset_registry</b> field with '<b>fontset</b>', and replacing <b>charset_encoding</b> field with '<b>startup</b>', then using the resulting string to specify a fontset.<br><br>For instance, if you start Emacs with a font of this form,</p>
<pre class="tab tcy">emacs -fn "*courier-medium-r-normal--14-140-*-iso8859-1"</pre>
<p class="tab">Emacs generates the following fontset and uses it for the initial X window frame:</p>
<pre class="tab tcy">-*-courier-medium-r-normal-*-14-140-*-*-*-*-fontset-startup</pre>
<p class="tab">The startup fontset uses the font that you specify, or a variant with a different Registry and encoding, for all the characters that are supported by that font, and fallback on '<b>fontset-default</b>' for other characters.<br><br>With the X resource '<b>Emacs.Font</b>', you can specify a fontset name only like an actual font name. But be careful not to specify a fontset name in a wildcard resource like '<b>Emacs*Font</b>'&mdash;that wildcard specification matches other resources, such as for menus, and menus cannot handle fontsets. See <a href="#X-Resources">X Resources</a>.<br><br>You can specify additional fontsets using X resources named '<b>Fontset-n</b>', where <b>n</b> is an integer starting from 0. The resource value should have this form:</p>
<pre class="tab tcy">fontpattern, [charset:font]...</pre>
<p class="tab"><b>fontpattern</b> should have the form of a standard X font name (see the previous <b>fontset-startup</b> example), except for the last two fields. They should have the form '<b>fontset-alias</b>'.<br><br>The fontset has two names, one long and one short. The long name is fontpattern. The short name is '<b>fontset-alias</b>'. You can refer to the fontset by either name.<br><br>The construct '<b>charset:font</b>' specifies which font to use (in this fontset) for one particular character set. Here, charset is the name of a character set, and font is the font to use for that character set. You can use this construct any number of times in defining one fontset.<br><br>For the other character sets, Emacs chooses a font based on <b>fontpattern</b>. It replaces '<b>fontset-alias</b>' with values that describe the character set. For the ASCII character font, '<b>fontset-alias</b>' is replaced with '<b>ISO8859-1</b>'.<br><br>Also, when several consecutive fields are wildcards, Emacs collapses them into a single wildcard. This is to prevent use of auto-scaled fonts. Fonts made by scaling larger fonts are not usable for editing, and scaling a smaller font is not also useful, because it is better to use the smaller font in its own size, which is what Emacs does.<br><br>Thus if <b>fontpattern</b> is this,</p>
<pre class="tab tcy">-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24</pre>
<p class="tab">the font specification for ASCII characters would be this:</p>
<pre class="tab tcy">-*-fixed-medium-r-normal-*-24-*-ISO8859-1</pre>
<p class="tab">and the font specification for Chinese GB2312 characters would be this:</p>
<pre class="tab tcy">-*-fixed-medium-r-normal-*-24-*-gb2312*-*</pre>
<p class="tab">You may not have any Chinese font matching the above font specification. Most X distributions include only Chinese fonts that have '<b>song ti</b>' or '<b>fangsong ti</b>' in the family field. In such a case, '<b>Fontset-n</b>' can be specified as:</p>
<pre class="tab tcy">Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*</pre>
<p class="tab">Then, the font specifications for all but Chinese GB2312 characters have '<b>fixed</b>' in the family field, and the font specification for Chinese GB2312 characters has a wildcard '<b>*</b>' in the family field.<br><br>The function that processes the fontset resource value to create the fontset is called <b>create-fontset-from-fontset-spec</b>. You can also call this function explicitly to create a fontset.<br><br>See <a href="#Fonts">Fonts</a>, for more information about font naming.</p>
<h2 id="Modifying-Fontsets">Modifying fontsets</h2>
<p class="tab">Fontsets do not always have to be created from scratch. If only minor changes are required it may be easier to modify an existing fontset. Modifying '<b>fontset-default</b>' also affects other fontsets that use it as a fallback, so is an effective way of fixing problems with the fonts that Emacs chooses for a particular script.<br><br>Fontsets can be modified using the function <b>set-fontset-font</b>, specifying a character, a charset, a script, or a range of characters to modify the font for, and a font specification for the font to be used. Examples are:</p>
<pre class="tab tcy">;; Use Liberation Mono for latin-3 charset.
(set-fontset-font "fontset-default" 'iso-8859-3
                  "Liberation Mono")</pre>
<pre class="tab tcy">;; Prefer a big5 font for han characters
(set-fontset-font "fontset-default"
                  'han (font-spec :registry "big5")
                  nil 'prepend)</pre>
<pre class="tab tcy">;; Use DejaVu Sans Mono as a fallback in fontset-startup
;; before resorting to fontset-default.
(set-fontset-font "fontset-startup" nil "DejaVu Sans Mono"
                  nil 'append)</pre>
<pre class="tab tcy">;; Use MyPrivateFont for the Unicode private use area.
(set-fontset-font "fontset-default"  '(#xe000 . #xf8ff)
                  "MyPrivateFont")</pre>
<h2 id="Undisplayable-Characters">Undisplayable characters</h2>
<p class="tab">There may be some non-ASCII characters your terminal cannot display. Most text terminals support only a single character set (use the variable <b>default-terminal-coding-system</b> to tell Emacs which one; see <a href="#Terminal-Coding">Terminal Coding</a>); characters that are not encoded in that coding system are displayed as '<b>?</b>' by default.<br><br>Graphical displays can display a broader range of characters, but you may not have fonts installed for all of them; characters that have no font appear as a hollow box.<br><br>If you use Latin-1 characters but your terminal can't display Latin-1, you can arrange to display mnemonic ASCII sequences instead, e.g., '<b>"o</b>' for o-umlaut. Load the library <b>iso-ascii</b> to do this.<br><br>If your terminal can display Latin-1, you can display characters from other European character sets using a mixture of equivalent Latin-1 characters and ASCII mnemonics. Customize the variable <b>latin1-display</b> to enable this. The mnemonic ASCII sequences mostly correspond to those of the prefix input methods.</p>
<h2 id="Unibyte-Mode">Unibyte editing mode</h2>
<p class="tab">The ISO 8859 Latin-n character sets define character codes in the range 0240 to 0377 octal (160 to 255 decimal) to handle the accented letters and punctuation needed by various European languages (and some non-European ones). Note that Emacs considers bytes with codes in this range as raw bytes, not as characters, even in a unibyte buffer, i.e., if you disable multibyte characters. However, Emacs can still handle these character codes as if they belonged to one of the single-byte character sets at a time. To specify which of these codes to use, invoke <b>M-x set-language-environment</b> and specify a suitable language environment such as '<b>Latin-n</b>'.<br><br>For more information about unibyte operation, see <a href="#Disabling-Multibyte">Disabling Multibyte</a>.<br><br>Emacs can also display bytes in the range 160 to 255 as readable characters, provided the terminal or font in use supports them. This works automatically. On a graphical display, Emacs can also display single-byte characters through fontsets, in effect by displaying the equivalent multibyte characters according to the current language environment. To request this, set the variable <b>unibyte-display-via-language-environment</b> to a non-nil value. Note that setting this only affects how these bytes are displayed, but does not change the fundamental fact that Emacs treats them as raw bytes, not as characters.<br><br>If your terminal does not support display of the Latin-1 character set, Emacs can display these characters as ASCII sequences which at least give you a clear idea of what the characters are. To do this, load the library iso-ascii. Similar libraries for other Latin-n character sets could be implemented, but have not been so far. Normally non-ISO-8859 characters (decimal codes between 128 and 159 inclusive) are displayed as octal escapes. You can change this for non-standard &quot;extended&quot; versions of ISO-8859 character sets using the function <b>standard-display-8bit</b> in the <b>disp-table</b> library.<br><br>There are two ways to input single-byte non-ASCII characters:</p>
<ul>
<li>You can use an input method for the selected language environment. See <a href="#Input-Methods">Input Methods</a>. When you use an input method in a unibyte buffer, the non-ASCII character you specify with it is converted to unibyte.</li>
<li>If your keyboard can generate character codes 128 (decimal) and up, representing non-ASCII characters, you can type those character codes directly. On a graphical display, you don't need to do anything special to use these keys; they should work. On a text terminal, use the command <b>M-x set-keyboard-coding-system</b> or customize the variable <b>keyboard-coding-system</b> to specify which coding system your keyboard uses (see <a href="#Terminal-Coding">Terminal Coding</a>). Enabling this feature will probably require you to use &lt;ESC&gt; to type Meta characters; however, on a console terminal or in xterm, you can arrange for Meta to be converted to &lt;ESC&gt; and still be able type 8-bit characters present directly on the keyboard or using Compose or AltGr keys. See <a href="#User-Input">User Input</a>.</li>
<li>For Latin-1 only, you can use the key <b>C-x 8</b> as a "compose character" prefix for entry of non-ASCII Latin-1 printing characters. <b>C-x 8</b> is good for insertion (in the minibuffer and other buffers), for searching, and in any other context where a key sequence is allowed. C-x 8 works by loading the <b>iso-transl</b> library. Once that library is loaded, the <b>&lt;Alt&gt;</b> modifier key, if the keyboard has one, serves the same purpose as <b>C-x 8</b>: use <b>&lt;Alt&gt;</b> together with an accent character to modify the following letter. Also, if the keyboard has keys for the Latin-1 "dead accent characters", they too are defined to compose with the following character, once iso-transl is loaded.</li>
</ul>
<p class="tab">Use <b>C-x 8 C-h</b> to list all the available <b>C-x 8</b> translations.</p>
<h2 id="Charsets">Charsets</h2>
<p class="tab">In Emacs, charset is short for "character set". Emacs supports most popular charsets (such as ascii, iso-8859-1, cp1250, big5, and unicode), in addition to some charsets of its own (such as emacs, unicode-bmp, and eight-bit). All supported characters belong to one or more charsets.<br><br>Emacs normally "does the right thing" with respect to charsets, so that you don't have to worry about them. However, it is sometimes helpful to know some of the underlying details about charsets.<br><br>One example is font selection (see <a href="#Fonts">Fonts</a>). Each language environment (see <a href="#Language-Environments">Language Environments</a>) defines a "priority list" for the various charsets. When searching for a font, Emacs initially attempts to find one that displays the highest-priority charsets. For instance, in the Japanese language environment, the charset japanese-jisx0208 has the highest priority, so Emacs tries to use a font whose Registry property is '<b>JISX0208.1983-0</b>'.<br><br>There are two commands that obtain information about charsets. The command <b>M-x list-charset-chars</b> prompts for a charset name, and displays all the characters in that character set. The command <b>M-x describe-character-set</b> prompts for a charset name, and displays information about that charset, including its internal representation within Emacs.<br><br><b>M-x list-character-sets</b> displays a list of all supported charsets. The list gives the names of charsets and additional information to identity each charset; see the International Register of Coded Character Sets for more details. In this list, charsets are divided into two categories: normal charsets are listed first, followed by supplementary charsets. A supplementary charset is one that is used to define another charset (as a parent or a subset), or to provide backward-compatibility for older Emacs versions.<br><br>To find out which charset a character in the buffer belongs to, put point before it and type <b>C-u C-x =</b> (see <a href="#International-Chars">International Chars</a>).</p>
<h2 id="Bidirectional-Editing">Bidirectional editing</h2>
<p class="tab">Emacs supports editing text written in scripts, such as Arabic and Hebrew, whose natural ordering of horizontal text for display is from right to left. However, digits and Latin text embedded in these scripts are still displayed left to right. It is also not uncommon to have small portions of text in Arabic or Hebrew embedded in an otherwise Latin document; e.g., as comments and strings in a program source file. For these reasons, text that uses these scripts is actually bidirectional: a mixture of runs of left-to-right and right-to-left characters.<br><br>This section describes the facilities and options provided by Emacs for editing bidirectional text.<br><br>Emacs stores right-to-left and bidirectional text in the so-called logical (or reading) order: the buffer or string position of the first character you read precedes that of the next character. Reordering of bidirectional text into the visual order happens at display time. As result, character positions no longer increase monotonically with their positions on display. Emacs implements the Unicode Bidirectional Algorithm described in the Unicode Standard Annex #9, for reordering of bidirectional text for display.<br><br>The buffer-local variable <b>bidi-display-reordering</b> controls whether text in the buffer is reordered for display. If its value is non-nil, Emacs reorders characters that have right-to-left directionality when they are displayed. The default value is <b>t</b>.<br><br>Each paragraph of bidirectional text can have its own base direction, either right-to-left or left-to-right. (Paragraph boundaries are empty lines, i.e., lines consisting entirely of whitespace characters.) Text in left-to-right paragraphs begins on the screen at the left margin of the window and is truncated or continued when it reaches the right margin. By contrast, text in right-to-left paragraphs is displayed starting at the right margin and is continued or truncated at the left margin.<br><br>Emacs determines the base direction of each paragraph dynamically, based on the text at the beginning of the paragraph. However, sometimes a buffer may need to force a certain base direction for its paragraphs. The variable <b>bidi-paragraph-direction</b>, if non-nil, disables the dynamic determination of the base direction, and instead forces all paragraphs in the buffer to have the direction specified by its <b>buffer-local</b> value. The value can be either right-to-left or left-to-right. Any other value is interpreted as <b>nil</b>.<br><br>Alternatively, you can control the base direction of a paragraph by inserting special formatting characters in front of the paragraph. The special character RIGHT-TO-LEFT MARK, or <b>rlm</b>, forces the right-to-left direction on the following paragraph, while LEFT-TO-RIGHT MARK, or <b>lrm</b> forces the left-to-right direction. (You can use <b>C-x 8 &lt;RET&gt;</b> to insert these characters.) In a GUI session, the <b>lrm</b> and <b>rlm</b> characters display as very thin blank characters; on text terminals they display as blanks.<br><br>Because characters are reordered for display, Emacs commands that operate in the logical order or on stretches of buffer positions may produce unusual effects. For example, <b>C-f</b> and <b>C-b</b> commands move point in the logical order, so the cursor will sometimes jump when point traverses reordered bidirectional text. Similarly, a highlighted region covering a contiguous range of character positions may look discontinuous if the region spans reordered text. This is normal and similar to the behavior of other programs that support bidirectional text.</p>
<h2 id="Modes">Modes, major and minor</h2>
<p class="tab">Emacs contains many editing modes that alter its basic behavior in useful ways. These are divided into major modes and minor modes.<br><br>Major modes provide specialized facilities for working on a particular file type, such as a C source file (see <a href="#Programs">Programs</a>), or a particular type of non-file buffer, such as a shell buffer (see <a href="#Shell">Shell</a>). Major modes are mutually exclusive; each buffer has one and only one major mode at any time.<br><br>Minor modes are optional features which you can turn on or off, not necessarily specific to a type of file or buffer. For example, Auto Fill mode is a minor mode where <b>&lt;SPC&gt;</b> breaks lines between words as you type (see <a href="#Auto-Fill">Auto Fill</a>). Minor modes are independent of one another, and of the selected major mode.</p>
<ul>
<li><a href="#Major-Modes">Major Modes</a>: Text mode vs. Lisp mode vs. C mode...</li>
<li><a href="#Minor-Modes">Minor Modes</a>: Each minor mode is a feature you can turn on independently of any others.</li>
<li><a href="#Choosing-Modes">Choosing Modes</a>: How modes are chosen when visiting files.</li>
</ul>
<h2 id="Major-Modes">Major modes</h2>
<p class="tab">Every buffer possesses a major mode, which determines the editing behavior of Emacs while that buffer is current. The mode line normally shows the name of the current major mode, in parentheses (see <a href="#Mode-Line">Mode Line</a>).<br><br>The least specialized major mode is called Fundamental mode. This mode has no mode-specific redefinitions or variable settings, so that each Emacs command behaves in its most general manner, and each user option variable is in its default state.<br><br>For editing text of a specific type that Emacs knows about, such as Lisp code or English text, you often use a more specialized major mode, such as Lisp mode or Text mode. Most major modes fall into three major groups. The first group contains modes for normal text, either plain or with mark-up. It includes Text mode, HTML mode, SGML mode, TeX mode and Outline mode. The second group contains modes for specific programming languages. These include Lisp mode (which has several variants), C mode, Fortran mode, and others. The third group consists of major modes that are not associated directly with files; they are used in buffers created for specific purposes by Emacs, such as Dired mode for buffers made by Dired (see <a href="#Dired">Dired</a>), Message mode for buffers made by <b>C-x m</b> (see <a href="#Sending-Mail">Sending Mail</a>), and Shell mode for buffers used to communicate with an inferior shell process (see <a href="#Interactive-Shell">Interactive Shell</a>).<br><br>Usually, the major mode is automatically set by Emacs, when you first visit a file or create a buffer (see <a href="#Choosing-Modes">Choosing Modes</a>). You can explicitly select a new major mode using an <b>M-x</b> command. Take the name of the mode and add <b>-mode</b> to get the name of the command to select that mode (e.g., <b>M-x lisp-mode</b> enters Lisp mode).<br><br>The value of the buffer-local variable <b>major-mode</b> is a symbol with the same name as the major mode command (e.g., <b>lisp-mode</b>). This variable is set automatically; don't change it yourself.<br><br>The default value of <b>major-mode</b> determines the major mode to use for files that do not specify a major mode, and for new buffers created with <b>C-x b</b>. Normally, this default value is the symbol <b>fundamental-mode</b>, which specifies Fundamental mode. You can change this default value via the Customization interface (see <a href="#Easy-Customization">Easy Customization</a>), or by adding a line like this to your init file (see <a href="#Init-File">Init File</a>):</p>
<pre class="tab tcy">(setq-default major-mode 'text-mode)</pre>
<p class="tab">If the default value of <b>major-mode</b> is <b>nil</b>, the major mode is taken from the previously current buffer.<br><br>Specialized major modes often change the meanings of certain keys to do something more suitable for the mode. For instance, programming language modes bind <b>&lt;TAB&gt;</b> to indent the current line according to the rules of the language (see <a href="#Indentation">Indentation</a>). The keys that are commonly changed are <b>&lt;TAB&gt;</b>, <b>&lt;DEL&gt;</b>, and <b>C-j</b>. Many modes also define special commands, usually bound in the prefix key <b>C-c</b>. Major modes can also alter user options and variables; for instance, programming language modes often set a buffer-local value for the variable <b>comment-start</b>, which determines how source code comments are delimited (see <a href="#Comments">Comments</a>).<br><br>To view the documentation for the current major mode, including a list of its key bindings, type <b>C-h m</b> (<b>describe-mode</b>).<br><br>Every major mode, apart from Fundamental mode, defines a mode hook, a customizable list of Lisp functions to run each time the mode is enabled in a buffer. See <a href="#Hooks">Hooks</a>, for more information about hooks. Each mode hook is named after its major mode, e.g., Fortran mode has <b>fortran-mode-hook</b>. Furthermore, all text-based major modes run <b>text-mode-hook</b>, and all programming language modes run <b>prog-mode-hook</b>, before running their mode hooks. Hook functions can look at the value of the variable <b>major-mode</b> to see which mode is actually being entered.<br><br>Mode hooks are commonly used to enable minor modes (see <b>Minor Modes</b>). For example, you can put the following lines in your init file to enable Flyspell minor mode in all text-based major modes (see <a href="#Spelling">Spelling</a>), and Eldoc minor mode in Emacs Lisp mode (see <a href="#Lisp-Doc">Lisp Doc</a>):</p>
<pre class="tab tcy">(add-hook 'text-mode-hook 'flyspell-mode) (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
</pre>
<h2 id="Minor-Modes">Minor modes</h2>
<p class="tab">A minor mode is an optional editing mode that alters the behavior of Emacs in some well-defined way. Unlike major modes, any number of minor modes can be in effect at any time. Some minor modes are buffer-local, and can be turned on (enabled) in certain buffers and off (disabled) in others. Other minor modes are global: while enabled, they affect everything you do in the Emacs session, in all buffers. Most minor modes are disabled by default, but a few are enabled by default.<br><br>Most buffer-local minor modes say in the mode line when they are enabled, only after the major mode indicator. For example, '<b>Fill</b>' in the mode line means that Auto Fill mode is enabled. See <a href="#Mode-Line">Mode Line</a>.<br><br>Like major modes, each minor mode is associated with a mode command, whose name consists of the mode name followed by '<b>-mode</b>'. For instance, the mode command for Auto Fill mode is <b>auto-fill-mode</b>. But unlike a major mode command, which enables the mode, the mode command for a minor mode can either enable or disable it:</p>
<ul>
<li>If you invoke the mode command directly with no prefix argument (either via <b>M-x</b>, or by binding it to a key and typing that key; see <a href="#Key-Bindings">Key Bindings</a>), that toggles the minor mode. The minor mode is turned on if it was off, and vice versa.</li>
<li>If you invoke the mode command with a prefix argument, the minor mode is unconditionally turned off if that argument is zero or negative; otherwise, it is unconditionally turned on.</li>
<li>If the mode command is called via Lisp, the minor mode is unconditionally turned on if the argument is omitted or nil. This makes it easy to turn on a minor mode from a major mode's mode hook (see <a href="#Major-Modes">Major Modes</a>). A non-nil argument is handled like an interactive prefix argument, as described above.</li>
</ul>
<p class="tab">Most minor modes also have a mode variable, with the same name as the mode command. Its value is non-nil if the mode is enabled, and nil if it's disabled. In general, don't try to enable or disable the mode by changing the value of the mode variable directly in Lisp; run the mode command instead. However, setting the mode variable through the Customize interface (see <a href="#Easy-Customization">Easy Customization</a>) always properly enables or disables the mode, as Customize automatically runs the mode command for you.<br><br>The following is a list of some buffer-local minor modes:</p>
<ul>
<li>Abbrev mode automatically expands text based on pre-defined abbreviation definitions. See <a href="#Abbrevs">Abbrevs</a>.</li>
<li>Auto Fill mode inserts newlines as you type to prevent lines from becoming too long. See <a href="#Filling">Filling</a>.</li>
<li>Auto Save mode saves the buffer contents periodically to reduce the amount of work you can lose in case of a crash. See <a href="#Auto-Save">Auto Save</a>.</li>
<li>Enriched mode enables editing and saving of formatted text. See <a href="#Enriched-Text">Enriched Text</a>.</li>
<li>Flyspell mode automatically highlights misspelled words. See <a href="#Spelling">Spelling</a>.</li>
<li>Font-Lock mode automatically highlights certain textual units found in programs. It is enabled globally by default, but you can disable it in individual buffers. See <a href="#Faces">Faces</a>.</li>
<li>Linum mode displays each line's line number in the window's left margin.</li>
<li>Outline minor mode provides similar facilities to the major mode called Outline mode. See <a href="#Outline-Mode">Outline Mode</a>.</li>
<li>Overwrite mode causes ordinary printing characters to replace existing text instead of shoving it to the right. For example, if point is in front of the '<b>B</b>' in '<b>FOOBAR</b>', then in Overwrite mode typing a <b>G</b> changes it to '<b>FOOGAR</b>', instead of producing '<b>FOOGBAR</b>' as usual. In Overwrite mode, the command <b>C-q</b> inserts the next character whatever it may be, even if it's a digit&mdash;this gives you a way to insert a character instead of replacing an existing character. The mode command, <b>overwrite-mode</b>, is bound to the <b>&lt;Insert&gt;</b> key.</li>
<li>Binary Overwrite mode is a variant of Overwrite mode for editing binary files; it treats newlines and tabs like other characters, so that they overwrite other characters and can be overwritten by them. In Binary Overwrite mode, digits after <b>C-q</b> specify an octal character code, as usual.</li>
<li>Visual Line mode performs "word wrapping", causing long lines to be wrapped at word boundaries. See <a href="#Visual-Line-Mode">Visual Line Mode</a>.</li>
</ul>
<p class="tab">And here are some useful global minor modes:</p>
<ul>
<li>Column Number mode enables display of the current column number in the mode line. See <a href="#Mode-Line">Mode Line</a>.</li>
<li>Delete Selection mode causes text insertion to first delete the text in the region, if the region is active. See <a href="#Using-Region">Using Region</a>.</li>
<li>Icomplete mode displays an indication of available completions when you are in the minibuffer and completion is active. See <a href="#Completion-Options">Options</a>.</li>
<li>Line Number mode enables display of the current line number in the mode line. It is enabled by default. See <a href="#Mode-Line">Mode Line</a>.</li>
<li>Menu Bar mode gives each frame a menu bar. It is enabled by default. See <a href="#Menu-Bars">Menu Bars</a>.</li>
<li>Scroll Bar mode gives each window a scroll bar. It is enabled by default, but the scroll bar is only displayed on graphical terminals. See <a href="#Scroll-Bars">Scroll Bars</a>.</li>
<li>Tool Bar mode gives each frame a tool bar. It is enabled by default, but the tool bar is only displayed on graphical terminals. See <a href="#Tool-Bars">Tool Bars</a>.</li>
<li>Transient Mark mode highlights the region, and makes many Emacs commands operate on the region when the mark is active. It is enabled by default. See <a href="#Mark">Mark</a>.</li>
</ul>
<h2 id="Choosing-Modes">Choosing file modes</h2>
<p class="tab">When you visit a file, Emacs chooses a major mode automatically. Normally, it makes the choice based on the file name&mdash;for example, files whose names end in '<b>.c</b>' are normally edited in C mode&mdash;but sometimes it chooses the major mode based on special text in the file. This special text can also be used to enable buffer-local minor modes.<br><br>Here is the exact procedure:<br><br>First, Emacs checks whether the file contains file-local mode variables. See <a href="#File-Variables">File Variables</a>. If there is a file-local variable that specifies a major mode, then Emacs uses that major mode, ignoring all other criteria. There's several methods to specify a major mode using a file-local variable; the simplest is to put the mode name in the first nonblank line, preceded and followed by '<b>-*-</b>'. Other text may appear on the line as well. For example,</p>
<pre class="tab tcy">; -*-Lisp-*-</pre>
<p class="tab">Tells Emacs to use Lisp mode. Note how the semicolon is used to make Lisp treat this line as a comment. You could equivalently write</p>
<pre class="tab tcy">; -*- mode: Lisp;-*-</pre>
<p class="tab">You can also use file-local variables to specify buffer-local minor modes, using eval specifications. For example, this first nonblank line puts the buffer in Lisp mode and enables Auto-Fill mode:</p>
<pre class="tab tcy">; -*- mode: Lisp; eval: (auto-fill-mode 1); -*-</pre>
<p class="tab">Note, however, that it is usually inappropriate to enable minor modes this way, as most minor modes represent individual user preferences. If you personally want to use a minor mode for a particular file type, it is better to enable the minor mode via a major mode hook (see <a href="#Major-Modes">Major Modes</a>).<br><br>Second, if there is no file variable specifying a major mode, Emacs checks whether the file's contents begin with '<b>#!</b>'. If so, that indicates that the file can serve as an executable shell command, which works by running an interpreter named on the file's first line (the rest of the file is used as input to the interpreter). Therefore, Emacs tries to use the interpreter name to choose a mode. For instance, a file that begins with '<b>#!/usr/bin/perl</b>' is opened in Perl mode. The variable <b>interpreter-mode-alist</b> specifies the correspondence between interpreter program names and major modes.<br><br>When the first line starts with '<b>#!</b>', you usually cannot use the '<b>-*-</b>' feature on the first line, because the system would get confused when running the interpreter. So Emacs looks for '<b>-*-</b>' on the second line in such files and on the first line. The same is true for man pages which start with the magic string '<b>'\"</b>' to specify a list of troff preprocessors.<br><br>Third, Emacs tries to determine the major mode by looking at the text at the start of the buffer, based on the variable <b>magic-mode-alist</b>. By default, this variable is <b>nil</b> (an empty list), so Emacs skips this step; however, you can customize it in your init file (see <a href="#Init-File">Init File</a>). The value should be a list of elements of the form</p>
<pre class="tab tcy">(regexp . mode-function)</pre>
<p class="tab">Where regexp is a regular expression (see <a href="#Regexps">Regexps</a>), and <b>mode-function</b> is a major mode command. If the text at the beginning of the file matches <b>regexp</b>, Emacs chooses the major mode specified by <b>mode-function</b>.<br><br>Alternatively, an element of <b>magic-mode-alist</b> may have the form</p>
<pre class="tab tcy">(match-function . mode-function)</pre>
<p class="tab">Where <b>match-function</b> is a Lisp function that is called at the beginning of the buffer; if the function returns non-nil, Emacs set the major mode with <b>mode-function</b>.<br><br>Fourth&mdash;if Emacs still hasn't found a suitable major mode&mdash;it looks at the file's name. The correspondence between file names and major modes is controlled by the variable <b>auto-mode-alist</b>. Its value is a list where each element has this form,</p>
<pre class="tab tcy">(regexp . mode-function)</pre>
<p class="tab">Or this form,</p>
<pre class="tab tcy">(regexp mode-function flag)</pre>
<p class="tab">For example, one element normally found in the list has the form <b>("\\.c\\'" . c-mode)</b>, and it is responsible for selecting C mode for files whose names end in .c. (Note that '<b>\\</b>' is needed in Lisp syntax to include a '<b>\</b>' in the string, which must be used to suppress the special meaning of '<b>.</b>' in regexps.) If the element has the form <b>(regexp mode-function flag)</b> and flag is non-nil, then after calling <b>mode-function</b>, Emacs discards the suffix that matched regexp and searches the list again for another match.<br><br>On GNU/Linux and other systems with case-sensitive file names, Emacs performs a case-sensitive search through <b>auto-mode-alist</b>; if this search fails, it performs a second case-insensitive search through the <b>alist</b>. To suppress the second search, change the variable <b>auto-mode-case-fold</b> to <b>nil</b>. On systems with case-insensitive file names, such as Microsoft Windows, Emacs performs a single case-insensitive search through <b>auto-mode-alist</b>.<br><br>Finally, if Emacs still hasn't found a major mode to use, it compares the text at the start of the buffer to the variable <b>magic-fallback-mode-alist</b>. This variable works like <b>magic-mode-alist</b>, described above, except that is consulted only after <b>auto-mode-alist</b>. By default, <b>magic-fallback-mode-alist</b> contains forms that check for image files, HTML/XML/SGML files, and PostScript files.<br><br>If you have changed the major mode of a buffer, you can return to the major mode Emacs would have chosen automatically, by typing <b>M-x normal-mode</b>. This is the same function that find-file calls to choose the major mode. It also processes the file's '<b>-*-</b>' line or local variables list (if any). See <a href="#File-Variables">File Variables</a>.<br><br>The commands <b>C-x C-w</b> and <b>set-visited-file-name</b> change to a new major mode if the new file name implies a mode (see <a href="#Saving">Saving</a>). (<b>C-x C-s</b> does this too, if the buffer wasn't visiting a file.) However, this does not happen if the buffer contents specify a major mode, and certain "special" major modes do not allow the mode to change. You can turn off this mode-changing feature by setting <b>change-major-mode-with-file-name</b> to <b>nil</b>.</p>
<h2 id="Indentation">Indentation</h2>
<p class="tab">Indentation refers to inserting or adonlying whitespace characters (space and/or tab characters) at the beginning of a line of text. This chapter documents indentation commands and options which are common to Text mode and related modes, and programming language modes. See <a href="#Program-Indent">Program Indent</a>, for additional documentation about indenting in programming modes.<br><br>The simplest way to perform indentation is the <b>&lt;TAB&gt;</b> key. In most major modes, this runs the command <b>indent-for-tab-command</b>. (In C and related modes, <b>&lt;TAB&gt;</b> runs the command <b>c-indent-line-or-region</b>, which behaves similarly).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>&lt;TAB&gt;</b></td>
<td>Insert whitespace, or indent the current line, in a mode-appropriate way (<b>indent-for-tab-command</b>). If the region is active, indent all the lines within it.</td>
</tr>
</table>
<p class="tab">The exact behavior of <b>&lt;TAB&gt;</b> depends on the major mode. In Text mode and related major modes, <b>&lt;TAB&gt;</b> normally inserts some combination of space and tab characters to advance point to the next tab stop (see <a href="#Tab-Stops">Tab Stops</a>). For this purpose, the position of the first non-whitespace character on the preceding line is treated as an additional tab stop, so you can use <b>&lt;TAB&gt;</b> to "align" point with the preceding line. If the region is active (see <a href="#Using-Region">Using Region</a>), <b>&lt;TAB&gt;</b> acts specially: it indents each line in the region so that its first non-whitespace character is aligned with the preceding line.<br><br>In programming modes, <b>&lt;TAB&gt;</b> indents the current line of code in a way that makes sense given the code in the preceding lines. If the region is active, all the lines in the region are indented this way. If point was initially in the current line's indentation, it is repositioned to the first non-whitespace character on the line.<br><br>If you only want to insert a tab character in the buffer, type <b>C-q &lt;TAB&gt;</b> (see <a href="#Inserting-Text">Inserting Text</a>).</p>
<ul>
<li><a href="#Indentation-Commands">Indentation Commands</a>: More commands for performing indentation.</li>
<li><a href="#Tab-Stops">Tab Stops</a>: Stop points for indentation in Text modes.</li>
<li><a href="#Just-Spaces">Just Spaces</a>: Using only space characters for indentation.</li>
<li><a href="#Indent-Convenience">Indent Convenience</a>: Optional indentation features.</li>
</ul>
<h2 id="Indentation-Commands">Indentation commands</h2>
<p class="tab">Apart from the <b>&lt;TAB&gt;</b> (<b>indent-for-tab-command</b>) command, Emacs provides a variety of commands to perform indentation in other ways.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>C-j</b></td>
<td>Perform <b>&lt;RET&gt;</b> followed by <b>&lt;TAB&gt;</b> (<b>newline-and-indent</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-o</b></td>
<td>Split the current line at point (<b>split-line</b>). The text on the line after point becomes a new line, indented to the same column where point is located. This command first moves point forward over any spaces and tabs. Afterward, point is positioned before the inserted newline.</td>
</tr>
<tr class="tcw">
<td><b>M-m</b></td>
<td>Move (forward or back) to the first non-whitespace character on the current line (<b>back-to-indentation</b>). If there are no non-whitespace characters on the line, move to the end of the line.</td>
</tr>
<tr class="tcw">
<td><b>M-i</b></td>
<td>Indent whitespace at point, up to the next tab stop (<b>tab-to-tab-stop</b>). See <a href="#Tab-Stops">Tab Stops</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-x indent-relative</b></td>
<td>Insert whitespace at point, until point is aligned with the first non-whitespace character on the previous line (actually, the last non-blank line). If point is already farther right than that, run <b>tab-to-tab-stop</b> instead&mdash;unless called with a numeric argument, then do nothing.</td>
</tr>
<tr class="tcw">
<td><b>M-^</b></td>
<td>Merge the previous and the current line (<b>delete-indentation</b>). This "joins" the two lines cleanly, by replacing any indentation at the front of the current line, together with the line boundary, with a single space.<br><br>As a special case (useful for Lisp code), the single space is omitted if the characters to be joined are consecutive opening and closing parentheses, or if the junction follows another newline.<br><br>If there is a fill prefix, <b>M-^</b> deletes the fill prefix if it appears after the newline that is deleted. See <a href="#Fill-Prefix">Fill Prefix</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-M-\</b></td>
<td>Indent all the lines in the region, as though you had typed <b>&lt;TAB&gt;</b> at the beginning of each line (<b>indent-region</b>).<br><br>If a numeric argument is supplied, indent every line in the region to that column number.</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;TAB&gt;</b></td>
<td>Shift each line in the region by a fixed distance, to the right or left (<b>indent-rigidly</b>). The distance to move is determined by the numeric argument (positive to move rightward, negative to move leftward).<br><br>This command can remove all indentation from the lines in the region, by invoking it with a large negative argument, e.g., <b>C-u -1000 C-x &lt;TAB&gt;</b>.</td>
</tr>
</table>
<h2 id="Tab-Stops">Tab stops</h2>
<p class="tab">Emacs defines certain column numbers to be tab stops. These are used as stopping points by <b>&lt;TAB&gt;</b> when inserting whitespace in Text mode and related modes (see <a href="#Indentation">Indentation</a>), and by commands like <b>M-i</b> (see <a href="#Indentation-Commands">Indentation Commands</a>). By default, tab stops are located every 8 columns. These positions are stored in the variable <b>tab-stop-list</b>, whose value is a list of column numbers in increasing order.<br><br>Instead of customizing the variable <b>tab-stop-list</b> directly, a convenient way to view and set tab stops is via the command <b>M-x edit-tab-stops</b>. This switches to a buffer containing a description of the tab stop settings, which looks like this:</p>
<pre class="tab">       :       :       :       :       :       :
0         1         2         3         4
0123456789012345678901234567890123456789012345678
To install changes, type C-c C-c
</pre>
<p class="tab">The first line contains a colon at each tab stop. The numbers on the next two lines are present only to indicate where the colons are.<br><br>You can edit this buffer to specify different tab stops by placing colons on the desired columns. The buffer uses Overwrite mode (see <a href="#Minor-Modes">Minor Modes</a>). When you are done, type <b>C-c C-c</b> to make the new tab stops take effect. Normally, the new tab stop settings apply to all buffers. However, if you have made the <b>tab-stop-list</b> variable local to the buffer where you called <b>M-x edit-tab-stops</b> (see <a href="#Locals">Locals</a>), then the new tab stop settings apply only to that buffer. To save the tab stop settings for future Emacs sessions, use the Customize interface to save the value of <b>tab-stop-list</b> (see <a href="#Easy-Customization">Easy Customization</a>).<br><br>Note that the tab stops discussed in this section have nothing to do with how tab characters are displayed in the buffer. Tab characters are always displayed as empty spaces extending to the next display tab stop. See <a href="#Text-Display">Text Display</a>.</p>
<h2 id="Just-Spaces">Tabs vs. spaces</h2>
<p class="tab">Normally, indentation commands insert (or remove) an optimal mix of space characters and tab characters to align to the desired column. Tab characters are displayed as a stretch of empty space extending to the next display tab stop. By default, there is one display tab stop every tab-width columns (the default is 8). See <a href="#Text-Display">Text Display</a>.<br><br>If you prefer, all indentation can be made from spaces only. To request this, set the buffer-local variable <b>indent-tabs-mode</b> to <b>nil</b>. See <a href="#Locals">Locals</a>, for information about setting buffer-local variables. Note, however, that <b>C-q &lt;TAB&gt;</b> always inserts a tab character, regardless of the value of <b>indent-tabs-mode</b>.<br><br>One reason to set <b>indent-tabs-mode</b> to <b>nil</b> is that not all editors display tab characters in the same way. Emacs users, too, may have different customized values of <b>tab-width</b>. Using spaces only, you can make sure your file always looks the same. If you only care about how it looks within Emacs, another way to tackle this problem is to set the <b>tab-width</b> variable in a file-local variable (see <a href="#File-Variables">File Variables</a>). There are also commands to convert tabs to spaces or vice versa, always preserving the columns of all non-whitespace text. <b>M-x tabify</b> scans the region for sequences of spaces, and converts sequences of at least two spaces to tabs if done without changing indentation. <b>M-x untabify</b> changes all tabs in the region to appropriate numbers of spaces.</p>
<h2 id="Indent-Convenience">Convenience features for indentation</h2>
<p class="tab">The variable <b>tab-always-indent</b> tweaks the behavior of the <b>&lt;TAB&gt;</b> (<b>indent-for-tab-command</b>) command. The default value, <b>t</b>, gives the behavior described in Indentation. If you change the value to the symbol complete, then <b>&lt;TAB&gt;</b> first tries to indent the current line, and if the line was already indented, it tries to complete the text at point (see <a href="#Symbol-Completion">Symbol Completion</a>). If the value is <b>nil</b>, then <b>&lt;TAB&gt;</b> indents the current line only if point is at the left margin or in the line's indentation; otherwise, it inserts a tab character.<br><br>Electric Indent mode is a global minor mode that automatically indents the line after every <b>&lt;RET&gt;</b> you type. To toggle this minor mode, type <b>M-x electric-indent-mode</b>.</p>
<h2 id="Text">Commands for human languages</h2>
<p class="tab">This chapter describes Emacs commands that act on text, by which we mean sequences of characters in a human language (as opposed to, say, a computer programming language). These commands act in ways that take into account the syntactic and stylistic conventions of human languages: conventions involving words, sentences, paragraphs, and capital letters. There are also commands for filling, which means rearranging the lines of a paragraph to be approximately equal in length. These commands, while intended primarily for editing text, are also often useful for editing programs.<br><br>Emacs has several major modes for editing human-language text. If the file contains ordinary text, use Text mode, which customizes Emacs in small ways for the syntactic conventions of text. Outline mode provides special commands for operating on text with an outline structure. Org mode extends Outline mode and turn Emacs into a full-fledged organizer: you can manage TODO lists, store notes and publish them in many formats.<br><br>Emacs has other major modes for text which contains "embedded" commands, such as TeX and LaTeX (see TeX Mode); HTML and SGML (see <a href="#HTML-Mode">HTML Mode</a>); XML (see the nXML mode Info manual, which is distributed with Emacs); and Groff and Nroff (see <a href="#Nroff-Mode">Nroff Mode</a>).<br><br>If you need to edit pictures made out of text characters (commonly referred to as "<a href="/jargon/a/asciiart.htm">ASCII art</a>"), use Picture mode, a special major mode for editing such pictures. See <a href="#Picture-Mode">Picture Mode</a>.</p>
<ul>
<li><a href="#Words">Words</a>: Moving over and killing words.</li>
<li><a href="#Sentences">Sentences</a>: Moving over and killing sentences.</li>
<li><a href="#Paragraphs">Paragraphs</a>: Moving over paragraphs.</li>
<li><a href="#Pages">Pages</a>: Moving over pages.</li>
<li><a href="#Filling">Filling</a>: Filling or onlyifying text.</li>
<li><a href="#Case">Case</a>: Changing the case of text.</li>
<li><a href="#Text-Mode">Text Mode</a>: The major modes for editing text files.</li>
<li><a href="#Outline-Mode">Outline Mode</a>: Editing outlines.</li>
<li><a href="#Org-Mode">Org Mode</a>: The Emacs organizer.</li>
<li><a href="#TeX-Mode">TeX Mode</a>: Editing TeX and LaTeX files.</li>
<li><a href="#HTML-Mode">HTML Mode</a>: Editing HTML and SGML files.</li>
<li><a href="#Nroff-Mode">Nroff Mode</a>: Editing input to the nroff formatter.</li>
<li><a href="#Enriched-Text">Enriched Text</a>: Editing text "enriched" with fonts, colors, etc.</li>
<li><a href="#Text-Based-Tables">Text Based Tables</a>: Commands for editing text-based tables.</li>
<li><a href="#Two_002dColumn">Two-Column</a>: Splitting text columns into separate windows.</li>
</ul>
<h2 id="Words">Words</h2>
<p class="tab">Emacs defines several commands for moving over or operating on words:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>M-f</b></td>
<td>Move forward over a word (<b>forward-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-b</b></td>
<td>Move backward over a word (<b>backward-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-d</b></td>
<td>Kill up to the end of a word (<b>kill-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;DEL&gt;</b></td>
<td>Kill back to the beginning of a word (<b>backward-kill-word</b>).</td>
</tr>
<tr class="tcw">
<td><b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a5e888e5">[email&#160;protected]</a></b></td>
<td>Mark the end of the next word (<b>mark-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-t</b></td>
<td>Transpose two words or drag a word across others (<b>transpose-words</b>).</td>
</tr>
</table>
<p class="tab">Notice how these keys form a series that parallels the character-based <b>C-f</b>, <b>C-b</b>, <b>C-d</b>, <b>&lt;DEL&gt;</b> and <b>C-t</b>. <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="15583855">[email&#160;protected]</a></b> is cognate to <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b8fb95f8">[email&#160;protected]</a></b>, which is an alias for <b>C-&lt;SPC&gt;</b>.<br><br>The commands <b>M-f</b> (<b>forward-word</b>) and <b>M-b</b> (<b>backward-word</b>) move forward and backward over words. These <b>&lt;Meta&gt;</b>-based key sequences are analogous to the key sequences <b>C-f</b> and <b>C-b</b>, which move over single characters. The analogy extends to numeric arguments, which serve as repeat counts. <b>M-f</b> with a negative argument moves backward, and <b>M-b</b> with a negative argument moves forward. Forward motion stops right after the last letter of the word, while backward motion stops right before the first letter.<br><br><b>M-d</b> (<b>kill-word</b>) kills the word after point. To be precise, it kills everything from point to the place where <b>M-f</b> would move. Thus, if point is in the middle of a word, <b>M-d</b> kills only the part after point. If some punctuation comes between point and the next word, it is killed along with the word. (If you want to kill only the next word but not the punctuation before it, do <b>M-f</b> to get the end, and kill the word backwards with <b>M-&lt;DEL&gt;</b>.) <b>M-d</b> takes arguments only like <b>M-f</b>.<br><br><b>M-&lt;DEL&gt;</b> (<b>backward-kill-word</b>) kills the word before point. It kills everything from point back to where <b>M-b</b> would move. For instance, if point is after the space in '<b>FOO, BAR</b>', it kills '<b>FOO,</b> '. If you want to kill only '<b>FOO</b>', and not the comma and the space, use <b>M-b M-d</b> instead of <b>M-&lt;DEL&gt;</b>.<br><br><b>M-t</b> (<b>transpose-words</b>) exchanges the word before or containing point with the following word. The delimiter characters between the words do not move. For example, '<b>FOO, BAR</b>' transposes into '<b>BAR, FOO</b>' rather than '<b>BAR FOO,</b>'. See <a href="#Transpose">Transpose</a>, for more on transposition.<br><br>To operate on words with an operation which acts on the region, use the command <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9dd0b0dd">[email&#160;protected]</a></b> (<b>mark-word</b>). This command sets the mark where <b>M-f</b> would move. See <a href="#Marking-Objects">Marking Objects</a>, for more information about this command.<br><br>The word commands' understanding of word boundaries is controlled by the syntax table. Any character can, for example, be declared to be a word delimiter.<br><br>Also, see <a href="#Position-Info">Position Info</a> for the <b>M-=</b> (<b>count-words-region</b>) and <b>M-x count-words</b> commands, which count and report the number of words in the region or buffer.</p>
<h2 id="Sentences">Sentences</h2>
<p class="tab">The Emacs commands for manipulating sentences and paragraphs are mostly on Meta keys, like the word-handling commands.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>M-a</b></td>
<td>Move back to the beginning of the sentence (<b>backward-sentence</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-e</b></td>
<td>Move forward to the end of the sentence (<b>forward-sentence</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-k</b></td>
<td>Kill forward to the end of the sentence (<b>kill-sentence</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x &lt;DEL&gt;</b></td>
<td>Kill back to the beginning of the sentence (<b>backward-kill-sentence</b>).</td>
</tr>
</table>
<p class="tab">The commands <b>M-a</b> (<b>backward-sentence</b>) and <b>M-e</b> (<b>forward-sentence</b>) move to the beginning and end of the current sentence, respectively. Their bindings were chosen to resemble <b>C-a</b> and <b>C-e</b>, which move to the beginning and end of a line. Unlike them, <b>M-a</b> and <b>M-e</b> move over successive sentences if repeated.<br><br>Moving backward over a sentence places point only before the first character of the sentence; moving forward places point right after the punctuation that ends the sentence. Neither one moves over the whitespace at the sentence boundary.<br><br>As <b>C-a</b> and <b>C-e</b> have a kill command, <b>C-k</b>, to go with them, <b>M-a</b> and <b>M-e</b> have a corresponding kill command: <b>M-k</b> (<b>kill-sentence</b>) kills from point to the end of the sentence. With a positive numeric argument <b>n</b>, it kills the next <b>n</b> sentences; with a negative argument <b>&minus;n</b>, it kills back to the beginning of the <b>n</b>th preceding sentence.<br><br>The <b>C-x &lt;DEL&gt;</b> (<b>backward-kill-sentence</b>) kills back to the beginning of a sentence.<br><br>The sentence commands assume that you follow the American typist's convention of putting two spaces at the end of a sentence. That is, a sentence ends wherever there is a '<b>.</b>', '<b>?</b>' or '<b>!</b>' followed by the end of a line or two spaces, with any number of '<b>)</b>', '<b>]</b>', '<b>'</b>', or '<b>"</b>' characters allowed between. A sentence also begins or ends wherever a paragraph begins or ends. It is useful to follow this convention, because it allows the Emacs sentence commands to distinguish between periods that end a sentence and periods that indicate abbreviations.<br><br>If you want to use only one space between sentences, you can set the variable <b>sentence-end-double-space</b> to <b>nil</b> to make the sentence commands stop for single spaces. However, this has a drawback: there is no way to distinguish between periods that end sentences and those that indicate abbreviations. For convenient and reliable editing, we recommend you follow the two-space convention. The variable <b>sentence-end-double-space</b> also affects filling (see <a href="#Fill-Commands">Fill Commands</a>).<br><br>The variable <b>sentence-end</b> controls how to recognize the end of a sentence. If non-nil, its value should be a regular expression, which is used to match the last few characters of a sentence, together with the whitespace following the sentence (see <a href="#Regexps">Regexps</a>). If the value is <b>nil</b>, the default, then Emacs computes sentence ends according to various criteria such as the value of <b>sentence-end-double-space</b>.<br><br>Some languages, such as Thai, do not use periods to indicate the end of a sentence. Set the variable <b>sentence-end-without-period</b> to <b>t</b> in such cases.</p>
<h2 id="Paragraphs">Paragraphs</h2>
<p class="tab">The Emacs commands for manipulating paragraphs are also on Meta keys.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>M-{</b></td>
<td>Move back to previous paragraph beginning (<b>backward-paragraph</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-}</b></td>
<td>Move forward to the next paragraph end (<b>forward-paragraph</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-h</b></td>
<td>Put point and mark around this or next paragraph (<b>mark-paragraph</b>).</td>
</tr>
</table>
<p class="tab"><b>M-{</b> (<b>backward-paragraph</b>) moves to the beginning of the current or previous paragraph (see below for the definition of a paragraph). <b>M-}</b> (<b>forward-paragraph</b>) moves to the end of the current or next paragraph. If there is a blank line before the paragraph, <b>M-{</b> moves to the blank line.<br><br>When you want to operate on a paragraph, type <b>M-h</b> (<b>mark-paragraph</b>) to set the region around it. For example, <b>M-h C-w</b> kills the paragraph around or after point. <b>M-h</b> puts point at the beginning and mark at the end of the paragraph point was in. If point is between paragraphs (in a run of blank lines, or at a boundary), <b>M-h</b> sets the region around the paragraph following point. If there are blank lines preceding the first line of the paragraph, one of these blank lines is included in the region. If the region is already active, the command sets the mark without changing point, and each subsequent <b>M-h</b> further advances the mark by one paragraph.<br><br>The definition of a paragraph depends on the major mode. In Fundamental mode, Text mode, and related modes, a paragraph is separated each neighboring paragraph another by one or more blank lines&mdash;lines that are either empty, or consist solely of space, tab and/or formfeed characters. In programming language modes, paragraphs are usually defined in a similar way, so that you can use the paragraph commands even though there are no paragraphs as such in a program.<br><br>Note that an indented line is not itself a paragraph break in Text mode. If you want indented lines to separate paragraphs, use Paragraph-Indent Text mode instead. See <a href="#Text-Mode">Text Mode</a>.<br><br>If you set a fill prefix, then paragraphs are delimited by all lines which don't start with the fill prefix. See <a href="#Filling">Filling</a>.<br><br>The precise definition of a paragraph boundary is controlled by the variables <b>paragraph-separate</b> and <b>paragraph-start</b>. The value of <b>paragraph-start</b> is a regular expression that should match lines that either start or separate paragraphs (see <a href="#Regexps">Regexps</a>). The value of <b>paragraph-separate</b> is another regular expression that should match lines that separate paragraphs without being part of any paragraph (for example, blank lines). Lines that start a new paragraph and are contained in it must match only <b>paragraph-start</b>, not <b>paragraph-separate</b>. For example, in Fundamental mode, <b>paragraph-start</b> is "\f\\|[ \t]*$", and <b>paragraph-separate</b> is "[ \t\f]*$".</p>
<h2 id="Pages">Pages</h2>
<p class="tab">Within some text files, text is divided into pages delimited by the formfeed character (ASCII code 12, also denoted as <b>&lt;control-L&gt;</b>), which is displayed in Emacs as the escape sequence '<b>^L</b>' (see <a href="#Text-Display">Text Display</a>). Traditionally, when such text files are printed to hardcopy, each formfeed character forces a page break. Most Emacs commands treat it only like any other character, so you can insert it with <b>C-q C-l</b>, delete it with <b>&lt;DEL&gt;</b>, etc. Also, Emacs provides commands to move over pages and operate on them.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>M-x what-page</b></td>
<td>Display the page number of point, and the line number within that page.</td>
</tr>
<tr class="tcw">
<td><b>C-x [</b></td>
<td>Move point to previous page boundary (<b>backward-page</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x ]</b></td>
<td>Move point to the next page boundary (<b>forward-page</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-p</b></td>
<td>Put point and mark around this page (or another page) (<b>mark-page</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x l</b></td>
<td>Count the lines in this page (<b>count-lines-page</b>).</td>
</tr>
</table>
<p class="tab"><b>M-x what-page</b> counts pages from the beginning of the file, and counts lines in the page, showing both numbers in the echo area.<br><br>The <b>C-x [</b> (<b>backward-page</b>) command moves point to immediately after the previous page delimiter. If point is already right after a page delimiter, it skips that one and stops at the previous one. A numeric argument serves as a repeat count. The <b>C-x ]</b> (<b>forward-page</b>) command moves forward past the next page delimiter.<br><br>The <b>C-x C-p</b> command (<b>mark-page</b>) puts point at the beginning of the current page (after that page delimiter at the front), and the mark at the end of the page (after the page delimiter at the end).<br><br><b>C-x C-p C-w</b> is a handy way to kill a page to move it elsewhere. If you move to another page delimiter with <b>C-x [</b> and <b>C-x ]</b>, then yank the killed page, all the pages are properly delimited once again. The reason <b>C-x C-p</b> includes only the following page delimiter in the region is to ensure that.<br><br>A numeric argument to <b>C-x C-p</b> specifies which page to go to, relative to the current one. Zero means the current page, one the next page, and &minus;1 the previous one.<br><br>The <b>C-x l</b> command (<b>count-lines-page</b>) is good for deciding where to break a page in two. It displays in the echo area the total number of lines in the current page, and then divides it up into those preceding the current line and those following, as in</p>
<pre class="tab tcy">Page has 96 (72+25) lines</pre>
<p class="tab">Notice that the sum is off by one; this is correct if point is not at the beginning of a line.<br><br>The variable <b>page-delimiter</b> controls where pages begin. Its value is a regular expression that matches the beginning of a line that separates pages (see <a href="#Regexps">Regexps</a>). The normal value of this variable is "^\f", which matches a formfeed character at the beginning of a line.</p>
<h2 id="Filling">Filling text</h2>
<p class="tab">Filling text means breaking it up into lines that fit a specified width. Emacs does filling in two ways. In Auto Fill mode, inserting text with self-inserting characters also automatically fills it. There are also explicit fill commands that you can use when editing text.</p>
<ul>
<li><a href="#Auto-Fill">Auto Fill</a>: Auto Fill mode breaks long lines automatically.</li>
<li><a href="#Fill-Commands">Fill Commands</a>: Commands to refill paragraphs and center lines.</li>
<li><a href="#Fill-Prefix">Fill Prefix</a>: Filling paragraphs that are indented or in a comment, etc.</li>
<li><a href="#Adaptive-Fill">Adaptive Fill</a>: How Emacs can determine the fill prefix automatically.</li>
</ul>
<h2 id="Auto-Fill">Auto fill mode</h2>
<p class="tab">Auto Fill mode is a buffer-local minor mode (see <a href="#Minor-Modes">Minor Modes</a>) where lines are broken automatically when they become too wide. Breaking happens only when you type a <b>&lt;SPC&gt;</b> or <b>&lt;RET&gt;</b>.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>M-x auto-fill-mode</b></td>
<td>Enable or disable Auto Fill mode.</td>
</tr>
<tr class="tcw">
<td><b>&lt;SPC&gt;</b>, <b>&lt;RET&gt;</b></td>
<td>In Auto Fill mode, break lines when appropriate.</td>
</tr>
</table>
<p class="tab">The mode command <b>M-x auto-fill-mode</b> toggles Auto Fill mode in the current buffer. With a positive numeric argument, it enables Auto Fill mode, and with a negative argument it disables it. If <b>auto-fill-mode</b> is called from Lisp with an omitted or nil argument, it enables Auto Fill mode. To enable Auto Fill mode automatically in certain major modes, add <b>auto-fill-mode</b> to the mode hooks (see <a href="#Major-Modes">Major Modes</a>). When Auto Fill mode is enabled, the mode indicator '<b>Fill</b>' appears in the mode line (see <a href="#Mode-Line">Mode Line</a>).<br><br>Auto Fill mode breaks lines automatically at spaces whenever they get longer than the desired width. This line breaking occurs only when you type <b>&lt;SPC&gt;</b> or <b>&lt;RET&gt;</b>. If you want to insert a space or newline without permitting line-breaking, type <b>C-q &lt;SPC&gt;</b> or <b>C-q C-j</b> respectively. Also, <b>C-o</b> inserts a newline without line breaking.<br><br>When Auto Fill mode breaks a line, it tries to obey the adaptive fill prefix: if a fill prefix can be deduced from the first and/or second line of the current paragraph, it is inserted into the new line (see <a href="#Adaptive-Fill">Adaptive Fill</a>). Otherwise, the new line is indented, as though you had typed <b>&lt;TAB&gt;</b> on it (see <a href="#Indentation">Indentation</a>). In a programming language mode, if a line is broken in the middle of a comment, the comment is split by inserting new comment delimiters as appropriate.<br><br>Auto Fill mode does not refill entire paragraphs; it breaks lines but does not merge lines. Therefore, editing in the middle of a paragraph can result in a paragraph that is not correctly filled. To fill it, call the explicit fill commands (see <a href="#Fill-Commands">Fill Commands</a>).</p>
<h2 id="Fill-Commands">Explicit fill commands</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px"><b>M-q</b></td>
<td>Fill current paragraph (<b>fill-paragraph</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x f</b></td>
<td>Set the fill column (<b>set-fill-column</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x fill-region</b></td>
<td>Fill each paragraph in the region (<b>fill-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x fill-region-as-paragraph</b></td>
<td>Fill the region, considering it as one paragraph.</td>
</tr>
<tr class="tcw">
<td><b>M-o M-s</b></td>
<td>Center a line.</td>
</tr>
</table>
<p class="tab">The command <b>M-q</b> (<b>fill-paragraph</b>) fills the current paragraph. It redistributes the line breaks in the paragraph, and deletes any excess space and tab characters occurring in the paragraph, in such a way that the lines end up fitting within a certain maximum width.<br><br>Normally, <b>M-q</b> acts on the paragraph where point is, but if point is between paragraphs, it acts on the paragraph after point. If the region is active, it acts instead on the text in the region. You can also call <b>M-x fill-region</b> to specifically fill the text in the region.<br><br><b>M-q</b> and <b>fill-region</b> use the usual Emacs criteria for finding paragraph boundaries (see <a href="#Paragraphs">Paragraphs</a>). For more control, you can use <b>M-x fill-region-as-paragraph</b>, which refills everything between point and mark as a single paragraph. This command deletes any blank lines in the region, so separate blocks of text end up combined into one block.<br><br>A numeric argument to <b>M-q</b> tells it to onlyify the text and fill it. This means that extra spaces are inserted to make the right margin line up exactly at the fill column. To remove the extra spaces, use <b>M-q</b> with no argument. (Likewise for <b>fill-region</b>.)<br><br>The maximum line width for filling is specified by the buffer-local variable <b>fill-column</b>. The default value (see <a href="#Locals">Locals</a>) is 70. The easiest way to set <b>fill-column</b> in the current buffer is to use the command <b>C-x f</b> (<b>set-fill-column</b>). With a numeric argument, it uses that as the new fill column. With only <b>C-u</b> as argument, it sets <b>fill-column</b> to the current horizontal position of point.<br><br>The command <b>M-o M-s</b> (<b>center-line</b>) centers the current line in the current fill column. With an argument <b>n</b>, it centers <b>n</b> lines individually and moves past them. This binding is made by Text mode and is available only in that and related modes (see <a href="#Text-Mode">Text Mode</a>).<br><br>By default, Emacs considers a period followed by two spaces or by a newline as the end of a sentence; a period followed by only one space indicates an abbreviation, not the end of a sentence. Accordingly, the fill commands do not break a line after a period followed by only one space. If you set the variable <b>sentence-end-double-space</b> to <b>nil</b>, the fill commands break a line after a period followed by one space, and put only one space after each period. See <a href="#Sentences">Sentences</a>, for other effects and possible drawbacks of this.<br><br>If the variable <b>colon-double-space</b> is non-nil, the fill commands put two spaces after a colon.<br><br>To specify additional conditions where line-breaking is not allowed, customize the abnormal hook variable <b>fill-nobreak-predicate</b> (see <a href="#Hooks">Hooks</a>). Each function in this hook is called with no arguments, with point positioned where Emacs is considering breaking a line. If a function returns a non-nil value, Emacs does not break the line there. Two functions you can use are <b>fill-single-word-nobreak-p</b> (don't break after the first word of a sentence or before the last) and <b>fill-french-nobreak-p</b> (don't break after '<b>(</b>' or before '<b>)</b>', '<b>:</b>' or '<b>?</b>').</p>
<h2 id="Fill-Prefix">The fill prefix</h2>
<p class="tab">The fill prefix feature allows paragraphs to be filled so that each line starts with a special string of characters (such as a sequence of spaces, giving an indented paragraph). You can specify a fill prefix explicitly; otherwise, Emacs tries to deduce one automatically (see <a href="#Adaptive-Fill">Adaptive Fill</a>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>C-x .</b></td>
<td>Set the fill prefix (<b>set-fill-prefix</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-q</b></td>
<td>Fill a paragraph using current fill prefix (<b>fill-paragraph</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x fill-individual-paragraphs</b></td>
<td>Fill the region, considering each change of indentation as starting a new paragraph.</td>
</tr>
<tr class="tcw">
<td><b>M-x fill-nonuniform-paragraphs</b></td>
<td>Fill the region, considering only paragraph-separator lines as starting a new paragraph.</td>
</tr>
</table>
<p class="tab">To specify a fill prefix for the current buffer, move to a line that starts with the desired prefix, put point at the end of the prefix, and type <b>C-x .</b> (<b>set-fill-prefix</b>). (That's a period after the <b>C-x</b>.) To turn off the fill prefix, specify an empty prefix: type <b>C-x .</b> with point at the beginning of a line.<br><br>When a fill prefix is in effect, the fill commands remove the fill prefix from each line of the paragraph before filling, and insert it on each line after filling. (The beginning of the first line of the paragraph is left unchanged, as often that is intentionally different.) Auto Fill mode also inserts the fill prefix automatically when it makes a new line (see <a href="#Auto-Fill">Auto Fill</a>). The <b>C-o</b> command inserts the fill prefix on new lines it creates, when you use it at the beginning of a line (see <a href="#Blank-Lines">Blank Lines</a>). Conversely, the command <b>M-^</b> deletes the prefix (if it occurs) after the newline that it deletes (see <a href="#Indentation">Indentation</a>).<br><br>For example, if <b>fill-column</b> is 40 and you set the fill prefix to '<b>;;</b> ', then <b>M-q</b> in the following text</p>
<pre class="tab tcy">;; This is an ;; example of a paragraph ;; inside a Lisp-style comment.</pre>
<p class="tab">produces this:</p>
<pre class="tab tcy">;; This is an example of a paragraph ;; inside a Lisp-style comment.</pre>
<p class="tab">Lines that do not start with the fill prefix are considered to start paragraphs, both in <b>M-q</b> and the paragraph commands; this gives good results for paragraphs with hanging indentation (every line indented except the first one). Lines which are blank or indented once the prefix is removed also separate or start paragraphs; this is what you want if you are writing multi-paragraph comments with a comment delimiter on each line.<br><br>You can use <b>M-x fill-individual-paragraphs</b> to set the fill prefix for each paragraph automatically. This command divides the region into paragraphs, treating every change in the amount of indentation as the start of a new paragraph, and fills each of these paragraphs. Thus, all the lines in one "paragraph" have the same amount of indentation. That indentation serves as the fill prefix for that paragraph.<br><br><b>M-x fill-nonuniform-paragraphs</b> is a similar command that divides the region into paragraphs differently. It considers only paragraph-separating lines (as defined by <b>paragraph-separate</b>) as starting a new paragraph. Since this indicates the lines of one paragraph may have different amounts of indentation, the fill prefix used is the smallest amount of indentation of any of the lines of the paragraph. This gives good results with styles that indent a paragraph's first line more or less that the rest of the paragraph.<br><br>The fill prefix is stored in the variable <b>fill-prefix</b>. Its value is a string, or <b>nil</b> when there is no fill prefix. This is a per-buffer variable; altering the variable affects only the current buffer, but there is a default value which you can change as well. See <a href="#Locals">Locals</a>.<br><br>The indentation text property provides another way to control the amount of indentation paragraphs receive. See <a href="#Enriched-Indentation">Enriched Indentation</a>.</p>
<h2 id="Adaptive-Fill">Adaptive filling</h2>
<p class="tab">The fill commands can deduce the proper fill prefix for a paragraph automatically in certain cases: either whitespace or certain punctuation characters at the beginning of a line are propagated to all lines of the paragraph.<br><br>If the paragraph has two or more lines, the fill prefix is taken from the paragraph's second line, but only if it appears on the first line as well.<br><br>If a paragraph has only one line, fill commands may take a prefix from that line. The decision is complicated because there are three reasonable things to do in such a case:</p>
<ul>
<li>Use the first line's prefix on all the lines of the paragraph.</li>
<li>Indent subsequent lines with whitespace, so that they line up under the text that follows the prefix on the first line, but don't actually copy the prefix from the first line.</li>
<li>Don't do anything special with the second and following lines.</li>
</ul>
<p class="tab">All three of these styles of formatting are commonly used. So the fill commands try to determine what you would like, based on the prefix that appears and on the major mode. Here is how.<br><br>If the prefix found on the first line matches <b>adaptive-fill-first-line-regexp</b>, or if it appears to be a comment-starting sequence (this depends on the major mode), then the prefix found is used for filling the paragraph, provided it would not act as a paragraph starter on subsequent lines.<br><br>Otherwise, the prefix found is converted to an equivalent number of spaces, and those spaces are used as the fill prefix for the rest of the lines, provided they would not act as a paragraph starter on subsequent lines.<br><br>In Text mode, and other modes where only blank lines and page delimiters separate paragraphs, the prefix chosen by adaptive filling never acts as a paragraph starter, so it can always be used for filling.<br><br>The variable <b>adaptive-fill-regexp</b> determines what kinds of line beginnings can serve as a fill prefix: any characters at the start of the line that match this regular expression are used. If you set the variable <b>adaptive-fill-mode</b> to <b>nil</b>, the fill prefix is never chosen automatically.<br><br>You can specify more complex ways of choosing a fill prefix automatically by setting the variable <b>adaptive-fill-function</b> to a function. This function is called with point after the left margin of a line, and it should return the appropriate fill prefix based on that line. If it returns <b>nil</b>, <b>adaptive-fill-regexp</b> gets a chance to find a prefix.</p>
<h2 id="Case">Case conversion commands</h2>
<p class="tab">Emacs has commands for converting either a single word or any arbitrary range of text to uppercase or to lowercase.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>M-l</b></td>
<td>Convert following word to lowercase (<b>downcase-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-u</b></td>
<td>Convert following word to uppercase (<b>upcase-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-c</b></td>
<td>Capitalize the following word (<b>capitalize-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-l</b></td>
<td>Convert region to lowercase (<b>downcase-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-u</b></td>
<td>Convert region to uppercase (<b>upcase-region</b>).</td>
</tr>
</table>
<p class="tab"><b>M-l</b> (<b>downcase-word</b>) converts the word after point to lowercase, moving past it. Thus, repeating <b>M-l</b> converts successive words. <b>M-u</b> (<b>upcase-word</b>) converts to all capitals instead, while <b>M-c</b> (<b>capitalize-word</b>) puts the first letter of the word to uppercase and the rest into lowercase. All these commands convert several words at once if given an argument. They are especially convenient for converting a large amount of text from all uppercase to mixed case, because you can move through the text using <b>M-l</b>, <b>M-u</b> or <b>M-c</b> on each word as appropriate, occasionally using <b>M-f</b> instead to skip a word.<br><br>When given a negative argument, the word case conversion commands apply to the appropriate number of words before point, but do not move point. This is convenient when you have only typed a word in the wrong case: you can give the case conversion command and continue typing.<br><br>If a word case conversion command is given in the middle of a word, it applies only to the part of the word which follows point. (This is comparable to what <b>M-d</b> (<b>kill-word</b>) does.) With a negative argument, case conversion applies only to the part of the word before point.<br><br>The other case conversion commands are <b>C-x C-u</b> (<b>upcase-region</b>) and <b>C-x C-l</b> (<b>downcase-region</b>), which convert everything between point and mark to the specified case. Point and mark do not move.<br><br>The region case conversion commands <b>upcase-region</b> and <b>downcase-region</b> are normally disabled. This indicates they ask for confirmation if you try to use them. When you confirm, you may enable the command, which means it does not ask for confirmation again. See <a href="#Disabling">Disabling</a>.</p>
<h2 id="Text-Mode">Text mode</h2>
<p class="tab">Text mode is a major mode for editing files of text in a human language. Files which have names ending in the extension .txt are usually opened in Text mode (see <a href="#Choosing-Modes">Choosing Modes</a>). To explicitly switch to Text mode, type <b>M-x text-mode</b>.<br><br>In Text mode, only blank lines and page delimiters separate paragraphs. As a result, paragraphs can be indented, and adaptive filling determines what indentation to use when filling a paragraph. See <a href="#Adaptive-Fill">Adaptive Fill</a>.<br><br>In Text mode, the <b>&lt;TAB&gt;</b> (<b>indent-for-tab-command</b>) command usually inserts whitespace up to the next tab stop, instead of indenting the current line. See <a href="#Indentation">Indentation</a>, for details.<br><br>Text mode turns off the features concerned with comments except when you explicitly invoke them. It changes the syntax table so that single-quotes are considered part of words (e.g., '<b>don't</b>' is considered one word). However, if a word starts with a single-quote, it is treated as a prefix for capitalization (e.g., <b>M-c</b> converts '<b>'hello'</b>' to '<b>'Hello'</b>', as expected).<br><br>If you indent the first lines of paragraphs, then use Paragraph-Indent Text mode (<b>M-x paragraph-indent-text-mode</b>) rather than Text mode. In that mode, you do not need to have blank lines between paragraphs, because the first-line indentation is sufficient to start a paragraph; however paragraphs where every line is indented are not supported. Use <b>M-x paragraph-indent-minor-mode</b> to enable an equivalent minor mode for situations where you can't change the major mode&mdash;in mail composition, for instance.<br><br>Text mode binds <b>M-&lt;TAB&gt;</b> to <b>ispell-complete-word</b>. This command performs completion of the partial word in the buffer before point, using the spelling dictionary as the space of possible words. See <a href="#Spelling">Spelling</a>. If your window manager defines <b>M-&lt;TAB&gt;</b> to switch windows, you can type <b>&lt;ESC&gt; &lt;TAB&gt;</b> or <b>C-M-i</b> instead.<br><br>Entering Text mode runs the mode hook <b>text-mode-hook</b> (see <a href="#Major-Modes">Major Modes</a>).<br><br>The following sections describe several major modes that are derived from Text mode. These derivatives share most of the features of Text mode described above. In particular, derivatives of Text mode run <b>text-mode-hook</b> before running their mode hooks.</p>
<h2 id="Outline-Mode">Outline mode</h2>
<p class="tab">Outline mode is a major mode derived from Text mode, which is specialized for editing outlines. It provides commands to navigate between entries in the outline structure, and commands to make parts of a buffer temporarily invisible, so that the outline structure may be more easily viewed. Type <b>M-x outline-mode</b> to switch to Outline mode. Entering Outline mode runs the hook <b>text-mode-hook</b> followed by the hook <b>outline-mode-hook</b> (see <a href="#Hooks">Hooks</a>).<br><br>When you use an Outline mode command to make a line invisible (see <a href="#Outline-Visibility">Outline Visibility</a>), the line disappears from the screen. An ellipsis (three periods in a row) is displayed at the end of the previous visible line, to indicate the hidden text. Multiple consecutive invisible lines produce only one ellipsis.<br><br>Editing commands that operate on lines, such as <b>C-n</b> and <b>C-p</b>, treat the text of the invisible line as part of the previous visible line. Killing the ellipsis at the end of a visible line really kills all the following invisible text associated with the ellipsis.<br><br>Outline minor mode is a buffer-local minor mode which provides the same commands as the major mode, Outline mode, but can be used in conjunction with other major modes. You can type <b>M-x outline-minor-mode</b> to toggle Outline minor mode in the current buffer, or use a file-local variable setting to enable it in a specific file (see <a href="#File-Variables">File Variables</a>).<br><br>The major mode, Outline mode, provides special key bindings on the <b>C-c</b> prefix. Outline minor mode provides similar bindings with <b>C-c @</b> as the prefix; this is to reduce the conflicts with the major mode's special commands. (The variable <b>outline-minor-mode-prefix</b> controls the prefix used.)</p>
<ul>
<li><a href="#Outline-Format">Outline Format</a>: What the text of an outline looks like.</li>
<li><a href="#Outline-Motion">Outline Motion</a>: Special commands for moving through outlines.</li>
<li><a href="#Outline-Visibility">Outline Visibility</a>: Commands to control what is visible.</li>
<li><a href="#Outline-Views">Outline Views</a>: Outlines and multiple views.</li>
<li><a href="#Foldout">Foldout</a>: Folding means zooming in on outlines.</li>
</ul>
<h2 id="Outline-Format">Format of outlines</h2>
<p class="tab">Outline mode assumes that the lines in the buffer are of two types: heading lines and body lines. A heading line represents a topic in the outline. Heading lines start with one or more asterisk ('<b>*</b>') characters; the number of asterisks determines the depth of the heading in the outline structure. Thus, a heading line with one '<b>*</b>' is a major topic; all the heading lines with two '<b>*</b>'s between it and the next one-'<b>*</b>' heading are its subtopics. Any line that is not a heading line is a body line. Body lines belong with the preceding heading line. Here is an example:</p>
<pre class="tab">     * Food
     This is the body,
     which says something about the topic of food.
     ** Delicious Food
     This is the body of the second-level header.
     ** Distasteful Food
     This could have
     a body too, with
     several lines.
     *** Dormitory Food
     * Shelter
     Another first-level topic with its header line.
</pre>
<p class="tab">A heading line together with all following body lines is called collectively an entry. A heading line together with all following deeper heading lines and their body lines is called a subtree.<br><br>You can customize the criterion for distinguishing heading lines by setting the variable <b>outline-regexp</b>. (The recommended ways to do this are in a major mode function or with a file local variable.) Any line whose beginning has a match for this regexp is considered a heading line. Matches that start within a line (not at the left margin) do not count.<br><br>The length of the matching text determines the level of the heading; longer matches make a more deeply nested level. Thus, for example, if a text formatter has commands '<b>@chapter</b>', '<b>@section</b>' and '<b>@subsection</b>' to divide the document into chapters and sections, you could make those lines count as heading lines by setting outline-regexp to '<b>"@chap\\|@\\(sub\\)*section"</b>'. Note the trick: the two words '<b>chapter</b>' and '<b>section</b>' are equally long, but by defining the regexp to match only '<b>chap</b>' we ensure that the length of the text matched on a chapter heading is shorter, so that Outline mode will know that sections are contained in chapters. This works as long as no other command starts with '<b>@chap</b>'.<br><br>You can explicitly specify a rule for calculating the level of a heading line by setting the variable <b>outline-level</b>. The value of outline-level should be a function that takes no arguments and returns the level of the current heading. The recommended ways to set this variable are in a major mode command or with a file local variable.</p>
<h2 id="Outline-Motion">Outline motion commands</h2>
<p class="tab">Outline mode provides special motion commands that move backward and forward to heading lines.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-n</b></td>
<td>Move point to the next visible heading line (<b>outline-next-visible-heading</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p</b></td>
<td>Move point to the previous visible heading line (<b>outline-previous-visible-heading</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f</b></td>
<td>Move point to the next visible heading line at the same level as the one point is on (<b>outline-forward-same-level</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-b</b></td>
<td>Move point to the previous visible heading line at the same level (<b>outline-backward-same-level</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-u</b></td>
<td>Move point up to a lower-level (more inclusive) visible heading line (<b>outline-up-heading</b>).</td>
</tr>
</table>
<p class="tab"><b>C-c C-n</b> (<b>outline-next-visible-heading</b>) moves down to the next heading line. <b>C-c C-p</b> (<b>outline-previous-visible-heading</b>) moves similarly backward. Both accept numeric arguments as repeat counts.<br><br><b>C-c C-f</b> (<b>outline-forward-same-level</b>) and <b>C-c C-b</b> (<b>outline-backward-same-level</b>) move from one heading line to another visible heading at the same depth in the outline. <b>C-c C-u</b> (<b>outline-up-heading</b>) moves backward to another heading that is less deeply nested.</p>
<h2 id="Outline-Visibility">Outline visibility commands</h2>
<p class="tab">Outline mode provides several commands for temporarily hiding or revealing parts of the buffer, based on the outline structure. These commands are not undoable; their effects are not recorded by the undo mechanism, so you can undo right past them (see <a href="#Undo">Undo</a>).<br><br>Many of these commands act on the "current" heading line. If point is on a heading line, that is the current heading line; if point is on a body line, the current heading line is the nearest preceding header line.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-c</b></td>
<td>Make the current heading line's body invisible (<b>hide-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-e</b></td>
<td>Make the current heading line's body visible (<b>show-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-d</b></td>
<td>Make everything under the current heading invisible, not including the heading itself (<b>hide-subtree</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b></td>
<td>Make everything under the current heading visible, including body, subheadings, and their bodies (<b>show-subtree</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-l</b></td>
<td>Make the body of the current heading line, and of all its subheadings, invisible (<b>hide-leaves</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-k</b></td>
<td>Make all subheadings of the current heading line, at all levels, visible (<b>show-branches</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-i</b></td>
<td>Make immediate subheadings (one level down) of the current heading line visible (<b>show-children</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-t</b></td>
<td>Make all body lines in the buffer invisible (<b>hide-body</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-a</b></td>
<td>Make all lines in the buffer visible (<b>show-all</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-q</b></td>
<td>Hide everything except the top <b>n</b> levels of heading lines (<b>hide-sublevels</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-o</b></td>
<td>Hide everything except for the heading or body that point is in, plus the headings leading up from there to the top level of the outline (<b>hide-other</b>).</td>
</tr>
</table>
<p class="tab">The simplest of these commands are <b>C-c C-c</b> (<b>hide-entry</b>), which hides the body lines directly following the current heading line, and <b>C-c C-e</b> (<b>show-entry</b>), which reveals them. Subheadings and their bodies are not affected.<br><br>The commands <b>C-c C-d</b> (<b>hide-subtree</b>) and <b>C-c C-s</b> (<b>show-subtree</b>) are more powerful. They apply to the current heading line's subtree: its body, all its subheadings, both direct and indirect, and all their bodies.<br><br>The command <b>C-c C-l</b> (<b>hide-leaves</b>) hides the body of the current heading line and all the bodies in its subtree; the subheadings themselves are left visible. The command <b>C-c C-k</b> (<b>show-branches</b>) reveals the subheadings, if they had previously been hidden (e.g., by <b>C-c C-d</b>). The command <b>C-c C-i</b> (<b>show-children</b>) is a weaker version of this; it reveals only the direct subheadings, i.e., those one level down.<br><br>The command <b>C-c C-o</b> (<b>hide-other</b>) hides everything except the entry that point is in, plus its parents (the headers leading up from there to top level in the outline) and the top level headings.<br><br>The remaining commands affect the whole buffer. <b>C-c C-t</b> (<b>hide-body</b>) makes all body lines invisible, so that you see only the outline structure (as a special exception, it does not hide lines at the top of the file, preceding the first header line, even though these are technically body lines). <b>C-c C-a</b> (<b>show-all</b>) makes all lines visible. <b>C-c C-q</b> (<b>hide-sublevels</b>) hides all but the top level headings; with a numeric argument <b>n</b>, it hides everything except the top <b>n</b> levels of heading lines.<br><br>When incremental search finds text that is hidden by Outline mode, it makes that part of the buffer visible. If you exit the search at that position, the text remains visible. You can also automatically make text visible as you navigate in it using Reveal mode (<b>M-x reveal-mode</b>), a buffer-local minor mode.</p>
<h2 id="Outline-Views">Viewing one outline in multiple views</h2>
<p class="tab">You can display two views of a single outline at the same time, in different windows. To do this, you must create an indirect buffer using <b>M-x make-indirect-buffer</b>. The first argument of this command is the existing outline buffer name, and its second argument is the name to use for the new indirect buffer. See <a href="#Indirect-Buffers">Indirect Buffers</a>.<br><br>Once the indirect buffer exists, you can display it in a window in the normal fashion, with <b>C-x 4 b</b> or other Emacs commands. The Outline mode commands to show and hide parts of the text operate on each buffer independently; as a result, each buffer can have its own view. If you want more than two views on the same outline, create additional indirect buffers.</p>
<h2 id="Foldout">Folding editing</h2>
<p class="tab">The Foldout package extends Outline mode and Outline minor mode with "folding" commands. The idea of folding is that you zoom in on a nested portion of the outline, while hiding its relatives at higher levels.<br><br>Consider an Outline mode buffer with all the text and subheadings under level-1 headings hidden. To look at what is hidden under one of these headings, you could use <b>C-c C-e</b> (<b>M-x show-entry</b>) to expose the body, or <b>C-c C-i</b> to expose the child (level-2) headings.<br><br>With Foldout, you use <b>C-c C-z</b> (<b>M-x foldout-zoom-subtree</b>). This exposes the body and child subheadings, and narrows the buffer so that only the level-1 heading, the body and the level-2 headings are visible. Now to look under one of the level-2 headings, position the cursor on it and use <b>C-c C-z</b> again. This exposes the level-2 body and its level-3 child subheadings and narrows the buffer again. Zooming in on successive subheadings can be done as much as you like. A string in the mode line shows how deep you've gone.<br><br>When zooming in on a heading, to see only the child subheadings specify a numeric argument: <b>C-u C-c C-z</b>. The number of levels of children can be specified too (compare <b>M-x show-children</b>), e.g., <b>M-2 C-c C-z</b> exposes two levels of child subheadings. Alternatively, the body can be specified with a negative argument: <b>M-- C-c C-z</b>. The whole subtree can be expanded, similarly to <b>C-c C-s</b> (<b>M-x show-subtree</b>), by specifying a zero argument: <b>M-0 C-c C-z</b>.<br><br>While you're zoomed in, you can still use Outline mode's exposure and hiding functions without disturbing Foldout. Also, because the buffer is narrowed, "global" editing actions only affect text under the zoomed-in heading. This is useful for restricting changes to a particular chapter or section of your document.<br><br>To unzoom (exit) a fold, use <b>C-c C-x</b> (<b>M-x foldout-exit-fold</b>). This hides all the text and subheadings under the top-level heading and returns you to the previous view of the buffer. Specifying a numeric argument exits that many levels of folds. Specifying a zero argument exits all folds.<br><br>To cancel the narrowing of a fold without hiding the text and subheadings, specify a negative argument. For example, <b>M--2 C-c C-x</b> exits two folds and leaves the text and subheadings exposed.<br><br>Foldout mode also provides mouse commands for entering and exiting folds, and for showing and hiding text:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-M-Mouse-1</b></td>
<td>zooms in on the heading clicked on:<br><ul><li>single click: expose body.</li><li>double click: expose subheadings.</li><li>triple click: expose body and subheadings.</li><li>quad click: expose entire subtree.</li></ul></td>
</tr>
<tr class="tcw">
<td><b>C-M-Mouse-2</b></td>
<td>exposes text under the heading clicked on:<br><ul><li>single click: expose body.</li><li>double click: expose subheadings.</li><li>triple click: expose body and subheadings.</li><li>quad click: expose entire subtree.</li></ul></td>
</tr>
<tr class="tcw">
<td><b>C-M-Mouse-3</b></td>
<td>hides text under the heading clicked on or exits fold:<br><ul><li>single click: hide subtree.</li><li>double click: exit fold and hide text.</li><li>triple click: exit fold without hiding text.</li><li>quad click: exit all folds and hide text.</li></ul></td>
</tr>
</table>
<p class="tab">You can specify different modifier keys (instead of <b>Control-Meta-</b>) by setting <b>foldout-mouse-modifiers</b>; but if you have already loaded the <b>foldout.el</b> library, you must reload it for this to take effect.<br><br>To use the Foldout package, you can type <b>M-x load-library &lt;RET&gt; foldout &lt;RET&gt;</b>; or you can arrange for to do that automatically by putting the following in your init file:</p>
<pre class="tab tcy">(eval-after-load "outline" '(require 'foldout))</pre>
<h2 id="Org-Mode">Org mode</h2>
<p class="tab">Org mode is a variant of Outline mode for using Emacs as an organizer and/or authoring system. Files with names ending in the extension .org are opened in Org mode (see <a href="#Choosing-Modes">Choosing Modes</a>). To explicitly switch to Org mode, type <b>M-x org-mode</b>.<br><br>In Org mode, as in Outline mode, each entry has a heading line that starts with one or more '<b>*</b>' characters. See <a href="#Outline-Format">Outline Format</a>. Also, any line that begins with the '<b>#</b>' character is treated as a comment.<br><br>Org mode provides commands for easily viewing and manipulating the outline structure. The simplest of these commands is <b>&lt;TAB&gt;</b> (<b>org-cycle</b>). If invoked on a heading line, it cycles through the different visibility states of the subtree: (i) showing only that heading line, (ii) showing only the heading line and the heading lines of its direct children, if any, and (iii) showing the entire subtree. If invoked in a body line, the global binding for <b>&lt;TAB&gt;</b> is executed.<br><br>Typing <b>&lt;S-TAB&gt;</b> (<b>org-shifttab</b>) anywhere in an Org mode buffer cycles the visibility of the entire outline structure, between (i) showing only top-level heading lines, (ii) showing all heading lines but no body lines, and (iii) showing everything.<br><br>You can move an entire entry up or down in the buffer, including its body lines and subtree (if any), by typing <b>M-&lt;up&gt;</b> (<b>org-metaup</b>) or <b>M-&lt;down&gt;</b> (<b>org-metadown</b>) on the heading line. Similarly, you can promote or demote a heading line with <b>M-&lt;left&gt;</b> (<b>org-metaleft</b>) and <b>M-&lt;right&gt;</b> (<b>org-metaright</b>). These commands execute their global bindings if invoked on a body line.<br><br>The following subsections give basic instructions for using Org mode as an organizer and as an authoring system.</p>
<ul>
<li><a href="#Org-Organizer">Org Organizer</a>: Managing TODO lists and agendas.</li>
<li><a href="#Org-Authoring">Org Authoring</a>: Exporting Org buffers to various formats.</li>
</ul>
<h2 id="Org-Organizer">Org as an organizer</h2>
<p class="tab">You can tag an Org entry as a TODO item by typing <b>C-c C-t</b> (<b>org-todo</b>) anywhere in the entry. This adds the keyword '<b>TODO</b>' to the heading line. Typing <b>C-c C-t</b> again switches the keyword to '<b>DONE</b>'; another <b>C-c C-t</b> removes the keyword entirely, and so forth. You can customize the keywords used by <b>C-c C-t</b> via the variable <b>org-todo-keywords</b>.<br><br>Apart from marking an entry as TODO, you can attach a date to it, by typing <b>C-c C-s</b> (<b>org-schedule</b>) in the entry. This prompts for a date by popping up the Emacs Calendar (see <a href="#Calendar_002fDiary">Calendar/Diary</a>), and then adds the tag '<b>SCHEDULED</b>', together with the selected date, beneath the heading line. The command <b>C-c C-d</b> (<b>org-deadline</b>) has the same effect, except that it uses the tag DEADLINE.<br><br>Once you have some TODO items planned in an Org file, you can add that file to the list of agenda files by typing <b>C-c [</b> (<b>org-agenda-file-to-front</b>). Org mode is designed to let you easily maintain multiple agenda files, e.g., for organizing different aspects of your life. The list of agenda files is stored in the variable <b>org-agenda-files</b>.<br><br>To view items coming from your agenda files, type <b>M-x org-agenda</b>. This command prompts for what you want to see: a list of things to do this week, a list of TODO items with specific keywords, etc.</p>
<h2 id="Org-Authoring">Org as an authoring system</h2>
<p class="tab">You may want to format your Org notes nicely and to prepare them for export and publication. To export the current buffer, type <b>C-c C-e</b> (<b>org-export</b>) anywhere in an Org buffer. This command prompts for an export format; currently supported formats include HTML, LaTeX, OpenDocument (.odt), and PDF. Some formats, such as PDF, require certain system tools to be installed.<br><br>To export several files at once to a specific directory, either locally or over the network, you must define a list of projects through the variable <b>org-publish-project-alist</b>. See its documentation for details.<br><br>Org supports a simple markup scheme for applying text formatting to exported documents:</p>
<pre class="tab tcy">- This text is /emphasized/
- This text is *in bold*
- This text is _underlined_
- This text uses =a teletype font=
#+begin_quote
&#96;&#96;This is a quote.''
#+end_quote
#+begin_example
This is an example.
#+end_example
</pre>
<h2 id="TeX-Mode">TeX mode</h2>
<p class="tab">Emacs provides special major modes for editing files written in TeX and its related formats. TeX is a powerful text formatter written by Donald Knuth; like GNU Emacs, it is free software. LaTeX is a simplified input format for TeX, implemented using TeX macros. DocTeX is a special file format where the LaTeX sources are written, combining sources with documentation. SliTeX is an obsolete special form of LaTeX.<br><br>TeX mode has four variants: Plain TeX mode, LaTeX mode, DocTeX mode, and SliTeX mode. These distinct major modes differ only slightly, and are designed for editing the four different formats. Emacs selects the appropriate mode by looking at the contents of the buffer. (This is done by the <b>tex-mode</b> command, which is normally called automatically when you visit a TeX-like file. See <a href="#Choosing-Modes">Choosing Modes</a>.) If the contents are insufficient to determine this, Emacs chooses the mode specified by the variable <b>tex-default-mode</b>; its default value is <b>latex-mode</b>. If Emacs does not guess right, you can select the correct variant of TeX mode using the command <b>M-x plain-tex-mode</b>, <b>M-x latex-mode</b>, <b>M-x slitex-mode</b>, or <b>doctex-mode</b>.<br><br>The following sections document the features of TeX mode and its variants. There are other TeX-related Emacs packages, which are not documented here:</p>
<ul>
<li>BibTeX mode is a major mode for BibTeX files, which are commonly used for keeping bibliographic references for LaTeX documents.</li>
<li>The RefTeX package provides a minor mode which can be used with LaTeX mode to manage bibliographic references. For more information, see the RefTeX Info manual, which is distributed with Emacs.</li>
<li>The AUCTeX package provides more advanced features for editing TeX and its related formats, including the ability to preview TeX equations within Emacs buffers. Unlike BibTeX mode and the RefTeX package, AUCTeX is not distributed with Emacs by default. It can be downloaded via the Package Menu (see <a href="#Packages">Packages</a>); once installed, see the AUCTeX manual, which is included with the package.</li>
</ul>
<ul>
<li><a href="#TeX-Editing">TeX Editing</a>: Special commands for editing in TeX mode.</li>
<li><a href="#LaTeX-Editing">LaTeX Editing</a>: Additional commands for LaTeX input files.</li>
<li><a href="#TeX-Print">TeX Print</a>: Commands for printing part of a file with TeX.</li>
<li><a href="#TeX-Misc">TeX Misc</a>: Customization of TeX mode, and related features.</li>
</ul>
<h2 id="TeX-Editing">TeX editing commands</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>"</b></td>
<td>Insert, according to context, either '<b>&#96;&#96;</b>' or '<b>"</b>' or '<b>''</b>' (<b>tex-insert-quote</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-j</b></td>
<td>Insert a paragraph break (two newlines) and check the previous paragraph for unbalanced braces or dollar signs (<b>tex-terminate-paragraph</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x tex-validate-region</b></td>
<td>Check each paragraph in the region for unbalanced braces or dollar signs.</td>
</tr>
<tr class="tcw">
<td><b>C-c {</b></td>
<td>Insert '<b>{}</b>' and position point between them (<b>tex-insert-braces</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c }</b></td>
<td>Move forward past the next unmatched close brace (<b>up-list</b>).</td>
</tr>
</table>
<p class="tab">In TeX, the character '<b>"</b>' is not normally used; instead, quotations begin with '<b>&#96;&#96;</b>' and end with '<b>''</b>'. TeX mode binds the <b>"</b> key to the <b>tex-insert-quote</b> command. This inserts '<b>&#96;&#96;</b>' after whitespace or an open brace, '<b>"</b>' after a backslash, and '<b>''</b>' after any other character.<br><br>As a special exception, if you type <b>"</b> when the text before point is either '<b>&#96;&#96;</b>' or '<b>''</b>', Emacs replaces that preceding text with a single '<b>"</b>' character. You can type "" to insert '<b>"</b>', should you ever need to do so. (You can also use <b>C-q "</b> to insert this character.)<br><br>In TeX mode, '<b>$</b>' has a special syntax code which attempts to understand the way TeX math mode delimiters match. When you insert a '<b>$</b>' that exits math mode, the position of the matching '<b>$</b>' that entered math mode is displayed for a second. This is the same feature that displays the open brace that matches a close brace that is inserted. However, there is no way to tell whether a '<b>$</b>' enters math mode or leaves it; so when you insert a '<b>$</b>' that enters math mode, the previous '<b>$</b>' position is shown as if it were a match, even though they are actually unrelated.<br><br>TeX uses braces as delimiters that must match. Some users prefer to keep braces balanced at all times, rather than inserting them singly. Use <b>C-c {</b> (<b>tex-insert-braces</b>) to insert a pair of braces. It leaves point between the two braces so you can insert the text that belongs inside. Afterward, use the command <b>C-c }</b> (<b>up-list</b>) to move forward past the close brace.<br><br>There are two commands for checking the matching of braces. <b>C-j</b> (<b>tex-terminate-paragraph</b>) checks the paragraph before point, and inserts two newlines to start a new paragraph. It outputs a message in the echo area if any mismatch is found. <b>M-x tex-validate-region</b> checks a region, paragraph by paragraph. The errors are listed in an <b>*Occur*</b> buffer; you can use the usual Occur mode commands in that buffer, such as <b>C-c C-c</b>, to visit a particular mismatch (see <a href="#Other-Repeating-Search">Other Repeating Search</a>).<br><br>Note that Emacs commands count square brackets and parentheses in TeX mode, not only braces. This is not strictly correct for the purpose of checking TeX syntax. However, parentheses and square brackets are likely to be used in text as matching delimiters, and it is useful for the various motion commands and automatic match display to work with them.</p>
<h2 id="LaTeX-Editing">LaTeX editing commands</h2>
<p class="tab">LaTeX mode provides a few extra features not applicable to plain TeX:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-o</b></td>
<td>Insert '<b>\begin</b>' and '<b>\end</b>' for LaTeX block and position point on a line between them (<b>tex-latex-block</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-e</b></td>
<td>Close the innermost LaTeX block not yet closed (<b>tex-close-latex-block</b>).</td>
</tr>
</table>
<p class="tab">In LaTeX input, '<b>\begin</b>' and '<b>\end</b>' tags are used to group blocks of text. To insert a block, type <b>C-c C-o</b> (<b>tex-latex-block</b>). This prompts for a block type, and inserts the appropriate matching '<b>\begin</b>' and '<b>\end</b>' tags, leaving a blank line between the two and moving point there.<br><br>When entering the block type argument to <b>C-c C-o</b>, you can use the usual completion commands (see <a href="#Completion">Completion</a>). The default completion list contains the standard LaTeX block types. If you want additional block types for completion, customize the list variable <b>latex-block-names</b>.<br><br>In LaTeX input, '<b>\begin</b>' and '<b>\end</b>' tags must balance. You can use <b>C-c C-e</b> (<b>tex-close-latex-block</b>) to insert an '<b>\end</b>' tag which matches the last unmatched '<b>\begin</b>'. It also indents the '<b>\end</b>' to match the corresponding '<b>\begin</b>', and inserts a newline after the '<b>\end</b>' tag if point is at the beginning of a line. The minor mode <b>latex-electric-env-pair-mode</b> automatically inserts an '<b>\end</b>' or '<b>\begin</b>' tag for you when you type the corresponding one.</p>
<h2 id="TeX-Print">TeX printing commands</h2>
<p class="tab">You can invoke TeX as a subprocess of Emacs, supplying either the entire contents of the buffer or only part of it (e.g., one chapter of a larger document).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>C-c C-b</b></td>
<td>Invoke TeX on the entire current buffer (<b>tex-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-r</b></td>
<td>Invoke TeX on the current region, together with the buffer's header (<b>tex-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f</b></td>
<td>Invoke TeX on the current file (<b>tex-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-v</b></td>
<td>Preview the output from the last <b>C-c C-r</b>, <b>C-c C-b</b>, or <b>C-c C-f</b> command (<b>tex-view</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p</b></td>
<td>Print the output from the last <b>C-c C-b</b>, <b>C-c C-r</b>, or <b>C-c C-f</b> command (<b>tex-print</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c &lt;TAB&gt;</b></td>
<td>Invoke BibTeX on the current file (<b>tex-bibtex-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-l</b></td>
<td>Recenter the window showing output from TeX so that the last line is displayed (<b>tex-recenter-output-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-k</b></td>
<td>Kill the TeX subprocess (<b>tex-kill-job</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-c</b></td>
<td>Invoke some other compilation command on the entire current buffer (<b>tex-compile</b>).</td>
</tr>
</table>
<p class="tab">To pass the current buffer through TeX, type <b>C-c C-b</b> (<b>tex-buffer</b>). The formatted output goes in a temporary file, normally a .dvi file. Afterwards, you can type <b>C-c C-v</b> (<b>tex-view</b>) to launch an external program, such as xdvi, to view this output file. You can also type <b>C-c C-p</b> (<b>tex-print</b>) to print a hardcopy of the output file.<br><br>By default, <b>C-c C-b</b> runs TeX in the current directory. The output of TeX also goes in this directory. To run TeX in a different directory, change the variable <b>tex-directory</b> to the desired directory name. If your environment variable TEXINPUTS contains relative directory names, or if your files contains '<b>\input</b>' commands with relative file names, then <b>tex-directory</b> must be "." or you get the wrong results. Otherwise, it is safe to specify some other directory, such as "/tmp".<br><br>The buffer's TeX variant determines what shell command <b>C-c C-b</b> actually runs. In Plain TeX mode, it is specified by the variable <b>tex-run-command</b>, which defaults to "tex". In LaTeX mode, it is specified by <b>latex-run-command</b>, which defaults to "latex". The shell command that <b>C-c C-v</b> runs to view the .dvi output is determined by the variable <b>tex-dvi-view-command</b>, regardless of the TeX variant. The shell command that <b>C-c C-p</b> runs to print the output is determined by the variable <b>tex-dvi-print-command</b>.<br><br>Normally, Emacs automatically appends the output file name to the shell command strings described in the preceding paragraph. For example, if <b>tex-dvi-view-command</b> is "xdvi", <b>C-c C-v</b> runs <b>xdvi output-file-name</b>. In some cases, however, the file name needs to be embedded in the command, e.g., if you need to provide the file name as an argument to one command whose output is piped to another. You can specify where to put the file name with '<b>*</b>' in the command string. For example,</p>
<pre class="tab tcy">(setq tex-dvi-print-command "dvips -f * | lpr")</pre>
<p class="tab">The terminal output from TeX, including any error messages, appears in a buffer called *tex-shell*. If TeX gets an error, you can switch to this buffer and feed it input (this works as in Shell mode; see <a href="#Interactive-Shell">Interactive Shell</a>). Without switching to this buffer you can scroll it so that its last line is visible by typing <b>C-c C-l</b>.<br><br>Type <b>C-c C-k</b> (<b>tex-kill-job</b>) to kill the TeX process if you see that its output is no longer useful. Using <b>C-c C-b</b> or <b>C-c C-r</b> also kills any TeX process still running.<br><br>You can also pass an arbitrary region through TeX by typing <b>C-c C-r</b> (<b>tex-region</b>). This is tricky, however, because most files of TeX input contain commands at the beginning to set parameters and define macros, without which no later part of the file formats correctly. To solve this problem, <b>C-c C-r</b> allows you to designate a part of the file as containing essential commands; it is included before the specified region as part of the input to TeX. The designated part of the file is called the header.<br><br>To indicate the bounds of the header in Plain TeX mode, you insert two special strings in the file. Insert '<b>%**start of header</b>' before the header, and '<b>%**end of header</b>' after it. Each string must appear entirely on one line, but there may be other text on the line before or after. The lines containing the two strings are included in the header. If '<b>%**start of header</b>' does not appear in the first 100 lines of the buffer, <b>C-c C-r</b> assumes that there is no header.<br><br>In LaTeX mode, the header begins with '<b>\documentclass</b>' or '<b>\documentstyle</b>' and ends with '<b>\begin{document}</b>'. These are commands that LaTeX requires you to use in any case, so nothing special needs to be done to identify the header.<br><br>The commands <b>(tex-buffer)</b> and <b>(tex-region)</b> do all their work in a temporary directory, and do not have available any of the auxiliary files needed by TeX for cross-references; these commands are generally not suitable for running the final copy where all the cross-references need to be correct.<br><br>When you want the auxiliary files for cross references, use <b>C-c C-f</b> (<b>tex-file</b>) which runs TeX on the current buffer's file, in that file's directory. Before running TeX, it offers to save any modified buffers. Generally, you need to use <b>(tex-file)</b> twice to get the cross-references right.<br><br>The value of the variable <b>tex-start-options</b> specifies options for the TeX run.<br><br>The value of the variable <b>tex-start-commands</b> specifies TeX commands for starting TeX. The default value causes TeX to run in nonstop mode. To run TeX interactively, set the variable to "".<br><br>Large TeX documents are often split into several files&mdash;one main file, plus subfiles. Running TeX on a subfile often does not work; you have to run it on the main file. To make <b>tex-file</b> useful when you are editing a subfile, you can set the variable <b>tex-main-file</b> to the name of the main file. Then <b>tex-file</b> runs TeX on that file.<br><br>The most convenient way to use <b>tex-main-file</b> is to specify it in a local variable list in each of the subfiles. See <a href="#File-Variables">File Variables</a>.<br><br>For LaTeX files, you can use BibTeX to process the auxiliary file for the current buffer's file. BibTeX looks up bibliographic citations in a data base and prepares the cited references for the bibliography section. The command <b>C-c &lt;TAB&gt;</b> (<b>tex-bibtex-file</b>) runs the shell command <b>(tex-bibtex-command)</b> to produce a '<b>.bbl</b>' file for the current buffer's file. Generally, you need to do <b>C-c C-f</b> (<b>tex-file</b>) once to generate the '<b>.aux</b>' file, then do <b>C-c &lt;TAB&gt;</b> (<b>tex-bibtex-file</b>), and then repeat <b>C-c C-f</b> (<b>tex-file</b>) twice more to get the cross-references correct.<br><br>To invoke some other compilation program on the current TeX buffer, type <b>C-c C-c</b> (<b>tex-compile</b>). This command knows how to pass arguments to many common programs, including pdflatex, yap, xdvi, and dvips. You can select your desired compilation program using the standard completion keys (see <a href="#Completion">Completion</a>).</p>
<h2 id="TeX-Misc">Tex mode miscellany</h2>
<p class="tab">Entering any variant of TeX mode runs the hooks <b>text-mode-hook</b> and <b>tex-mode-hook</b>. Then it runs either <b>plain-tex-mode-hook</b>, <b>latex-mode-hook</b>, or <b>slitex-mode-hook</b>, whichever is appropriate. Starting the TeX shell runs the hook <b>tex-shell-hook</b>. See <a href="#Hooks">Hooks</a>.<br><br>The commands <b>M-x iso-iso2tex</b>, <b>M-x iso-tex2iso</b>, <b>M-x iso-iso2gtex</b> and <b>M-x iso-gtex2iso</b> can convert between Latin-1 encoded files and TeX-encoded equivalents.</p>
<h2 id="HTML-Mode">SGML and HTML modes</h2>
<p class="tab">The major modes for SGML and HTML provide indentation support and commands for operating on tags. HTML mode is a slightly customized variant of SGML mode.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>C-c C-n</b></td>
<td>Interactively specify a special character and insert the SGML '<b>&amp;</b>'-command for that character (<b>sgml-name-char</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-t</b></td>
<td>Interactively specify a tag and its attributes (<b>sgml-tag</b>). This command asks you for a tag name and for the attribute values, then inserts both the opening tag and the closing tag, leaving point between them.<br><br>With a prefix argument <b>n</b>, the command puts the tag around the <b>n</b> words already present in the buffer after point. Whenever a region is active, it puts the tag around the region (when Transient Mark mode is off, it does this when a numeric argument of &minus;1 is supplied.)</td>
</tr>
<tr class="tcw">
<td><b>C-c C-a</b></td>
<td>Interactively insert attribute values for the current tag (<b>sgml-attributes</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f</b></td>
<td>Skip across a balanced tag group (which extends from an opening tag through its corresponding closing tag) (<b>sgml-skip-tag-forward</b>). A numeric argument acts as a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-b</b></td>
<td>Skip backward across a balanced tag group (which extends from an opening tag through its corresponding closing tag) (<b>sgml-skip-tag-backward</b>). A numeric argument acts as a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-d</b></td>
<td>Delete the tag at or after point, and delete the matching tag too (<b>sgml-delete-tag</b>). If the tag at or after point is an opening tag, delete the closing tag too; if it's a closing tag, delete the opening tag too.</td>
</tr>
<tr class="tcw">
<td><b>C-c ?</b> <i>tag</i> <b>&lt;RET&gt;</b></td>
<td>Display a description of the meaning of tag <i>tag</i> (<b>sgml-tag-help</b>). If the argument tag is empty, describe the tag at point.</td>
</tr>
<tr class="tcw">
<td><b>C-c /</b></td>
<td>Insert a close tag for the innermost unterminated tag (<b>sgml-close-tag</b>). If called within a tag or a comment, close it instead of inserting a close tag.</td>
</tr>
<tr class="tcw">
<td><b>C-c 8</b></td>
<td>Toggle a minor mode where Latin-1 characters insert the corresponding SGML commands that stand for them, instead of the characters themselves (<b>sgml-name-8bit-mode</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-v</b></td>
<td>Run a shell command (which you must specify) to validate the current buffer as SGML (<b>sgml-validate</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c TAB</b></td>
<td>Toggle the visibility of existing tags in the buffer. This can be used as a cheap preview (<b>sgml-tags-invisible</b>).</td>
</tr>
</table>
<p class="tab">The major mode for editing XML documents is called nXML mode. This is a powerful major mode that recognizes many existing XML schema and use them to provide completion of XML elements via <b>M-&lt;TAB&gt;</b>, and "on-the-fly" XML validation with error highlighting. To enable nXML mode in an existing buffer, type <b>M-x nxml-mode</b>, or, equivalently, <b>M-x xml-mode</b>. Emacs uses nXML mode for files which have the extension .xml. For XHTML files, which have the extension .xhtml, Emacs uses HTML mode by default; you can make it use nXML mode by customizing the variable <b>auto-mode-alist</b> (see <a href="#Choosing-Modes">Choosing Modes</a>). nXML mode is described in an <a href="/unix/info.htm">Info</a> manual, which is distributed with Emacs.<br><br>You may choose to use the less powerful SGML mode for editing XML, as XML is a strict subset of SGML. To enable SGML mode in an existing buffer, type <b>M-x sgml-mode</b>. On enabling SGML mode, Emacs examines the buffer to determine whether it is XML; if so, it sets the variable <b>sgml-xml-mode</b> to a non-nil value. This causes SGML mode's tag insertion commands, described above, to always insert explicit closing tags as well.</p>
<h2 id="Nroff-Mode">Nroff mode</h2>
<p class="tab">Nroff mode, a major mode derived from Text mode, is specialized for editing <a href="/unix/unroff.htm">nroff</a> files (e.g., Unix man pages). Type <b>M-x nroff-mode</b> to enter this mode. Entering Nroff mode runs the hook <b>text-mode-hook</b>, then <b>nroff-mode-hook</b> (see <a href="#Hooks">Hooks</a>).<br><br>In Nroff mode, nroff command lines are treated as paragraph separators, pages are separated by '<b>.bp</b>' commands, and comments start with backslash-doublequote. It also defines these commands:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>M-n</b></td>
<td>Move to the beginning of the next line that isn't a nroff command (<b>forward-text-line</b>). An argument is a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>M-p</b></td>
<td>Like <b>M-n</b> but move up (<b>backward-text-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-?</b></td>
<td>Displays in the echo area the number of text lines (lines that are not nroff commands) in the region (<b>count-text-lines</b>).</td>
</tr>
</table>
<p class="tab">Electric Nroff mode is a buffer-local minor mode that is used with Nroff mode. To toggle this minor mode, type <b>M-x electric-nroff-mode</b> (see <a href="#Minor-Modes">Minor Modes</a>). When the mode is on, each time you type <b>&lt;RET&gt;</b> to end a line containing a nroff command that opens a kind of grouping, the nroff command to close that grouping is automatically inserted on the following line.<br><br>If you use Outline minor mode with Nroff mode (see <a href="#Outline-Mode">Outline Mode</a>), heading lines are lines of the form '<b>.H</b>' followed by a number (the header level).</p>
<h2 id="Enriched-Text">Enriched text</h2>
<p class="tab">Enriched mode is a minor mode for editing formatted text files in a WYSIWYG ("what you see is what you get") fashion. When Enriched mode is enabled, you can apply various formatting properties to the text in the buffer, such as fonts and colors; upon saving the buffer, those properties are saved together with the text, using the MIME '<b>text/enriched</b>' file format.<br><br>Enriched mode is often used with Text mode (see <a href="#Text-Mode">Text Mode</a>). It is not compatible with Font Lock mode, which is used by many major modes, including most programming language modes, for syntax highlighting (see <a href="#Font-Lock">Font Lock</a>). Unlike Enriched mode, Font Lock mode assigns text properties automatically, based on the current buffer contents; those properties are not saved to disk.<br><br>The file <b>etc/enriched.doc</b> in the Emacs distribution serves as an example of the features of Enriched mode.</p>
<ul>
<li><a href="#Enriched-Mode">Enriched Mode</a>: Entering and exiting Enriched mode.</li>
<li><a href="#Hard-and-Soft-Newlines">Hard and Soft Newlines</a>: There are two different kinds of newlines.</li>
<li><a href="#Editing-Format-Info">Editing Format Info</a>: How to edit text properties.</li>
<li><a href="#Enriched-Faces">Enriched Faces</a>: Bold, italic, underline, etc.</li>
<li><a href="#Enriched-Indentation">Enriched Indentation</a>: Changing the left and right margins.</li>
<li><a href="#Enriched-Justification">Enriched Justification</a>: Centering, setting text flush with the left or right margin, etc.</li>
<li><a href="#Enriched-Properties">Enriched Properties</a>: The "special" text properties submenu.</li>
</ul>
<h2 id="Enriched-Mode">Enriched mode</h2>
<p class="tab">Enriched mode is a buffer-local minor mode (see <a href="#Minor-Modes">Minor Modes</a>). When you visit a file that is saved in the '<b>text/enriched</b>' format, Emacs automatically enables Enriched mode, and applies the formatting information in the file to the buffer text. When you save a buffer with Enriched mode enabled, it is saved using the '<b>text/enriched</b>' format, including the formatting information.<br><br>To create a new file of formatted text, visit the nonexistent file and type <b>M-x enriched-mode</b>. This command actually toggles Enriched mode. With a prefix argument, it enables Enriched mode if the argument is positive, and disables Enriched mode otherwise. If you disable Enriched mode, Emacs no longer saves the buffer using the '<b>text/enriched</b>' format; any formatting properties that are added to the buffer remain in the buffer, but they are not saved to disk.<br><br>Enriched mode does not save all Emacs text properties, only those specified in the variable <b>enriched-translations</b>. These include properties for fonts, colors, indentation, and onlyification.<br><br>If you visit a file and Emacs fails to recognize that it's in the '<b>text/enriched</b>' format, type <b>M-x format-decode-buffer</b>. This command prompts for a file format, and re-reads the file in that format. Specifying the '<b>text/enriched</b>' format automatically enables Enriched mode.<br><br>To view a '<b>text/enriched</b>' file in raw form (as plain text with markup tags rather than formatted text), use <b>M-x find-file-literally</b> (see <a href="#Visiting">Visiting</a>).</p>
<h2 id="Hard-and-Soft-Newlines">Hard and soft newlines</h2>
<p class="tab">In Enriched mode, Emacs distinguishes between two different kinds of newlines, hard newlines and soft newlines. You can also enable or disable this feature in other buffers, by typing <b>M-x use-hard-newlines</b>.<br><br>Hard newlines are used to separate paragraphs, or anywhere there needs to be a line break regardless of how the text is filled; soft newlines are used for filling. The <b>&lt;RET&gt;</b> (<b>newline</b>) and <b>C-o</b> (<b>open-line</b>) commands insert hard newlines. The fill commands, including Auto Fill (see <a href="#Auto-Fill">Auto Fill</a>), insert only soft newlines and delete only soft newlines, leaving hard newlines alone.<br><br>Thus, when editing with Enriched mode, don't use <b>&lt;RET&gt;</b> or <b>C-o</b> to break lines in the middle of filled paragraphs. Use Auto Fill mode or explicit fill commands (see <a href="#Fill-Commands">Fill Commands</a>) instead. Use <b>&lt;RET&gt;</b> or <b>C-o</b> where line breaks should always remain, such as in tables and lists. For such lines, you may also want to set the onlyification style to unfilled (see <a href="#Enriched-Justification">Enriched Justification</a>).</p>
<h2 id="Editing-Format-Info">Editing format information</h2>
<p class="tab">The easiest way to alter properties is with the Text Properties menu. You can get to this menu from the Edit menu in the menu bar (see <a href="#Menu-Bar">Menu Bar</a>), or with <b>C-Mouse-2</b> (see <a href="#Menu-Mouse-Clicks">Menu Mouse Clicks</a>). Some of the commands in the Text Properties menu are listed below (you can also invoke them with <b>M-x</b>):</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>Remove Face Properties</b></td>
<td>Remove face properties from the region (<b>facemenu-remove-face-props</b>).</td>
</tr>
<tr class="tcw">
<td><b>Remove Text Properties</b></td>
<td>Remove all text properties from the region, including face properties (<b>facemenu-remove-all</b>).</td>
</tr>
<tr class="tcw">
<td><b>Describe Properties</b></td>
<td>List all text properties and other information about the character following point (<b>describe-text-properties</b>).</td>
</tr>
<tr class="tcw">
<td><b>Display Faces</b></td>
<td>Display a list of defined faces (<b>list-faces-display</b>). See <a href="#Faces">Faces</a>.</td>
</tr>
<tr class="tcw">
<td><b>Display Colors</b></td>
<td>Display a list of defined colors (<b>list-colors-display</b>). See <a href="#Colors">Colors</a>.</td>
</tr>
</table>
<p class="tab">The other menu entries are described in the following sections.</p>
<h2 id="Enriched-Faces">Faces in enriched text</h2>
<p class="tab">The following commands can add or remove faces (see <a href="#Faces">Faces</a>). Each applies to the text in the region if the mark is active, and to the next self-inserting character if the mark is inactive. With a prefix argument, each command applies to the next self-inserting character even if the region is active.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:320px"><b>M-o d</b></td>
<td>Remove all face properties (<b>facemenu-set-default</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-o b</b></td>
<td>Apply the bold face (<b>facemenu-set-bold</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-o i</b></td>
<td>Apply the italic face (<b>facemenu-set-italic</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-o l</b></td>
<td>Apply the bold-italic face (<b>facemenu-set-bold-italic</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-o u</b></td>
<td>Apply the underline face (<b>facemenu-set-underline</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-o o</b> <i>face</i> <b>&lt;RET&gt;</b></td>
<td>Apply the face <i>face</i> (<b>facemenu-set-face</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x facemenu-set-foreground</b></td>
<td>Prompt for a color (see <a href="#Colors">Colors</a>), and apply it as a foreground color.</td>
</tr>
<tr class="tcw">
<td><b>M-x facemenu-set-background</b></td>
<td>Prompt for a color, and apply it as a background color.</td>
</tr>
</table>
<p class="tab">These command are also available via the Text Properties menu.<br><br>A self-inserting character normally inherits the face properties (and most other text properties) from the preceding character in the buffer. If you use one of the above commands to specify the face for the next self-inserting character, that character does not inherit the faces properties from the preceding character, but it still inherits other text properties.<br><br>Enriched mode defines two additional faces: <b>excerpt</b> and <b>fixed</b>. These correspond to codes used in the text/enriched file format. The <b>excerpt</b> face is intended for quotations; by default, it appears the same as italic. The <b>fixed</b> face specifies fixed-width text; by default, it appears the same as bold.</p>
<h2 id="Enriched-Indentation">Indentation in enriched text</h2>
<p class="tab">In Enriched mode, you can specify different amounts of indentation for the right or left margin of a paragraph or a part of a paragraph. These margins also affect fill commands such as <b>M-q</b> (see <a href="#Filling">Filling</a>).<br><br>The Indentation submenu of Text Properties offers commands for specifying indentation:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>Indent More</b></td>
<td>Indent the region by 4 columns (<b>increase-left-margin</b>). In Enriched mode, this command is also available on <b>C-x &lt;TAB&gt;</b>; if you supply a numeric argument, that says how many columns to add to the margin (a negative argument reduces the number of columns).</td>
</tr>
<tr class="tcw">
<td><b>Indent Less</b></td>
<td>Remove 4 columns of indentation from the region.</td>
</tr>
<tr class="tcw">
<td><b>Indent Right More</b></td>
<td>Make the text narrower by indenting 4 columns at the right margin.</td>
</tr>
<tr class="tcw">
<td><b>Indent Right Less</b></td>
<td>Remove 4 columns of indentation from the right margin.</td>
</tr>
</table>
<p class="tab">The variable <b>standard-indent</b> specifies how many columns these commands should add to or subtract from the indentation. The default value is 4. The default right margin for Enriched mode is controlled by the variable <b>fill-column</b>, as usual.<br><br>You can also type <b>C-c [</b> (<b>set-left-margin</b>) and <b>C-c ]</b> (<b>set-right-margin</b>) to set the left and right margins. You can specify the margin width with a numeric argument; otherwise these commands prompt for a value via the minibuffer.<br><br>The fill prefix, if any, works in addition to the specified paragraph indentation: <b>C-x .</b> does not include the specified indentation's whitespace in the new value for the fill prefix, and the fill commands look for the fill prefix after the indentation on each line. See <a href="#Fill-Prefix">Fill Prefix</a>.</p>
<h2 id="Enriched-Justification">Justification in enriched text</h2>
<p class="tab">In Enriched mode, you can use the following commands to specify various onlyification styles for filling. These commands apply to the paragraph containing point, or, if the region is active, to all paragraphs overlapping the region.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>M-j l</b></td>
<td>Align lines to the left margin (<b>set-onlyification-left</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-j r</b></td>
<td>Align lines to the right margin (<b>set-onlyification-right</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-j b</b></td>
<td>Align lines to both margins, inserting spaces in the middle of the line to achieve this (<b>set-onlyification-full</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-j c</b>, <b>M-S</b></td>
<td>Center lines between the margins (<b>set-onlyification-center</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-j u</b></td>
<td>Turn off filling entirely (<b>set-onlyification-none</b>). The fill commands do nothing on text with this setting. You can, however, still indent the left margin.</td>
</tr>
</table>
<p class="tab">You can also specify onlyification styles using the Justification submenu in the Text Properties menu. The default onlyification style is specified by the per-buffer variable <b>default-onlyification</b>. Its value should be one of the symbols <b>left</b>, <b>right</b>, <b>full</b>, <b>center</b>, or <b>none</b>.</p>
<h2 id="Enriched-Properties">Setting other text properties</h2>
<p class="tab">The Special Properties submenu of Text Properties has entries for adding or removing three other text properties: <b>read-only</b>, (which disallows alteration of the text), <b>invisible</b> (which hides text), and <b>intangible</b> (which disallows moving point in the text). The '<b>Remove Special</b>' menu item removes all these special properties from the text in the region.<br><br>The <b>invisible</b> and <b>intangible</b> properties are not saved.</p>
<h2 id="Text-Based-Tables">Editing text-based tables</h2>
<p class="tab">The table package provides commands to easily edit text-based tables. Here is an example of what such a table looks like:</p>
<pre class="tab">+-----------------+--------------------------------+-----------------+
|     Command     |          Description           |   Key Binding   |
+-----------------+--------------------------------+-----------------+
|  forward-char   |Move point right N characters   |       C-f       |
|                 |(left if N is negative).        |                 |
|                 |                                |                 |
+-----------------+--------------------------------+-----------------+
|  backward-char  |Move point left N characters    |       C-b       |
|                 |(right if N is negative).       |                 |
|                 |                                |                 |
+-----------------+--------------------------------+-----------------+
</pre>
<p class="tab">When Emacs recognizes such a stretch of text as a table (see <a href="#Table-Recognition">Table Recognition</a>), editing the contents of each table cell automatically resizes the table, whenever the contents become too large to fit in the cell. You can use the commands defined in the following sections for navigating and editing the table layout.<br><br>Type <b>M-x table-fixed-width-mode</b> to toggle the automatic table resizing feature.</p>
<ul>
<li><a href="#Table-Definition">Table Definition</a>: What is a text based table.</li>
<li><a href="#Table-Creation">Table Creation</a>: How to create a table.</li>
<li><a href="#Table-Recognition">Table Recognition</a>: How to activate and deactivate tables.</li>
<li><a href="#Cell-Commands">Cell Commands</a>: Cell-oriented commands in a table.</li>
<li><a href="#Cell-Justification">Cell Justification</a>: Justifying cell contents.</li>
<li><a href="#Table-Rows-and-Columns">Table Rows and Columns</a>: Inserting and deleting rows and columns.</li>
<li><a href="#Table-Conversion">Table Conversion</a>: Converting between plain text and tables.</li>
<li><a href="#Table-Misc">Table Misc</a>: Table miscellany.</li>
</ul>
<h2 id="Table-Definition">What is a text-based table?</h2>
<p class="tab">A table consists of a rectangular text area that is divided into cells. Each cell must be at least one character wide and one character high, not counting its border lines. A cell can be subdivided into more cells, but they cannot overlap.<br><br>Cell border lines are drawn with three special characters, specified by the following variables:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px"><b>table-cell-vertical-char</b></td>
<td>The character used for vertical lines. The default is '<b>|</b>'.</td>
</tr>
<tr class="tcw">
<td><b>table-cell-horizontal-chars</b></td>
<td>The characters used for horizontal lines. The default is '<b>"-="</b>'.</td>
</tr>
<tr class="tcw">
<td><b>table-cell-intersection-char</b></td>
<td>The character used for the intersection of horizontal and vertical lines. The default is '<b>+</b>'.</td>
</tr>
</table>
<p class="tab">The following are examples of invalid tables:</p>
<pre class="tab">        +-----+       +--+    +-++--+
        |     |       |  |    | ||  |
        |     |       |  |    | ||  |
        +--+  |    +--+--+    +-++--+
        |  |  |    |  |  |    +-++--+
        |  |  |    |  |  |    | ||  |
        +--+--+    +--+--+    +-++--+
           1          2          3
</pre>
<p class="tab">From left to right:</p>
<ol>
<li>Overlapped cells or non-rectangular cells are not allowed.</li>
<li>The border must be rectangular.</li>
<li>Cells must have a minimum width/height of one character.</li>
</ol>
<h2 id="Table-Creation">Creating a table</h2>
<p class="tab">To create a text-based table from scratch, type <b>M-x table-insert</b>. This command prompts for the number of table columns, the number of table rows, cell width and cell height. The cell width and cell height do not include the cell borders; each can be specified as a single integer (which means each cell is given the same width/height), or as a sequence of integers separated by spaces or commas (which specify the width/height of the individual table columns/rows, counting from left to right for table columns and from top to bottom for table rows). The specified table is then inserted at point.<br><br>The table inserted by <b>M-x table-insert</b> contains special text properties, which tell Emacs to treat it specially as a text-based table. If you save the buffer to a file and visit it again later, those properties are lost, and the table appears to Emacs as an ordinary piece of text. See the next section, for how to convert it back into a table.</p>
<h2 id="Table-Recognition">Table recognition</h2>
<p class="tab">Existing text-based tables in a buffer, which lack the special text properties applied by <b>M-x table-insert</b>, are not treated specially as tables. To apply those text properties, type <b>M-x table-recognize</b>. This command scans the current buffer, recognizes valid table cells, and applies the relevant text properties. Conversely, type <b>M-x table-unrecognize</b> to unrecognize all tables in the current buffer, removing the special text properties and converting tables back to plain text.<br><br>You can also use the following commands to selectively recognize or unrecognize tables:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>M-x table-recognize-region</b></td>
<td>Recognize tables in the current region.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-unrecognize-region</b></td>
<td>Unrecognize tables in the current region.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-recognize-table</b></td>
<td>Recognize the table at point and activate it.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-unrecognize-table</b></td>
<td>Deactivate the table at point.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-recognize-cell</b></td>
<td>Recognize the cell at point and activate it.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-unrecognize-cell</b></td>
<td>Deactivate the cell at point.</td>
</tr>
</table>
<p class="tab">See <a href="#Table-Conversion">Table Conversion</a>, for another way to recognize a table.</p>
<h2 id="Cell-Commands">Commands for table cells</h2>
<p class="tab">The commands <b>M-x table-forward-cell</b> and <b>M-x table-backward-cell</b> move point from the current cell to an adjacent cell. The order is cyclic: when point is in the last cell of a table, <b>M-x table-forward-cell</b> moves to the first cell. Likewise, when point is on the first cell, <b>M-x table-backward-cell</b> moves to the last cell.<br><br><b>M-x table-span-cell</b> prompts for a direction: <b>right</b>, <b>left</b>, <b>above</b>, or <b>below</b>, and merges the current cell with the adjacent cell in that direction. This command signals an error if the merge would result in an illegitimate cell layout.<br><br><b>M-x table-split-cell</b> splits the current cell vertically or horizontally, prompting for the direction with the minibuffer. To split in a specific direction, use <b>M-x table-split-cell-vertically</b> and <b>M-x table-split-cell-horizontally</b>. When splitting vertically, the old cell contents are automatically split between the two new cells. When splitting horizontally, you are prompted for how to divide the cell contents, if the cell is non-empty; the options are '<b>split</b>' (divide the contents at point), '<b>left</b>' (put all the contents in the left cell), and '<b>right</b>' (put all the contents in the right cell).<br><br>The following commands enlarge or shrink a cell. By default, they resize by one row or column; if a numeric argument is supplied, that specifies the number of rows or columns to resize by.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x table-heighten-cell</b></td>
<td>Enlarge the current cell vertically.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-shorten-cell</b></td>
<td>Shrink the current cell vertically.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-widen-cell</b></td>
<td>Enlarge the current cell horizontally.</td>
</tr>
<tr class="tcw">
<td><b>M-x table-narrow-cell</b></td>
<td>Shrink the current cell horizontally.</td>
</tr>
</table>
<h2 id="Cell-Justification">Cell onlyification</h2>
<p class="tab">The command <b>M-x table-onlyify</b> imposes onlyification on one or more cells in a text-based table. Justification determines how the text in the cell is aligned, relative to the edges of the cell. Each cell in a table can be separately onlyified.<br><br><b>M-x table-onlyify</b> first prompts for what to onlyify; the options are '<b>cell</b>' (only the current cell), '<b>column</b>' (all cells in the current table column) and '<b>row</b>' (all cells in the current table row). The command then prompts for the onlyification style; the options are <b>left</b>, <b>center</b>, <b>right</b>, <b>top</b>, <b>middle</b>, <b>bottom</b>, or <b>none</b> (meaning no vertical onlyification).<br><br>Horizontal and vertical onlyification styles are specified independently, and both types can be in effect simultaneously; for instance, you can call <b>M-x table-onlyify</b> twice, once to specify right onlyification and once to specify bottom onlyification, to align the contents of a cell to the bottom right.<br><br>The onlyification style is stored in the buffer as a text property, and is lost when you kill the buffer or exit Emacs. However, the table recognition commands, such as <b>M-x table-recognize</b> (see <a href="#Table-Recognition">Table Recognition</a>), attempt to determine and re-apply each cell's onlyification style, by examining its contents. To disable this feature, change the variable <b>table-detect-cell-alignment</b> to <b>nil</b>.</p>
<h2 id="Table-Rows-and-Columns">Table rows and columns</h2>
<p class="tab"><b>M-x table-insert-row</b> inserts a row of cells before the current table row. The current row, together with point, is pushed down past the new row. To insert a row after the last row at the bottom of a table, invoke this command with point below the table, only below the bottom edge. You can insert more than one row at a time using a numeric prefix argument.<br><br>Similarly, <b>M-x table-insert-column</b> inserts a column of cells to the left of the current table column. To insert a column to the right side of the rightmost column, invoke this command with point to the right of the rightmost column, outside the table. A numeric prefix argument specifies the number of columns to insert.<br><br><b>M-x table-delete-column</b> deletes the column of cells at point. Similarly, <b>M-x table-delete-row</b> deletes the row of cells at point. A numeric prefix argument to either command specifies the number of columns or rows to delete.</p>
<h2 id="Table-Conversion">Converting between plain text and tables</h2>
<p class="tab">The command <b>M-x table-capture</b> captures plain text in a region and turns it into a table. Unlike <b>M-x table-recognize</b> (see <b>Table Recognition</b>), the original text does not need to have a table appearance; it only needs to have a logical table-like structure.<br><br>For example, suppose we have the following numbers, which are divided into three lines and separated horizontally by commas:</p>
<pre class="tab tcy">1, 2, 3, 4
5, 6, 7, 8
, 9, 10</pre>
<p class="tab">Invoking <b>M-x table-capture</b> on that text produces this table:</p>
<pre class="tab">     +-----+-----+-----+-----+
     |1    |2    |3    |4    |
     +-----+-----+-----+-----+
     |5    |6    |7    |8    |
     +-----+-----+-----+-----+
     |     |9    |10   |     |
     +-----+-----+-----+-----+
</pre>
<p class="tab"><b>M-x table-release</b> does the opposite: it converts a table back to plain text, removing its cell borders.<br><br>One application of this pair of commands is to edit a text in layout. Look at the following three paragraphs (the latter two are indented with header lines):</p>
<pre class="tab tcy">table-capture is a powerful command.
Here are some things it can do:
Parse Cell Items   Using row and column delimiter regexps,
                   it parses the specified text area and
                   extracts cell items into a table.
</pre>
<p class="tab">Applying table-capture to a region containing the above text, with empty strings for the column and row delimiter regexps, creates a table with a single cell like the following one.</p>
<pre class="tab">     +----------------------------------------------------------+
     |table-capture is a powerful command.                      |
     |Here are some things it can do:                           |
     |                                                          |
     |Parse Cell Items   Using row and column delimiter regexps,|
     |                   it parses the specified text area and  |
     |                   extracts cell items into a table.      |
     +----------------------------------------------------------+
</pre>
<p class="tab">We can then use the cell splitting commands (see <a href="#Cell-Commands">Cell Commands</a>) to subdivide the table so that each paragraph occupies a cell:</p>
<pre class="tab">     +----------------------------------------------------------+
     |table-capture is a powerful command.                      |
     |Here are some things it can do:                           |
     +-----------------+----------------------------------------+
     |Parse Cell Items | Using row and column delimiter regexps,|
     |                 | it parses the specified text area and  |
     |                 | extracts cell items into a table.      |
     +-----------------+----------------------------------------+
</pre>
<p class="tab">Each cell can now be edited independently without affecting the layout of other cells. When finished, we can invoke <b>M-x table-release</b> to convert the table back to plain text.</p>
<h2 id="Table-Misc">Table miscellany</h2>
<p class="tab">The command <b>table-query-dimension</b> reports the layout of the table and table cell at point. Here is an example of its output:</p>
<pre class="tab tcy">Cell: (21w, 6h), Table: (67w, 16h), Dim: (2c, 3r), Total Cells: 5</pre>
<p class="tab">This indicates that the current cell is 21 characters wide and 6 lines high, the table is 67 characters wide and 16 lines high with 2 columns and 3 rows, and a total of 5 cells.<br><br><b>M-x table-insert-sequence</b> inserts a string into each cell. Each string is a part of a sequence i.e., a series of increasing integer numbers.<br><br><b>M-x table-generate-source</b> generates a table formatted for a specific markup language. It asks for a language (which must be one of html, latex, or cals), a destination buffer where to put the result, and a table caption, and then inserts the generated table into the specified buffer. The default destination buffer is table.lang, where lang is the language you specified.</p>
<h2 id="Two_002dColumn">Two-column editing</h2>
<p class="tab">Two-column mode lets you conveniently edit two side-by-side columns of text. It uses two side-by-side windows, each showing its own buffer. There are three ways to enter two-column mode:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>&lt;F2&gt; 2 or C-x 6 2</b></td>
<td>Enter two-column mode with the current buffer on the left, and on the right, a buffer whose name is based on the current buffer's name (<b>2C-two-columns</b>). If the right buffer doesn't already exist, it starts out empty; the current buffer's contents are not changed.<br><br>This command is appropriate when the current buffer is empty or contains only one column and you want to add another column.</td>
</tr>
<tr class="tcw">
<td><b>&lt;F2&gt; s</b> or <b>C-x 6 s</b></td>
<td>Split the current buffer, which contains two-column text, into two buffers, and display them side by side (<b>2C-split</b>). The current buffer becomes the left buffer, but the text in the right column is moved into the right buffer. The current column specifies the split point. Splitting starts with the current line and continues to the end of the buffer.<br><br>This command is appropriate when you have a buffer that already contains two-column text, and you want to separate the columns temporarily.</td>
</tr>
<tr class="tcw">
<td><b>&lt;F2&gt; b</b> <i>buffer</i> <b>&lt;RET&gt;</b>,<br><b>C-x 6 b</b> <i>buffer</i> <b>&lt;RET&gt;</b></td>
<td>Enter two-column mode using the current buffer as the left buffer, and using buffer as the right buffer (<b>2C-associate-buffer</b>).</td>
</tr>
</table>
<p class="tab"><b>&lt;F2&gt; s</b> or <b>C-x 6 s</b> looks for a column separator, which is a string that appears on each line between the two columns. You can specify the width of the separator with a numeric argument to <b>&lt;F2&gt; s</b>; that many characters, before point, constitute the separator string. By default, the width is 1, so the column separator is the character before point.<br><br>When a line has the separator at the proper place, <b>&lt;F2&gt; s</b> puts the text after the separator into the right buffer, and deletes the separator. Lines that don't have the column separator at the proper place remain unsplit; they stay in the left buffer, and the right buffer gets an empty line to correspond. (This is the way to write a line that "spans both columns while in two-column mode": write it in the left buffer, and put an empty line in the right buffer.)<br><br>The command <b>C-x 6 &lt;RET&gt;</b> or <b>&lt;F2&gt; &lt;RET&gt;</b> (<b>2C-newline</b>) inserts a newline in each of the two buffers at corresponding positions. This is the easiest way to add a new line to the two-column text while editing it in split buffers.<br><br>When you have edited both buffers as you want, merge them with <b>&lt;F2&gt; 1</b> or <b>C-x 6 1</b> (<b>2C-merge</b>). This copies the text from the right buffer as a second column in the other buffer. To go back to two-column editing, use <b>&lt;F2&gt; s</b>.<br><br>Use <b>&lt;F2&gt; d</b> or <b>C-x 6 d</b> to dissociate the two buffers, leaving each as it stands (<b>2C-dissociate</b>). If the other buffer, the one not current when you type <b>&lt;F2&gt; d</b>, is empty, <b>&lt;F2&gt; d</b> kills it.</p>
<h2 id="Programs">Editing programs</h2>
<p class="tab">This chapter describes Emacs features for facilitating editing programs. Some of the things these features can do are:</p>
<ul>
<li>Find or move over top-level definitions (see <a href="#Defuns">Defuns</a>).</li>
<li>Apply the usual indentation conventions of the language (see <a href="#Program-Indent">Program Indent</a>).</li>
<li>Balance parentheses (see <a href="#Parentheses">Parentheses</a>).</li>
<li>Insert, kill or align comments (see <a href="#Comments">Comments</a>).</li>
<li>Highlight program syntax (see <a href="#Font-Lock">Font Lock</a>).</li>
</ul>
<p class="tab">Quick Links:</p>
<ul>
<li><a href="#Program-Modes">Program Modes</a>: Major modes for editing programs.</li>
<li><a href="#Defuns">Defuns</a>: Commands to operate on major top-level parts of a program.</li>
<li><a href="#Program-Indent">Program Indent</a>: Adonlying indentation to show the nesting.</li>
<li><a href="#Parentheses">Parentheses</a>: Commands that operate on parentheses.</li>
<li><a href="#Comments">Comments</a>: Inserting, killing, and aligning comments.</li>
<li><a href="#Documentation">Documentation</a>: Getting documentation of functions you plan to call.</li>
<li><a href="#Hideshow">Hideshow</a>: Displaying blocks selectively.</li>
<li><a href="#Symbol-Completion">Symbol Completion</a>: Completion on symbol names of your program or language.</li>
<li><a href="#Glasses">Glasses</a>: Making identifiersLikeThis more readable.</li>
<li><a href="#Semantic">Semantic</a>: Suite of editing tools based on source code parsing.</li>
<li><a href="#Misc-for-Programs">Misc for Programs</a>: Other Emacs features useful for editing programs.</li>
<li><a href="#C-Modes">C Modes</a>: Special commands of C, C++, Objective-C, Java, IDL, Pike and AWK modes.</li>
<li><a href="#Asm-Mode">Asm Mode</a>: Asm mode and its special features.</li>
<li><a href="#Fortran">Fortran</a>: Fortran mode and its special features.</li>
</ul>
<h2 id="Program-Modes">Major modes for programming languages</h2>
<p class="tab">Emacs has specialized major modes (see <a href="#Major-Modes">Major Modes</a>) for many programming languages. A programming language mode often specifies the syntax of expressions, the customary rules for indentation, how to do syntax highlighting for the language, and how to find the beginning or end of a function definition. It often has features for compiling and debugging programs as well. The major mode for each language is named after the language; for instance, the major mode for the C programming language is <b>c-mode</b>.<br><br>Emacs has programming language modes for Lisp, Scheme, the Scheme-based DSSSL expression language, Ada, ASM, AWK, C, C++, Delphi, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, JavaScript, Metafont (TeX's companion for font creation), Modula2, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, Tcl, and VHDL. An alternative mode for Perl is called CPerl mode. Modes are also available for the scripting languages of the common GNU and Unix shells, VMS DCL, and MS-DOS/Microsoft Windows '<b>BAT</b>' files, and for makefiles, DNS master files, and various sorts of configuration files.<br><br>Ideally, Emacs should have a major mode for each programming language that you might want to edit. If it doesn't have a mode for your favorite language, the mode might be implemented in a package not distributed with Emacs (see <a href="#Packages">Packages</a>); or you can contribute one.<br><br>In most programming languages, indentation should vary from one line to another to illustrate the structure of the program. Therefore, in most programming language modes, typing <b>&lt;TAB&gt;</b> updates the indentation of the current line (see <a href="#Program-Indent">Program Indent</a>). Furthermore, <b>&lt;DEL&gt;</b> is usually bound to <b>backward-delete-char-untabify</b>, which deletes backward treating each tab as if it were the equivalent number of spaces, so that you can delete one column of indentation without worrying whether the whitespace consists of spaces or tabs.<br><br>Entering a programming language mode runs the custom Lisp functions specified in the hook variable <b>prog-mode-hook</b>, followed by those specified in the mode's own mode hook (see <a href="#Major-Modes">Major Modes</a>). For instance, entering C mode runs the hooks <b>prog-mode-hook</b> and <b>c-mode-hook</b>. See <a href="#Hooks">Hooks</a>, for information about hooks.<br><br>The Emacs distribution contains Info manuals for the major modes for Ada, C/C++/Objective C/Java/Corba IDL/Pike/AWK, and IDLWAVE.</p>
<h2 id="Defuns">Top-Level definitions, or defuns</h2>
<p class="tab">In Emacs, a major definition at the top level in the buffer, such as a function, is called a defun. The name comes from Lisp, but in Emacs we use it for all languages.</p>
<ul>
<li><a href="#Left-Margin-Paren">Left Margin Paren</a>: An open-paren or similar opening delimiter starts a defun if it's at the left margin.</li>
<li><a href="#Moving-by-Defuns">Moving by Defuns</a>: Commands to move over or mark a major definition.</li>
<li><a href="#Imenu">Imenu</a>: Making buffer indexes as menus.</li>
<li><a href="#Which-Function">Which Function</a>: Which Function mode shows which function you are currently using.</li>
</ul>
<h2 id="Left-Margin-Paren">Left margin convention</h2>
<p class="tab">Many programming-language modes assume by default that any opening delimiter found at the left margin is the start of a top-level definition, or defun. Therefore, don't put an opening delimiter at the left margin unless it should have that significance. For instance, never put an open-parenthesis at the left margin in a Lisp file unless it is the start of a top-level list.<br><br>The convention speeds up many Emacs operations, which would otherwise have to scan back to the beginning of the buffer to analyze the syntax of the code.<br><br>If you don't follow this convention, not only will you have trouble when you explicitly use the commands for motion by defuns; other features that use them also give you trouble. This includes the indentation commands (see <a href="#Program-Indent">Program Indent</a>) and Font Lock mode (see <a href="#Font-Lock">Font Lock</a>).<br><br>The most likely problem case is when you want an opening delimiter at the start of a line inside a string. To avoid trouble, put an escape character ('<b>\</b>', in C and Emacs Lisp, '<b>/</b>' in some other Lisp dialects) before the opening delimiter. This does not affect the contents of the string, but prevents that opening delimiter from starting a defun. Here's an example:</p>
<pre class="tab tcy">(insert "Foo: \(bar) ")</pre>
<p class="tab">To help you catch violations of this convention, Font Lock mode highlights confusing opening delimiters (those that ought to be quoted) in bold red.<br><br>If you need to override this convention, you can do so by setting the variable <b>open-paren-in-column-0-is-defun-start</b>. If this user option is set to <b>t</b> (the default), opening parentheses or braces at column zero always start defuns. When it is <b>nil</b>, defuns are found by searching for parens or braces at the outermost level.<br><br>Usually, leave this option at its default value of <b>t</b>. If your buffer contains parentheses or braces in column zero which don't start defuns, and it is somehow impractical to remove these parentheses or braces, it might be helpful to set the option to <b>nil</b>. Be aware that this might make scrolling and display in large buffers quite sluggish. Furthermore, the parentheses and braces must be correctly matched throughout the buffer for it to work properly.</p>
<h2 id="Moving-by-Defuns">Moving by defuns</h2>
<p class="tab">These commands move point or set up the region based on top-level major definitions, also called defuns.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>C-M-a</b></td>
<td>Move to beginning of current or preceding defun (<b>beginning-of-defun</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-e</b></td>
<td>Move to end of current or following defun (<b>end-of-defun</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-h</b></td>
<td>Put region around whole current or following defun (<b>mark-defun</b>).</td>
</tr>
</table>
<p class="tab">The commands to move to the beginning and end of the current defun are <b>C-M-a</b> (<b>beginning-of-defun</b>) and <b>C-M-e</b> (<b>end-of-defun</b>). If you repeat one of these commands, or use a positive numeric argument, each repetition moves to the next defun in the direction of motion.<br><br><b>C-M-a</b> with a negative argument <b>&minus;n</b> moves forward <b>n</b> times to the next beginning of a defun. This is not the same place that <b>C-M-e</b> with argument <b>n</b> would move to; the end of this defun is not usually the same place as the beginning of the following defun. (Whitespace, comments, and perhaps declarations can separate them.) Likewise, <b>C-M-e</b> with a negative argument moves back to an end of a defun, which is not quite the same as <b>C-M-a</b> with a positive argument.<br><br>To operate on the current defun, use <b>C-M-h</b> (<b>mark-defun</b>), which sets the mark at the end of the current defun and puts point at its beginning. See <a href="#Marking-Objects">Marking Objects</a>. This is the easiest way to get ready to kill the defun order to move it to a different place in the file. If you use the command while point is between defuns, it uses the following defun. If you use the command while the mark is already active, it sets the mark but does not move point; furthermore, each successive use of <b>C-M-h</b> extends the end of the region to include one more defun.<br><br>In C mode, <b>C-M-h</b> runs the function <b>c-mark-function</b>, which is almost the same as <b>mark-defun</b>; the difference is that it backs up over the argument declarations, function name and returned data type so that the entire C function is inside the region. This is an example of how major modes adonly the standard key bindings so that they do their standard jobs in a way better fitting a particular language. Other major modes may replace any or all these key bindings for that purpose.</p>
<h2 id="Imenu">Imenu</h2>
<p class="tab">The Imenu facility offers a way to find the major definitions in a file by name. It is also useful in text formatter major modes, where it treats each chapter, section, etc., as a definition. (See <a href="#Tags">Tags</a>, for a more powerful feature that handles multiple files together.)<br><br>If you type <b>M-x imenu</b>, it reads the name of a definition using the minibuffer, then moves point to that definition. You can use completion to specify the name; the command always displays the whole list of valid names.<br><br>Alternatively, you can bind the command imenu to a mouse click. Then it displays mouse menus for you to select a definition name. You can also add the buffer's index to the menu bar by calling <b>imenu-add-menubar-index</b>. If you want to have this menu bar item available for all buffers in a certain major mode, you can do this by adding <b>imenu-add-menubar-index</b> to its mode hook. But if you have done that, you have to wait a little while each time you visit a file in that mode, while Emacs finds all the definitions in that buffer.<br><br>When you change the contents of a buffer, if you add or delete definitions, you can update the buffer's index based on the new contents by invoking the '<b>*Rescan*</b>' item in the menu. Rescanning happens automatically if you set <b>imenu-auto-rescan</b> to a non-nil value. There is no need to rescan because of small changes in the text.<br><br>You can customize the way the menus are sorted by setting the variable <b>imenu-sort-function</b>. By default, names are ordered as they occur in the buffer; if you want alphabetic sorting, use the symbol <b>imenu--sort-by-name</b> as the value. You can also define a comparison function by writing Lisp code.<br><br>Imenu provides the information to guide Which Function mode (see <a href="#Which-Function">Which Function</a>). The Speedbar can also use it (see <a href="#Speedbar">Speedbar</a>).</p>
<h2 id="Which-Function">Which function mode</h2>
<p class="tab">Which Function mode is a global minor mode (see <a href="#Minor-Modes">Minor Modes</a>) which displays the current function name in the mode line, updating it as you move around in a buffer.<br><br>To either enable or disable Which Function mode, use the command <b>M-x which-function-mode</b>. Which Function mode is a global minor mode. By default, it takes effect in all major modes that know how to support it (i.e., all the major modes that support Imenu). You can restrict it to a specific list of major modes by changing the value of the variable <b>which-func-modes</b> from <b>t</b> (which means to support all available major modes) to a list of major mode names.</p>
<h2 id="Program-Indent">Indentation for programs</h2>
<p class="tab">The best way to keep a program properly indented is to use Emacs to reindent it as you change it. Emacs has commands to indent either a single line, a specified number of lines, or all the lines inside a single parenthetical grouping.<br><br>See <a href="#Indentation">Indentation</a>, for general information about indentation. This section describes indentation features specific to programming language modes.</p>
<ul>
<li><a href="#Basic-Indent">Basic Indent</a>: Indenting a single line.</li>
<li><a href="#Multi_002dline-Indent">Multi-line Indent</a>: Commands to reindent many lines at once.</li>
<li><a href="#Lisp-Indent">Lisp Indent</a>: Specifying how each Lisp function should be indented.</li>
<li><a href="#C-Indent">C Indent</a>: Extra features for indenting C and related modes.</li>
<li><a href="#Custom-C-Indent">Custom C Indent</a>: Controlling indentation style for C and related modes.</li>
</ul>
<p class="tab">Emacs also provides a Lisp pretty-printer in the <b>pp</b> package, which reformats Lisp objects with nice-looking indentation.</p>
<h2 id="Basic-Indent">Basic program indentation commands</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>&lt;TAB&gt;</b></td>
<td>Adonly indentation of current line (<b>indent-for-tab-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-j</b></td>
<td>Insert a newline, then adonly indentation of following line (<b>newline-and-indent</b>).</td>
</tr>
</table>
<p class="tab">The basic indentation command is &lt;TAB&gt; (<b>indent-for-tab-command</b>), which was documented in <a href="#Indentation">Indentation</a>. In programming language modes, <b>&lt;TAB&gt;</b> indents the current line, based on the indentation and syntactic content of the preceding lines; if the region is active, <b>&lt;TAB&gt;</b> indents each line in the region, not only the current line.<br><br>The command <b>C-j</b> (<b>newline-and-indent</b>), which was documented in <a href="#Indentation-Commands">Indentation Commands</a>, does the same as <b>&lt;RET&gt;</b> followed by <b>&lt;TAB&gt;</b>: it inserts a new line, then adonlys the line's indentation.<br><br>When indenting a line that starts within a parenthetical grouping, Emacs usually places the start of the line under the preceding line in the group, or under the text after the parenthesis. If you manually give one of these lines a nonstandard indentation (e.g., for aesthetic purposes), the lines below follow it.<br><br>The indentation commands for most programming language modes assume that an open-parenthesis, open-brace or other opening delimiter at the left margin is the start of a function. If the code you are editing violates this assumption&mdash;even if the delimiters occur in strings or comments&mdash;you must set <b>open-paren-in-column-0-is-defun-start</b> to <b>nil</b> for indentation to work properly. See <a href="#Left-Margin-Paren">Left Margin Paren</a>.</p>
<h2 id="Multi_002dline-Indent">Indenting several lines</h2>
<p class="tab">Sometimes, you may want to reindent several lines of code at a time. One way to do this is to use the mark; when the mark is active and the region is non-empty, <b>&lt;TAB&gt;</b> indents every line in the region. Alternatively, the command <b>C-M-\</b> (<b>indent-region</b>) indents every line in the region, whether or not the mark is active (see <a href="#Indentation-Commands">Indentation Commands</a>).<br><br>Also, Emacs provides the following commands for indenting large chunks of code:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-M-q</b></td>
<td>Reindent all the lines within one parenthetical grouping.</td>
</tr>
<tr class="tcw">
<td><b>C-u &lt;TAB&gt;</b></td>
<td>Shift an entire parenthetical grouping rigidly sideways so that its first line is properly indented.</td>
</tr>
<tr class="tcw">
<td><b>M-x indent-code-rigidly</b></td>
<td>Shift all the lines in the region rigidly sideways, but do not alter lines that start inside comments and strings.</td>
</tr>
</table>
<p class="tab">To reindent the contents of a single parenthetical grouping, position point before the beginning of the grouping and type <b>C-M-q</b>. This changes the relative indentation in the grouping, without affecting its overall indentation (i.e., the indentation of the line where the grouping starts). The function that <b>C-M-q</b> runs depends on the major mode; it is <b>indent-pp-sexp</b> in Lisp mode, <b>c-indent-exp</b> in C mode, etc. To correct the overall indentation as well, type <b>&lt;TAB&gt;</b> first.<br><br>If you like the relative indentation within a grouping but not the indentation of its first line, move point to that first line and type <b>C-u &lt;TAB&gt;</b>. In Lisp, C, and some other major modes, <b>&lt;TAB&gt;</b> with a numeric argument reindents the current line as usual, then reindents by the same amount all the lines in the parenthetical grouping starting on the current line. It is clever, though, and does not alter lines that start inside strings. Neither does it alter C preprocessor lines when in C mode, but it does reindent any continuation lines attached to them.<br><br>The command <b>M-x indent-code-rigidly</b> rigidly shifts all the lines in the region sideways, like <b>indent-rigidly</b> does (see <a href="#Indentation-Commands">Indentation Commands</a>). It doesn't alter the indentation of lines that start inside a string, unless the region also starts inside that string. The prefix arg specifies the number of columns to indent.</p>
<h2 id="Lisp-Indent">Customizing Lisp indentation</h2>
<p class="tab">The indentation pattern for a Lisp expression can depend on the function called by the expression. For each Lisp function, you can choose among several predefined patterns of indentation, or define an arbitrary one with a Lisp program.<br><br>The standard pattern of indentation is as follows: the second line of the expression is indented under the first argument, if that is on the same line as the beginning of the expression; otherwise, the second line is indented underneath the function name. Each following line is indented under the previous line whose nesting depth is the same.<br><br>If the variable <b>lisp-indent-offset</b> is non-nil, it overrides the usual indentation pattern for the second line of an expression, so that such lines are always indented <b>lisp-indent-offset</b> more columns than the containing list.<br><br>Certain functions override the standard pattern. Functions whose names start with <b>def</b> treat the second lines as the start of a body, by indenting the second line <b>lisp-body-indent</b> additional columns beyond the open-parenthesis that starts the expression.<br><br>You can override the standard pattern in various ways for individual functions, according to the <b>lisp-indent-function</b> property of the function name. This is normally done for macro definitions, using the <b>declare</b> construct.</p>
<h2 id="C-Indent">Commands for C indentation</h2>
<p class="tab">Here are special features for indentation in C mode and related modes:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-q</b></td>
<td>Reindent the current top-level function definition or aggregate type declaration (<b>c-indent-defun</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-q</b></td>
<td>Reindent each line in the balanced expression that follows point (<b>c-indent-exp</b>). A prefix argument inhibits warning messages about invalid syntax.</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>Reindent the current line, and/or in some cases insert a tab character (<b>c-indent-command</b>).<br><br>If <b>c-tab-always-indent</b> is <b>t</b>, this command always reindents the current line and does nothing else. This is the default.<br><br>If that variable is <b>nil</b>, this command reindents the current line only if point is at the left margin or in the line's indentation; otherwise, it inserts a tab (or the equivalent number of spaces, if <b>indent-tabs-mode</b> is <b>nil</b>).<br><br>Any other value (not <b>nil</b> or <b>t</b>) means always reindent the line, and also insert a tab if within a comment or a string.</td>
</tr>
</table>
<p class="tab">To reindent the whole current buffer, type <b>C-x h C-M-\</b>. This first selects the whole buffer as the region, then reindents that region.<br><br>To reindent the current block, use <b>C-M-u C-M-q</b>. This moves to the front of the block and then reindents it all.</p>
<h2 id="Custom-C-Indent">Customizing C indentation</h2>
<p class="tab">C mode and related modes use a flexible mechanism for customizing indentation. C mode indents a source line in two steps: first it classifies the line syntactically according to its contents and context; second, it determines the indentation offset associated by your selected style with the syntactic construct and adds this onto the indentation of the anchor statement.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-c . &lt;RET&gt;</b> <i>style</i> <b>&lt;RET&gt;</b></td>
<td>Select a predefined style <i>style</i> (<b>c-set-style</b>).</td>
</tr>
</table>
<p class="tab">A style is a named collection of customizations that is used in C mode and the related modes. Styles, for a complete description. Emacs comes with several predefined styles, including gnu, k&amp;r, bsd, stroustrup, linux, python, java, whitesmith, ellemtel, and awk. Some of these styles are primarily intended for one language, but any of them can be used with any of the languages supported by these modes. To find out what a style looks like, select it and reindent some code, e.g., by typing <b>&lt;C-M-q&gt;</b> at the start of a function definition.<br><br>To choose a style for the current buffer, use the command <b>C-c ..</b> Specify a style name as an argument (case is not significant). This command affects the current buffer only, and it affects only future invocations of the indentation commands; it does not reindent the code already in the buffer. To reindent the whole buffer in the new style, you can type <b>C-x h C-M-\</b>.<br><br>You can also set the variable <b>c-default-style</b> to specify the default style for various major modes. Its value should be either the style's name (a string) or an <b>alist</b>, where each element specifies one major mode and which indentation style to use for it. For example,</p>
<pre class="tab tcy">(setq c-default-style
	'((java-mode . "java")
	(awk-mode . "awk")
	(other . "gnu")))</pre>
<p class="tab">Specifies explicit choices for Java and AWK modes, and the default '<b>gnu</b>' style for the other C-like modes. (These settings are actually the defaults.) This variable takes effect when you select one of the C-like major modes; thus, if you specify a new default style for Java mode, you can make it take effect in an existing Java mode buffer by typing <b>M-x java-mode</b> there.<br><br>The gnu style specifies the formatting recommended by the GNU Project for C; it is the default, so as to encourage use of our recommended style.<br><br>As an alternative to specifying a style, you can tell Emacs to guess a style by typing <b>M-x c-guess</b> in a sample code buffer. You can then apply the guessed style to other buffers with <b>M-x c-guess-install</b>.</p>
<h2 id="Parentheses">Commands for editing with parentheses</h2>
<p class="tab">This section describes the commands and features that take advantage of the parenthesis structure in a program, or help you keep it balanced.<br><br>When talking about these facilities, the term "parenthesis" includes braces, brackets, or whatever delimiters are defined to match in pairs. The major mode controls which delimiters are significant, through the syntax table. In Lisp, only parentheses count; in C, these commands apply to braces and brackets too.<br><br>You can use <b>M-x check-parens</b> to find any unbalanced parentheses and unbalanced string quotes in the buffer.</p>
<ul>
<li><a href="#Expressions">Expressions</a>: Expressions with balanced parentheses.</li>
<li><a href="#Moving-by-Parens">Moving by Parens</a>: Commands for moving up, down and across in the structure of parentheses.</li>
<li><a href="#Matching">Matching</a>: Insertion of a close-delimiter flashes matching open.</li>
</ul>
<h2 id="Expressions">Expressions with balanced parentheses</h2>
<p class="tab">Each programming language mode has its own definition of a balanced expression. Balanced expressions often include individual symbols, numbers, and string constants, and pieces of code enclosed in a matching pair of delimiters. The following commands deal with balanced expressions (in Emacs, such expressions are referred to internally as <b>sexps10</b>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-M-f</b></td>
<td>Move forward over a balanced expression (<b>forward-sexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-b</b></td>
<td>Move backward over a balanced expression (<b>backward-sexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-k</b></td>
<td>Kill balanced expression forward (<b>kill-sexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-t</b></td>
<td>Transpose expressions (<b>transpose-sexps</b>).</td>
</tr>
<tr class="tcw">
<td><b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0c4f2141214c">[email&#160;protected]</a></b>, <b>C-M-&lt;SPC&gt;</b></td>
<td>Put mark after following expression (<b>mark-sexp</b>).</td>
</tr>
</table>
<p class="tab">To move forward over a balanced expression, use <b>C-M-f</b> (<b>forward-sexp</b>). If the first significant character after point is an opening delimiter (e.g., '<b>(</b>', '<b>[</b>' or '<b>{</b>' in C), this command moves past the matching closing delimiter. If the character begins a symbol, string, or number, the command moves over that.<br><br>The command <b>C-M-b</b> (<b>backward-sexp</b>) moves backward over a balanced expression&mdash;like <b>C-M-f</b>, but in the reverse direction. If the expression is preceded by any prefix characters (single-quote, backquote and comma, in Lisp), the command moves back over them as well.<br><br><b>C-M-f</b> or <b>C-M-b</b> with an argument repeats that operation the specified number of times; with a negative argument means to move in the opposite direction. In most modes, these two commands move across comments as if they were whitespace. Note that their keys, <b>C-M-f</b> and <b>C-M-b</b>, are analogous to <b>C-f</b> and <b>C-b</b>, which move by characters (see <a href="#Moving-Point">Moving Point</a>), and <b>M-f</b> and <b>M-b</b>, which move by words (see <a href="#Words">Words</a>).<br><br>To kill a whole balanced expression, type <b>C-M-k</b> (<b>kill-sexp</b>). This kills the text that <b>C-M-f</b> would move over.<br><br><b>C-M-t</b> (<b>transpose-sexps</b>) switches the positions of the previous balanced expression and the next one. It is analogous to the <b>C-t</b> command, which transposes characters (see <a href="#Transpose">Transpose</a>). An argument to <b>C-M-t</b> serves as a repeat count, moving the previous expression over that many following ones. A negative argument moves the previous balanced expression backwards across those before it. An argument of zero, rather than doing nothing, transposes the balanced expressions ending at or after point and the mark.<br><br>To operate on balanced expressions with a command which acts on the region, type <b>C-M-&lt;SPC&gt;</b> (<b>mark-sexp</b>). This sets the mark where <b>C-M-f</b> would move. While the mark is active, each successive call to this command extends the region by shifting the mark by one expression. Positive or negative numeric arguments move the mark forward or backward by the specified number of expressions. The alias <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1f5c3252325f">[email&#160;protected]</a></b> is equivalent to <b>C-M-&lt;SPC&gt;</b>. See <a href="#Marking-Objects">Marking Objects</a>, for more information about this and related commands.<br><br>In languages that use infix operators, such as C, it is not possible to recognize all balanced expressions because there can be multiple possibilities at a given position. For example, C mode does not treat '<b>foo + bar</b>' as a single expression, even though it is one C expression; instead, it recognizes '<b>foo</b>' as one expression and '<b>bar</b>' as another, with the '<b>+</b>' as punctuation between them. However, C mode recognizes '<b>(foo + bar)</b>' as a single expression, because of the parentheses.</p>
<h2 id="Moving-by-Parens">Moving in the parenthesis structure</h2>
<p class="tab">The following commands move over groupings delimited by parentheses (or whatever else serves as delimiters in the language you are working with). They ignore strings and comments, including any parentheses in them, and also ignore parentheses that are "quoted" with an escape character. These commands are mainly intended for editing programs, but can be useful for editing any text containing parentheses. They are referred to internally as "list" commands because in Lisp these groupings are lists.<br><br>These commands assume that the starting point is not inside a string or a comment. If you invoke them from inside a string or comment, the results are unreliable.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>C-M-n</b></td>
<td>Move forward over a parenthetical group (<b>forward-list</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-p</b></td>
<td>Move backward over a parenthetical group (<b>backward-list</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-u</b></td>
<td>Move up in parenthesis structure (<b>backward-up-list</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-d</b></td>
<td>Move down in parenthesis structure (<b>down-list</b>).</td>
</tr>
</table>
<p class="tab">The "list" commands <b>C-M-n</b> (<b>forward-list</b>) and <b>C-M-p</b> (<b>backward-list</b>) move forward or backward over one (or <b>n</b>) parenthetical groupings.<br><br><b>C-M-n</b> and <b>C-M-p</b> try to stay at the same level in the parenthesis structure. To move up one (or <b>n</b>) levels, use <b>C-M-u</b> (<b>backward-up-list</b>). <b>C-M-u</b> moves backward up past one unmatched opening delimiter. A positive argument serves as a repeat count; a negative argument reverses the direction of motion, so that the command moves forward and up one or more levels.<br><br>To move down in the parenthesis structure, use <b>C-M-d</b> (<b>down-list</b>). In Lisp mode, where '<b>(</b>' is the only opening delimiter, this is nearly the same as searching for a '<b>(</b>'. An argument specifies the number of levels to go down.</p>
<h2 id="Matching">Matching parentheses</h2>
<p class="tab">Emacs has some parenthesis matching features, which make it easy to see how and whether parentheses (or other delimiters) match up.<br><br>Whenever you type a self-inserting character that is a closing delimiter, the cursor moves momentarily to the location of the matching opening delimiter, provided that is on the screen. If it's not on the screen, Emacs displays some of the text near it in the echo area. Either way, you can tell which grouping you are closing off. If the opening delimiter and closing delimiter are mismatched&mdash;such as in '<b>[x)</b>'&mdash;a warning message is displayed in the echo area.<br><br>Three variables control the display of matching parentheses:</p>
<ul>
<li><b>blink-matching-paren</b> turns the feature on or off: <b>nil</b> disables it, but the default is t to enable it.</li>
<li><b>blink-matching-delay</b> says how many seconds to leave the cursor on the matching opening delimiter, before bringing it back to the real location of point. This may be an integer or floating-point number; the default is 1.</li>
<li><b>blink-matching-paren-distance</b> specifies how many characters back to search to find the matching opening delimiter. If the match is not found in that distance, Emacs stops scanning and nothing is displayed. The default is 102400.</li>
</ul>
<p class="tab">Show Paren mode, a global minor mode, provides a more powerful kind of automatic matching. Whenever point is before an opening delimiter or after a closing delimiter, both that delimiter and its opposite delimiter are highlighted. To toggle Show Paren mode, type <b>M-x show-paren-mode</b>.<br><br>Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters. Whenever you insert an opening delimiter, the matching closing delimiter is automatically inserted as well, leaving point between the two. To toggle Electric Pair mode, type <b>M-x electric-pair-mode</b>.</p>
<h2 id="Comments">Manipulating comments</h2>
<p class="tab">Because comments are such an important part of programming, Emacs provides special commands for editing and inserting comments. It can also do spell checking on comments with Flyspell Prog mode (see <a href="#Spelling">Spelling</a>).<br><br>Some major modes have special rules for indenting different kinds of comments. For example, in Lisp code, comments starting with two semicolons are indented as if they were lines of code, while those starting with three semicolons are supposed to be aligned to the left margin and are often used for sectioning purposes. Emacs understand these conventions; for instance, typing <b>&lt;TAB&gt;</b> on a comment line will indent the comment to the appropriate position.</p>
<pre class="tab tcy">;; This function is only an example.
;;; Here either two or three semicolons are appropriate.
(defun foo (x)
;;;  And now, the first part of the function:
  ;; The following line adds one.
  (1+ x))           ; This line adds one.</pre>
<ul>
<li><a href="#Comment-Commands">Comment Commands</a>: Inserting, killing, and aligning comments.</li>
<li><a href="#Multi_002dLine-Comments">Multi-Line Comments</a>: Commands for adding and editing multi-line comments.</li>
<li><a href="#Options-for-Comments">Options for Comments</a>: Customizing the comment features.</li>
</ul>
<h2 id="Comment-Commands">Comment commands</h2>
<p class="tab">The following commands operate on comments:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>M-;</b></td>
<td>Insert or realign comment on current line; if the region is active, comment or uncomment the region instead (<b>comment-dwim</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u M-;</b></td>
<td>Kill comment on current line (<b>comment-kill</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x ;</b></td>
<td>Set comment column (<b>comment-set-column</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-j</b>, <b>M-j</b></td>
<td>Like <b>&lt;RET&gt;</b> followed by inserting and aligning a comment (<b>comment-indent-new-line</b>). See <a href="#Multi_002dLine-Comments">Multi-Line Comments</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-x comment-region</b>, <b>C-c C-c</b></td>
<td>(<b>C-c C-c</b> operates in C-like modes.) Add comment delimiters to all the lines in the region.</td>
</tr>
</table>
<p class="tab">The command to create or align a comment is <b>M-;</b> (<b>comment-dwim</b>). The word "dwim" is an acronym for "Do What I Mean"; it indicates that this command can be used for many different jobs relating to comments, depending on the situation where you use it.<br><br>When a region is active (see <a href="#Mark">Mark</a>), <b>M-;</b> either adds comment delimiters to the region, or removes them. If every line in the region is already a comment, it "uncomments" each of those lines by removing their comment delimiters. Otherwise, it adds comment delimiters to enclose the text in the region.<br><br>If you supply a prefix argument to <b>M-;</b> when a region is active, that specifies the number of comment delimiters to add or delete. A positive argument <b>n</b> adds <b>n</b> delimiters, while a negative argument <b>-n</b> removes <b>n</b> delimiters.<br><br>If the region is not active, and there is no existing comment on the current line, <b>M-;</b> adds a new comment to the current line. If the line is blank (i.e., empty or containing only whitespace characters), the comment is indented to the same position where <b>&lt;TAB&gt;</b> would indent to (see <a href="#Basic-Indent">Basic Indent</a>). If the line is non-blank, the comment is placed after the last non-whitespace character on the line; normally, Emacs tries putting it at the column specified by the variable <b>comment-column</b> (see <a href="#Options-for-Comments">Options for Comments</a>), but if the line already extends past that column, it puts the comment at some suitable position, usually separated from the non-comment text by at least one space. In each case, Emacs places point after the comment's starting delimiter, so that you can start typing the comment text right away.<br><br>You can also use <b>M-;</b> to align an existing comment. If a line already contains the <b>comment-start</b> string, <b>M-;</b> realigns it to the conventional alignment and moves point after the comment's starting delimiter. As an exception, comments starting in column 0 are not moved. Even when an existing comment is properly aligned, <b>M-;</b> is still useful for moving directly to the start of the comment text.<br><br><b>C-u M-;</b> (<b>comment-dwim</b> with a prefix argument) kills any comment on the current line, along with the whitespace before it. Since the comment is saved to the kill ring, you can reinsert it on another line by moving to the end of that line, doing <b>C-y</b>, and then <b>M-;</b> to realign the comment. You can achieve the same effect as <b>C-u M-;</b> by typing <b>M-x comment-kill</b> (<b>comment-dwim</b> actually calls <b>comment-kill</b> as a subroutine when it is given a prefix argument).<br><br>The command <b>M-x comment-region</b> is equivalent to calling <b>M-;</b> on an active region, except that it always acts on the region, even if the mark is inactive. In C mode and related modes, this command is bound to <b>C-c C-c</b>. The command <b>M-x uncomment-region</b> uncomments each line in the region; a numeric prefix argument specifies the number of comment delimiters to remove (negative arguments specify the number of comment to delimiters to add).<br><br>For C-like modes, you can configure the exact effect of <b>M-;</b> by setting the variables <b>c-indent-comment-alist</b> and <b>c-indent-comments-syntactically-p</b>. For example, on a line ending in a closing brace, <b>M-;</b> puts the comment one space after the brace rather than at <b>comment-column</b>. For full details see <a href="#Comment-Commands">Comment Commands</a>.</p>
<h2 id="Multi_002dLine-Comments">Multiple lines of comments</h2>
<p class="tab">If you are typing a comment and want to continue it to another line, type <b>M-j</b> or <b>C-M-j</b> (<b>comment-indent-new-line</b>). This breaks the current line, and inserts the necessary comment delimiters and indentation to continue the comment.<br><br>For languages with closing comment delimiters (e.g., '<b>*/</b>' in C), the exact behavior of <b>M-j</b> depends on the value of the variable <b>comment-multi-line</b>. If the value is <b>nil</b>, the command closes the comment on the old line and starts a new comment on the new line. Otherwise, it opens a new line in the current comment delimiters.<br><br>When <a href="#Auto-Fill">Auto Fill</a> mode is on, going past the fill column while typing a comment also continues the comment, in the same way as an explicit invocation of <b>M-j</b>.<br><br>To turn existing lines into comment lines, use <b>M-;</b> with the region active, or use <b>M-x comment-region</b> as described in the preceding section.<br><br>You can configure C Mode such that when you type a '<b>/</b>' at the start of a line in a multi-line block comment, this closes the comment. Enable the <b>comment-close-slash clean-up</b> for this.</p>
<h2 id="Options-for-Comments">Options controlling comments</h2>
<p class="tab">As mentioned in <a href="#Comment-Commands">Comment Commands</a>, when the <b>M-j</b> command adds a comment to a line, it tries to place the comment at the column specified by the buffer-local variable <b>comment-column</b>. You can set either the local value or the default value of this buffer-local variable in the usual way (see <a href="#Locals">Locals</a>). Alternatively, you can type <b>C-x ;</b> (<b>comment-set-column</b>) to set the value of <b>comment-column</b> in the current buffer to the column where point is currently located. <b>C-u C-x ;</b> sets the comment column to match the last comment before point in the buffer, and then does a <b>M-;</b> to align the current line's comment under the previous one.<br><br>The comment commands recognize comments based on the regular expression that is the value of the variable <b>comment-start-skip</b>. Make sure this regexp does not match the null string. It may match more than the comment starting delimiter in the strictest sense of the word; for example, in C mode the value of the variable is "\\(//+\\|/\\*+\\)\\s *", which matches extra stars and spaces after the '<b>/*</b>' itself, and accepts C++ style comments also. (Note that '<b>\\</b>' is needed in Lisp syntax to include a '<b>\</b>' in the string, which is needed to deny the first star its special meaning in regexp syntax. See <a href="#Regexp-Backslash">Regexp Backslash</a>.)<br><br>When a comment command makes a new comment, it inserts the value of <b>comment-start</b> as an opening comment delimiter. It also inserts the value of <b>comment-end</b> after point, as a closing comment delimiter. For example, in Lisp mode, comment-start is '<b>";"</b>' and comment-end is "" (the empty string). In C mode, comment-start is "/* " and comment-end is " */".<br><br>The variable <b>comment-padding</b> specifies a string that the commenting commands should insert between the comment delimiter(s) and the comment text. The default, '<b>" "</b>', specifies a single space. Alternatively, the value is a number, which specifies that number of spaces, or nil, which means no spaces at all.<br><br>The variable <b>comment-multi-line</b> controls how <b>M-j</b> and Auto Fill mode continue comments over multiple lines. See <a href="#Multi_002dLine-Comments">Multi-Line Comments</a>.<br><br>The variable <b>comment-indent-function</b> should contain a function that is called to compute the alignment for a newly inserted comment or for aligning an existing comment. It is set differently by various major modes. The function is called with no arguments, but with point at the beginning of the comment, or at the end of a line if a new comment is to be inserted. It should return the column where the comment ought to start. For example, in Lisp mode, the indent hook function bases its decision on how many semicolons begin an existing comment, and on the code in the preceding lines.</p>
<h2 id="Documentation">Documentation look up</h2>
<p class="tab">Emacs provides several features you can use to look up the documentation of functions, variables and commands that you plan to use in your program.</p>
<ul>
<li><a href="#Info-Lookup">Info Look up</a>: Looking up library functions and commands in Info files.</li>
<li><a href="#Man-Page">Man Page</a>: Looking up man pages of library functions and commands.</li>
<li><a href="#Lisp-Doc">Lisp Doc</a>: Looking up Emacs Lisp functions, etc.</li>
</ul>
<h2 id="Info-Lookup">Info Documentation look up</h2>
<p class="tab">For major modes that apply to languages which have documentation in Info, you can use <b>C-h S</b> (<b>info-lookup-symbol</b>) to view the Info documentation for a symbol used in the program. You specify the symbol with the minibuffer; the default is the symbol appearing in the buffer at point. For example, in C mode this looks for the symbol in the C Library Manual. The command only works if the appropriate manual's Info files are installed.<br><br>The major mode determines where to look for documentation for the symbol&mdash;which Info files to look in, and which indices to search. You can also use <b>M-x info-lookup-file</b> to look for documentation for a file name.<br><br>If you use <b>C-h S</b> in a major mode that does not support it, it asks you to specify the "symbol help mode". Enter a command such as <b>c-mode</b> that would select a major mode which <b>C-h S</b> does support.</p>
<h2 id="Man-Page">Man page look up</h2>
<p class="tab">On Unix, the main form of on-line documentation was the manual page or man page. In the GNU operating system, we aim to replace man pages with better-organized manuals that you can browse with <a href="/unix/info.htm">Info</a> (see <a href="#Misc-Help">Misc Help</a>). This process is not finished, so it is still useful to read manual pages.<br><br>You can read the man page for an operating system command, library function, or system call, with the <b>M-x man</b> command. This prompts for a topic, with completion (see <a href="#Completion">Completion</a>), and runs the man program to format the corresponding man page. If the system permits, it runs man asynchronously, so that you can keep on editing while the page is being formatted. The result goes in a buffer named *Man topic*. These buffers use a special major mode, Man mode, that facilitates scrolling and jumping to other manual pages. For details, type <b>C-h m</b> while in a Man mode buffer.<br><br>Each man page belongs to one of ten or more sections, each named by a digit or by a digit and a letter. Sometimes there are man pages with the same name in different sections. To read a man page from a specific section, type '<b>topic(section)</b>' or '<b>section topic</b>' when <b>M-x manual-entry</b> prompts for the topic. For example, the man page for the C library function <a href="/unix/uchmod.htm">chmod</a> is in section 2, but there is a shell command of the same name, whose man page is in section 1; to view the former, you must specify the chapter number in parentheses. For example: <b>M-x manual-entry &lt;RET&gt; chmod(2) &lt;RET&gt;</b>.<br><br>If you do not specify a section, <b>M-x man</b> normally displays only the first man page found. On some systems, the man program accepts a '<b>-a</b>' command-line option, which tells it to display all the man pages for the specified topic. To make use of this, change the value of the variable <b>Man-switches</b> to '<b>"-a"</b>'. Then, in the Man mode buffer, you can type <b>M-n</b> and <b>M-p</b> to switch between man pages in different sections. The mode line shows how many manual pages are available.<br><br>An alternative way of reading manual pages is the <b>M-x woman</b> command. Unlike <b>M-x man</b>, it does not run any external programs to format and display the man pages; the formatting is done by Emacs, so it works on systems such as Microsoft Windows where the man program may be unavailable. It prompts for a man page, and displays it in a buffer named <b>*WoMan section topic</b>.<br><br><b>M-x woman</b> computes the completion list for manpages the first time you invoke the command. With a numeric argument, it recomputes this list; this is useful if you add or delete manual pages.<br><br>If you type a name of a manual page and <b>M-x woman</b> finds that several manual pages by the same name exist in different sections, it pops up a window with possible candidates asking you to choose one of them.<br><br>For more information about setting up and using <b>M-x woman</b>, see the WoMan Info manual, which is distributed with Emacs.</p>
<h2 id="Lisp-Doc">Emacs Lisp documentation look up</h2>
<p class="tab">When editing Emacs Lisp code, you can use the commands <b>C-h f</b> (<b>describe-function</b>) and <b>C-h v</b> (<b>describe-variable</b>) to view the built-in documentation for the Lisp functions and variables that you want to use. See <a href="#Name-Help">Name Help</a>.<br><br>Eldoc is a buffer-local minor mode that helps with looking up Lisp documention. When it is enabled, the echo area displays some useful information whenever there is a Lisp function or variable at point; for a function, it shows the argument list, and for a variable it shows the first line of the variable's documentation string. To toggle Eldoc mode, type <b>M-x eldoc-mode</b>. Eldoc mode can be used with the Emacs Lisp and Lisp Interaction major modes.</p>
<h2 id="Hideshow">Hideshow minor mode</h2>
<p class="tab">Hideshow mode is a buffer-local minor mode that allows you to selectively display portions of a program, which are referred to as blocks. Type <b>M-x hs-minor-mode</b> to toggle this minor mode (see <a href="#Minor-Modes">Minor Modes</a>).<br><br>When you use Hideshow mode to hide a block, the block disappears from the screen, to be replaced by an ellipsis (three periods in a row). What constitutes a block depends on the major mode. In C mode and related modes, blocks are delimited by braces, while in Lisp mode they are delimited by parentheses. Multi-line comments also count as blocks.<br><br>Hideshow mode provides the following commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-c @ C-h</b></td>
<td>Hide the current block (<b>hs-hide-block</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c @ C-s</b></td>
<td>Show the current block (<b>hs-show-block</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c @ C-c</b></td>
<td>Either hide or show the current block (<b>hs-toggle-hiding</b>).</td>
</tr>
<tr class="tcw">
<td><b>S-Mouse-2</b></td>
<td>Toggle hiding for the block you click (<b>hs-mouse-toggle-hiding</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c @ C-M-h</b></td>
<td>Hide all top-level blocks (<b>hs-hide-all</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c @ C-M-s</b></td>
<td>Show all blocks in the buffer (<b>hs-show-all</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c @ C-l</b></td>
<td>Hide all blocks n levels below this block (<b>hs-hide-level</b>).</td>
</tr>
</table>
<p class="tab">These variables can customize Hideshow mode:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>hs-hide-comments-when-hiding-all</b></td>
<td>If non-nil, <b>C-c @ C-M-h</b> (<b>hs-hide-all</b>) hides comments too.</td>
</tr>
<tr class="tcw">
<td><b>hs-isearch-open</b></td>
<td>This variable specifies the conditions under which incremental search should unhide a hidden block when matching text occurs in the block. Its value should be either <b>code</b> (unhide only code blocks), <b>comment</b> (unhide only comments), <b>t</b> (unhide both code blocks and comments), or <b>nil</b> (unhide neither code blocks nor comments). The default value is <b>code</b>.</td>
</tr>
</table>
<h2 id="Symbol-Completion">Completion for symbol names</h2>
<p class="tab">Completion is normally done in the minibuffer (see <a href="#Completion">Completion</a>), but you can also complete symbol names in ordinary Emacs buffers.<br><br>In programming language modes, type <b>C-M-i</b> or <b>M-&lt;TAB&gt;</b> to complete the partial symbol before point. On graphical displays, the <b>M-&lt;TAB&gt;</b> key is usually reserved by the window manager for switching graphical windows, so type <b>C-M-i</b> or <b>&lt;ESC&gt; &lt;TAB&gt;</b> instead.<br><br>In most programming language modes, <b>C-M-i</b> (or <b>M-&lt;TAB&gt;</b>) invokes the command <b>completion-at-point</b>, which generates its completion list in a flexible way. If Semantic mode is enabled, it tries to use the Semantic parser data for completion (see <a href="#Semantic">Semantic</a>). If Semantic mode is not enabled or fails at performing completion, it tries to complete using the selected tags table (see <a href="#Tags">Tags</a>). If in Emacs Lisp mode, it performs completion using the function, variable, or property names defined in the current Emacs session.<br><br>In all other respects, in-buffer symbol completion behaves like minibuffer completion. For instance, if Emacs cannot complete to a unique symbol, it displays a list of completion alternatives in another window. See <a href="#Completion">Completion</a>.<br><br>In Text mode and related modes, <b>M-&lt;TAB&gt;</b> completes words based on the spell-checker's dictionary. See <a href="#Spelling">Spelling</a>.</p>
<h2 id="Glasses">Glasses minor mode</h2>
<p class="tab">Glasses mode is a buffer-local minor mode that makes it easier to read mixed-case (or "CamelCase") symbols like '<b>unReadableSymbol</b>', by altering how they are displayed. By default, it displays extra underscores between each lower-case letter and the following capital letter. This does not alter the buffer text, only how it is displayed.<br><br>To toggle Glasses mode, type <b>M-x glasses-mode</b> (see <a href="#Minor-Modes">Minor Modes</a>). When Glasses mode is enabled, the minor mode indicator '<b>o^o</b>' appears in the mode line. For more information about Glasses mode, type <b>C-h P glasses &lt;RET&gt;</b>.</p>
<h2 id="Semantic">Semantic</h2>
<p class="tab">Semantic is a package that provides language-aware editing commands based on source code parsers.<br><br>Most of the "language aware" features in Emacs, such as Font Lock mode (see <a href="#Font-Lock">Font Lock</a>), rely on "rules of thumb" that usually give good results but are never completely exact. In contrast, the parsers used by Semantic have an exact understanding of programming language syntax. This allows Semantic to provide search, navigation, and completion commands that are powerful and precise.<br><br>To begin using Semantic, type <b>M-x semantic-mode</b> or click the menu item named '<b>Source Code Parsers (Semantic)</b>' in the '<b>Tools</b>' menu. This enables Semantic mode, a global minor mode.<br><br>When Semantic mode is enabled, Emacs automatically attempts to parses each file you visit. Currently, Semantic understands C, C++, Scheme, JavaScript, Java, HTML, and Make. Within each parsed buffer, the following commands are available:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-c , j</b></td>
<td>Prompt for the name of a function defined in the current file, and move point there (<b>semantic-complete-jump-local</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c , J</b></td>
<td>Prompt for the name of a function defined in any file Emacs has parsed, and move point there (<b>semantic-complete-jump</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c , &lt;SPC&gt;</b></td>
<td>Display a list of possible completions for the symbol at point (<b>semantic-complete-analyze-inline</b>). This also activates a set of special key bindings for choosing a completion: <b>&lt;RET&gt;</b> accepts the current completion, <b>M-n</b> and <b>M-p</b> cycle through possible completions, <b>&lt;TAB&gt;</b> completes as far as possible and then cycles, and <b>C-g</b> or any other key aborts completion.</td>
</tr>
<tr class="tcw">
<td><b>C-c , l</b></td>
<td>Display a list of the possible completions of the symbol at point, in another window (<b>semantic-analyze-possible-completions</b>).</td>
</tr>
</table>
<p class="tab">In addition to the above commands, the Semantic package provides a variety of other ways to make use of parser information. For instance, you can use it to display a list of completions when Emacs is idle.</p>
<h2 id="Misc-for-Programs">Other features useful for editing programs</h2>
<p class="tab">Some Emacs commands that aren't designed specifically for editing programs are useful for that nonetheless.<br><br>The Emacs commands that operate on words, sentences and paragraphs are useful for editing code. Most symbols names contain words (see <a href="#Words">Words</a>), while sentences are in strings and comments (see <a href="#Sentences">Sentences</a>). As for paragraphs, they are defined in most programming language modes to begin and end at blank lines (see <a href="#Paragraphs">Paragraphs</a>). Therefore, judicious use of blank lines to make the program clearer also provides useful chunks of text where the paragraph commands can work. Auto Fill mode, if enabled in a programming language major mode, indents the new lines which it creates.<br><br>Electric Layout mode (<b>M-x electric-layout-mode</b>) is a global minor mode that automatically inserts newlines when you type certain characters; for example, '<b>{</b>', '<b>}</b>' and '<b>;</b>' in JavaScript mode.<br><br>Apart from Hideshow mode (see <a href="#Hideshow">Hideshow</a>), another way to selectively display parts of a program is to use the selective display feature (see <a href="#Selective-Display">Selective Display</a>). Programming modes often also support Outline minor mode (see <a href="#Outline-Mode">Outline Mode</a>), which can be used with the Foldout package (see <a href="#Foldout">Foldout</a>).</p>
<h2 id="C-Modes">C and related modes</h2>
<p class="tab">This section gives a brief description of the special features available in C, C++, Objective-C, Java, CORBA IDL, Pike and AWK modes. (These are called "C mode and related modes".) For more details, see the CC mode Info manual, which is distributed with Emacs.</p>
<ul>
<li><a href="#Motion-in-C">Motion in C</a>: Commands to move by C statements, etc.</li>
<li><a href="#Electric-C">Electric C</a>: Colon and other chars can automatically reindent.</li>
<li><a href="#Hungry-Delete">Hungry Delete</a>: A more powerful DEL command.</li>
<li><a href="#Other-C-Commands">Other C Commands</a>: Filling comments, viewing expansion of macros, and other neat features.</li>
</ul>
<h2 id="Motion-in-C">C Mode motion commands</h2>
<p class="tab">This section describes commands for moving point, in C mode and related modes.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-M-a</b>, <b>C-M-e</b></td>
<td>Move point to the beginning or end of the current function or top-level definition. In languages with enclosing scopes (such as C++'s classes) the current function is the immediate one, possibly inside a scope. Otherwise, it is the one defined by the least enclosing braces. (By contrast, beginning-of-defun and end-of-defun search for braces in column zero.) See <a href="#Moving-by-Defuns">Moving by Defuns</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-u</b></td>
<td>Move point back to the containing preprocessor conditional, leaving the mark behind. A prefix argument acts as a repeat count. With a negative argument, move point forward to the end of the containing preprocessor conditional.<br><br>'<b>#elif</b>' is equivalent to '<b>#else</b>' followed by '<b>#if</b>', so the function stops at a '<b>#elif</b>' when going backward, but not when going forward.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p</b></td>
<td>Move point back over a preprocessor conditional, leaving the mark behind. A prefix argument acts as a repeat count. With a negative argument, move forward.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-n</b></td>
<td>Move point forward across a preprocessor conditional, leaving the mark behind. A prefix argument acts as a repeat count. With a negative argument, move backward.</td>
</tr>
<tr class="tcw">
<td><b>M-a</b></td>
<td>Move point to the beginning of the innermost C statement (<b>c-beginning-of-statement</b>). If point is already at the beginning of a statement, move to the beginning of the preceding statement. With prefix argument <b>n</b>, move back <b>n &minus; 1</b> statements.<br><br>In comments or in strings which span more than one line, this command moves by sentences instead of statements.</td>
</tr>
<tr class="tcw">
<td><b>M-e</b></td>
<td>Move point to the end of the innermost C statement or sentence; like <b>M-a</b> except that it moves in the other direction (<b>c-end-of-statement</b>).</td>
</tr>
</table>
<h2 id="Electric-C">Electric C characters</h2>
<p class="tab">In C mode and related modes, certain printing characters are electric&mdash;in addition to inserting themselves, they also reindent the current line, and optionally also insert newlines. The "electric" characters are <b>{</b>, <b>}</b>, <b>:</b>, <b>#</b>, <b>;</b>, <b>,</b>, <b>&lt;</b>, <b>&gt;</b>, <b>/</b>, <b>*</b>, <b>(</b>, and <b>)</b>.<br><br>You might find electric indentation inconvenient if you are editing chaotically indented code. If you are new to CC Mode, you might find it disconcerting. You can toggle electric action with the command <b>C-c C-l</b>; when it is enabled, '<b>/l</b>' appears in the mode line after the mode name:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>C-c C-l</b></td>
<td>Toggle electric action (<b>c-toggle-electric-state</b>). With a positive prefix argument, this command enables electric action, with a negative one it disables it.</td>
</tr>
</table>
<p class="tab">Electric characters insert newlines only when, in addition to the electric state, the auto-newline feature is enabled (indicated by '<b>/la</b>' in the mode line after the mode name). You can turn this feature on or off with the command <b>C-c C-a</b>:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>C-c C-a</b></td>
<td>Toggle the auto-newline feature (<b>c-toggle-auto-newline</b>). With a prefix argument, this command turns the auto-newline feature on if the argument is positive, and off if it's negative.</td>
</tr>
</table>
<p class="tab">Usually the CC Mode style configures the exact circumstances where Emacs inserts auto-newlines. You can also configure this directly.</p>
<h2 id="Hungry-Delete">Hungry delete feature in C</h2>
<p class="tab">If you want to delete an entire block of whitespace at point, you can use hungry deletion. This deletes all the contiguous whitespace either before point or after point in a single operation. Whitespace here includes tabs and newlines, but not comments or preprocessor commands.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>C-c C-&lt;DEL&gt;</b>, <b>C-c &lt;DEL&gt;</b></td>
<td>Delete the entire block of whitespace preceding point (<b>c-hungry-delete-backwards</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-d</b>, <b>C-c C-&lt;DELETE&gt;</b>, <b>C-c &lt;DELETE&gt;</b></td>
<td>Delete the entire block of whitespace after point (<b>c-hungry-delete-forward</b>).</td>
</tr>
</table>
<p class="tab">As an alternative to the above commands, you can enable hungry delete mode. When this feature is enabled (indicated by '<b>/h</b>' in the mode line after the mode name), a single <b>&lt;DEL&gt;</b> deletes all preceding whitespace, not only one space, and a single <b>C-c C-d</b> (but not plain <b>&lt;DELETE&gt;</b>) deletes all following whitespace.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px"><b>M-x c-toggle-hungry-state</b></td>
<td>Toggle the <b>hungry-delete</b> feature (<b>c-toggle-hungry-state</b>). With a prefix argument, this command turns the <b>hungry-delete</b> feature on if the argument is positive, and off if it's negative.</td>
</tr>
</table>
<p class="tab">The variable <b>c-hungry-delete-key</b> controls whether the <b>hungry-delete</b> feature is enabled.</p>
<h2 id="Other-C-Commands">Other commands for C mode</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-c C-w</b>, <b>M-x subword-mode</b></td>
<td>Enable (or disable) subword mode. In subword mode, Emacs's word commands recognize uppercase letters in '<b>StudlyCapsIdentifiers</b>' as word boundaries. This is indicated by the flag '<b>/w</b>' on the mode line after the mode name (e.g., '<b>C/law</b>'). You can even use <b>M-x subword-mode</b> in non-CC Mode buffers.<br><br>In the GNU project, we recommend using underscores to separate words within an identifier in C or C++, rather than using case distinctions.</td>
</tr>
<tr class="tcw">
<td><b>M-x c-context-line-break</b></td>
<td>This command inserts a line break and indents the new line in a manner appropriate to the context. In normal code, it does the work of <b>C-j</b> (<b>newline-and-indent</b>), in a C preprocessor line it additionally inserts a '<b>\</b>' at the line break, and within comments it's like <b>M-j</b> (<b>c-indent-new-comment-line</b>).<br><br><b>c-context-line-break</b> isn't bound to a key by default, but it needs a binding to be useful. The following code will bind it to <b>C-j</b>. We use <b>c-initialization-hook</b> here to make sure the keymap is loaded before we try to change it.<br><br><pre class="tcy">(defun my-bind-clb () (define-key c-mode-base-map "\C-j" 'c-context-line-break))(add-hook 'c-initialization-hook 'my-bind-clb)</pre></td>
</tr>
<tr class="tcw">
<td><b>C-M-h</b></td>
<td>Put mark at the end of a function definition, and put point at the beginning (<b>c-mark-function</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-q</b></td>
<td>Fill a paragraph, handling C and C++ comments (<b>c-fill-paragraph</b>). If any part of the current line is a comment or within a comment, this command fills the comment or the paragraph of it that point is in, preserving the comment indentation and comment delimiters.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-e</b></td>
<td>Run the C preprocessor on the text in the region, and show the result, which includes the expansion of all the macro calls (<b>c-macro-expand</b>). The buffer text before the region is also included in preprocessing, for the sake of macros defined there, but the output from this part isn't shown.<br><br>When you are debugging C code that uses macros, sometimes it is hard to figure out precisely how the macros expand. With this command, you don't have to figure it out; you can see the expansions.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-\</b></td>
<td>Insert or align '<b>\</b>' characters at the ends of the lines of the region (<b>c-backslash-region</b>). This is useful after writing or editing a C macro definition.<br><br>If a line already ends in '<b>\</b>', this command adonlys the amount of whitespace before it. Otherwise, it inserts a new '<b>\</b>'. However, the last line in the region is treated specially; no '<b>\</b>' is inserted on that line, and any '<b>\</b>' there is deleted.</td>
</tr>
<tr class="tcw">
<td><b>M-x cpp-highlight-buffer</b></td>
<td>Highlight parts of the text according to its preprocessor conditionals. This command displays another buffer named *CPP Edit*, which serves as a graphic menu for selecting how to display particular kinds of conditionals and their contents. After changing various settings, click '<b>[A]pply these settings</b>' (or go to that buffer and type a) to rehighlight the C mode buffer accordingly.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b></td>
<td>Display the syntactic information about the current source line (<b>c-show-syntactic-information</b>). This information directs how the line is indented.</td>
</tr>
<tr class="tcw">
<td><b>M-x cwarn-mode</b>, <b>M-x global-cwarn-mode</b></td>
<td>CWarn minor mode highlights certain suspicious C and C++ constructions:<br><ul><li>Assignments inside expressions.</li><li>Semicolon following immediately after '<b>if</b>', '<b>for</b>', and '<b>while</b>' (except after a '<b>do ... while</b>' statement);</li><li>C++ functions with reference parameters.</li></ul> You can enable the mode for one buffer with the command M-x cwarn-mode, or for all suitable buffers with the command <b>M-x global-cwarn-mode</b> or by customizing the variable <b>global-cwarn-mode</b>. You must also enable Font Lock mode to make it work.</td>
</tr>
<tr class="tcw">
<td><b>M-x hide-ifdef-mode</b></td>
<td>Hide-ifdef minor mode hides selected code within '<b>#if</b>' and '<b>#ifdef</b>' preprocessor blocks. If you change the variable <b>hide-ifdef-shadow</b> to <b>t</b>, Hide-ifdef minor mode "shadows" preprocessor blocks by displaying them with a less prominent face, instead of hiding them entirely. See the documentation string of <b>hide-ifdef-mode</b> for more information.</td>
</tr>
<tr class="tcw">
<td><b>M-x ff-find-related-file</b></td>
<td>Find a file "related" in a special way to the file visited by the current buffer. Typically this is the header file corresponding to a C/C++ source file, or vice versa. The variable <b>ff-related-file-alist</b> specifies how to compute related file names.</td>
</tr>
</table>
<h2 id="Asm-Mode">Asm mode</h2>
<p class="tab">Asm mode is a major mode for editing files of <a href="/jargon/a/assemble.htm">assembler</a> code. It defines these commands:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>&lt;TAB&gt;</b></td>
<td>Tab-to-tab-stop.</td>
</tr>
<tr class="tcw">
<td><b>C-j</b></td>
<td>Insert a newline and then indent using <b>tab-to-tab-stop</b>.</td>
</tr>
<tr class="tcw">
<td><b>:</b></td>
<td>Insert a colon and then remove the indentation from before the label preceding colon. Then do <b>tab-to-tab-stop</b>.</td>
</tr>
<tr class="tcw">
<td><b>;</b></td>
<td>Insert or align a comment.</td>
</tr>
</table>
<p class="tab">The variable <b>asm-comment-char</b> specifies which character starts comments in assembler syntax.</p>
<h2 id="Fortran">Fortran mode</h2>
<p class="tab">Fortran mode can edit "fixed form" (and also "tab format") source code (normally Fortran 77). For editing more modern "free form" source code (Fortran 90, 95, 2003, 2008), use F90 mode (<b>f90-mode</b>). Emacs normally uses Fortran mode for files with extension '<b>.f</b>', '<b>.F</b>' or '<b>.for</b>', and F90 mode for the extensions '<b>.f90</b>', '<b>.f95</b>', '<b>.f03</b>' and '<b>.f08</b>'. Customize <b>auto-mode-alist</b> to add more extensions. GNU Fortran supports both free and fixed form. This manual mainly documents Fortran mode, but the corresponding F90 mode features are mentioned when relevant.<br><br>Fortran mode provides special motion commands for Fortran statements and subprograms, and indentation commands that understand Fortran conventions of nesting, line numbers and continuation statements. Fortran mode has support for Auto Fill mode that breaks long lines into proper Fortran continuation lines. Fortran mode also supports Hideshow minor mode (see <a href="#Hideshow">Hideshow</a>), and Imenu (see <a href="#Imenu">Imenu</a>).<br><br>Special commands for comments are provided because Fortran comments are unlike those of other languages. Built-in abbrevs optionally save typing when you insert Fortran keywords.<br><br>Use <b>M-x fortran-mode</b> to switch to this major mode. This command runs the hook <b>fortran-mode-hook</b>. See <a href="#Hooks">Hooks</a>.</p>
<ul>
<li><a href="#Fortran-Motion">Motion</a>: Moving point by statements or subprograms.</li>
<li><a href="#Fortran-Indent">Indent</a>: Indentation commands for Fortran.</li>
<li><a href="#Fortran-Comments">Comments</a>: Inserting and aligning comments.</li>
<li><a href="#Fortran-Autofill">Autofill</a>: Auto fill support for Fortran.</li>
<li><a href="#Fortran-Columns">Columns</a>: Measuring columns for valid Fortran.</li>
<li><a href="#Fortran-Abbrev">Abbrev</a>: Built-in abbrevs for Fortran keywords.</li>
</ul>
<h2 id="Fortran-Motion">Fortran motion commands</h2>
<p class="tab">In addition to the normal commands for moving by and operating on "defuns" (Fortran subprograms&mdash;functions and subroutines, and modules for F90 mode, using the commands <b>fortran-end-of-subprogram</b> and <b>fortran-beginning-of-subprogram</b>), Fortran mode provides special commands to move by statements and other program units.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-n</b></td>
<td>Move to the beginning of the next statement (<b>fortran-next-statement</b>/<b>f90-next-statement</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p</b></td>
<td>Move to the beginning of the previous statement (<b>fortran-previous-statement</b>/<b>f90-previous-statement</b>). If there is no previous statement (i.e., if called from the first statement in the buffer), move to the start of the buffer.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-e</b></td>
<td>Move point forward to the start of the next code block, or the end of the current one, whichever comes first (<b>f90-next-block</b>). A code block is a subroutine, if&ndash;endif statement, and so forth. This command exists for F90 mode only, not Fortran mode. With a numeric argument, it moves forward that many blocks.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-a</b></td>
<td>Move point backward to the previous block (<b>f90-previous-block</b>). This is like <b>f90-next-block</b>, but moves backwards.</td>
</tr>
<tr class="tcw">
<td><b>C-M-n</b></td>
<td>Move to the end of the current code block (<b>fortran-end-of-block</b>/<b>f90-end-of-block</b>). With a numeric argument, move forward that number of blocks. The mark is set before moving point. The F90 mode version of this command checks for consistency of block types and labels (if present), but it does not check the outermost block because it may be incomplete.</td>
</tr>
<tr class="tcw">
<td><b>C-M-p</b></td>
<td>Move to the start of the current code block (<b>fortran-beginning-of-block</b>/<b>f90-beginning-of-block</b>). This is like <b>fortran-end-of-block</b>, but moves backwards.</td>
</tr>
</table>
<p class="tab">The commands <b>fortran-beginning-of-subprogram</b> and <b>fortran-end-of-subprogram</b> move to the start or end of the current subprogram, respectively. The commands <b>fortran-mark-do</b> and <b>fortran-mark-if</b> mark the end of the current do or if block, and move point to the start.</p>
<h2 id="Fortran-Indent">Fortran indentation</h2>
<p class="tab">Special commands and features are needed for indenting fixed (or tab) form Fortran code to make sure various syntactic entities (line numbers, comment line indicators and continuation line flags) appear in the required columns.</p>
<ul>
<li><a href="#ForIndent-Commands">Commands</a>: Commands for indenting and filling Fortran.</li>
<li><a href="#ForIndent-Cont">Contline</a>: How continuation lines indent.</li>
<li><a href="#ForIndent-Num">Numbers</a>: How line numbers auto-indent.</li>
<li><a href="#ForIndent-Conv">Conv</a>: Conventions you must obey to avoid trouble.</li>
<li><a href="#ForIndent-Vars">Vars</a>: Variables controlling Fortran indent style.</li>
</ul>
<h2 id="ForIndent-Commands">Fortran indentation and filling commands</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-M-j</b></td>
<td>Break the current line at point and set up a continuation line (<b>fortran-split-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-^</b></td>
<td>Join this line to the previous line (<b>fortran-join-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-q</b></td>
<td>Indent all the lines of the subprogram that point is in (<b>fortran-indent-subprogram</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-q</b></td>
<td>Fill a comment block or statement (using <b>fortran-fill-paragraph</b> or <b>fortran-fill-statement</b>).</td>
</tr>
</table>
<p class="tab">The key <b>C-M-q</b> runs <b>fortran-indent-subprogram</b>, a command to reindent all the lines of the Fortran subprogram (function or subroutine) containing point.<br><br>The key <b>C-M-j</b> runs <b>fortran-split-line</b>, which splits a line in the appropriate fashion for Fortran. In a non-comment line, the second half becomes a continuation line and is indented accordingly. In a comment line, both halves become separate comment lines.<br><br><b>M-^</b> or <b>C-c C-d</b> runs the command <b>fortran-join-line</b>, which joins a continuation line back to the previous line, roughly as the inverse of <b>fortran-split-line</b>. The point must be on a continuation line when this command is invoked.<br><br><b>M-q</b> in Fortran mode fills the comment block or statement where that point is located. This removes any excess statement continuations.</p>
<h2 id="ForIndent-Cont">Continuation lines</h2>
<p class="tab">Most Fortran 77 compilers allow two ways of writing continuation lines. If the first non-space character on a line is in column 5, then that line is a continuation of the previous line. We call this fixed form. (In GNU Emacs we always count columns from 0; but note that the Fortran standard counts from 1.) The variable <b>fortran-continuation-string</b> specifies what character to put in column 5. A line that starts with a tab character followed by any digit except '<b>0</b>' is also a continuation line. We call this style of continuation tab format. (Fortran 90 introduced "free form", with another style of continuation lines).<br><br>Fortran mode can use either style of continuation line. When you enter Fortran mode, it tries to deduce the proper continuation style automatically from the buffer contents. It does this by scanning up to <b>fortran-analyze-depth</b> (default 100) lines from the start of the buffer. The first line that begins with either a tab character or six spaces determines the choice. If the scan fails (for example, if the buffer is new and therefore empty), the value of <b>fortran-tab-mode-default</b> (<b>nil</b> for fixed form, and non-nil for tab format) is used. '<b>/t</b>' (<b>fortran-tab-mode-string</b>) in the mode line indicates tab format is selected. Fortran mode sets the value of <b>indent-tabs-mode</b> accordingly.<br><br>If the text on a line starts with the Fortran continuation marker '<b>$</b>', or if it begins with any non-whitespace character in column 5, Fortran mode treats it as a continuation line. When you indent a continuation line with <b>&lt;TAB&gt;</b>, it converts the line to the current continuation style. When you split a Fortran statement with <b>C-M-j</b>, the continuation marker on the newline is created according to the continuation style.<br><br>The setting of continuation style affects other aspects of editing in Fortran mode. In fixed form mode, the minimum column number for the body of a statement is 6. Lines inside of Fortran blocks that are indented to larger column numbers must use only the space character for whitespace. In tab format mode, the minimum column number for the statement body is 8, and the whitespace before column 8 must consist of one tab character.</p>
<h2 id="ForIndent-Num">Fortran line numbers</h2>
<p class="tab">If a number is the first non-whitespace in the line, Fortran indentation assumes it is a line number and moves it to columns 0 through 4. (Columns always count from 0 in Emacs.)<br><br>Line numbers of four digits or less are normally indented one space. The variable <b>fortran-line-number-indent</b> controls this; it specifies the maximum indentation a line number can have. The default value of the variable is 1. Fortran mode tries to prevent line number digits passing column 4, reducing the indentation below the specified maximum if necessary. If <b>fortran-line-number-indent</b> has the value 5, line numbers are right-onlyified to end in column 4.<br><br>Inserting a line number is enough to indent it according to these rules. As each digit is inserted, the indentation is recomputed. To turn off this feature, set the variable <b>fortran-electric-line-number</b> to <b>nil</b>.</p>
<h2 id="ForIndent-Conv">Syntactic conventions</h2>
<p class="tab">Fortran mode assumes that you follow certain conventions that simplify the task of understanding a Fortran program well enough to indent it properly:</p>
<ul>
<li>Two nested '<b>do</b>' loops never share a '<b>continue</b>' statement.</li>
<li>Fortran keywords such as '<b>if</b>', '<b>else</b>', '<b>then</b>', '<b>do</b>' and others are written without embedded whitespace or line breaks.</li>
<li>Fortran compilers generally ignore whitespace outside of string constants, but Fortran mode does not recognize these keywords if they are not contiguous. Constructs such as '<b>else if</b>' or '<b>end do</b>' are acceptable, but the second word should be on the same line as the first and not on a continuation line.</li>
</ul>
<p class="tab">If you fail to follow these conventions, the indentation commands may indent some lines unaesthetically. However, a correct Fortran program retains its meaning when reindented even if the conventions are not followed.</p>
<h2 id="ForIndent-Vars">Variables for Fortran indentation</h2>
<p class="tab">Several additional variables control how Fortran indentation works:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>fortran-do-indent</b></td>
<td>Extra indentation within each level of '<b>do</b>' statement (default 3).</td>
</tr>
<tr class="tcw">
<td><b>fortran-if-indent</b></td>
<td>Extra indentation within each level of '<b>if</b>', '<b>select case</b>', or '<b>where</b>' statements (default 3).</td>
</tr>
<tr class="tcw">
<td><b>fortran-structure-indent</b></td>
<td>Extra indentation within each level of '<b>structure</b>', '<b>union</b>', '<b>map</b>', or '<b>interface</b>' statements (default 3).</td>
</tr>
<tr class="tcw">
<td><b>fortran-continuation-indent</b></td>
<td>Extra indentation for bodies of continuation lines (default 5).</td>
</tr>
<tr class="tcw">
<td><b>fortran-check-all-num-for-matching-do</b></td>
<td>In Fortran 77, a numbered '<b>do</b>' statement is ended by any statement with a matching line number. It is common (but not compulsory) to use a '<b>continue</b>' statement for this purpose. If this variable has a non-nil value, indenting any numbered statement must check for a '<b>do</b>' that ends there. If you always end '<b>do</b>' statements with a '<b>continue</b>' line (or if you use the more modern '<b>enddo</b>'), then you can speed up indentation by setting this variable to <b>nil</b> (the default).</td>
</tr>
<tr class="tcw">
<td><b>fortran-blink-matching-if</b></td>
<td>If this is <b>t</b>, indenting an '<b>endif</b>' (or '<b>enddo</b>' statement moves the cursor momentarily to the matching '<b>if</b>' (or '<b>do</b>') statement to show where it is. The default is <b>nil</b>.</td>
</tr>
<tr class="tcw">
<td><b>fortran-minimum-statement-indent-fixed</b></td>
<td>Minimum indentation for Fortran statements when using fixed form continuation line style. Statement bodies are never indented by less than this. The default is 6.</td>
</tr>
<tr class="tcw">
<td><b>fortran-minimum-statement-indent-tab</b></td>
<td>Minimum indentation for Fortran statements for tab format continuation line style. Statement bodies are never indented by less than this. The default is 8.</td>
</tr>
</table>
<p class="tab">The following section describes the variables controlling the indentation of comments.</p>
<h2 id="Fortran-Comments">Fortran comments</h2>
<p class="tab">Several additional variables control how Fortran indentation works:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>fortran-do-indent</b></td>
<td>Extra indentation within each level of '<b>do</b>' statement (default 3).</td>
</tr>
<tr class="tcw">
<td><b>fortran-if-indent</b></td>
<td>Extra indentation within each level of '<b>if</b>', '<b>select case</b>', or '<b>where</b>' statements (default 3).</td>
</tr>
<tr class="tcw">
<td><b>fortran-structure-indent</b></td>
<td>Extra indentation within each level of '<b>structure</b>', '<b>union</b>', '<b>map</b>', or '<b>interface</b>' statements (default 3).</td>
</tr>
<tr class="tcw">
<td><b>fortran-continuation-indent</b></td>
<td>Extra indentation for bodies of continuation lines (default 5).</td>
</tr>
<tr class="tcw">
<td><b>fortran-check-all-num-for-matching-do</b></td>
<td>In Fortran 77, a numbered '<b>do</b>' statement is ended by any statement with a matching line number. It is common (but not compulsory) to use a '<b>continue</b>' statement for this purpose. If this variable has a non-nil value, indenting any numbered statement must check for a '<b>do</b>' that ends there. If you always end '<b>do</b>' statements with a '<b>continue</b>' line (or if you use the more modern '<b>enddo</b>'), then you can speed up indentation by setting this variable to <b>nil</b> (the default).</td>
</tr>
<tr class="tcw">
<td><b>fortran-blink-matching-if</b></td>
<td>If this is <b>t</b>, indenting an '<b>endif</b>' (or '<b>enddo</b>' statement moves the cursor momentarily to the matching '<b>if</b>' (or '<b>do</b>') statement to show where it is. The default is <b>nil</b>.</td>
</tr>
<tr class="tcw">
<td><b>fortran-minimum-statement-indent-fixed</b></td>
<td>Minimum indentation for Fortran statements when using fixed form continuation line style. Statement bodies are never indented by less than this. The default is 6.</td>
</tr>
<tr class="tcw">
<td><b>fortran-minimum-statement-indent-tab</b></td>
<td>Minimum indentation for Fortran statements for tab format continuation line style. Statement bodies are never indented by less than this. The default is 8.</td>
</tr>
</table>
<p class="tab">The following section describes the variables controlling the indentation of comments.</p>
<h2 id="Fortran-Autofill">Auto fill in Fortran mode</h2>
<p class="tab">Fortran mode has specialized support for Auto Fill mode, which is a minor mode that automatically splits statements as you insert them when they become too wide. Splitting a statement involves making continuation lines using <b>fortran-continuation-string</b> (see <a href="#ForIndent-Cont">ForIndent Cont</a>). This splitting happens when you type <b>&lt;SPC&gt;</b>, <b>&lt;RET&gt;</b>, or <b>&lt;TAB&gt;</b>, and also in the Fortran indentation commands. You activate Auto Fill in Fortran mode in the normal way. See <a href="#Auto-Fill">Auto Fill</a>.<br><br>Auto Fill breaks lines at spaces or delimiters when the lines get longer than the desired width (the value of <b>fill-column</b>). The delimiters (besides whitespace) that Auto Fill can break at are '<b>+</b>', '<b>-</b>', '<b>/</b>', '<b>*</b>', '<b>=</b>', '<b>&lt;</b>', '<b>&gt;</b>', and '<b>,</b>'. The line break comes after the delimiter if the variable <b>fortran-break-before-delimiters</b> is <b>nil</b>. Otherwise, (and by default), the break comes before the delimiter.<br><br>To enable Auto Fill in all Fortran buffers, add <b>auto-fill-mode</b> to <b>fortran-mode-hook</b>. See <a href="#Hooks">Hooks</a>.</p>
<h2 id="Fortran-Columns">Checking columns in Fortran</h2>
<p class="tab">In standard Fortran 77, anything beyond column 72 is ignored. Most compilers provide an option to change this (for example, '<b>-ffixed-line-length-N</b>' in gfortran). Customize the variable <b>fortran-line-length</b> to change the line length in Fortran mode. Anything beyond this point is font-locked as a comment. (Unless it is inside a string: strings that extend beyond <b>fortran-line-length</b> will confuse font-lock.)</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>C-c C-r</b></td>
<td>Display a "column ruler" momentarily above the current line (<b>fortran-column-ruler</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-w</b></td>
<td>Split the current window horizontally temporarily so that it is <b>fortran-line-length</b> columns wide (<b>fortran-window-create-momentarily</b>). This may help you avoid making lines longer than the limit imposed by your Fortran compiler.</td>
</tr>
<tr class="tcw">
<td><b>C-u C-c C-w</b></td>
<td>Split the current window horizontally so that it is <b>fortran-line-length</b> columns wide (<b>fortran-window-create</b>). You can then continue editing.</td>
</tr>
<tr class="tcw">
<td><b>M-x fortran-strip-sequence-nos</b></td>
<td>Delete all text in column <b>fortran-line-length</b> and beyond.</td>
</tr>
</table>
<p class="tab">The command <b>C-c C-r</b> (<b>fortran-column-ruler</b>) shows a column ruler momentarily above the current line. The comment ruler is two lines of text showing you the locations of columns with special significance in Fortran programs. Square brackets show the limits of the columns for line numbers, and curly brackets show the limits of the columns for the statement body. Column numbers appear above them.<br><br>Note that the column numbers count from zero, as always in GNU Emacs. As a result, the numbers may be one less than those you are familiar with; but the positions they indicate in the line are standard for Fortran.<br><br>The text used to display the column ruler depends on the value of the variable <b>indent-tabs-mode</b>. If <b>indent-tabs-mode</b> is <b>nil</b>, then the value of the variable <b>fortran-column-ruler-fixed</b> is used as the column ruler. Otherwise, the value of the variable <b>fortran-column-ruler-tab</b> is displayed. By changing these variables, you can change the column ruler display.<br><br><b>C-c C-w</b> (<b>fortran-window-create-momentarily</b>) temporarily splits the current window horizontally, making a window <b>fortran-line-length</b> columns wide, so you can see any lines that are too long. Type a space to restore the normal width.<br><br>You can also split the window horizontally and continue editing with the split in place. To do this, use <b>C-u C-c C-w</b> (<b>M-x fortran-window-create</b>). By editing in this window you can immediately see when you make a line too wide to be correct Fortran.<br><br>The command <b>M-x fortran-strip-sequence-nos</b> deletes all text in column <b>fortran-line-length</b> and beyond, on all lines in the current buffer. This is the easiest way to get rid of old sequence numbers.</p>
<h2 id="Fortran-Abbrev">Fortran keyword abbrevs</h2>
<p class="tab">Fortran mode provides many built-in abbrevs for common keywords and declarations. These are the same sort of abbrev that you can define yourself. To use them, you must turn on Abbrev mode. See <a href="#Abbrevs">Abbrevs</a>.<br><br>The built-in abbrevs are unusual in one way: they all start with a semicolon. For example, one built-in Fortran abbrev is '<b>;c</b>' for '<b>continue</b>'. If you insert '<b>;c</b>' and then insert a punctuation character such as a space or a newline, the '<b>;c</b>' expands automatically to '<b>continue</b>', provided Abbrev mode is enabled.<br><br>Type '<b>;?</b>' or '<b>;C-h</b>' to display a list of all the built-in Fortran abbrevs and what they mean.</p>
<h2 id="Building">Compiling and testing programs</h2>
<p class="tab">The previous chapter discusses the Emacs commands that are useful for making changes in programs. This chapter deals with commands that assist in compiling and testing programs.</p>
<ul>
<li><a href="#Compilation">Compilation</a>: Compiling programs in languages other than Lisp (C, Pascal, etc.).</li>
<li><a href="#Compilation-Mode">Compilation Mode</a>: The mode for visiting compiler errors.</li>
<li><a href="#Compilation-Shell">Compilation Shell</a>: Customizing your shell properly for use in the compilation buffer.</li>
<li><a href="#Grep-Searching">Grep Searching</a>: Searching with grep.</li>
<li><a href="#Flymake">Flymake</a>: Finding syntax errors on the fly.</li>
<li><a href="#Debuggers">Debuggers</a>: Running symbolic debuggers for non-Lisp programs.</li>
<li><a href="#Executing-Lisp">Executing Lisp</a>: Various modes for editing Lisp programs, with different facilities for running the Lisp programs.</li>
<li><a href="#Lisp-Libraries">Libraries</a>: How Lisp programs are loaded into Emacs.</li>
<li><a href="#Lisp-Eval">Eval</a>: Executing a single Lisp expression in Emacs.</li>
<li><a href="#Lisp-Interaction">Interaction</a>: Executing Lisp in an Emacs buffer.</li>
<li><a href="#External-Lisp">External Lisp</a>: Communicating through Emacs with a separate Lisp.</li>
</ul>
<h2 id="Compilation">Running compilations under Emacs</h2>
<p class="tab">Emacs can run compilers for languages such as C and Fortran, feeding the compilation log into an Emacs buffer. It can also parse the error messages and show you where the errors occurred.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>M-x compile</b></td>
<td>Run a compiler asynchronously under Emacs, with error messages going to the *compilation* buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x recompile</b></td>
<td>Invoke a compiler with the same command as in the last invocation of <b>M-x compile</b>.</td>
</tr>
<tr class="tcw">
<td><b>M-x kill-compilation</b></td>
<td>Kill the running compilation subprocess.</td>
</tr>
</table>
<p class="tab">To run make or another compilation command, type <b>M-x compile</b>. This reads a shell command line using the minibuffer, and then executes the command by running a shell as a subprocess (or inferior process) of Emacs. The output is inserted in a buffer named *compilation*. The current buffer's default directory is used as the working directory for the execution of the command; normally, therefore, compilation takes place in this directory.<br><br>The default compilation command is '<b>make -k</b>', which is usually correct for programs compiled using the make utility (the '<b>-k</b>' flag tells make to continue compiling as much as possible after an error). If you have done <b>M-x</b> compile before, the command that you specified is automatically stored in the variable <b>compile-command</b>; this is used as the default the next time you type <b>M-x compile</b>. A file can also specify a file-local value for <b>compile-command</b> (see <a href="#File-Variables">File Variables</a>).<br><br>Starting a compilation displays the *compilation* buffer in another window but does not select it. While the compilation is running, the word '<b>run</b>' is shown in the major mode indicator for the *compilation* buffer, and the word '<b>Compiling</b>' appears in all mode lines. You do not have to keep the *compilation* buffer visible while compilation is running; it continues in any case. When the compilation ends, for whatever reason, the mode line of the *compilation* buffer changes to say '<b>exit</b>' (followed by the exit code: '<b>[0]</b>' for a normal exit), or '<b>signal</b>' (if a signal terminated the process).<br><br>If you want to watch the compilation transcript as it appears, switch to the *compilation* buffer and move point to the end of the buffer. When point is at the end, new compilation output is inserted above point, which remains at the end. Otherwise, point remains fixed while compilation output is added at the end of the buffer.<br><br>If you change the variable <b>compilation-scroll-output</b> to a non-nil value, the *compilation* buffer scrolls automatically to follow the output. If the value is <b>first-error</b>, scrolling stops when the first error appears, leaving point at that error. For any other non-nil value, scrolling continues until there is no more output.<br><br>To rerun the last compilation with the same command, type <b>M-x recompile</b>. This reuses the compilation command from the last invocation of <b>M-x compile</b>. It also reuses the *compilation* buffer and starts the compilation in its default directory, which is the directory where the previous compilation was started.<br><br>Starting a new compilation also kills any compilation already running in *compilation*, as the buffer can only handle one compilation at any time. However, <b>M-x compile</b> asks for confirmation before actually killing a compilation that is running; to always automatically kill the compilation without asking, change the variable <b>compilation-always-kill</b> to <b>t</b>. You can also kill a compilation process with the command <b>M-x kill-compilation</b>.<br><br>To run two compilations at once, start the first one, then rename the *compilation* buffer (perhaps using <b>rename-uniquely</b>; see <a href="#Misc-Buffer">Misc Buffer</a>), then switch buffers and start the other compilation. This creates a new *compilation* buffer.<br><br>You can control the environment passed to the compilation command with the variable <b>compilation-environment</b>. Its value is a list of environment variable settings; each element should be a string of the form "envvarname=value". These environment variable settings override the usual ones.</p>
<h2 id="Compilation-Mode">Compilation mode</h2>
<p class="tab">The *compilation* buffer uses a major mode called <a href="#Compilation">Compilation</a> mode. Compilation mode turns each error message in the buffer into a hyperlink; you can move point to it and type <b>&lt;RET&gt;</b>, or click it with the mouse (see <a href="#Mouse-References">Mouse References</a>), to visit the locus of the error message in a separate window. The locus is the specific position in a file where that error occurred.<br><br>If you change the variable <b>compilation-auto-jump-to-first-error</b> to a non-nil value, Emacs automatically visits the locus of the first error message that appears in the *compilation* buffer.<br><br>Compilation mode provides the following additional commands. These commands can also be used in *grep* buffers, where the hyperlinks are search matches rather than error messages (see <a href="#Grep-Searching">Grep Searching</a>).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:170px"><b>M-g M-n</b>, <b>M-g n</b>, <b>C-x &#96;</b></td>
<td>Visit the locus of the next error message or match (<b>next-error</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-g M-p</b>, <b>M-g p</b></td>
<td>Visit the locus of the previous error message or match (<b>previous-error</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-n</b></td>
<td>Move point to the next error message or match, without visiting its locus (<b>compilation-next-error</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-p</b></td>
<td>Move point to the previous error message or match, without visiting its locus (<b>compilation-previous-error</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-}</b></td>
<td>Move point to the next error message or match occurring in a different file (<b>compilation-next-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-{</b></td>
<td>Move point to the previous error message or match occurring in a different file (<b>compilation-previous-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f</b></td>
<td>Toggle Next Error Follow minor mode, which makes cursor motion in the compilation buffer produce automatic source display.</td>
</tr>
</table>
<p class="tab">To visit errors sequentially, type <b>C-x &#96;</b> (<b>next-error</b>), or equivalently <b>M-g M-n</b> or <b>M-g n</b>. This command can be invoked from any buffer, not only a Compilation mode buffer. The first time you invoke it after a compilation, it visits the locus of the first error message. Each subsequent <b>C-x &#96;</b> visits the next error, in a similar fashion. If you visit a specific error with <b>&lt;RET&gt;</b> or a mouse click in the *compilation* buffer, subsequent <b>C-x &#96;</b> commands advance from there. When <b>C-x &#96;</b> finds no more error messages to visit, it signals an error. <b>C-u C-x &#96;</b> starts again from the beginning of the compilation buffer, and visits the first locus.<br><br><b>M-g M-p</b> or <b>M-g p</b> (<b>previous-error</b>) iterates through errors in the opposite direction.<br><br>The <b>next-error</b> and <b>previous-error</b> commands don't only act on the errors or matches listed in *compilation* and *grep* buffers; they also know how to iterate through error or match lists produced by other commands, such as <b>M-x occur</b> (see <a href="#Other-Repeating-Search">Other Repeating Search</a>). If you are already in a buffer containing error messages or matches, those are the ones that are iterated through; otherwise, Emacs looks for a buffer containing error messages or matches amongst the windows of the selected frame, then for one that next-error or previous-error previously iterated through, and finally amongst all other buffers. If the buffer chosen for iterating through is not currently displayed in a window, it is displayed.<br><br>By default, the <b>next-error</b> and <b>previous-error</b> commands skip less important messages. The variable <b>compilation-skip-threshold</b> controls this. The default value, 1, means to skip anything less important than a warning. A value of 2 means to skip anything less important than an error, while 0 means not to skip any messages.<br><br>When Emacs visits the locus of an error message, it momentarily highlights the relevant source line. The duration of this highlight is determined by the variable <b>next-error-highlight</b>.<br><br>If the *compilation* buffer is shown in a window with a left fringe (see <a href="#Fringes">Fringes</a>), the <b>locus-visiting</b> commands put an arrow in the fringe, pointing to the current error message. If the window has no left fringe, such as on a text terminal, these commands scroll the window so that the current message is at the top of the window. If you change the variable <b>compilation-context-lines</b> to an integer value <b>n</b>, these commands scroll the window so that the current error message is <b>n</b> lines from the top, whether or not there is a fringe; the default value, <b>nil</b>, gives the behavior described above.<br><br>To parse messages from the compiler, Compilation mode uses the variable <b>compilation-error-regexp-alist</b> which lists various error message formats and tells Emacs how to extract the locus from each. A similar variable, <b>grep-regexp-alist</b>, tells Emacs how to parse output from a grep command (see <a href="#Grep-Searching">Grep Searching</a>).<br><br>Compilation mode also defines the keys <b>&lt;SPC&gt;</b> and <b>&lt;DEL&gt;</b> to scroll by screenfuls; <b>M-n</b> (<b>compilation-next-error</b>) and <b>M-p</b> (<b>compilation-previous-error</b>) to move to the next or previous error message; and <b>M-{</b> (<b>compilation-next-file</b>) and <b>M-}</b> (<b>compilation-previous-file</b>) to move to the next or previous error message for a different source file.<br><br>You can type <b>C-c C-f</b> to toggle Next Error Follow mode. In this minor mode, ordinary cursor motion in the compilation buffer automatically updates the source buffer, i.e., moving the cursor over an error message causes the locus of that error to be displayed.<br><br>The features of Compilation mode are also available in a minor mode called Compilation Minor mode. This lets you parse error messages in any buffer, not only a normal compilation output buffer. Type <b>M-x compilation-minor-mode</b> to enable the minor mode. For instance, in a Rlogin buffer (see <a href="#Remote-Host">Remote Host</a>), Compilation minor mode automatically accesses remote source files by FTP (see <a href="#File-Names">File Names</a>).</p>
<h2 id="Compilation-Shell">Subshells for compilation</h2>
<p class="tab">The <b>M-x compile</b> command uses a shell to run the compilation command, but specifies the option for a noninteractive shell. This means, in particular, that the shell should start with no prompt. If you find your usual shell prompt making an unsightly appearance in the *compilation* buffer, it means you have made a mistake in your shell's init file by setting the prompt unconditionally. (This init file may be named .bashrc, .profile, .cshrc, .shrc, etc., depending on what shell you use.) The shell init file should set the prompt only if there already is a prompt. Here's how to do it in <a href="/unix/ubash.htm">bash</a>:</p>
<pre class="tab tcy">if [ "${PS1+set}" = set ] then PS1=... fi</pre>
<p class="tab">And here's how to do it in <a href="/unix/ucsh.htm">csh</a>:</p>
<pre class="tab tcy">if ($?prompt) set prompt = ...</pre>
<p class="tab">Emacs does not expect a compiler process to launch asynchronous subprocesses; if it does, and they keep running after the main compiler process has terminated, Emacs may kill them or their output may not arrive in Emacs. To avoid this problem, make the main compilation process wait for its subprocesses to finish. In a shell script, you can do this using '<b>$!</b>' and '<b>wait</b>', like this:</p>
<pre class="tab tcy">(sleep 10; echo 2nd)&amp; pid=$!  # Record pid of subprocess
 echo first message
 wait $pid                     # Wait for subprocess
</pre>
<p class="tab">If the background process does not output to the compilation buffer, so you only need to prevent it from being killed when the main compilation process terminates, this is sufficient:</p>
<pre class="tab tcy">nohup command; sleep 1</pre>
<p class="tab">On <a href="/jargon/m/msdos.htm">MS-DOS</a>, asynchronous subprocesses are not supported, so <b>M-x compile</b> runs the compilation command synchronously (i.e., you must wait until the command finishes before you can do anything else in Emacs).</p>
<h2 id="Grep-Searching">Searching with grep under Emacs</h2>
<p class="tab">As you can run a compiler from Emacs and then visit the lines with compilation errors, you can also run grep and then visit the lines on which matches were found. This works by treating the matches reported by grep as if they were "errors". The output buffer uses Grep mode, which is a variant of Compilation mode (see <a href="#Compilation-Mode">Compilation Mode</a>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>M-x grep</b>,<br><b>M-x lgrep</b></td>
<td>Run grep asynchronously under Emacs, listing matching lines in the buffer named *grep*.</td>
</tr>
<tr class="tcw">
<td><b>M-x grep-find</b>,<br><b>M-x find-grep</b>, <b>M-x rgrep</b></td>
<td>Run grep via find, and collect output in the *grep* buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x zrgrep</b></td>
<td>Run zgrep and collect output in the *grep* buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x kill-grep</b></td>
<td>Kill the running grep subprocess.</td>
</tr>
</table>
<p class="tab">To run grep, type <b>M-x grep</b>, then enter a command line that specifies how to run grep. Use the same arguments you would give grep when running it normally: a grep-style regexp (usually in single-quotes to quote the shell's special characters) followed by file names, which may use wildcards. If you specify a prefix argument for <b>M-x grep</b>, it finds the tag (see <a href="#Tags">Tags</a>) in the buffer around point, and puts that into the default grep command.<br><br>Your command need not run grep; you can use any shell command that produces output in the same format. For instance, you can chain grep commands, like this:</p>
<pre class="tab tcy">grep -nH -e foo *.el | grep bar | grep toto</pre>
<p class="tab">The output from grep goes in the *grep* buffer. You can find the corresponding lines in the original files using <b>C-x &#96;</b>, <b>&lt;RET&gt;</b>, and so forth, only like compilation errors.<br><br>Some grep programs accept a '<b>--color</b>' option to output special markers around matches for the purpose of highlighting. You can make use of this feature by setting <b>grep-highlight-matches</b> to <b>t</b>. When displaying a match in the source buffer, the exact match is highlighted, instead of the entire source line.<br><br>The command <b>M-x grep-find</b> (also available as <b>M-x find-grep</b>) is similar to <b>M-x grep</b>, but it supplies a different initial default for the command&mdash;one that runs both find and grep, so as to search every file in a directory tree. See also the <b>find-grep-dired</b> command, in <a href="#Dired-and-Find">Dired and Find</a>.<br><br>The commands <b>M-x lgrep</b> (local grep) and <b>M-x rgrep</b> (recursive grep) are more user-friendly versions of <b>grep</b> and <b>grep-find</b>, which prompt separately for the regular expression to match, the files to search, and the base directory for the search. Case sensitivity of the search is controlled by the current value of <b>case-fold-search</b>. The command <b>M-x zrgrep</b> is similar to <b>M-x rgrep</b>, but it calls <b>zgrep</b> instead of <b>grep</b> to search the contents of gzipped files.<br><br>These commands build the shell commands based on the variables <b>grep-template</b> (for <b>lgrep</b>) and <b>grep-find-template</b> (for <b>rgrep</b>). The files to search can use aliases defined in the variable <b>grep-files-aliases</b>.<br><br>Directories listed in the variable <b>grep-find-ignored-directories</b> are automatically skipped by <b>M-x rgrep</b>. The default value includes the data directories used by various version control systems.</p>
<h2 id="Flymake">Finding syntax errors on the fly</h2>
<p class="tab">Flymake mode is a minor mode that performs on-the-fly syntax checking for many programming and markup languages, including C, C++, Perl, HTML, and TeX/LaTeX. It is somewhat analogous to Flyspell mode, which performs spell checking for ordinary human languages in a similar fashion (see <a href="#Spelling">Spelling</a>). As you edit a file, Flymake mode runs an appropriate syntax checking tool in the background, using a temporary copy of the buffer. It then parses the error and warning messages, and highlights the erroneous lines in the buffer. The syntax checking tool used depends on the language; for example, for C/C++ files this is usually the C compiler. Flymake can also use build tools such as make for checking complicated projects.<br><br>To enable Flymake mode, type <b>M-x flymake-mode</b>. You can jump to the errors that it finds using <b>M-x flymake-goto-next-error</b> and <b>M-x flymake-goto-prev-error</b>. To display any error messages associated with the current line, type <b>M-x flymake-display-err-menu-for-current-line</b>.</p>
<h2 id="Debuggers">Running debuggers under emacs</h2>
<p class="tab">The GUD (Grand Unified Debugger) library provides an Emacs interface to a wide variety of symbolic debuggers. It can run GDB (GNU Debugger), DBX, SDB, XDB, Perl's debugging mode, the Python debugger PDB, and the Java Debugger JDB.<br><br>Emacs provides a special interface to GDB, which uses extra Emacs windows to display the state of the debugged program. See <a href="#GDB-Graphical-Interface">GDB Graphical Interface</a>.<br><br>Emacs also has a built-in debugger for Emacs Lisp programs.</p>
<ul>
<li><a href="#Starting-GUD">Starting GUD: How to start a debugger subprocess.</a></li>
<li><a href="#Debugger-Operation">Debugger Operation: Connection between the debugger and source buffers.</a></li>
<li><a href="#Commands-of-GUD">Commands of GUD: Key bindings for common commands.</a></li>
<li><a href="#GUD-Customization">GUD Customization: Defining your commands for GUD.</a></li>
<li><a href="#GDB-Graphical-Interface">GDB Graphical Interface: An enhanced mode that uses GDB features to implement a graphical debugging environment.</a></li>
</ul>
<h2 id="Starting-GUD">Starting GUD</h2>
<p class="tab">There's several commands for starting a debugger subprocess, each corresponding to a particular debugger program.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>M-x gdb</b></td>
<td><a href="#GDB-Graphical-Interface">Run GDB as a subprocess, and interact with it via an IDE-like Emacs interface.</a> See <a href="#GDB-Graphical-Interface">GDB Graphical Interface</a>, for more information about this command.</td>
</tr>
<tr class="tcw">
<td><b>M-x gud-gdb</b></td>
<td>Run GDB, using a GUD interaction buffer for input and output to the GDB subprocess (see <a href="#Debugger-Operation">Debugger Operation</a>). If such a buffer already exists, switch to it; otherwise, create the buffer and switch to it.<br><br>The other commands in this list do the same, for other debugger programs.</td>
</tr>
<tr class="tcw">
<td><b>M-x perldb</b></td>
<td>Run the Perl interpreter in debug mode.</td>
</tr>
<tr class="tcw">
<td><b>M-x jdb</b></td>
<td>Run the Java debugger.</td>
</tr>
<tr class="tcw">
<td><b>M-x pdb</b></td>
<td>Run the Python debugger.</td>
</tr>
<tr class="tcw">
<td><b>M-x dbx</b></td>
<td>Run the DBX debugger.</td>
</tr>
<tr class="tcw">
<td><b>M-x xdb</b></td>
<td>Run the XDB debugger.</td>
</tr>
<tr class="tcw">
<td><b>M-x sdb</b></td>
<td>Run the SDB debugger.</td>
</tr>
</table>
<p class="tab">Each of these commands reads a command line to invoke the debugger, using the minibuffer. The minibuffer's initial contents contain the standard executable name and options for the debugger, and sometimes also a guess for the name of the executable file you want to debug. Shell wildcards and variables are not allowed in this command line. Emacs assumes that the first command argument which does not start with a '<b>-</b>' is the executable file name.<br><br>Tramp provides a facility for remote debugging, whereby both the debugger and the program being debugged are on the same remote host. This is separate from GDB's remote debugging feature, where the program and the debugger run on different machines.</p>
<h2 id="Debugger-Operation">Debugger operation</h2>
<p class="tab">The GUD interaction buffer is an Emacs buffer that is used to send text commands to a debugger subprocess, and record its output. This is the basic interface for interacting with a debugger, used by <b>M-x gud-gdb</b> and other commands listed in Starting GUD. The <b>M-x gdb</b> command extends this interface with additional specialized buffers for controlling breakpoints, stack frames, and other aspects of the debugger state (see <a href="#GDB-Graphical-Interface">GDB Graphical Interface</a>).<br><br>The GUD interaction buffer uses a variant of Shell mode, so the Emacs commands defined by Shell mode are available (see <a href="#Shell-Mode">Shell Mode</a>). Completion is available for most debugger commands (see <a href="#Completion">Completion</a>), and you can use the usual Shell mode history commands to repeat them. See <a href="#Commands-of-GUD">Commands of GUD</a>, for special commands used in the GUD interaction buffer.<br><br>As you debug a program, Emacs displays the relevant source files by visiting them in Emacs buffers, with an arrow in the left fringe indicating the current execution line. (On a text terminal, the arrow appears as '<b>=&gt;</b>', overlaid on the first two text columns.) Moving point in such a buffer does not move the arrow. You are free to edit these source files, but note that inserting or deleting lines will throw off the arrow's positioning, as Emacs has no way to figure out which edited source line corresponds to the line reported by the debugger subprocess. To update this information, you often have to recompile and restart the program.<br><br>GUD Tooltip mode is a global minor mode that adds tooltip support to GUD. To toggle this mode, type <b>M-x gud-tooltip-mode</b>. It is disabled by default. If enabled, you can move the mouse cursor over a variable, a function, or a macro (collectively called identifiers) to show their values in tooltips (see <a href="#Tooltips">Tooltips</a>). Alternatively, mark an identifier or an expression by dragging the mouse over it, then leave the mouse in the marked area to have the value of the expression displayed in a tooltip. The GUD Tooltip mode takes effect in the GUD interaction buffer, and in all source buffers with major modes listed in the variable <b>gud-tooltip-modes</b>. If the variable <b>gud-tooltip-echo-area</b> is non-nil, or if you turned off the tooltip mode, values are shown in the echo area instead of a tooltip.<br><br>When using GUD Tooltip mode with <b>M-x gud-gdb</b>, displaying an expression's value in GDB can sometimes expand a macro, potentially causing side effects in the debugged program. For that reason, using tooltips in <b>gud-gdb</b> is disabled. If you use the <b>M-x gdb</b> interface, this problem does not occur, as there is special code to avoid side-effects; furthermore, you can display macro definitions associated with an identifier when the program is not executing.</p>
<h2 id="Commands-of-GUD">Commands of GUD</h2>
<p class="tab">GUD provides commands for setting and clearing breakpoints, selecting stack frames, and stepping through the program.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>C-x &lt;SPC&gt;</b></td>
<td>Set a breakpoint on the source line where point is located.</td>
</tr>
</table>
<p class="tab"><b>C-x &lt;SPC&gt;</b> (<b>gud-break</b>), when called in a source buffer, sets a debugger breakpoint on the current source line. This command is available only after starting GUD. If you call it in a buffer that is not associated with any debugger subprocess, it signals an error.<br><br>The following commands are available both in the GUD interaction buffer and globally, but with different key bindings. The keys starting with <b>C-c</b> are available only in the GUD interaction buffer, while those starting with <b>C-x C-a</b> are available globally. Some of these commands are also available via the tool bar; some are not supported by certain debuggers.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-c C-l</b>,<br><b>C-x C-a C-l</b></td>
<td>Display, in another window, the last source line referred to in the GUD interaction buffer (gud-refresh).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b>,<br><b>C-x C-a C-s</b></td>
<td>Execute the next single line of code (<b>gud-step</b>). If the line contains a function call, execution stops after entering the called function.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-n</b>,<br><b>C-x C-a C-n</b></td>
<td>Execute the next single line of code, stepping across function calls without stopping inside the functions (<b>gud-next</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-i</b>,<br><b>C-x C-a C-i</b></td>
<td>Execute a single machine instruction (<b>gud-stepi</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p</b>,<br><b>C-x C-a C-p</b></td>
<td>Evaluate the expression at point (<b>gud-print</b>). If Emacs does not print the exact expression that you want, mark it as a region first.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-r</b>,<br><b>C-x C-a C-r</b></td>
<td>Continue execution without specifying any stopping point. The program runs until it hits a breakpoint, terminates, or gets a signal that the debugger is checking for (<b>gud-cont</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-d</b>,<br><b>C-x C-a C-d</b></td>
<td>Delete the breakpoint(s) on the current source line, if any (<b>gud-remove</b>). If you use this command in the GUD interaction buffer, it applies to the line where the program last stopped.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-t</b>,<br><b>C-x C-a C-t</b></td>
<td>Set a temporary breakpoint on the current source line, if any (<b>gud-tbreak</b>). If you use this command in the GUD interaction buffer, it applies to the line where the program last stopped.</td>
</tr>
<tr class="tcw">
<td><b>C-c &lt;</b>,<br><b>C-x C-a &lt;</b></td>
<td>Select the next enclosing stack frame (<b>gud-up</b>). This is equivalent to the GDB command '<b>up</b>'.</td>
</tr>
<tr class="tcw">
<td><b>C-c &gt;</b>,<br><b>C-x C-a &gt;</b></td>
<td>Select the next inner stack frame (<b>gud-down</b>). This is equivalent to the GDB command '<b>down</b>'.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-u</b>,<br><b>C-x C-a C-u</b></td>
<td>Continue execution to the current line (<b>gud-until</b>). The program runs until it hits a breakpoint, terminates, gets a signal that the debugger is checking for, or reaches the line on which the cursor currently sits.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f</b>,<br><b>C-x C-a C-f</b></td>
<td>Run the program until the selected stack frame returns or stops for some other reason (<b>gud-finish</b>).</td>
</tr>
</table>
<p class="tab">If you are using GDB, these additional key bindings are available:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>C-x C-a C-j</b></td>
<td>Only useful in a source buffer, <b>gud-jump</b> transfers the program's execution point to the current line. In other words, the next line that the program executes is the one where you gave the command. If the new execution line is in a different function from the previously one, GDB prompts for confirmation since the results may be bizarre. See the GDB manual entry regarding jump for details.</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>With GDB, complete a symbol name (<b>gud-gdb-complete-command</b>). This key is available only in the GUD interaction buffer.</td>
</tr>
</table>
<p class="tab">These commands interpret a numeric argument as a repeat count, when that makes sense.<br><br>Because <b>&lt;TAB&gt;</b> serves as a completion command, you can't use it to enter a tab as input to the program you are debugging with GDB. Instead, type <b>C-q &lt;TAB&gt;</b> to enter a tab.</p>
<h2 id="GUD-Customization">GUD customization</h2>
<p class="tab">On startup, GUD runs one of the following hooks: <b>gdb-mode-hook</b>, if you are using GDB; <b>dbx-mode-hook</b>, if you are using DBX; <b>sdb-mode-hook</b>, if you are using SDB; <b>xdb-mode-hook</b>, if you are using XDB; <b>perldb-mode-hook</b>, for Perl debugging mode; <b>pdb-mode-hook</b>, for PDB; <b>jdb-mode-hook</b>, for JDB. See <a href="#Hooks">Hooks</a>.<br><br>The <b>gud-def</b> Lisp macro provides a convenient way to define an Emacs command that sends a particular command string to the debugger, and set up a key binding for in the GUD interaction buffer:</p>
<pre class="tab tcy">(gud-def function cmdstring binding docstring)</pre>
<p class="tab">This defines a command named function which sends cmdstring to the debugger process, and gives it the documentation string docstring. You can then use the command function in any buffer. If binding is non-nil, <b>gud-def</b> also binds the command to <b>C-c</b> binding in the GUD buffer's mode and to <b>C-x C-a</b> binding generally.<br><br>The command string cmdstring may contain certain '<b>%</b>'-sequences that stand for data to be filled at the time function is called:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px">'<b>%f</b>'</td>
<td>The name of the current source file. If the current buffer is the GUD buffer, then the "current source file" is the file where the program stopped.</td>
</tr>
<tr class="tcw">
<td>'<b>%l</b>'</td>
<td>The number of the current source line. If the current buffer is the GUD buffer, then the "current source line" is the line where the program stopped.</td>
</tr>
<tr class="tcw">
<td>'<b>%e</b>'</td>
<td>In <b>transient-mark-mode</b> the text in the region, if it's active. Otherwise, the text of the C lvalue or <b>function-call</b> expression at or adjacent to point.</td>
</tr>
<tr class="tcw">
<td>'<b>%a</b>'</td>
<td>The text of the hexadecimal address at or adjacent to point.</td>
</tr>
<tr class="tcw">
<td>'<b>%p</b>'</td>
<td>The numeric argument of the called function, as a decimal number. If the command is used without a numeric argument, '<b>%p</b>' stands for the empty string.<br><br>If you don't use '<b>%p</b>' in the command string, the command you define ignores any numeric argument.</td>
</tr>
<tr class="tcw">
<td>'<b>%d</b>'</td>
<td>The name of the directory of the current source file.</td>
</tr>
<tr class="tcw">
<td>'<b>%c</b>'</td>
<td>Fully qualified class name derived from the expression surrounding point (jdb only).</td>
</tr>
</table>
<h2 id="GDB-Graphical-Interface">GDB graphical interface</h2>
<p class="tab">The command <b>M-x gdb</b> starts GDB in an IDE-like interface, with specialized buffers for controlling breakpoints, stack frames, and other aspects of the debugger state. It also provides additional ways to control the debugging session with the mouse, such as clicking in the fringe of a source buffer to set a breakpoint there.<br><br>To run GDB using only the GUD interaction buffer interface, without these additional features, use <b>M-x gud-gdb</b> (see <a href="#Starting-GUD">Starting GUD</a>). You must use this if you want to debug multiple programs within one Emacs session, as that is currently unsupported by <b>M-x gdb</b>.<br><br>Internally, <b>M-x gdb</b> informs GDB that its "screen size" is unlimited; for correct operation, you must not change GDB's screen height and width values during the debugging session.</p>
<ul>
<li><a href="#GDB-User-Interface-Layout">GDB User Interface Layout</a>: Control the number of displayed buffers.</li>
<li><a href="#Source-Buffers">Source Buffers</a>: Use the mouse in the fringe/margin to control your program.</li>
<li><a href="#Breakpoints-Buffer">Breakpoints Buffer</a>: A breakpoint Control Panel.</li>
<li><a href="#Threads-Buffer">Threads Buffer</a>: Displays your threads.</li>
<li><a href="#Stack-Buffer">Stack Buffer</a>: Select a frame from the call stack.</li>
<li><a href="#Other-GDB-Buffers">Other GDB Buffers</a>: Other buffers for controlling the GDB state.</li>
<li><a href="#Watch-Expressions">Watch Expressions</a>: Monitor variable values in the speedbar.</li>
<li><a href="#Multithreaded-Debugging">Multithreaded Debugging</a>: Debugging programs with several threads.</li>
</ul>
<h2 id="GDB-User-Interface-Layout">GDB user interface layout</h2>
<p class="tab">If the variable <b>gdb-many-windows</b> is <b>nil</b> (the default), <b>M-x gdb</b> normally displays only the GUD interaction buffer. However, if the variable <b>gdb-show-main</b> is also non-nil, it starts with two windows: one displaying the GUD interaction buffer, and the other showing the source for the main function of the program you are debugging.<br><br>If <b>gdb-many-windows</b> is non-nil, then <b>M-x gdb</b> displays the following frame layout:</p>
<pre class="tab">     +--------------------------------+--------------------------------+
     |   GUD interaction buffer       |   Locals/Registers buffer      |
     |--------------------------------+--------------------------------+
     |   Primary Source buffer        |   I/O buffer for debugged pgm  |
     |--------------------------------+--------------------------------+
     |   Stack buffer                 |   Breakpoints/Threads buffer   |
     +--------------------------------+--------------------------------+
</pre>
<p class="tab">If you ever change the window layout, you can restore the "many windows" layout by typing <b>M-x gdb-restore-windows</b>. To toggle between the many windows layout and a simple layout with only the GUD interaction buffer and a source file, type <b>M-x gdb-many-windows</b>.<br><br>You may also specify additional GDB-related buffers to display, either in the same frame or a different one. Select the buffers you want by typing <b>M-x gdb-display-buffertype-buffer</b> or <b>M-x gdb-frame-buffertype-buffer</b>, where <b>buffertype</b> is the relevant buffer type, such as '<b>breakpoints</b>'. You can do the same with the menu bar, with the '<b>GDB-Windows</b>' and '<b>GDB-Frames</b>' sub-menus of the '<b>GUD</b>' menu.<br><br>When you finish debugging, kill the GUD interaction buffer with <b>C-x k</b>, killing all the buffers associated with the session. However, you need not do this if, after editing and re-compiling your source code within Emacs, you want to continue debugging. When you restart execution, GDB automatically finds the new executable. Keeping the GUD interaction buffer has the advantage of keeping the shell history and GDB's breakpoints. You do need to check that the breakpoints in recently edited source files are still in the right places.</p>
<h2 id="Source-Buffers">Source buffers</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>Mouse-1</b></td>
<td>(in fringe) Set or clear a breakpoint on that line.</td>
</tr>
<tr class="tcw">
<td><b>C-Mouse-1</b></td>
<td>(in fringe) Enable or disable a breakpoint on that line.</td>
</tr>
<tr class="tcw">
<td><b>Mouse-3</b> (in fringe)</td>
<td>Continue execution to that line.</td>
</tr>
<tr class="tcw">
<td><b>C-Mouse-3</b></td>
<td>(in fringe) Jump to that line.</td>
</tr>
</table>
<p class="tab">On a graphical display, you can click <b>Mouse-1</b> in the fringe of a source buffer, to set a breakpoint on that line (see <a href="#Fringes">Fringes</a>). A red dot appears in the fringe, where you clicked. If a breakpoint already exists there, the click removes it. A <b>C-Mouse-1</b> click enables or disables an existing breakpoint; a breakpoint that is disabled, but not unset, is indicated by a gray dot.<br><br>On a text terminal, or when fringes are disabled, enabled breakpoints are indicated with a '<b>B</b>' character in the left margin of the window. Disabled breakpoints are indicated with '<b>b</b>'. (The margin is only displayed if a breakpoint is present.)<br><br>A solid arrow in the left fringe of a source buffer indicates the line of the innermost frame where the debugged program has stopped. A hollow arrow indicates the current execution line of a higher-level frame. If you drag the arrow in the fringe with <b>Mouse-1</b>, that causes execution to advance to the line where you release the button. Alternatively, you can click <b>Mouse-3</b> in the fringe to advance to that line. You can click <b>C-Mouse-3</b> in the fringe to jump to that line without executing the intermediate lines. This command allows you to go backwards, which can be useful for running through code that is already executed, to examine its execution in more detail.</p>
<h2 id="Breakpoints-Buffer">Breakpoints buffer</h2>
<p class="tab">The GDB Breakpoints buffer shows the breakpoints, watchpoints and catchpoints in the debugger session. It provides the following commands, which mostly apply to the current breakpoint (the breakpoint which point is on):</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>&lt;SPC&gt;</b></td>
<td>Enable/disable current breakpoint (<b>gdb-toggle-breakpoint</b>). On a graphical display, this changes the color of the dot in the fringe of the source buffer at that line. The dot is red when the breakpoint is enabled, and gray when it is disabled.</td>
</tr>
<tr class="tcw">
<td><b>D</b></td>
<td>Delete the current breakpoint (<b>gdb-delete-breakpoint</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b></td>
<td>Visit the source line for the current breakpoint (<b>gdb-goto-breakpoint</b>).</td>
</tr>
<tr class="tcw">
<td><b>Mouse-2</b></td>
<td>Visit the source line for the breakpoint you click.</td>
</tr>
</table>
<p class="tab">When <b>gdb-many-windows</b> is non-nil, the GDB Breakpoints buffer shares its window with the GDB Threads buffer. To switch from one to the other click with <b>Mouse-1</b> on the relevant button in the header line. If <b>gdb-show-threads-by-default</b> is non-nil, the GDB Threads buffer is the one shown by default.</p>
<h2 id="Threads-Buffer">Threads buffer</h2>
<p class="tab">The GDB Threads buffer displays a summary of the threads in the debugged program. To select a thread, move point there and type <b>&lt;RET&gt;</b> (<b>gdb-select-thread</b>), or click it with <b>Mouse-2</b>. This also displays the associated source buffer, and updates the contents of the other GDB buffers.<br><br>You can customize variables under <b>gdb-buffers</b> group to select fields included in GDB Threads buffer.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>gdb-thread-buffer-verbose-names</b></td>
<td>Show long thread names like '<b>Thread 0x4e2ab70 (LWP 1983)</b>'.</td>
</tr>
<tr class="tcw">
<td><b>gdb-thread-buffer-arguments</b></td>
<td>Show arguments of thread top frames.</td>
</tr>
<tr class="tcw">
<td><b>gdb-thread-buffer-locations</b></td>
<td>Show file information or library names.</td>
</tr>
<tr class="tcw">
<td><b>gdb-thread-buffer-addresses</b></td>
<td>Show addresses for thread frames in threads buffer.</td>
</tr>
</table>
<p class="tab">To view information for several threads simultaneously, use the following commands from the GDB Threads buffer.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>d</b></td>
<td>Display disassembly buffer for the thread at current line (<b>gdb-display-disassembly-for-thread</b>).</td>
</tr>
<tr class="tcw">
<td><b>f</b></td>
<td>Display the GDB Stack buffer for the thread at current line (<b>gdb-display-stack-for-thread</b>).</td>
</tr>
<tr class="tcw">
<td><b>l</b></td>
<td>Display the GDB Locals buffer for the thread at current line (<b>gdb-display-locals-for-thread</b>).</td>
</tr>
<tr class="tcw">
<td><b>r</b></td>
<td>Display the GDB Registers buffer for the thread at current line (<b>gdb-display-registers-for-thread</b>).</td>
</tr>
</table>
<p class="tab">Their upper-case counterparts, <b>D</b>, <b>F</b>,<b>L</b> and <b>R</b>, display the corresponding buffer in a new frame.<br><br>When you create a buffer showing information about some specific thread, it becomes bound to that thread and keeps showing actual information while you debug your program. The mode indicator for each GDB buffer shows the number of thread it is showing information about. The thread number is also included in the buffer name of bound buffers.<br><br>Further commands are available in the GDB Threads buffer which depend on the mode of GDB that is used for controlling execution of your program. See <a href="#Multithreaded-Debugging">Multithreaded Debugging</a>.</p>
<h2 id="Stack-Buffer">Stack buffer</h2>
<p class="tab">The GDB Stack buffer displays a call stack, with one line for each of the nested subroutine calls (stack frames) in the debugger session.<br><br>On graphical displays, the selected stack frame is indicated by an arrow in the fringe. On text terminals, or when fringes are disabled, the selected stack frame is displayed in reverse contrast. To select a stack frame, move point in its line and type <b>&lt;RET&gt;</b> (<b>gdb-frames-select</b>), or click <b>Mouse-2</b> on it. Doing so also updates the Locals buffer (see <a href="#Other-GDB-Buffers">Other GDB Buffers</a>).</p>
<h2 id="Other-GDB-Buffers">Other GDB buffers</h2>
<ul>
<li><b>Locals Buffer</b>: This buffer displays the values of local variables of the current frame for simple data types. Press <b>&lt;RET&gt;</b> or click <b>Mouse-2</b> on the value if you want to edit it. Arrays and structures display their type only. With GDB 6.4 or later, you can examine the value of the local variable at point by typing <b>&lt;RET&gt;</b>, or with a <b>Mouse-2</b> click. With earlier versions of GDB, use <b>&lt;RET&gt;</b> or <b>Mouse-2</b> on the type description ('<b>[struct/union]</b>' or '<b>[array]</b>'). See <a href="#Watch-Expressions">Watch Expressions</a>.</li>
<li><b>Registers Buffer</b>: This buffer displays the values held by the registers (see <a href="#Registers">Registers</a>). Press <b>&lt;RET&gt;</b> or click <b>Mouse-2</b> on a register if you want to edit its value. With GDB 6.4 or later, recently changed register values display with <b>font-lock-warning-face</b>.</li>
<li><b>Assembler Buffer</b>:The assembler buffer displays the current frame as machine code. An arrow points to the current instruction, and you can set and remove breakpoints as in a source buffer. Breakpoint icons also appear in the fringe or margin.</li>
<li><b>Memory Buffer</b>: The memory buffer lets you examine sections of program memory. Click <b>Mouse-1</b> on the appropriate part of the header line to change the starting address or number of data items that the buffer displays. Alternatively, use <b>S</b> or <b>N</b> respectively. Click <b>Mouse-3</b> on the header line to select the display format or unit size for these data items.</li>
</ul>
<p class="tab">When <b>gdb-many-windows</b> is non-nil, the locals buffer shares its window with the registers buffer, only like breakpoints and threads buffers. To switch from one to the other, click with <b>Mouse-1</b> on the relevant button in the header line.</p>
<h2 id="Watch-Expressions">Watch expressions</h2>
<p class="tab">If you want to see how a variable changes each time your program stops, move point into the variable name and click the watch icon in the tool bar (<b>gud-watch</b>) or type <b>C-x C-a C-w</b>. If you specify a prefix argument, you can enter the variable name in the minibuffer.<br><br>Each watch expression is displayed in the speedbar (see <a href="#Speedbar">Speedbar</a>). Complex data types, such as arrays, structures and unions are represented in a tree format. Leaves and simple data types show the name of the expression and its value and, when the speedbar frame is selected, display the type as a tooltip. Higher levels show the name, type and address value for pointers and only the name and type otherwise. Root expressions also display the frame address as a tooltip to help identify the frame where they were defined.<br><br>To expand or contract a complex data type, click <b>Mouse-2</b> or press <b>&lt;SPC&gt;</b> on the tag to the left of the expression. Emacs asks for confirmation before expanding the expression if its number of immediate children exceeds the value of the variable <b>gdb-max-children</b>.<br><br>To delete a complex watch expression, move point to the root expression in the speedbar and type <b>D</b> (<b>gdb-var-delete</b>).<br><br>To edit a variable with a simple data type, or a simple element of a complex data type, move point there in the speedbar and type <b>&lt;RET&gt;</b> (<b>gdb-edit-value</b>). Or you can click <b>Mouse-2</b> on a value to edit it. Either way, this reads the new value using the minibuffer.<br><br>If you set the variable <b>gdb-show-changed-values</b> to non-nil (the default value), Emacs uses <b>font-lock-warning-face</b> to highlight values that have recently changed and shadow face to make variables which have gone out of scope less noticeable. When a variable goes out of scope you can't edit its value.<br><br>If the variable <b>gdb-delete-out-of-scope</b> is non-nil (the default value), Emacs automatically deletes watch expressions which go out of scope. Sometimes, when re-entering the same function, it may be useful to set this value to nil so that you don't need to recreate the watch expression.<br><br>If the variable <b>gdb-use-colon-colon-notation</b> is non-nil, Emacs uses the '<b>function::variable</b>' format. This allows the user to display watch expressions which share the same variable name. The default value is <b>nil</b>.<br><br>To automatically raise the speedbar every time the display of watch expressions updates, set <b>gdb-speedbar-auto-raise</b> to non-nil. This can be useful if you are debugging with a full screen Emacs frame.</p>
<h2 id="Multithreaded-Debugging">Multithreaded debugging</h2>
<p class="tab">In GDB's all-stop mode, whenever your program stops, all execution threads stop. Likewise, whenever you restart the program, all threads start executing. For some multi-threaded targets, GDB supports a further mode of operation, called non-stop mode, where you can examine stopped program threads in the debugger while other threads continue to execute freely. Versions of GDB before 7.0 do not support non-stop mode, and it does not work on all targets.<br><br>The variable <b>gdb-non-stop-setting</b> determines whether Emacs runs GDB in all-stop mode or non-stop mode. The default is <b>t</b>, which means it tries to use non-stop mode if that is available. If you change the value to <b>nil</b>, or if non-stop mode is unavailable, Emacs runs GDB in all-stop mode. The variable takes effect when Emacs begins a debugging session; if you change its value, restart any active debugging session.<br><br>When a thread stops in non-stop mode, Emacs usually switches to that thread. If you don't want Emacs to do this switch if another stopped thread is already selected, change the variable <b>gdb-switch-when-another-stopped</b> to <b>nil</b>.<br><br>Emacs can decide whether or not to switch to the stopped thread depending on the reason which caused the stop. Customize the variable <b>gdb-switch-reasons</b> to select the stop reasons which causes a thread switch.<br><br>The variable <b>gdb-stopped-functions</b> allows you to execute your functions whenever some thread stops.<br><br>In non-stop mode, you can switch between different modes for GUD execution control commands.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>Non-stop/A</b></td>
<td>When <b>gdb-gud-control-all-threads</b> is <b>t</b> (the default value), interruption and continuation commands apply to all threads, so you can halt or continue all your threads with one command using <b>gud-stop-subjob</b> and <b>gud-cont</b>, respectively. The '<b>Go</b>' button is shown on the toolbar when at least one thread is stopped, whereas '<b>Stop</b>' button is shown when at least one thread is running.</td>
</tr>
<tr class="tcw">
<td><b>Non-stop/T</b></td>
<td>When <b>gdb-gud-control-all-threads</b> is <b>nil</b>, only the current thread is stopped/continued. '<b>Go</b>' and '<b>Stop</b>' buttons on the GUD toolbar are shown depending on the state of current thread.</td>
</tr>
</table>
<p class="tab">You can change the current value of <b>gdb-gud-control-all-threads</b> from the tool bar or from '<b>GUD-GDB-MI</b>' menu.<br><br>Stepping commands always apply to the current thread.<br><br>In non-stop mode, you can interrupt/continue your threads without selecting them. Hitting <b>i</b> in threads buffer interrupts thread under point, <b>c</b> continues it, <b>s</b> steps through. More such commands may be added in the future.<br><br>Note that when you interrupt a thread, it stops with the '<b>signal received</b>' reason. If that reason is included in your <b>gdb-switch-reasons</b> (it is by default), Emacs switches to that thread.</p>
<h2 id="Executing-Lisp">Executing Lisp expressions</h2>
<p class="tab">Emacs has major modes for several variants of Lisp. They use the same editing commands as other programming language modes (see <a href="#Programs">Programs</a>). Also, they provide special commands for executing Lisp expressions.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px">Emacs Lisp mode</td>
<td>The mode for editing Emacs Lisp source files. It defines <b>C-M-x</b> to evaluate the current top-level Lisp expression. See <a href="#Lisp-Eval">Lisp Eval</a>.</td>
</tr>
<tr class="tcw">
<td>Lisp Interaction mode</td>
<td>The mode for an interactive Emacs Lisp session. It defines <b>C-j</b> to evaluate the expression before point and insert its value in the buffer. See <a href="#Lisp-Interaction">Lisp Interaction</a>.</td>
</tr>
<tr class="tcw">
<td>Lisp mode</td>
<td>The mode for editing source files of programs that run in Lisps other than Emacs Lisp. It defines <b>C-M-x</b> to evaluate the current top-level expression in an external Lisp. See <a href="#External-Lisp">External Lisp</a>.</td>
</tr>
<tr class="tcw">
<td>Inferior Lisp mode</td>
<td>The mode for an interactive session with an external Lisp that is running as a subprocess (or inferior process) of Emacs. See <a href="#External-Lisp">External Lisp</a>.</td>
</tr>
<tr class="tcw">
<td>Scheme mode</td>
<td>Like Lisp mode, but for Scheme programs.</td>
</tr>
<tr class="tcw">
<td>Inferior Scheme mode</td>
<td>Like Inferior Lisp mode, but for Scheme.</td>
</tr>
</table>
<h2 id="Lisp-Libraries">Libraries of Lisp code for Emacs</h2>
<p class="tab">Emacs Lisp code is stored in files whose names conventionally end in .el. Such files are automatically visited in Emacs Lisp mode.<br><br>Emacs Lisp code can be compiled into byte-code, which loads faster, takes up less space, and executes faster. By convention, compiled Emacs Lisp code goes in a separate file whose name ends in '<b>.elc</b>'. For example, the compiled code for <b>foo.el</b> goes in <b>foo.elc</b>.<br><br>To load an Emacs Lisp file, type <b>M-x load-file</b>. This command reads a file name using the minibuffer, and executes the contents of that file as Emacs Lisp code. It is not necessary to visit the file first; this command reads the file directly from disk, not from an existing Emacs buffer.<br><br>If an Emacs Lisp file is installed in the Emacs Lisp load path (defined below), you can load it by typing <b>M-x load-library</b>, instead of using <b>M-x load-file</b>. The <b>M-x load-library</b> command prompts for a library name rather than a file name; it searches through each directory in the Emacs Lisp load path, trying to find a file matching that library name. If the library name is '<b>foo</b>', it tries looking for files named foo.elc, foo.el, and lastly only foo; the first one found is loaded. This command prefers .elc files over .el files because compiled files load and run faster. If it finds that lib.el is newer than lib.elc, it issues a warning, in case someone made changes to the .el file and forgot to recompile it, but loads the .elc file. (Due to this behavior, you can save unfinished edits to Emacs Lisp source files, and not recompile until your changes are ready for use.)<br><br>Emacs Lisp programs usually load Emacs Lisp files using the load function. This is similar to <b>load-library</b>, but is <b>lower-level</b> and accepts additional arguments.<br><br>The Emacs Lisp load path is specified by the variable load-path. Its value should be a list of directory names (strings). These directories are searched, in the specified order, by the <b>M-x load-library</b> command, the <b>lower-level</b> load function, and other Emacs functions that find Emacs Lisp libraries. A list entry in load-path can also have the special value <b>nil</b>, which stands for the current default directory, but it is often a bad idea to use this. (If you find yourself wanting that <b>nil</b> were in the list, most likely what you want is to use <b>M-x load-file</b>.)<br><br>The default value of <b>load-path</b> is a list of directories where the Lisp code for Emacs itself is stored. If you have libraries in another directory, you can add that directory to the load path. Unlike most other variables described in this manual, <b>load-path</b> cannot be changed via the Customize interface (see <a href="#Easy-Customization">Easy Customization</a>), but you can add a directory to it by putting a line like this in your init file (see <a href="#Init-File">Init File</a>):</p>
<pre class="tab tcy">(add-to-list 'load-path "/path/to/my/lisp/library")</pre>
<p class="tab">Some commands are autoloaded; when you run them, Emacs automatically loads the associated library first. For instance, the <b>M-x</b> compile command (see <a href="#Compilation">Compilation</a>) is autoloaded; if you call it, Emacs automatically loads the compile library first. In contrast, the command <b>M-x recompile</b> is not autoloaded, so it is unavailable until you load the compile library.<br><br>Automatic loading can also occur when you look up the documentation of an autoloaded command (see <a href="#Name-Help">Name Help</a>), if the documentation refers to other functions and variables in its library (loading the library lets Emacs properly set up the hyperlinks in the *Help* buffer). To disable this feature, change the variable <b>help-enable-auto-load</b> to <b>nil</b>.<br><br>By default, Emacs refuses to load compiled Lisp files which were compiled with XEmacs, a modified versions of Emacs&mdash;they can cause Emacs to crash. Set the variable <b>load-dangerous-libraries</b> to <b>t</b> if you want to try loading them.</p>
<h2 id="Lisp-Eval">Evaluating Emacs Lisp expressions</h2>
<p class="tab">Emacs Lisp mode is the major mode for editing Emacs Lisp. Its mode command is <b>M-x emacs-lisp-mode</b>.<br><br>Emacs provides several commands for evaluating Emacs Lisp expressions. You can use these commands in Emacs Lisp mode, to test your Emacs Lisp code as it is being written. For example, after re-writing a function, you can evaluate the function definition to make it take effect for subsequent function calls. These commands are also available globally, and can be used outside Emacs Lisp mode.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>M-:</b></td>
<td>Read a single Emacs Lisp expression in the minibuffer, evaluate it, and print the value in the echo area (<b>eval-expression</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-e</b></td>
<td>Evaluate the Emacs Lisp expression before point, and print the value in the echo area (<b>eval-last-sexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-x</b> (in Emacs Lisp mode), <b>M-x eval-defun</b></td>
<td>Evaluate the defun containing or after point, and print the value in the echo area (<b>eval-defun</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x eval-region</b></td>
<td>Evaluate all the Emacs Lisp expressions in the region.</td>
</tr>
<tr class="tcw">
<td><b>M-x eval-buffer</b></td>
<td>Evaluate all the Emacs Lisp expressions in the buffer.</td>
</tr>
</table>
<p class="tab"><b>M-:</b> (<b>eval-expression</b>) reads an expression using the minibuffer, and evaluates it. (Before evaluating the expression, the current buffer switches back to the buffer that was current when you typed <b>M-:</b>, not the minibuffer where you typed the expression.)<br><br>The command <b>C-x C-e</b> (<b>eval-last-sexp</b>) evaluates the Emacs Lisp expression preceding point in the buffer, and displays the value in the echo area. When the result of an evaluation is an integer, you can type <b>C-x C-e</b> a second time to display the value of the integer result in additional formats (octal, hexadecimal, and character). If <b>M-:</b> or <b>C-x C-e</b> is given a prefix argument, it inserts the value into the current buffer at point, rather than displaying it in the echo area. The argument's value does not matter.<br><br>The <b>eval-defun</b> command is bound to <b>C-M-x</b> in Emacs Lisp mode. It evaluates the top-level Lisp expression containing or following point, and prints the value in the echo area. In this context, a top-level expression is referred to as a "defun", but it need not be an actual defun (function definition). In particular, this command treats defvar expressions specially. Normally, evaluating a defvar expression does nothing if the variable it defines already has a value. But this command unconditionally resets the variable to the initial value specified by the defvar; this is convenient for debugging Emacs Lisp programs. Defcustom and defface expressions are treated similarly. Note that the other commands documented in this section do not have this special feature.<br><br>With a prefix argument, <b>C-M-x</b> instruments the function definition for Edebug, the Emacs Lisp Debugger.<br><br>The command <b>M-x eval-region</b> parses the text of the region as one or more Lisp expressions, evaluating them one by one. <b>M-x eval-buffer</b> is similar but evaluates the entire buffer.<br><br>The options <b>eval-expression-print-level</b> and <b>eval-expression-print-length</b> control the maximum depth and length of lists to print in the result of the evaluation commands before abbreviating them. <b>eval-expression-debug-on-error</b> controls whether evaluation errors invoke the debugger when these commands are used; its default is <b>t</b>.</p>
<h2 id="Lisp-Interaction">Lisp interaction buffers</h2>
<p class="tab">When Emacs starts up, it contains a buffer named *scratch*, which is provided for evaluating Emacs Lisp expressions interactively. Its major mode is Lisp Interaction mode. You can also enable Lisp Interaction mode by typing <b>M-x lisp-interaction-mode</b>.<br><br>In the *scratch* buffer, and other Lisp Interaction mode buffers, <b>C-j</b> (<b>eval-print-last-sexp</b>) evaluates the Lisp expression before point, and inserts the value at point. Thus, as you type expressions into the buffer followed by <b>C-j</b> after each expression, the buffer records a transcript of the evaluated expressions and their values. All other commands in Lisp Interaction mode are the same as in Emacs Lisp mode.<br><br>At startup, the *scratch* buffer contains a short message, in the form of a Lisp comment, that explains its use. This message is controlled by the variable initial-scratch-message, which should be either a string, or <b>nil</b> (which means to suppress the message).<br><br>An alternative way of evaluating Emacs Lisp expressions interactively is to use Inferior Emacs Lisp mode, which provides an interface rather like Shell mode (see <a href="#Shell-Mode">Shell Mode</a>) for evaluating Emacs Lisp expressions. Type <b>M-x ielm</b> to create an *ielm* buffer which uses this mode.</p>
<h2 id="External-Lisp">Running an external Lisp</h2>
<p class="tab">Lisp mode is the major mode for editing programs written in general-purpose Lisp dialects, such as Common Lisp. Its mode command is <b>M-x lisp-mode</b>. Emacs uses Lisp mode automatically for files whose names end in .l, .lsp, or .lisp.<br><br>You can run an external Lisp session as a subprocess or inferior process of Emacs, and pass expressions to it to be evaluated. To begin an external Lisp session, type <b>M-x run-lisp</b>. This runs the program named lisp, and sets it up so that both input and output go through an Emacs buffer named *inferior-lisp*. To change the name of the Lisp program run by <b>M-x run-lisp</b>, change the variable <b>inferior-lisp-program</b>.<br><br>The major mode for the *lisp* buffer is Inferior Lisp mode, which combines the characteristics of Lisp mode and Shell mode (see <a href="#Shell-Mode">Shell Mode</a>). To send input to the Lisp session, go to the end of the *lisp* buffer and type the input, followed by <b>&lt;RET&gt;</b>. Terminal output from the Lisp session is automatically inserted in the buffer.<br><br>When you edit a Lisp program in Lisp mode, you can type <b>C-M-x</b> (<b>lisp-eval-defun</b>) to send an expression from the Lisp mode buffer to a Lisp session that you had started with <b>M-x run-lisp</b>. The expression sent is the top-level Lisp expression at or following point. The resulting value goes as usual into the *inferior-lisp* buffer. Note that the effect of <b>C-M-x</b> in Lisp mode is thus very similar to its effect in Emacs Lisp mode (see <a href="#Lisp-Eval">Lisp Eval</a>), except that the expression is sent to a different Lisp environment instead of being evaluated in Emacs.<br><br>The facilities for editing Scheme code, and for sending expressions to a Scheme subprocess, are very similar. Scheme source files are edited in Scheme mode, which can be explicitly enabled with <b>M-x scheme-mode</b>. You can initiate a Scheme session by typing <b>M-x run-scheme</b> (the buffer for interacting with Scheme is named *scheme*), and send expressions to it by typing <b>C-M-x</b>.</p>
<h2 id="Maintaining">Maintaining large programs</h2>
<p class="tab">This chapter describes Emacs features for maintaining large programs. If you are maintaining a large Lisp program, then in addition to the features described here, you may find the ERT ("Emacs Lisp Regression Testing") library useful.</p>
<ul>
<li><a href="#Version-Control">Version Control</a>: Using version control systems.</li>
<li><a href="#Change-Log">Change Log</a>: Maintaining a change history for your program.</li>
<li><a href="#Tags">Tags</a>: Go directly to any function in your program in one command. Tags remembers the file where it's located.</li>
<li><a href="#EDE">EDE</a>: An integrated development environment for Emacs.</li>
<li><a href="#Emerge">Emerge</a>: A convenient way of merging two versions of a program.</li>
</ul>
<h2 id="Version-Control">Version control</h2>
<p class="tab">A version control system is a program that records multiple versions of a source file, storing information such as the creation time of each version, who made it, and a description of what was changed.<br><br>The Emacs version control interface is called VC. VC commands work with different version control systems; currently, it supports GNU Arch, Bazaar, CVS, Git, Mercurial, Monotone, RCS, SCCS/CSSC, and Subversion. Of these, the GNU project distributes CVS, Arch, RCS, and Bazaar.<br><br>VC is enabled automatically whenever you visit a file governed by a version control system. To disable VC entirely, set the customizable variable <b>vc-handled-backends</b> to <b>nil</b> (see <a href="#Customizing-VC">Customizing VC</a>).</p>
<ul>
<li><a href="#Introduction-to-VC">Introduction to VC</a>: How version control works in general.</li>
<li><a href="#VC-Mode-Line">VC Mode Line</a>: How the mode line shows version control status.</li>
<li><a href="#Basic-VC-Editing">Basic VC Editing</a>: How to edit a file under version control.</li>
<li><a href="#Log-Buffer">Log Buffer</a>: Features available in log entry buffers.</li>
<li><a href="#Registering">Registering</a>: Putting a file under version control.</li>
<li><a href="#Old-Revisions">Old Revisions</a>: Examining and comparing old versions.</li>
<li><a href="#VC-Change-Log">VC Change Log</a>: Viewing the VC Change Log.</li>
<li><a href="#VC-Undo">VC Undo</a>: Canceling changes before or after committing.</li>
<li><a href="#VC-Directory-Mode">VC Directory Mode</a>: Listing files managed by version control.</li>
<li><a href="#Branches">Branches</a>: Multiple lines of development.</li>
<li><a href="#Miscellaneous-VC">Miscellaneous VC</a>: Other commands and features of VC.</li>
<li><a href="#Customizing-VC">Customizing VC</a>: Variables that change VC's behavior.</li>
</ul>
<h2 id="Introduction-to-VC">Introduction to version control</h2>
<p class="tab">VC allows you to use a version control system from within Emacs, integrating the version control operations smoothly with editing. It provides a uniform interface for common operations in many version control operations.<br><br>Some uncommon or intricate version control operations, such as altering repository settings, are not supported in VC. Perform such tasks outside Emacs, e.g., via the command line.<br><br>This section provides a general overview of version control, and describes the version control systems that VC supports. You can skip this section if you are already familiar with the version control system you want to use.</p>
<ul>
<li><a href="#Why-Version-Control_003f">Why Version Control?</a>: Understanding the problems it addresses.</li>
<li><a href="#Version-Control-Systems">Version Control Systems</a>: Supported version control back-end systems.</li>
<li><a href="#VCS-Concepts">VCS Concepts</a>: Words and concepts related to version control.</li>
<li><a href="#VCS-Merging">VCS Merging</a>: How file conflicts are handled.</li>
<li><a href="#VCS-Changesets">VCS Changesets</a>: How changes are grouped.</li>
<li><a href="#VCS-Repositories">VCS Repositories</a>: Where version control repositories are stored.</li>
<li><a href="#Types-of-Log-File">Types of Log File</a>: The VCS log in contrast to the ChangeLog.</li>
</ul>
<h2 id="Why-Version-Control_003f">Understanding why to use version control</h2>
<p class="tab">Version control systems provide you with three important capabilities:</p>
<ul>
<li>Reversibility: the ability to back up to a previous state if you discover that some modification you did was a mistake or a bad idea.</li>
<li>Concurrency: the ability to have many people modifying the same collection of files knowing that conflicting modifications can be detected and resolved.</li>
<li>History: the ability to attach historical data to your data, such as explanatory comments about the intention behind each change to it. Even for a programmer working solo, change histories are an important aid to memory; for a multi-person project, they are a vitally important form of communication among developers.</li>
</ul>
<h2 id="Version-Control-Systems">Supported version control systems</h2>
<p class="tab">VC currently works with many different version control systems, which it refers to as back ends:</p>
<ul>
<li>SCCS was the first version control system ever built, and was long ago superseded by more advanced ones. VC compensates for certain features missing in SCCS (e.g., tag names for releases) by implementing them itself. Other VC features, such as multiple branches, are unavailable. Since SCCS is non-free, we recommend avoiding it.</li>
<li>CSSC is a free replacement for SCCS. Use CSSC only if, for some reason, you cannot use a more recent and better-designed version control system.</li>
<li>RCS is the free version control system around which VC was initially built. It is relatively primitive: it cannot be used over the network, and works at the level of individual files. Almost everything you can do with RCS can be done through VC.</li>
<li>CVS is the free version control system that was, until recently (circa 2008), used by the majority of free software projects. Nowadays, it is slowly being superseded by newer systems. CVS allows concurrent multi-user development either locally or over the network. Unlike newer systems, it lacks support for atomic commits and file moving/renaming. VC supports all basic editing operations under CVS.</li>
<li>Subversion (svn) is a free version control system designed to be similar to CVS but without its problems (e.g., it supports atomic commits of filesets, and versioning of directories, symbolic links, meta-data, renames, copies, and deletes).</li>
<li>GNU Arch is one of the earliest decentralized version control systems (the other being Monotone). See VCS Concepts, for a description of decentralized version control systems. It is no longer under active development, and is deprecated in favor of Bazaar.</li>
<li>Git is a decentralized version control system originally invented by Linus Torvalds to support development of Linux (his kernel). VC supports many common Git operations, but others, such as repository syncing, must be done from the command line.</li>
<li>Mercurial (hg) is a decentralized version control system broadly resembling Git. VC supports most Mercurial commands, except repository sync operations.</li>
<li>Bazaar (bzr) is a decentralized version control system that supports both repository-based and decentralized versioning. VC supports most basic editing operations under Bazaar.</li>
</ul>
<h2 id="VCS-Concepts">Concepts of version control</h2>
<p class="tab">When a file is under version control, we say that it is registered in the version control system. The system has a repository which stores both the file's present state and its change history&mdash;enough to reconstruct the current version or any earlier version. The repository also contains other information, such as log entries that describe the changes made to each file.<br><br>The copy of a version-controlled file that you actually edit is called the work file. You can change each work file as you would an ordinary file. After you are done with a set of changes, you may commit (or check in) the changes; this records the changes in the repository, along with a descriptive log entry.<br><br>A directory tree of work files is called a working tree.<br><br>Each commit creates a new revision in the repository. The version control system keeps track of all past revisions and the changes that were made in each revision. Each revision is named by a revision ID, whose format depends on the version control system; in the simplest case, it is only an integer.<br><br>To go beyond these basic concepts, you need to understand three aspects where version control systems differ. As explained in the next three sections, they can be lock-based or merge-based; file-based or changeset-based; and centralized or decentralized. VC handles all these modes of operation, but it cannot hide the differences.</p>
<h2 id="VCS-Merging">Merge-based vs. lock-based version control</h2>
<p class="tab">A version control system often has some mechanism to coordinate between users who want to change the same file. There are two ways to do this: merging and locking.<br><br>In a version control system that uses merging, each user may modify a work file at any time. The system lets you merge your work file, which may contain changes that have not been committed, with the latest changes that others have committed.<br><br>Older version control systems use a locking scheme instead. Here, work files are normally read-only. To edit a file, you ask the version control system to make it writable for you by locking it; only one user can lock a given file at any given time. This procedure is analogous to, but different from, the locking that Emacs uses to detect simultaneous editing of ordinary files (see <a href="#Interlocking">Interlocking</a>). When you commit your changes, that unlocks the file, and the work file becomes read-only again. Other users may then lock the file to make their changes.<br><br>Both locking and merging systems can have problems when multiple users try to modify the same file at the same time. Locking systems have lock conflicts; a user may try to check a file out and be unable to because it is locked. In merging systems, merge conflicts happen when you commit a change to a file that conflicts with a change committed by someone else after your checkout. Both kinds of conflict have to be resolved by human judgment and communication. Experience has shown that merging is superior to locking, both in convenience to developers and in minimizing the number and severity of conflicts that actually occur.<br><br>SCCS always uses locking. RCS is lock-based by default but can be told to operate in a merging style. CVS and Subversion are merge-based by default but can be told to operate in a locking mode. Decentralized version control systems, such as GNU Arch, Git, and Mercurial, are exclusively merging-based.<br><br>VC mode supports both locking and merging version control. The terms "commit" and "update" are used in newer version control systems; older lock-based systems use the terms "check in" and "check out". VC hides the differences between them as much as possible.</p>
<h2 id="VCS-Changesets">Changeset-based vs. file-based version control systems</h2>
<p class="tab">On SCCS, RCS, CVS, and other early version control systems, version control operations are file-based: each file has its own comment and revision history separate from that of all other files. Newer systems, beginning with Subversion, are changeset-based: a commit may include changes to several files, and the entire set of changes is handled as a unit. Any comment associated with the change does not belong to a single file, but to the changeset itself.<br><br>Changeset-based version control is more flexible and powerful than file-based version control; usually, when a change to multiple files has to be reversed, it's good to be able to easily identify and remove all of it.</p>
<h2 id="VCS-Repositories">Decentralized vs. centralized repositories</h2>
<p class="tab">Early version control systems were designed around a centralized model where each project has only one repository used by all developers. SCCS, RCS, CVS, and Subversion share this kind of model. One of its drawbacks is that the repository is a choke point for reliability and efficiency.<br><br>GNU Arch pioneered the concept of distributed or decentralized version control, later implemented in Git, Mercurial, and Bazaar. A project may have different repositories, and these systems support a sort of super-merge between repositories that tries to reconcile their change histories. In effect, there is one repository for each developer, and repository merges take the place of commit operations.<br><br>VC helps you manage the traffic between your workfiles and a repository. Whether the repository is a single master, or one of a network of peer repositories, is not something that VC cares.</p>
<h2 id="Types-of-Log-File">Types of log file</h2>
<p class="tab">Projects that use a version control system can have two types of log for changes. One is the log maintained by the version control system: each time you commit a change, you fill out a log entry for the change (see <a href="#Log-Buffer">Log Buffer</a>). This is called the version control log.<br><br>The other kind of log is the file <b>ChangeLog</b> (see <a href="#Change-Log">Change Log</a>). It provides a chronological record of all changes to a large portion of a program&mdash;often one directory and its subdirectories. A small program would use one ChangeLog file; a large program may have a ChangeLog file in each major directory. Programmers have used change logs since long before version control systems.<br><br>Changeset-based version systems often maintain a changeset-based modification log for the entire system, which makes change log files somewhat redundant. One advantage that they retain is that it is sometimes useful to be able to view the transaction history of a single directory separately from those of other directories.<br><br>A project maintained with version control can use only the version control log, or it can use both kinds of logs. It can handle some files one way and some files the other way. Each project has its policy to follow.<br><br>When the policy is to use both, you often want to write an entry for each change only once, then put it into both logs. You can write the entry in ChangeLog, then copy it to the log buffer with <b>C-c C-a</b> when committing the change (see <a href="#Log-Buffer">Log Buffer</a>). Or you can write the entry in the log buffer while committing the change, and later use the <b>C-x v a</b> command to copy it to ChangeLog (see <a href="#Change-Logs-and-VC">Change Logs and VC</a>).</p>
<h2 id="VC-Mode-Line">Version control and the mode line</h2>
<p class="tab">When you visit a file that is under version control, Emacs indicates this on the mode line. For example, '<b>Bzr-1223</b>' says that Bazaar is used for that file, and the current revision ID is 1223.<br><br>The character between the back-end name and the revision ID indicates the version control status of the work file. In a merge-based version control system, a '<b>-</b>' character indicates that the work file is unmodified, and '<b>:</b>' indicates that it was modified. '<b>!</b>' indicates that the file contains conflicts as result of a recent merge operation (see <a href="#Merging">Merging</a>), or that the file was removed from the version control. Finally, '<b>?</b>' indicates the file is under version control, but is missing from the working tree.<br><br>In a lock-based system, '<b>-</b>' indicates an unlocked file, and '<b>:</b>' a locked file; if the file is locked by another user (for instance, '<b>jim</b>'), that is displayed as '<b>RCS:jim:1.3</b>'. '<b>@</b>' indicates the file was locally added, but not yet committed to the master repository.<br><br>On a graphical display, you can move the mouse over this mode line indicator to pop up a "tool-tip", which displays a more verbose description of the version control status. Pressing Mouse-1 over the indicator pops up a menu of VC commands, identical to '<b>Tools / Version Control</b>' on the menu bar.<br><br>When Auto Revert mode (see <a href="#Reverting">Reverting</a>) reverts a buffer that is under version control, it updates the version control information in the mode line. However, Auto Revert mode may not properly update this information if the version control status changes without changes to the work file, from outside the current Emacs session. If you set <b>auto-revert-check-vc-info</b> to <b>t</b>, Auto Revert mode updates the version control status information every <b>auto-revert-interval</b> seconds, even if the work file itself is unchanged. The resulting CPU usage depends on the version control system, but is usually not excessive.</p>
<h2 id="Basic-VC-Editing">Basic editing under version control</h2>
<p class="tab">Most VC commands operate on VC filesets. A VC fileset is a collection of one or more files which a VC operation takes action. When you type VC commands in a buffer visiting a version-controlled file, the VC fileset is that one file. When you type them in a VC Directory buffer, and some files in it are marked, the VC fileset consists of the marked files (see <a href="#VC-Directory-Mode">VC Directory Mode</a>).<br><br>On modern changeset-based version control systems (see <a href="#VCS-Changesets">VCS Changesets</a>), VC commands handle multi-file VC filesets as a group. For example, committing a multi-file VC fileset generates a single revision, containing the changes to all those files. On older file-based version control systems like CVS, each file in a multi-file VC fileset is handled individually; for example, a commit generates one revision for each changed file.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x v v</b></td>
<td>Perform the next appropriate version control operation on the current VC fileset.</td>
</tr>
</table>
<p class="tab">The principal VC command is a multi-purpose command, <b>C-x v v</b> (<b>vc-next-action</b>), which performs the "most appropriate" action on the current VC fileset: either registering it with a version control system, or committing it, or unlocking it, or merging changes into it. The precise actions are described in detail in the following subsections. You can use <b>C-x v v</b> either in a file-visiting buffer or in a VC Directory buffer.<br><br>Note that VC filesets are distinct from the "named filesets" used for viewing and visiting files in functional groups (see <a href="#Filesets">Filesets</a>). Unlike named filesets, VC filesets are not named and don't persist across sessions.</p>
<ul>
<li><a href="#VC-With-A-Merging-VCS">VC With A Merging VCS</a>: Without locking: default mode for CVS.</li>
<li><a href="#VC-With-A-Locking-VCS">VC With A Locking VCS</a>: RCS in its default mode, SCCS, and optionally CVS.</li>
<li><a href="#Advanced-C_002dx-v-v">Advanced C-x v v</a>: Advanced features available with a prefix argument.</li>
</ul>
<h2 id="VC-With-A-Merging-VCS">VC with a merging VCS</h2>
<p class="tab">On a merging-based version control system (i.e., most modern ones; see <a href="#VCS-Merging">VCS Merging</a>), <b>C-x v v</b> does the following:</p>
<ul>
<li>If there is more than one file in the VC fileset and the files have inconsistent version control statuses, signal an error. (Note, however, that a fileset is allowed to include both "newly-added" files and "modified" files; see <a href="#Registering">Registering</a>.)</li>
<li>If none of the files in the VC fileset are registered with a version control system, register the VC fileset, i.e., place it under version control. See <a href="#Registering">Registering</a>. If Emacs cannot find a system to register under, it prompts for a repository type, creates a new repository, and registers the VC fileset with it.</li>
<li>If every work file in the VC fileset is unchanged, do nothing.</li>
<li>If every work file in the VC fileset is modified, commit the changes. To do this, Emacs pops up a *vc-log* buffer; type the desired log entry for the new revision, followed by <b>C-c C-c</b> to commit. See <a href="#Log-Buffer">Log Buffer</a>. If committing to a shared repository, the commit may fail if the repository that was changed since your last update. In that case, you must perform an update before trying again. On a decentralized version control system, use <b>C-x v +</b> (see <a href="#VC-Pull">VC Pull</a>) or <b>C-x v m</b> (see <a href="#Merging">Merging</a>). On a centralized version control system, type <b>C-x v v</b> again to merge in the repository changes.</li>
<li>Finally, if you are using a centralized version control system, check if each work file in the VC fileset is up-to-date. If any file is changed in the repository, offer to update it.</li>
</ul>
<p class="tab">These rules also apply when you use RCS in its "non-locking" mode, except that changes are not automatically merged from the repository. Nothing informs you if another user has committed changes in the same file since you began editing it; when you commit your revision, his changes are removed (however, they remain in the repository and are thus not irrevocably lost). Therefore, you must verify that the current revision is unchanged before committing your changes. Also, locking is possible with RCS even in this mode: <b>C-x v v</b> with an unmodified file locks the file, only as it does with RCS in its normal locking mode (see <a href="#VC-With-A-Locking-VCS">VC With A Locking VCS</a>).</p>
<h2 id="VC-With-A-Locking-VCS">Basic version control with locking</h2>
<p class="tab">On a locking-based version control system (such as SCCS, and RCS in its default mode), <b>C-x v v</b> does the following:</p>
<ul>
<li>If there is more than one file in the VC fileset and the files have inconsistent version control statuses, signal an error.</li>
<li>If each file in the VC fileset is not registered with a version control system, register the VC fileset. See <a href="#Registering">Registering</a>. If Emacs cannot find a system to register under, it prompts for a repository type, creates a new repository, and registers the VC fileset with it.</li>
<li>If each file is registered and unlocked, lock it and make it writable, so that you can begin to edit it.</li>
<li>If each file is locked by you and contains changes, commit the changes. To do this, Emacs pops up a *vc-log* buffer; type the desired log entry for the new revision, followed by <b>C-c C-c</b> to commit (see <a href="#Log-Buffer">Log Buffer</a>).</li>
<li>If each file is locked by you, but you have not changed it, release the lock and make the file <b>read-only</b> again.</li>
<li>If each file is locked by another user, ask whether you want to "steal the lock". If you say yes, the file becomes locked by you, and a warning message is sent to the user who had formerly locked the file.</li>
</ul>
<p class="tab">These rules also apply when you use CVS in locking mode, except that CVS does not support stealing locks.</p>
<h2 id="Advanced-C_002dx-v-v">Advanced control in C-x v v</h2>
<p class="tab">When you give a prefix argument to <b>vc-next-action</b> (<b>C-u C-x v v</b>), it still performs the next logical version control operation, but accepts additional arguments to specify precisely how to do the operation.</p>
<ul>
<li>You can specify the name of a version control system. This is useful if the fileset can be managed by more than one version control system, and Emacs fails to detect the correct one.</li>
<li>Otherwise, if using CVS or RCS, you can specify a revision ID. If the fileset is modified (or locked), this makes Emacs commit with that revision ID. You can create a new branch by supplying an appropriate revision ID (see <a href="#Branches">Branches</a>).</li>
</ul>
<p class="tab">If the fileset is unmodified (and unlocked), this checks the specified revision into the working tree. You can also specify a revision on another branch by giving its revision or branch ID (see <a href="#Switching-Branches">Switching Branches</a>). An empty argument (i.e., <b>C-u C-x v v &lt;RET&gt;</b>) checks out the latest ("head") revision on the current branch.<br><br>This signals an error on a decentralized version control system. Those systems do not let you specify a revision IDs, nor do they use the concept of "checking out" individual files.</p>
<h2 id="Log-Buffer">Features of the log entry buffer</h2>
<p class="tab">When you tell VC to commit a change, it pops up a buffer named *vc-log*. In this buffer, write a log entry describing the changes you have made (see <a href="#Why-Version-Control_003f">Why Version Control?</a>). After you are done, type <b>C-c C-c</b> (<b>log-edit-done</b>) to exit the buffer and commit the change, together with your log entry.<br><br>The major mode for the *vc-log* buffer is Log Edit mode, a variant of Text mode (see <b>Text Mode</b>). On entering Log Edit mode, Emacs runs the hooks <b>text-mode-hook</b> and <b>vc-log-mode-hook</b> (see <a href="#Hooks">Hooks</a>).<br><br>In the *vc-log* buffer, you can write one or more header lines, specifying additional information to be supplied to the version control system. Each header line must occupy a single line at the top of the buffer; the first line that is not a header line is treated as the start of the log entry. For example, the following header line states that the present change was not written by you, but by another developer:</p>
<pre class="tab tcy">Author: J. R. Hacker &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b2d8c0daf2d7cad3dfc2ded79cd1dddf">[email&#160;protected]</a>&gt;</pre>
<p class="tab">Apart from the '<b>Author</b>' header, Emacs recognizes the headers '<b>Date</b>' (a manually-specified commit time) and '<b>Fixes</b>' (a reference to a bug fixed by the change). Not all version control systems recognize all headers: Bazaar recognizes all three headers, while Git, Mercurial, and Monotone recognize only '<b>Author</b>' and '<b>Date</b>'. If you specify a header for a system that does not support it, the header is treated as part of the log entry.<br><br>While in the *vc-log* buffer, the "current VC fileset" is considered to be the fileset that is committed if you type <b>C-c C-c</b>. To view a list of the files in the VC fileset, type <b>C-c C-f</b> (<b>log-edit-show-files</b>). To view a diff of changes between the VC fileset and the version from which you started editing (see <a href="#Old-Revisions">Old Revisions</a>), type <b>C-c C-d</b> (<b>log-edit-show-diff</b>).<br><br>If the VC fileset includes one or more ChangeLog files (see <a href="#Change-Log">Change Log</a>), type <b>C-c C-a</b> (<b>log-edit-insert-changelog</b>) to pull the relevant entries into the *vc-log* buffer. If the topmost item in each ChangeLog was made under your username on the current date, this command searches that item for entries matching the file(s) to be committed, and inserts them. If you are using CVS or RCS, see Change Logs and VC, for the opposite way of working&mdash;generating ChangeLog entries from the Log Edit buffer.<br><br>To abort a commit, only don't type <b>C-c C-c</b> in that buffer. You can switch buffers and do other editing. As long as you don't try to make another commit, the entry you were editing remains in the *vc-log* buffer, and you can go back to that buffer at any time to complete the commit.<br><br>You can also browse the history of previous log entries to duplicate a commit comment. This can be useful when you want to make several commits with similar comments. The commands <b>M-n</b>, <b>M-p</b>, <b>M-s</b> and <b>M-r</b> for doing this work only like the minibuffer history commands (see <a href="#Minibuffer-History">Minibuffer History</a>), except that they are used outside the minibuffer.</p>
<h2 id="Registering">Registering a file for version control</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x v i</b></td>
<td>Register the visited file for version control.</td>
</tr>
</table>
<p class="tab">The command <b>C-x v i</b> (<b>vc-register</b>) registers each file in the current VC fileset, placing it under version control. This is essentially equivalent to the action of <b>C-x v v</b> on an unregistered VC fileset (see <a href="#Basic-VC-Editing">Basic VC Editing</a>), except that if the VC fileset is already registered, <b>C-x v i</b> signals an error whereas <b>C-x v v</b> performs some other action.<br><br>To register a file, Emacs must choose a version control system. For a multi-file VC fileset, the VC Directory buffer specifies the system to use (see <a href="#VC-Directory-Mode">VC Directory Mode</a>). For a single-file VC fileset, if the file's directory already contains files registered in a version control system, or if the directory is part of a directory tree controlled by a version control system, Emacs chooses that system. In the event that more than one version control system is applicable, Emacs uses the one that appears first in the variable <b>vc-handled-backends</b> (see <a href="#Customizing-VC">Customizing VC</a>). If Emacs cannot find a version control system to register the file under, it prompts for a repository type, creates a new repository, and registers the file into that repository.<br><br>On most version control systems, registering a file with <b>C-x v i</b> or <b>C-x v v</b> adds it to the "working tree" but not to the repository. Such files are labeled as '<b>added</b>' in the VC Directory buffer, and show a revision ID of '<b>@@</b>' in the mode line. To make the registration take effect in the repository, you must perform a commit (see <a href="#Basic-VC-Editing">Basic VC Editing</a>). Note that a single commit can include both file additions and edits to existing files.<br><br>On a locking-based version control system (see <a href="#VCS-Merging">VCS Merging</a>), registering a file leaves it unlocked and read-only. Type <b>C-x v v</b> to start editing it.</p>
<h2 id="Old-Revisions">Examining and comparing old revisions</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>C-x v =</b></td>
<td>Compare the work files in the current VC fileset with the versions you started from (<b>vc-diff</b>). With a prefix argument, prompt for two revisions of the current VC fileset and compare them. You can also call this command from a Dired buffer (see <a href="#Dired">Dired</a>).</td>
</tr>
<tr class="tcw">
<td><b>M-x vc-ediff</b></td>
<td>Like <b>C-x v =</b>, but using Ediff.</td>
</tr>
<tr class="tcw">
<td><b>C-x v D</b></td>
<td>Compare the entire working tree to the revision you started from (<b>vc-root-diff</b>). With a prefix argument, prompt for two revisions and compare their trees.</td>
</tr>
<tr class="tcw">
<td><b>C-x v ~</b></td>
<td>Prompt for a revision of the current file, and visit it in a separate buffer (<b>vc-revision-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x v g</b></td>
<td>Display an annotated version of the current file: for each line, show the latest revision where it was modified (<b>vc-annotate</b>).</td>
</tr>
</table>
<p class="tab"><b>C-x v =</b> (<b>vc-diff</b>) displays a diff which compares each work file in the current VC fileset to the version(s) from which you started editing. The diff is displayed in another window, in a Diff mode buffer (see <a href="#Diff-Mode">Diff Mode</a>) named *vc-diff*. The usual Diff mode commands are available in this buffer. In particular, the <b>g</b> (<b>revert-buffer</b>) command performs the file comparison again, generating a new diff.<br><br>To compare two arbitrary revisions of the current VC fileset, call <b>vc-diff</b> with a prefix argument: <b>C-u C-x v =</b>. This prompts for two revision IDs (see <a href="#VCS-Concepts">VCS Concepts</a>), and displays a diff between those versions of the fileset. This does not work reliably for multi-file VC filesets, if the version control system is file-based rather than changeset-based (e.g., CVS), as then revision IDs for different files would not be related in any meaningful way.<br><br>Instead of the revision ID, some version control systems let you specify revisions in other formats. For instance, under Bazaar you can enter '<b>date:yesterday</b>' for the argument to <b>C-u C-x v =</b> (and related commands) to specify the first revision committed after yesterday. See the documentation of the version control system for details.<br><br>If you invoke <b>C-x v =</b> or <b>C-u C-x v =</b> from a Dired buffer (see <a href="#Dired">Dired</a>), the file listed on the current line is treated as the current VC fileset.<br><br><b>M-x vc-ediff</b> works like <b>C-x v =</b>, except that it uses an Ediff session.<br><br><b>C-x v D</b> (<b>vc-root-diff</b>) is similar to <b>C-x v =</b>, but it displays the changes in the entire current working tree (i.e., the working tree containing the current VC fileset). If you invoke this command from a Dired buffer, it applies to the working tree containing the directory.<br><br>You can customize the diff options that <b>C-x v =</b> and <b>C-x v D</b> use for generating diffs. The options used are taken from the first non-nil value amongst the variables <b>vc-backend-diff-switches</b>, <b>vc-diff-switches</b>, and <b>diff-switches</b> (see <a href="#Comparing-Files">Comparing Files</a>), in that order. Here, backend stands for the relevant version control system, e.g., bzr for Bazaar. Since <b>nil</b> means to check the next variable in the sequence, either of the first two may use the value <b>t</b> to mean no switches at all. Most of the <b>vc-backend-diff-switches</b> variables default to nil, but some default to <b>t</b>; these are for version control systems whose diff implementations do not accept common diff options, such as Subversion.<br><br>To directly examine an older version of a file, visit the work file and type <b>C-x v ~ revision &lt;RET&gt;</b> (<b>vc-revision-other-window</b>). This retrieves the file version corresponding to revision, saves it to <b>filename.~revision~</b>, and visits it in a separate window.<br><br>Many version control systems allow you to view files annotated with per-line revision information, by typing <b>C-x v g</b> (<b>vc-annotate</b>). This creates a new buffer (the "annotate buffer") displaying the file's text, with each line colored to show how old it is. Red text is new, blue is old, and intermediate colors indicate intermediate ages. By default, the color is scaled over the full range of ages, such that the oldest changes are blue, and the newest changes are red.<br><br>When you give a prefix argument to this command, Emacs reads two arguments using the minibuffer: the revision to display and annotate (instead of the current file contents), and the time span in days the color range should cover.<br><br>From the annotate buffer, these and other color scaling options are available from the '<b>VC-Annotate</b>' menu. In this buffer, you can also use the following keys to browse the annotations of past revisions, view diffs, or view log entries:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>p</b></td>
<td>Annotate the previous revision, i.e., the revision before the one currently annotated. A numeric prefix argument is a repeat count, so <b>C-u 10 p</b> would take you back 10 revisions.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Annotate the next revision, i.e., the revision after the one currently annotated. A numeric prefix argument is a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>j</b></td>
<td>Annotate the revision indicated by the current line.</td>
</tr>
<tr class="tcw">
<td><b>a</b></td>
<td>Annotate the revision before the one indicated by the current line. This is useful to see the state the file was in before the change on the current line was made.</td>
</tr>
<tr class="tcw">
<td><b>f</b></td>
<td>Show in a buffer the file revision indicated by the current line.</td>
</tr>
<tr class="tcw">
<td><b>d</b></td>
<td>Display the diff between the current line's revision and the previous revision. This is useful to see what the current line's revision actually changed in the file.</td>
</tr>
<tr class="tcw">
<td><b>D</b></td>
<td>Display the diff between the current line's revision and the previous revision for all files in the changeset (for VC systems that support changesets). This is useful to see what the current line's revision actually changed in the tree.</td>
</tr>
<tr class="tcw">
<td><b>l</b></td>
<td>Show the log of the current line's revision. This is useful to see the author's description of the changes in the revision on the current line.</td>
</tr>
<tr class="tcw">
<td><b>w</b></td>
<td>Annotate the working revision&ndash;the one you are editing. If you used p and n to browse to other revisions, use this key to return to your working revision.</td>
</tr>
<tr class="tcw">
<td><b>v</b></td>
<td>Toggle the annotation visibility. This is useful for looking only at the file contents without distraction from the annotations.</td>
</tr>
</table>
<h2 id="VC-Change-Log">VC change log</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x v l</b></td>
<td>Display the change history for the current fileset (<b>vc-print-log</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x v L</b></td>
<td>Display the change history for the current repository (<b>vc-print-root-log</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x v I</b></td>
<td>Display the changes that a pull operation retrieves (<b>vc-log-incoming</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x v O</b></td>
<td>Display the changes that are sent by the next push operation (<b>vc-log-outgoing</b>).</td>
</tr>
</table>
<p class="tab"><b>C-x v l</b> (<b>vc-print-log</b>) displays a buffer named *vc-change-log*, showing the history of changes made to the current file, including who made the changes, the dates, and the log entry for each change (these are the same log entries you would enter via the *vc-log* buffer; see <a href="#Log-Buffer">Log Buffer</a>). Point is centered at the revision of the file currently being visited. With a prefix argument, the command prompts for the revision to center on, and the maximum number of revisions to display.<br><br>If you call <b>C-x v l</b> from a VC Directory buffer (see <a href="#VC-Directory-Mode">VC Directory Mode</a>) or a Dired buffer (see <a href="#Dired">Dired</a>), it applies to the file listed on the current line.<br><br><b>C-x v L</b> (<b>vc-print-root-log</b>) displays a *vc-change-log* buffer showing the history of the entire version-controlled directory tree (RCS, SCCS, and CVS do not support this feature). With a prefix argument, the command prompts for the maximum number of revisions to display.<br><br>The <b>C-x v L</b> history is shown in a compact form, usually showing only the first line of each log entry. However, you can type <b>&lt;RET&gt;</b> (<b>log-view-toggle-entry-display</b>) in the *vc-change-log* buffer to reveal the entire log entry for the revision at point. A second <b>&lt;RET&gt;</b> hides it again.<br><br>On a decentralized version control system, the <b>C-x v I</b> (<b>vc-log-incoming</b>) command displays a log buffer showing the changes that are applied, the next time you run the version control system's "pull" command to get new revisions from another repository (see <a href="#VC-Pull">VC Pull</a>). This other repository is the default one from which changes are pulled, as defined by the version control system; with a prefix argument, <b>vc-log-incoming</b> prompts for a specific repository. Similarly, <b>C-x v O</b> (<b>vc-log-outgoing</b>) shows the changes that are sent to another repository, the next time you run the "push" command; with a prefix argument, it prompts for a specific destination repository.<br><br>In the *vc-change-log* buffer, you can use the following keys to move between the logs of revisions and of files, and to examine and compare past revisions (see <a href="#Old-Revisions">Old Revisions</a>):</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>p</b></td>
<td>Move to the previous revision entry. (Revision entries in the log buffer are usually in reverse-chronological order, so the previous revision-item usually corresponds to a newer revision.) A numeric prefix argument is a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Move to the next revision entry. A numeric prefix argument is a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>P</b></td>
<td>Move to the log of the previous file, if showing logs for a multi-file VC fileset. Otherwise, only move to the beginning of the log. A numeric prefix argument is a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>N</b></td>
<td>Move to the log of the next file, if showing logs for a multi-file VC fileset. A numeric prefix argument is a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>a</b></td>
<td>Annotate the revision on the current line (see <a href="#Old-Revisions">Old Revisions</a>).</td>
</tr>
<tr class="tcw">
<td><b>e</b></td>
<td>Modify the change comment displayed at point. Note that not all VC systems support modifying change comments.</td>
</tr>
<tr class="tcw">
<td><b>f</b></td>
<td>Visit the revision indicated at the current line.</td>
</tr>
<tr class="tcw">
<td><b>d</b></td>
<td>Display a diff between the revision at point and the next earlier revision, for the specific file.</td>
</tr>
<tr class="tcw">
<td><b>D</b></td>
<td>Display the changeset diff between the revision at point and the next earlier revision. This shows the changes to all files made in that revision.</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b></td>
<td>In a compact-style log buffer (e.g., the one created by <b>C-x v L</b>), toggle between showing and hiding the full log entry for the revision at point.</td>
</tr>
</table>
<p class="tab">Because fetching many log entries can be slow, the *vc-change-log* buffer displays no more than 2000 revisions by default. The variable <b>vc-log-show-limit</b> specifies this limit; if you set the value to zero, that removes the limit. You can also increase the number of revisions shown in an existing *vc-change-log* buffer by clicking the '<b>Show 2X entries</b>' or '<b>Show unlimited entries</b>' buttons at the end of the buffer. However, RCS, SCCS, and CVS do not support this feature.</p>
<h2 id="VC-Undo">Undoing version control actions</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x v u</b></td>
<td>Revert the work file(s) in the current VC fileset to the last revision (<b>vc-revert</b>).</td>
</tr>
</table>
<p class="tab">If you want to discard all the changes you have made to the current VC fileset, type <b>C-x v u</b> (<b>vc-revert-buffer</b>). This shows you a diff between the work file(s) and the revision from which you started editing, and asks for confirmation for discarding the changes. If you agree, the fileset is reverted. If you don't want <b>C-x v u</b> to show a diff, set the variable <b>vc-revert-show-diff</b> to <b>nil</b> (you can still view the diff directly with <b>C-x v =</b>; see <a href="#Old-Revisions">Old Revisions</a>). Note that <b>C-x v u</b> cannot be reversed with the usual undo commands (see <a href="#Undo">Undo</a>), so use it with care.<br><br>On locking-based version control systems, <b>C-x v u</b> leaves files unlocked; you must lock again to resume editing. You can also use <b>C-x v u</b> to unlock a file if you lock it and then decide not to change it.</p>
<h2 id="VC-Directory-Mode">VC directory mode</h2>
<p class="tab">Directory buffer is a specialized buffer for viewing the version control statuses of the files in a directory tree, and performing version control operations on those files. In particular, it is used to specify multi-file VC filesets for commands like <b>C-x v v</b> to act on (see <a href="#VC-Directory-Commands">VC Directory Commands</a>).<br><br>To use the VC Directory buffer, type <b>C-x v d</b> (<b>vc-dir</b>). This reads a directory name using the minibuffer, and switches to a VC Directory buffer for that directory. By default, the buffer is named *vc-dir*. Its contents are described in VC Directory Buffer.<br><br>The <b>vc-dir</b> command automatically detects the version control system to be used in the specified directory. In the event that more than one system is used in the directory, invoke the command with a prefix argument, <b>C-u C-x v d</b>; this prompts for the version control system which the VC Directory buffer should use.<br><br>In addition to the VC Directory buffer, Emacs has a similar facility called PCL-CVS that is specialized for CVS.</p>
<ul>
<li><a href="#VC-Directory-Buffer">Buffer</a>: What the buffer looks like and means.</li>
<li><a href="#VC-Directory-Commands">Commands</a>: Commands to use in a VC directory buffer.</li>
</ul>
<h2 id="VC-Directory-Buffer">The VC directory buffer</h2>
<p class="tab">The VC Directory buffer contains a list of version-controlled files and their version control statuses. It lists files in the current directory (the one specified when you called <b>C-x v d</b>) and its subdirectories, but only those with a "noteworthy" status. Files that are up-to-date (i.e., the same as in the repository) are omitted. If all the files in a subdirectory are up-to-date, the subdirectory is not listed either. As an exception, if a file has become up-to-date as a direct result of a VC command, it is listed.<br><br>Here is an example of a VC Directory buffer listing:</p>
<pre class="tab">                          ./
         edited           configure.ac
     *   added            README
         unregistered     temp.txt
                          src/
     *   edited           src/main.c
</pre>
<p class="tab">Two work files are modified but not committed: <b>configure.ac</b> in the current directory, and <b>foo.c</b> in the <b>src/</b> subdirectory. The file named <b>README</b> is added but is not yet committed, while <b>temp.txt</b> is not under version control (see <a href="#Registering">Registering</a>).<br><br>The '<b>*</b>' characters next to the entries for <b>README</b> and <b>src/main.c</b> indicate that the user has marked out these files as the current VC fileset (see <a href="#VC-Directory-Commands">VC Directory Commands</a>).<br><br>The above example is typical for a decentralized version control system like Bazaar, Git, or Mercurial. Other systems can show other statuses. For instance, CVS shows the '<b>needs-update</b>' status if the repository has changes that have not been applied to the work file. RCS and SCCS show the name of the user locking a file as its status.<br><br>On CVS and Subversion, the <b>vc-dir</b> command normally contacts the repository, which may be on a remote machine, to check for updates. If you change the variable <b>vc-stay-local</b> or <b>vc-cvs-stay-local</b> (for CVS) to <b>nil</b> (see <a href="#CVS-Options">Options</a>), then Emacs avoids contacting a remote repository when generating the VC Directory buffer (it still contacts it when necessary, e.g., when doing a commit). This may be desirable if you are working offline or the network is slow.<br><br>The VC Directory buffer omits subdirectories listed in the variable <b>vc-directory-exclusion-list</b>. Its default value contains directories used internally by version control systems.</p>
<h2 id="VC-Directory-Commands">VC directory commands</h2>
<p class="tab">Emacs provides several commands for navigating the VC Directory buffer, and for "marking" files as belonging to the current VC fileset.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>n</b>, <b>&lt;SPC&gt;</b></td>
<td>Move point to the next entry (<b>vc-dir-next-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Move point to the previous entry (<b>vc-dir-previous-line</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>Move to the next directory entry (<b>vc-dir-next-directory</b>).</td>
</tr>
<tr class="tcw">
<td><b>S-&lt;TAB&gt;</b></td>
<td>Move to the previous directory entry (<b>vc-dir-previous-directory</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b>, <b>f</b></td>
<td>Visit the file or directory listed on the current line (<b>vc-dir-find-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>o</b></td>
<td>Visit the file or directory on the current line, in a separate window (<b>vc-dir-find-file-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>m</b></td>
<td>Mark the file or directory on the current line (<b>vc-dir-mark</b>), putting it in the current VC fileset. If the region is active, mark all files in the region.<br><br>A file cannot be marked with this command if it's already in a marked directory, or one of its subdirectories. Similarly, a directory cannot be marked with this command if any file in its tree is marked.</td>
</tr>
<tr class="tcw">
<td><b>M</b></td>
<td>If point is on a file entry, mark all files with the same status; if point is on a directory entry, mark all files in that directory tree (<b>vc-dir-mark-all-files</b>). With a prefix argument, mark all listed files and directories.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Quit the VC Directory buffer, and bury it (<b>quit-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Unmark the file or directory on the current line. If the region is active, unmark all the files in the region (<b>vc-dir-unmark</b>).</td>
</tr>
<tr class="tcw">
<td><b>U</b></td>
<td>If point is on a file entry, unmark all files with the same status; if point is on a directory entry, unmark all files in that directory tree (<b>vc-dir-unmark-all-files</b>). With a prefix argument, unmark all files and directories.</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Hide files with '<b>up-to-date</b>' status (<b>vc-dir-hide-up-to-date</b>).</td>
</tr>
</table>
<p class="tab">While in the VC Directory buffer, all the files that you mark with <b>m</b> (<b>vc-dir-mark</b>) or <b>M</b> (<b>vc-dir-mark</b>) are in the current VC fileset. If you mark a directory entry with <b>m</b>, all the listed files in that directory tree are in the current VC fileset. The files and directories that belong to the current VC fileset are indicated with a '<b>*</b>' character in the VC Directory buffer, next to their VC status. In this way, you can set up a multi-file VC fileset to be acted on by VC commands like <b>C-x v v</b> (see <a href="#Basic-VC-Editing">Basic VC Editing</a>), <b>C-x v =</b> (see <a href="#Old-Revisions">Old Revisions</a>), and <b>C-x v u</b> (see <a href="#VC-Undo">VC Undo</a>).<br><br>The VC Directory buffer also defines some single-key shortcuts for VC commands with the <b>C-x v</b> prefix: <b>=</b>, <b>+</b>, <b>l</b>, <b>i</b>, and <b>v</b>.<br><br>For example, you can commit a set of edited files by opening a VC Directory buffer, where the files are listed with the '<b>edited</b>' status; marking the files; and typing <b>v</b> or <b>C-x v v</b> (<b>vc-next-action</b>). If the version control system is changeset-based, Emacs will commit the files in a single revision.<br><br>While in the VC Directory buffer, you can also perform search and replace on the current VC fileset, with the following commands:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>S</b></td>
<td>Search the fileset (<b>vc-dir-search</b>).</td>
</tr>
<tr class="tcw">
<td><b>Q</b></td>
<td>Do a regular expression query replace on the fileset (<b>vc-dir-query-replace-regexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-s a C-s</b></td>
<td>Do an incremental search on the fileset (<b>vc-dir-isearch</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-s a C-M-s</b></td>
<td>Do an incremental regular expression search on the fileset (<b>vc-dir-isearch-regexp</b>).</td>
</tr>
</table>
<p class="tab">Apart from acting on multiple files, these commands behave much like their single-buffer counterparts (see <a href="#Search">Search</a>).<br><br>The above commands are also available via the menu bar, and via a context menu invoked by <b>Mouse-2</b>. Furthermore, some VC backends use the menu to provide extra backend-specific commands. For example, Git and Bazaar allow you to manipulate stashes and shelves (where are a way to temporarily put aside uncommitted changes, and bring them back at a later time).</p>
<h2 id="Branches">Version control branches</h2>
<p class="tab">One use of version control is to support multiple independent lines of development, which are called branches. Branches are used for maintaining separate "stable" and "development" versions of a program, and for developing unrelated features in isolation from one another.<br><br>VC's support for branch operations is currently fairly limited. For decentralized version control systems, it provides commands for updating one branch with the contents of another, and for merging the changes made to two different branches (see <a href="#Merging">Merging</a>). For centralized version control systems, it supports checking out different branches and committing into new or different branches.</p>
<ul>
<li><a href="#Switching-Branches">Switching Branches</a>: How to get to another existing branch.</li>
<li><a href="#VC-Pull">VC Pull</a>: Updating the contents of a branch.</li>
<li><a href="#Merging">Merging</a>: Transferring changes between branches.</li>
<li><a href="#Creating-Branches">Creating Branches</a>: How to start a new branch.</li>
</ul>
<h2 id="Switching-Branches">Switching between branches</h2>
<p class="tab">The various version control systems differ in how branches are implemented, and these differences cannot be entirely concealed by VC.<br><br>On some decentralized version control systems, including Bazaar and Mercurial in its normal mode of operation, each branch has its own working directory tree, so switching between branches only involves switching directories. On Git, switching between branches is done using the git branch command, which changes the contents of the working tree itself.<br><br>On centralized version control systems, you can switch between branches by typing <b>C-u C-x v v</b> in an up-to-date work file (see Advanced <b>C-x v v</b>), and entering the revision ID for a revision on another branch. On CVS, for instance, revisions on the trunk (the main line of development) normally have IDs of the form 1.1, 1.2, 1.3, ..., while the first branch created from (say) revision 1.2 has revision IDs 1.2.1.1, 1.2.1.2, ..., the second branch created from revision 1.2 has revision IDs 1.2.2.1, 1.2.2.2, ..., and so forth. You can also specify the branch ID, which is a branch revision ID omitting its final component (e.g., 1.2.1), to switch to the latest revision on that branch.<br><br>On a locking-based system, switching to a different branch also unlocks (<b>write-protects</b>) the working tree.<br><br>Once you have switched to a branch, VC commands apply to that branch until you switch away; for instance, any VC filesets that you commit are committed to that specific branch.</p>
<h2 id="VC-Pull">Pulling changes into a branch</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x v +</b></td>
<td>On a decentralized version control system, update the current branch by "pulling in" changes from another location.<br><br>On a centralized version control system, update the current VC fileset.</td>
</tr>
</table>
<p class="tab">On a decentralized version control system, the command <b>C-x v +</b> (<b>vc-pull</b>) updates the current branch and working tree. It is often used to update a copy of a remote branch. If you supply a prefix argument, the command prompts for the exact version control command to use, which lets you specify from where to pull changes. Otherwise, it pulls from a default location determined by the version control system.<br><br>Amongst decentralized version control systems, <b>C-x v +</b> is currently supported only by Bazaar, Git, and Mercurial. On Bazaar, it calls bzr pull for ordinary branches (to pull from a master branch into a mirroring branch), and bzr update for a bound branch (to pull from a central repository). On Git, it calls git pull to fetch changes from a remote repository and merge it into the current branch. On Mercurial, it calls <b>hg pull -u</b> to fetch changesets from the default remote repository and update the working directory.<br><br>Before pulling, you can use <b>C-x v I</b> (<b>vc-log-incoming</b>) to view a log buffer of the changes to be applied. See <a href="#VC-Change-Log">VC Change Log</a>.<br><br>On a centralized version control system like CVS, <b>C-x v +</b> updates the current VC fileset from the repository.</p>
<h2 id="Merging">Merging branches</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-x v m</b></td>
<td>On a decentralized version control system, merge changes from another branch into the current one.<br><br>On a centralized version control system, merge changes from another branch into the current VC fileset.</td>
</tr>
</table>
<p class="tab">While developing a branch, you may sometimes need to merge in changes that were already made in another branch. This is not a trivial operation, as overlapping changes may be made to the two branches.<br><br>On a decentralized version control system, merging is done with the command <b>C-x v m</b> (<b>vc-merge</b>). On Bazaar, this prompts for the exact arguments to pass to bzr merge, offering a sensible default if possible. On Git, this prompts for the name of a branch to merge from, with completion (based on the branch names known to the current repository). The output from running the merge command is shown in a separate buffer.<br><br>On a centralized version control system like CVS, <b>C-x v m</b> prompts for a branch ID, or a pair of revision IDs (see <a href="#Switching-Branches">Switching Branches</a>); then it finds the changes from that branch, or the changes between the two revisions you specified, and merges those changes into the current VC fileset. If you only type <b>&lt;RET&gt;</b>, Emacs merges any changes that were made on the same branch since you checked the file out.<br><br>Immediately after performing a merge, only the working tree is modified, and you can review the changes produced by the merge with <b>C-x v D</b> and related commands (see <a href="#Old-Revisions">Old Revisions</a>). If the two branches contained overlapping changes, merging produces a conflict; a warning appears in the output of the merge command, and conflict markers are inserted into each affected work file, surrounding the two sets of conflicting changes. You must then resolve the conflict by editing the conflicted files. Once you are done, the modified files must be committed in the usual way for the merge to take effect (see <a href="#Basic-VC-Editing">Basic VC Editing</a>).</p>
<h2 id="Creating-Branches">Creating new branches</h2>
<p class="tab">On centralized version control systems like CVS, Emacs supports creating new branches as part of a commit operation. When committing a modified VC fileset, type <b>C-u C-x v v</b> (<b>vc-next-action</b> with a prefix argument; see <a href="#Advanced-C_002dx-v-v">Advanced C-x v v</a>/). Then Emacs prompts for a revision ID for the new revision. Specify a suitable branch ID for a branch starting at the current revision. For example, if the current revision is 2.5, the branch ID should be 2.5.1, 2.5.2, and so on, depending on the number of existing branches at that point.<br><br>To create a new branch at an older revision (one that is no longer the head of a branch), first select that revision (see <a href="#Switching-Branches">Switching Branches</a>). Your procedure then differs depending on whether you are using a locking or merging-based VCS.<br><br>On a locking VCS, you need to lock the old revision branch with <b>C-x v v</b>. You'll be asked to confirm, when you lock the old revision, that you mean to create a new branch&mdash;if you say no, you'll be offered a chance to lock the latest revision instead. On a merging-based VCS, you skip this step.<br><br>Then make your changes and type <b>C-x v v</b> again to commit a new revision. This creates a new branch starting from the selected revision.<br><br>After the branch is created, subsequent commits create new revisions on that branch. To leave the branch, you must explicitly select a different revision with <b>C-u C-x v v</b>.</p>
<h2 id="Miscellaneous-VC">Miscellaneous commands and features of VC</h2>
<p class="tab">This section explains the less-frequently-used features of VC.</p>
<ul>
<li><a href="#Change-Logs-and-VC">Change Logs and VC</a>: Generating a change log file from log entries.</li>
<li><a href="#VC-Delete_002fRename">VC Delete/Rename</a>: Deleting and renaming version-controlled files.</li>
<li><a href="#Revision-Tags">Revision Tags</a>: Symbolic names for revisions.</li>
<li><a href="#Version-Headers">Version Headers</a>: Inserting version control headers into working files.</li>
</ul>
<h2 id="Change-Logs-and-VC">Change logs and VC</h2>
<p class="tab">If you use RCS or CVS for a program with a ChangeLog file (see <a href="#Change-Log">Change Log</a>), you can generate change log entries from the version control log entries of previous commits.<br><br>Note that this only works with RCS or CVS. This procedure would be particularly incorrect on a modern changeset-based version control system, where changes to the ChangeLog file would normally be committed as part of a changeset. In that case, write the change log entries first, then pull them into the '<b>*vc-log*</b>' buffer when you commit (see <a href="#Log-Buffer">Log Buffer</a>).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>C-x v a</b></td>
<td>Visit the current directory's ChangeLog file and, for registered files in that directory, create new entries for versions committed since the most recent change log entry (<b>vc-update-change-log</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u C-x v a</b></td>
<td>As above, but only find entries for the current buffer's file.</td>
</tr>
</table>
<p class="tab">For example, suppose the first line of ChangeLog is dated 1999-04-10, and that the only check-in since then was by Nathaniel Bowditch to rcs2log on 1999-05-22 with log entry '<b>Ignore log messages that start with &#96;#'.</b>'. Then <b>C-x v a</b> inserts this ChangeLog entry:</p>
<pre class="tab tcy">1999-05-22 Nathaniel Bowditch &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d7b9b6a397b6a7b9f9b8a5b0">[email&#160;protected]</a>&gt;
     * rcs2log: Ignore log messages that start with &#96;#'.</pre>
<p class="tab">If the version control log entry specifies a function name (in parenthesis at the beginning of a line), that is reflected in the ChangeLog entry. For example, if a log entry for vc.el is '<b>(vc-do-command): Check call-process status.</b>', the ChangeLog entry is:</p>
<pre class="tab tcy">1999-05-06 Nathaniel Bowditch &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cba5aabf8baabba5e5a4b9ac">[email&#160;protected]</a>&gt;
	* vc.el (vc-do-command): Check call-process status.</pre>
<p class="tab">When <b>C-x v a</b> adds several change log entries at once, it groups related log entries together if they all are checked in by the same author at nearly the same time. If the log entries for several such files all have the same text, it coalesces them into a single entry.</p>
<h2 id="VC-Delete_002fRename">Deleting and renaming version-controlled files</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>M-x vc-delete-file</b></td>
<td>Prompt for a file name, delete the file from the working tree, and schedule the deletion for committing.</td>
</tr>
<tr class="tcw">
<td><b>M-x vc-rename-file</b></td>
<td>Prompt for two file names, VAR and OLD, rename them in the working tree, and schedule the renaming for committing.</td>
</tr>
</table>
<p class="tab">If you want to delete a version-controlled file, use the command <b>M-x vc-delete-file</b>. This prompts for the file name, and deletes it via the version control system. The file is removed from the working tree, and in the VC Directory buffer (see <a href="#VC-Directory-Mode">VC Directory Mode</a>), it is displayed with the '<b>removed</b>' status. When you commit it, the deletion takes effect in the repository.<br><br>To rename a version-controlled file, type <b>M-x vc-rename-file</b>. This prompts for two arguments: the name of the file you want to rename, and the new name; then it performs the renaming via the version control system. The renaming takes effect immediately in the working tree, and takes effect in the repository when you commit the renamed file.<br><br>On modern version control systems that have built-in support for renaming, the renamed file retains the full change history of the original file. On CVS and older version control systems, the <b>vc-rename-file</b> command actually works by creating a copy of the old file under the new name, registering it, and deleting the old file. In this case, the change history is not preserved.</p>
<h2 id="Revision-Tags">Revision tags</h2>
<p class="tab">Most version control systems allow you to apply a revision tag to a specific version of a version-controlled tree. On modern changeset-based version control systems, a revision tag is a symbolic name for a particular revision. On older file-based systems like CVS, each tag is added to the entire set of version-controlled files, allowing them to be handled as a unit. Revision tags are commonly used to identify releases that are distributed to users.<br><br>There are two basic commands for tags; one makes a tag with a given name, the other retrieves a named tag.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>C-x v s</b> <i>name</i> <b>&lt;RET&gt;</b></td>
<td>Define the working revision of every registered file in or under the current directory as a tag named <i>name</i> (<b>vc-create-tag</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x v r</b> <i>name</i> <b>&lt;RET&gt;</b></td>
<td>For all registered files at or below the current directory level, retrieve the tagged revision name. This command switches to a branch if <i>name</i> is a branch name and your VCS distinguishes branches from tags. (<b>vc-retrieve-tag</b>).<br><br>This command reports an error if any files are locked at or below the current directory, without changing anything; this is to avoid overwriting work in progress.</td>
</tr>
</table>
<p class="tab">You can give a tag or branch name as an argument to <b>C-x v =</b> or <b>C-x v ~</b> (see <a href="#Old-Revisions">Old Revisions</a>). Thus, you can use it to compare a tagged version against the current files, or two tagged versions against each other.<br><br>On SCCS, VC implements tags itself; these tags are visible only through VC. Most later systems (including CVS, Subversion, bzr, git, and hg) have a native tag facility, and VC uses it where available; those tags are visible even when you bypass VC.<br><br>In a file-oriented VCS, when you rename a registered file you need to rename its master along with it; the command <b>vc-rename-file</b> does this automatically. If you are using SCCS, you must also update the records of the tag, to mention the file by its new name (<b>vc-rename-file</b> does this, too). An old tag that refers to a master file that no longer exists under the recorded name is invalid; VC can no longer retrieve it. It would be beyond the scope of this manual to explain enough about RCS and SCCS to explain how to update the tags by hand. Using <b>vc-rename-file</b> makes the tag remain valid for retrieval, but it does not solve all problems. For example, some of the files in your program probably refer to others by name. At the very least, the makefile probably mentions the file that you renamed. If you retrieve an old tag, the renamed file is retrieved under its new name, which is not the name that the makefile expects. So the program won't really work as retrieved.</p>
<h2 id="Version-Headers">Inserting version control headers</h2>
<p class="tab">On Subversion, CVS, RCS, and SCCS, you can put certain special strings called version headers into a work file. When the file is committed, the version control system automatically puts the revision number, the name of the user who made the commit, and other relevant information into the version header.<br><br>VC does not normally use the information in the version headers. As an exception, when using RCS, Emacs uses the version header, if there is one, to determine the file version, as it is often more reliable than the RCS master file. To inhibit using the version header this way, change the variable <b>vc-consult-headers</b> to <b>nil</b>.<br><br>To insert a suitable header string into the current buffer, type <b>C-x v h</b> (<b>vc-insert-headers</b>). This command works only on Subversion, CVS, RCS, and SCCS. The variable <b>vc-backend-header</b> contains the list of keywords to insert into the version header; for instance, CVS uses <b>vc-cvs-header</b>, whose default value is '("\$Id\$"). (The extra backslashes prevent the string constant from being interpreted as a header, if the Emacs Lisp file defining it is maintained with version control.) The <b>C-x v h</b> command inserts each keyword in the list on a new line at point, surrounded by tabs, and inside comment delimiters if necessary.<br><br>The variable <b>vc-static-header-alist</b> specifies further strings to add based on the name of the buffer. Its value should be a list of elements of the form <b>(regexp . format)</b>. Whenever regexp matches the buffer name, format is also inserted as part of the version header. A '<b>%s</b>' in format is replaced with the file's version control type.</p>
<h2 id="Customizing-VC">Customizing VC</h2>
<p class="tab">The variable <b>vc-handled-backends</b> determines which version control systems VC should handle. The default value is <b>(RCS CVS SVN SCCS Bzr Git Hg Mtn Arch)</b>, so it contains all the version systems that are currently supported. If you want VC to ignore one or more of these systems, exclude its name from the list. To disable VC entirely, set this variable to <b>nil</b>.<br><br>The order of systems in the list is significant: when you visit a file registered in more than one system, VC uses the system that comes first in <b>vc-handled-backends</b> by default. The order is also significant when you register a file for the first time (see <a href="#Registering">Registering</a>).</p>
<ul>
<li><a href="#General-VC-Options">Options</a>: Options that apply to multiple back ends.</li>
<li><a href="#RCS-and-SCCS">RCS and SCCS</a>: Options for RCS and SCCS.</li>
<li><a href="#CVS-Options">Options</a>: Options for CVS.</li>
</ul>
<h2 id="General-VC-Options">Options</h2>
<p class="tab">Emacs normally does not save backup files for source files that are maintained with version control. If you want to make backup files even for files that use version control, set the variable <b>vc-make-backup-files</b> to a non-nil value.<br><br>Editing a version-controlled file through a symbolic link may cause unexpected results, if you are unaware that the underlying file is version-controlled. The variable <b>vc-follow-symlinks</b> controls what Emacs does if you try to visit a symbolic link pointing to a version-controlled file. If the value is ask (the default), Emacs asks for confirmation. If it's <b>nil</b>, Emacs only displays a warning message. If it's <b>t</b>, Emacs automatically follows the link and visits the real file instead.<br><br>If <b>vc-suppress-confirm</b> is non-nil, then <b>C-x v v</b> and <b>C-x v i</b> can save the current buffer without asking, and <b>C-x v u</b> also operates without asking for confirmation.<br><br>VC mode does much of its work by running the shell commands for the appropriate version control system. If <b>vc-command-messages</b> is non-nil, VC displays messages to indicate which shell commands it runs, and additional messages when the commands finish.</p>
<h2 id="RCS-and-SCCS">Options for RCS and SCCS</h2>
<p class="tab">By default, RCS uses locking to coordinate the activities of several users, but there is a mode called non-strict locking where you can check-in changes without locking the file first. Use '<b>rcs -U</b>' to switch to non-strict locking for a particular file, see the rcs manual page for details.<br><br>When deducing the version control state of an RCS file, VC first looks for an RCS version header string in the file (see <a href="#Version-Headers">Version Headers</a>). If there is no header string, VC normally looks at the file permissions of the work file; this is fast. But there might be situations when the file permissions cannot be trusted. In this case, the master file has to be consulted, which is rather expensive. Also, the master file can only tell you if there's any lock on the file, but not whether your work file really contains that locked version.<br><br>You can tell VC not to use version headers to determine the file status by setting <b>vc-consult-headers</b> to <b>nil</b>. VC then always uses the file permissions (if it's supposed to trust them), or else checks the master file.<br><br>You can specify the criterion for whether to trust the file permissions by setting the variable <b>vc-mistrust-permissions</b>. Its value can be <b>t</b> (always mistrust the file permissions and check the master file), <b>nil</b> (always trust the file permissions), or a function of one argument which makes the decision. The argument is the directory name of the RCS subdirectory. A non-nil value from the function says to mistrust the file permissions. If you find that the file permissions of work files are changed erroneously, set <b>vc-mistrust-permissions</b> to <b>t</b>. Then VC always checks the master file to determine the file's status.<br><br>VC determines the version control state of files under SCCS much as with RCS. It does not consider SCCS version headers, though. Thus, the variable <b>vc-mistrust-permissions</b> affects SCCS use, but <b>vc-consult-headers</b> does not.</p>
<h2 id="CVS-Options">Options specific for CVS</h2>
<p class="tab">You can specify additional command line options to pass to all CVS operations in the variable <b>vc-cvs-global-switches</b>. These switches are inserted immediately after the cvs command, before the name of the operation to invoke.<br><br>When using a CVS repository on a remote machine, VC can try keeping network interactions to a minimum. This is controlled by the variable <b>vc-cvs-stay-local</b>. There is another variable, <b>vc-stay-local</b>, which enables the feature also for other back ends that support it, including CVS. In the following, we talk only about <b>vc-cvs-stay-local</b>, but everything applies to <b>vc-stay-local</b> as well.<br><br>If <b>vc-cvs-stay-local</b> is <b>t</b> (the default), VC determines the version control status of each file using only the entry in the local CVS subdirectory and the information returned by previous CVS commands. As a consequence, if you have modified a file and somebody else has checked in other changes, you are not notified of the conflict until you try to commit.<br><br>If you change <b>vc-cvs-stay-local</b> to <b>nil</b>, VC queries the remote repository before it decides what to do in <b>vc-next-action</b> (<b>C-x v v</b>), only as it does for local repositories.<br><br>You can also set <b>vc-cvs-stay-local</b> to a regular expression that is matched against the repository hostname; VC then stays local only for repositories from hosts that match the pattern.<br><br>When using a remote repository, Emacs normally makes automatic version backups of the original versions of each edited file. These local backups are made whenever you save the first changes to a file, and they are removed after you commit your changes to the repository. (Note that these are not the same as ordinary Emacs backup files; see <a href="#Backup">Backup</a>.) Commands like <b>C-x v =</b> and <b>C-x v u</b> make use of automatic version backups, if possible, to avoid having to access the network.<br><br>Setting <b>vc-cvs-stay-local</b> to <b>nil</b> disables the making of automatic version backups.<br><br>Automatic version backups have names of the form <b>file.~version.~</b>. This is similar to the name that <b>C-x v ~</b> saves old versions to (see <a href="#Old-Revisions">Old Revisions</a>), except for the additional dot ('<b>.</b>') after the version. The relevant VC commands can use both kinds of version backups. The main difference is that the "manual" version backups made by <b>C-x v ~</b> are not deleted automatically when you commit.<br><br>CVS does not use locking by default, but there are ways to enable locking-like behavior using its CVSREAD or watch feature; see the CVS documentation for details. If that case, you can use <b>C-x v v</b> in Emacs to toggle locking, as you would for a locking-based version control system (see <a href="#VC-With-A-Locking-VCS">VC With A Locking VCS</a>).</p>
<h2 id="Change-Log">Change logs</h2>
<p class="tab">Many software projects keep a change log. This is a file, normally named <b>ChangeLog</b>, containing a chronological record of when and how the program was changed. Sometimes, there's several change log files, each recording the changes in one directory or directory tree.</p>
<ul>
<li><a href="#Change-Log-Commands">Change Log Commands</a>: Commands for editing change log files.</li>
<li><a href="#Format-of-ChangeLog">Format of ChangeLog</a>: How the change log file looks.</li>
</ul>
<h2 id="Change-Log-Commands">Change log commands</h2>
<p class="tab">The Emacs command <b>C-x 4 a</b> adds a new entry to the change log file for the file you are editing (<b>add-change-log-entry-other-window</b>). If that file is actually a backup file, it makes an entry appropriate for the file's parent&mdash;that is useful for making log entries for functions that are deleted in the current version.<br><br><b>C-x 4 a</b> visits the change log file and creates a new entry unless the most recent entry is for today's date and your name. It also creates a new item for the current file. For many languages, it can even guess the name of the function or other object that was changed.<br><br>When the variable <b>add-log-keep-changes-together</b> is non-nil, <b>C-x 4 a</b> adds to any existing item for the file rather than starting a new item.<br><br>You can combine multiple changes of the same nature. If you don't enter any text after the initial <b>C-x 4 a</b>, any subsequent <b>C-x 4 a</b> adds another symbol to the change log entry.<br><br>If <b>add-log-always-start-new-record</b> is non-nil, <b>C-x 4 a</b> always makes a new entry, even if the last entry was made by you and on the same date.<br><br>If the value of the variable <b>change-log-version-info-enabled</b> is non-nil, <b>C-x 4 a</b> adds the file's version number to the change log entry. It finds the version number by searching the first ten percent of the file, using regular expressions from the variable <b>change-log-version-number-regexp-list</b>.<br><br>The change log file is visited in Change Log mode. In this major mode, each bunch of grouped items counts as one paragraph, and each entry is considered a page. This facilitates editing the entries. <b>C-j</b> and <b>auto-fill</b> indent each new line like the previous line; this is convenient for entering the contents of an entry.<br><br>When Change Log mode is on, you can use the next-error command (by default, bound to <b>C-x &#96;</b>) to move between entries in the Change Log. You jump to the actual site in the file that was changed, not only to the next Change Log entry. You can also use previous-error to move back in the same list.<br><br>You can use the command <b>M-x change-log-merge</b> to merge other log files into a buffer in Change Log Mode, preserving the date ordering of entries.<br><br>Version control systems are another way to keep track of changes in your program and keep a change log. In the VC log buffer, typing <b>C-c C-a</b> (<b>log-edit-insert-changelog</b>) inserts the relevant Change Log entry, if one exists. See <a href="#Log-Buffer">Log Buffer</a>.</p>
<h2 id="Format-of-ChangeLog">Format of changeLog</h2>
<p class="tab">A change log entry starts with a header line containing the current date, your name (taken from the variable <b>add-log-full-name</b>), and your e-mail address (taken from the variable <b>add-log-mailing-address</b>). Aside from these header lines, every line in the change log starts with a space or a tab. The bulk of the entry consists of items, each of which starts with a line starting with whitespace and a star. Here are two entries, both dated in May 1993, with two items and one item respectively.</p>
<pre class="tab">1993-05-25  Richard Stallman  &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8cfee1ffccebe2f9a2e3feeb">[email&#160;protected]</a>&gt;
        * man.el: Rename symbols &#96;man-*' to &#96;Man-*'.
        (manual-entry): Make prompt string clearer.
        * simple.el (blink-matching-paren-distance):
        Change default to 12,000.
1993-05-24  Richard Stallman  &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d6a4bba596b1b8a3f8b9a4b1">[email&#160;protected]</a>&gt;
        * vc.el (minor-mode-map-alist): Don't use it if it's void.
        (vc-cancel-version): Doc fix.
</pre>
<p class="tab">One entry can describe several changes; each change should have its own item, or its own line in an item. Normally there should be a blank line between items. When items are related (parts of the same change, in different places), group them by leaving no blank line between them.<br><br>Put a Copyright notice and permission notice at the end of the change log file. Here is an example:</p>
<pre class="tab">Copyright 1997, 1998 Free Software Foundation, Inc.
Copying and distribution of this file, with or without modification, are
permitted provided the Copyright notice and this notice are preserved.
</pre>
<p class="tab">Substitute the proper years and Copyright holder.</p>
<h2 id="Tags">Tags tables</h2>
<p class="tab">A tag is a reference to a subunit in a program or in a document. In source code, tags reference syntactic elements of the program: functions, subroutines, data types, macros, etc. In a document, tags reference chapters, sections, appendices, etc. Each tag specifies the name of the file where the corresponding subunit is defined, and the position of the subunit's definition in that file.<br><br>A tags table records the tags extracted by scanning the source code of a certain program or a certain document. Tags extracted from generated files reference the original files, rather than the generated files that were scanned during tag extraction. Examples of generated files include C files generated from Cweb source files, from a Yacc parser, or from Lex scanner definitions; .i preprocessed C files; and Fortran files produced by preprocessing .fpp source files.<br><br>To produce a tags table, you run the etags shell command on a document or the source code file. The '<b>etags</b>' program writes the tags to a tags table file, or tags file in short. The conventional name for a tags file is TAGS. See <a href="#Create-Tags-Table">Create Tags Table</a>.<br><br>Emacs provides many commands for searching and replacing using the information recorded in tags tables. For instance, the <b>M-.</b> (<b>find-tag</b>) jumps to the location of a specified function definition in its source file. See <a href="#Find-Tag">Find Tag</a>.<br><br>The Ebrowse facility is similar to etags but specifically tailored for C++. The Semantic package provides another way to generate and use tags, separate from the etags facility. See <a href="#Semantic">Semantic</a>.</p>
<ul>
<li><a href="#Tag-Syntax">Syntax</a>: Tag syntax for various types of code and text files.</li>
<li><a href="#Create-Tags-Table">Create Tags Table</a>: Creating a tags table with etags.</li>
<li><a href="#Etags-Regexps">Etags Regexps</a>: Create arbitrary tags using regular expressions.</li>
<li><a href="#Select-Tags-Table">Select Tags Table</a>: How to visit a tags table.</li>
<li><a href="#Find-Tag">Find Tag</a>: Commands to find the definition of a specific tag.</li>
<li><a href="#Tags-Search">Tags Search</a>: Using a tags table for searching and replacing.</li>
<li><a href="#List-Tags">List Tags</a>: Using tags for completion, and listing them.</li>
</ul>
<h2 id="Tag-Syntax">Syntax</h2>
<p class="tab">Here is how tag syntax is defined for the most popular languages:</p>
<ul>
<li>In C code, any C function or typedef is a tag, and so are definitions of struct, union and enum. #define macro definitions, #undef and enum constants are also tags, unless you specify '<b>--no-defines</b>' when making the tags table. Similarly, global variables are tags, unless you specify '<b>--no-globals</b>', and so are struct members, unless you specify '<b>--no-members</b>'. Use of '<b>--no-globals</b>', '<b>--no-defines</b>' and '<b>--no-members</b>' can make the tags table file smaller.</li>
<li>You can tag function declarations and external variables in addition to function definitions by giving the '<b>--declarations</b>' option to etags.</li>
<li>In C++ code, in addition to all the tag constructs of C code, member functions are also recognized; member variables are also recognized, unless you use the '<b>--no-members</b>' option. Tags for variables and functions in classes are named '<b>class::variable</b>' and '<b>class::function</b>'. Operator definitions have tag names like '<b>operator+</b>'.</li>
<li>In Java code, tags include all the constructs recognized in C++, plus the interface, extends and implements constructs. Tags for variables and functions in classes are named '<b>class.variable</b>' and '<b>class.function</b>'.</li>
<li>In LaTeX documents, the arguments for \chapter, \section, \subsection, \subsubsection, \eqno, \label, \ref, \cite, \bibitem, \part, \appendix, \entry, \index, \def, \newcommand, \renewcommand, \newenvironment and \renewenvironment are tags. Other commands can make tags as well, if you specify them in the environment variable TEXTAGS before invoking etags. The value of this environment variable should be a colon-separated list of command names. For example,<br><br><pre class="tab tcy">TEXTAGS="mycommand:myothercommand" export TEXTAGS</pre> specifies (using Bourne shell syntax) that the commands '<b>\mycommand</b>' and '<b>\myothercommand</b>' also define tags.</li>
<li>In Lisp code, any function defined with defun, any variable defined with defvar or defconst, and in general the first argument of any expression that starts with '<b>(def</b>' in column zero is a tag.</li>
<li>In Scheme code, tags include anything defined with def or with a construct whose name starts with '<b>def</b>'. They also include variables set with <b>set!</b> at top level in the file.</li>
</ul>
<p class="tab">Other languages are also supported:</p>
<ul>
<li>In Ada code, functions, procedures, packages, tasks and types are tags. Use the '<b>--packages-only</b>' option to create tags for packages only.<br><br>In Ada, the same name can be used for different kinds of entity (e.g., for a procedure and for a function). Also, for things like packages, procedures and functions, there is the spec (i.e., the interface) and the body (i.e., the implementation). To make it easier to pick the definition you want, Ada tag name have suffixes indicating the type of entity:<br><br>'<b>/b</b>': package body.<br><br>'<b>/f</b>': function.<br><br>'<b>/k</b>': task.<br><br>'<b>/p</b>': procedure.<br><br>'<b>/s</b>': package spec.<br><br>'<b>/t</b>': type.<br><br>Thus, <b>M-x find-tag &lt;RET&gt;</b> <i>bidule</i> <b>&lt;RET&gt;</b> goes directly to the body of the package bidule, while <b>M-x find-tag &lt;RET&gt;</b> <i>bidule</i> <b>&lt;RET&gt;</b> only searches for any tag bidule.</li>
<li>In assembler code, labels appearing at the start of a line, followed by a colon, are tags.</li>
<li>In Bison or Yacc input files, each rule defines as a tag the nonterminal it constructs. The portions of the file that contain C code are parsed as C code.</li>
<li>In COBOL code, tags are paragraph names; that is, any word starting in column 8 and followed by a period.</li>
<li>In Erlang code, the tags are the functions, records and macros defined in the file.</li>
<li>In Fortran code, functions, subroutines and block data are tags.</li>
<li>In HTML input files, the tags are the <b>title</b> and the <b>h1</b>, <b>h2</b>, <b>h3</b> headers. Also, tags are <b>name=</b> in anchors and all occurrences of <b>id=</b>.</li>
<li>In Lua input files, all functions are tags.</li>
<li>In makefiles, targets are tags; additionally, variables are tags unless you specify '<b>--no-globals</b>'.</li>
<li>In Objective C code, tags include Objective C definitions for classes, class categories, methods and protocols. Tags for variables and functions in classes are named '<b>class::variable</b>' and '<b>class::function</b>'.</li>
<li>In Pascal code, the tags are the functions and procedures defined in the file.</li>
<li>In Perl code, the tags are the packages, subroutines and variables defined by the <b>package</b>, <b>sub</b>, <b>my</b> and <b>local</b> keywords. Use '<b>--globals</b>' if you want to tag global variables. Tags for subroutines are named '<b>package::sub</b>'. The name for subroutines defined in the default package is '<b>main::sub</b>'.</li>
<li>In PHP code, tags are functions, classes and defines. Vars are tags too, unless you use the '<b>--no-members</b>' option.</li>
<li>In PostScript code, the tags are the functions.</li>
<li>In Prolog code, tags are predicates and rules at the beginning of line.</li>
<li>In Python code, <b>def</b> or <b>class</b> at the beginning of a line generate a tag.</li>
</ul>
<p class="tab">You can also generate tags based on regexp matching (see <a href="#Etags-Regexps">Etags Regexps</a>) to handle other formats and languages.</p>
<h2 id="Create-Tags-Table">Creating tags tables</h2>
<p class="tab">The <b>etags</b> program is used to create a tags table file. It knows the syntax of several languages, as described in <a href="#Tag-Syntax">Syntax</a>. Here is how to run <b>etags</b>:</p>
<p class="tab tcy">etags inputfiles...</p>
<p class="tab">The <b>etags</b> program reads the specified files, and writes a tags table named TAGS in the current working directory. You can optionally specify a different file name for the tags table using the '<b>--output=file</b>' option; specifying <b>-</b> as a file name prints the tags table to standard output.<br><br>If the specified files don't exist, <b>etags</b> looks for compressed versions of them and uncompresses them to read them. Under MS-DOS, etags also looks for file names like <b>mycode.cgz</b> if it's given '<b>mycode.c</b>' on the command line and <b>mycode.c</b> does not exist.<br><br>If the tags table becomes outdated due to changes in the files described in it, you can update it by running the etags program again. If the tags table does not record a tag, or records it for the wrong file, then Emacs is not able to find that definition until you update the tags table. But if the position recorded in the tags table becomes a little bit wrong (due to other editing), Emacs is still able to find the right position, with a slight delay.<br><br>Thus, there is no need to update the tags table after each edit. Update a tags table when you define new tags that you want to have listed, or when you move tag definitions from one file to another, or when changes become substantial.<br><br>You can make a tags table include other tags table, by passing the '<b>--include=file</b>' option to etags. It then covers all the files covered by the included tags file, and its own.<br><br>If you specify the source files with relative file names when you run etags, the tags file contains file names relative to the directory where the tags file was initially written. This way, you can move an entire directory tree containing both the tags file and the source files, and the tags file still refers correctly to the source files. If the tags file is <b>-</b> or is in the <b>/dev</b> directory, however, the file names are made relative to the current working directory. This is useful, for example, when writing the tags to <b>/dev/stdout</b>.<br><br>When using a relative file name, it should not be a symbolic link pointing to a tags file in a different directory, because this would generally render the file names invalid.<br><br>If you specify absolute file names as arguments to etags, then the tags file contains absolute file names. This way, the tags file still refers to the same files even if you move it, as long as the source files remain in the same place. Absolute file names start with '<b>/</b>', or with '<b>device:/</b>' on MS-DOS and Microsoft Windows.<br><br>When you want to make a tags table from a great number of files, you may have problems listing them on the command line, because some systems have a limit on its length. You can circumvent this limit by telling <b>etags</b> to read the file names from its standard input, by typing a dash in place of the file names, like this:</p>
<pre class="tab tcy">find . -name "*.[chCH]" -print | etags -</pre>
<p class="tab"><b>etags</b> recognizes the language used in an input file based on its file name and contents. You can specify the language explicitly with the '<b>--language=name</b>' option. You can intermix these options with file names; each one applies to the file names that follow it. Specify '<b>--language=auto</b>' to tell <b>etags</b> to resume guessing the language from the file names and file contents. Specify '<b>--language=none</b>' to turn off language-specific processing entirely; then <b>etags</b> recognizes tags by regexp matching alone (see <a href="#Etags-Regexps">Etags Regexps</a>).<br><br>The option '<b>--parse-stdin=file</b>' is mostly useful when calling <b>etags</b> from programs. It can be used (only once) in place of a file name on the command line. <b>etags</b> reads from standard input and mark the produced tags as belonging to the file file.<br><br>'<b>etags --help</b>' outputs the list of the languages etags knows, and the file name rules for guessing the language. It also prints a list of all the available etags options, together with a short explanation. If followed by one or more '<b>--language=lang</b>' options, it outputs detailed information about how tags are generated for lang.</p>
<h2 id="Etags-Regexps">Etags regular expressions</h2>
<p class="tab">The '<b>--regex</b>' option to etags allows tags to be recognized by regular expression matching. You can intermix this option with file names; each one applies to the source files that follow it. If you specify multiple '<b>--regex</b>' options, all of them are used in parallel. The syntax is:</p>
<pre class="tab tcy">--regex=[{language}]/tagregexp/[nameregexp/]modifiers</pre>
<p class="tab">The essential part of the option value is <b>tagregexp</b>, the regexp for matching tags. It is always used anchored, that is, it only matches at the beginning of a line. If you want to allow indented tags, use a regexp that matches initial whitespace; start it with '<b>[ \t]*</b>'.<br><br>In these regular expressions, '<b>\</b>' quotes the next character, and all the GCC character escape sequences are supported ('<b>\a</b>' for bell, '<b>\b</b>' for back space, '<b>\d</b>' for delete, '<b>\e</b>' for escape, '<b>\f</b>' for formfeed, '<b>\n</b>' for newline, '<b>\r</b>' for carriage return, '<b>\t</b>' for tab, and '<b>\v</b>' for vertical tab).<br><br>Ideally, <b>tagregexp</b> should not match more characters than are needed to recognize what you want to tag. If the syntax requires you to write <b>tagregexp</b> so it matches more characters beyond the tag itself, add a <b>nameregexp</b>, to pick out only the tag. This enables Emacs to find tags more accurately and to do completion on tag names more reliably. You can find examples below.<br><br>The modifiers are a sequence of zero or more characters that modify the way <b>etags</b> does the matching. A regexp with no modifiers is applied sequentially to each line of the input file, in a case-sensitive way. The modifiers and their meanings are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px">'<b>i</b>'</td>
<td>Ignore case when matching this regexp.</td>
</tr>
<tr class="tcw">
<td>'<b>m</b>'</td>
<td>Match this regular expression against the whole file, so that multi-line matches are possible.</td>
</tr>
<tr class="tcw">
<td>'<b>s</b>'</td>
<td>Match this regular expression against the whole file, and allow '<b>.</b>' in tagregexp to match newlines.</td>
</tr>
</table>
<p class="tab">The '<b>-R</b>' option cancels all the regexps defined by preceding '<b>--regex</b>' options. It too applies to the file names following it. Here's an example:</p>
<pre class="tab tcy">etags --regex=/reg1/i voo.doo --regex=/reg2/m \ bar.ber -R --lang=lisp los.er</pre>
<p class="tab">Here <b>etags</b> chooses the parsing language for <b>voo.doo</b> and <b>bar.ber</b> according to their contents. <b>etags</b> also uses <b>reg1</b> to recognize additional tags in <b>voo.doo</b>, and both <b>reg1</b> and <b>reg2</b> to recognize additional tags in <b>bar.ber</b>. <b>reg1</b> is checked against each line of <b>voo.doo</b> and <b>bar.ber</b>, in a case-insensitive way, while <b>reg2</b> is checked against the whole <b>bar.ber</b> file, permitting multi-line matches, in a case-sensitive way. <b>etags</b> uses only the Lisp tags rules, with no user-specified regexp matching, to recognize tags in <b>los.er</b>.<br><br>You can restrict a '<b>--regex</b>' option to match only files of a given language using the optional prefix {language}. ('<b>etags --help</b>' prints the list of languages recognized by <b>etags</b>.) This is particularly useful when storing many predefined regular expressions for <b>etags</b> in a file. The following example tags the DEFVAR macros in the Emacs source files, for the C language only:</p>
<pre class="tab tcy">--regex='{c}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/'</pre>
<p class="tab">When you have complex regular expressions, you can store the list of them in a file. The following option syntax instructs etags to read two files of regular expressions. The regular expressions contained in the second file are matched without regard to case.</p>
<pre class="tab tcy"><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="153838677072706d2855767466703866707b667c617c637038737c7970">[email&#160;protected]</a> <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c6ebebafa1a8a9b4a3eba5a7b5a3ebb4a3a1a3befb86afa1a8a9b4a3eba5a7b5a3eba0afaaa3">[email&#160;protected]</a></pre>
<p class="tab">A regex file for etags contains one regular expression per line. Empty lines, and lines beginning with space or tab are ignored. When the first character in a line is '<b>@</b>', <b>etags</b> assumes that the rest of the line is the name of another file of regular expressions; thus, one such file can include another file. All the other lines are taken to be regular expressions. If the first non-whitespace text on the line is '<b>--</b>', that line is a comment.<br><br>For example, we can create a file called '<b>emacs.tags</b>' with the following contents:</p>
<pre class="tab tcy">-- This is for GNU Emacs C source files
{c}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/\1/</pre>
<p class="tab">and then use it like this:</p>
<pre class="tab tcy">etags <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a98484dbccceccd194e9ccc4c8cada87ddc8ceda">[email&#160;protected]</a> *.[ch] */*.[ch]</pre>
<p class="tab">Here are some more examples. The regexps are quoted to protect them from shell interpretation.</p>
<ul>
<li>Tag Octave files:<br><br><pre class="tab tcy">etags --language=none \ --regex='/[ \t]*function.*=[ \t]*\([^ \t]*\)[ \t]*(/\1/' \ --regex='/###key \(.*\)/\1/' \ --regex='/[ \t]*global[ \t].*/' \ *.m</pre> Note that tags are not generated for scripts, so that you have to add a line by yourself of the form '<b>###key scriptname</b>' if you want to jump to it.</li>
<li>Tag Tcl files:<br><br><pre class="tab tcy">etags --language=none \ --regex='/proc[ \t]+\([^ \t]+\)/\1/' *.tcl</pre></li>
<li>Tag VHDL files:<br><br><pre class="tab tcy">etags --language=none \ --regex='/[ \t]*\(ARCHITECTURE\|CONFIGURATION\) +[^ ]* +OF/' \ --regex='/[ \t]*\(ATTRIBUTE\|ENTITY\|FUNCTION\|PACKAGE\ \( BODY\)?\|PROCEDURE\|PROCESS\|TYPE\)[ \t]+\([^ \t(]+\)/\3/'</pre></li>
</ul>
<h2 id="Select-Tags-Table">Selecting a tags table</h2>
<p class="tab">Emacs has at any time one selected tags table. All the commands for working with tags tables use the selected one. To select a tags table, type <b>M-x visit-tags-table</b>, which reads the tags table file name as an argument, with TAGS in the default directory as the default.<br><br>Emacs does not actually read in the tags table contents until you try to use them; all <b>visit-tags-table</b> does is store the file name in the variable <b>tags-file-name</b>, and setting the variable yourself is only as good. The variable's initial value is <b>nil</b>; that value tells all the commands for working with tags tables that they must ask for a tags table file name to use.<br><br>Using <b>visit-tags-table</b> when a tags table is already loaded gives you a choice: you can add the new tags table to the current list of tags tables, or start a new list. The tags commands use all the tags tables in the current list. If you start a new list, the new tags table is used instead of others. If you add the new table to the current list, it is used like the others.<br><br>You can specify a precise list of tags tables by setting the variable <b>tags-table-list</b> to a list of strings, like this:</p>
<pre class="tab tcy">(setq tags-table-list '("~/emacs" "/usr/local/lib/emacs/src"))</pre>
<p class="tab">This tells the tags commands to look at the TAGS files in your <b>~/emacs</b> directory and in the <b>/usr/local/lib/emacs/src</b> directory. The order depends on which file you are in and which tags table mentions that file, as explained above.<br><br>Do not set both <b>tags-file-name</b> and <b>tags-table-list</b>.</p>
<h2 id="Find-Tag">Finding a tag</h2>
<p class="tab">The most important thing that a tags table enables you to do is to find the definition of a specific tag.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>M-.</b> <i>tag</i> <b>&lt;RET&gt;</b></td>
<td>Find first definition of <i>tag</i> (<b>find-tag</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u M-.</b></td>
<td>Find next alternate definition of last tag specified.</td>
</tr>
<tr class="tcw">
<td><b>C-u - M-.</b></td>
<td>Go back to previous tag found.</td>
</tr>
<tr class="tcw">
<td><b>C-M-.</b> <i>pattern</i> <b>&lt;RET&gt;</b></td>
<td>Find a tag whose name matches <i>pattern</i> (<b>find-tag-regexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u C-M-.</b></td>
<td>Find the next tag whose name matches the last pattern used.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 .</b> <i>tag</i> <b>&lt;RET&gt;</b></td>
<td>Find first definition of <i>tag</i>, but display it in another window (<b>find-tag-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 .</b> <i>tag</i> <b>&lt;RET&gt;</b></td>
<td>Find first definition of <i>tag</i>, and create a new frame to select the buffer (<b>find-tag-other-frame</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-*</b></td>
<td>Pop back to where you previously invoked <b>M-.</b> and friends.</td>
</tr>
</table>
<p class="tab"><b>M-.</b> (<b>find-tag</b>) prompts for a tag name and jumps to its source definition. It works by searching through the tags table for that tag's file and approximate character position, visiting that file, and searching for the tag definition at ever-increasing distances away from the recorded approximate position.<br><br>When entering the tag argument to <b>M-.</b>, the usual minibuffer completion commands can be used (see <a href="#Completion">Completion</a>), with the tag names in the selected tags table as completion candidates. If you specify an empty argument, the balanced expression in the buffer before or around point is the default argument. See <a href="#Expressions">Expressions</a>.<br><br>You don't need to give <b>M-.</b> the full name of the tag; a part will do. <b>M-.</b> finds tags which contain that argument as a substring. However, it prefers an exact match to a substring match. To find other tags that match the same substring, give <b>find-tag</b> a numeric argument, as in <b>C-u M-.</b> or <b>M-0 M-.</b>; this does not read a tag name, but continues searching the tags table's text for another tag containing the same substring last used.<br><br>Like most commands that switch buffers, <b>find-tag</b> has a variant that displays the new buffer in another window, and one that makes a new frame for it. The former is <b>C-x 4 .</b> (<b>find-tag-other-window</b>), and the latter is <b>C-x 5 .</b> (<b>find-tag-other-frame</b>).<br><br>To move back to previous tag definitions, use <b>C-u - M-.</b>; more generally, <b>M-.</b> with a negative numeric argument. Similarly, <b>C-x 4 .</b> with a negative argument finds the previous tag location in another window.<br><br>Like going back to places you've found tags recently, you can go back to places from where you found them, using <b>M-*</b> (<b>pop-tag-mark</b>). Thus you can find and examine the definition of something with <b>M-.</b> and then return to where you were with <b>M-*</b>.<br><br>Both <b>C-u - M-.</b> and <b>M-*</b> allow you to retrace your steps to a depth determined by the variable <b>find-tag-marker-ring-length</b>.<br><br>The command <b>C-M-.</b> (<b>find-tag-regexp</b>) visits the tags that match a specified regular expression. It is only like <b>M-.</b> except that it does regexp matching instead of substring matching.</p>
<h2 id="Tags-Search">Searching and replacing with tabs tables</h2>
<p class="tab">The commands in this section visit and search all the files listed in the selected tags table, one by one. For these commands, the tags table serves only to specify a sequence of files to search. These commands scan the list of tags tables starting with the first tags table (if any) that describes the current file, proceed from there to the end of the list, and then scan from the beginning of the list until they have covered all the tables in the list.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x tags-search &lt;RET&gt;</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Search for <i>regexp</i> through the files in the selected tags table.</td>
</tr>
<tr class="tcw">
<td><b>M-x tags-query-replace &lt;RET&gt;</b> <i>regexp</i> <b>&lt;RET&gt;</b> <i>replacement</i> <b>&lt;RET&gt;</b></td>
<td>Perform a <b>query-replace-regexp</b> on each file in the selected tags table.</td>
</tr>
<tr class="tcw">
<td><b>M-,</b></td>
<td>Restart one of the commands above, from the current location of point (<b>tags-loop-continue</b>).</td>
</tr>
</table>
<p class="tab"><b>M-x tags-search</b> reads a regexp using the minibuffer, then searches for matches in all the files in the selected tags table, one file at a time. It displays the name of the file being searched so you can follow its progress. As soon as it finds an occurrence, <b>tags-search</b> returns.<br><br>Having found one match, you probably want to find all the rest. Type <b>M-,</b> (<b>tags-loop-continue</b>) to resume the <b>tags-search</b>, finding one more match. This searches the rest of the current buffer, followed by the remaining files of the tags table.<br><br><b>M-x tags-query-replace</b> performs a single <b>query-replace-regexp</b> through all the files in the tags table. It reads a regexp to search for and a string to replace with, only like ordinary <b>M-x query-replace-regexp</b>. It searches much like <b>M-x tags-search</b>, but repeatedly, processing matches according to your input. See <a href="#Query-Replace">Query Replace</a>, for more information on query replace.<br><br>You can control the case-sensitivity of tags search commands by customizing the value of the variable <b>tags-case-fold-search</b>. The default is to use the same setting as the value of <b>case-fold-search</b> (see <a href="#Search-Case">Search Case</a>).<br><br>It is possible to get through all the files in the tags table with a single invocation of <b>M-x tags-query-replace</b>. But often it is useful to exit temporarily, which you can do with any input event with no special query replace meaning. You can resume the query replace subsequently by typing <b>M-,</b>; this command resumes the last tags search or replace command that you did. For instance, to skip the rest of the current file, you can type <b>M-&gt; M-,</b>.<br><br>The commands in this section carry out much broader searches than the <b>find-tag</b> family. The <b>find-tag</b> commands search only for definitions of tags that match your substring or regexp. The commands <b>tags-search</b> and <b>tags-query-replace</b> find every occurrence of the regexp, as ordinary search commands and replace commands do in the current buffer.<br><br>These commands create buffers only temporarily for the files that they have to search (those that are not already visited in Emacs buffers). Buffers where no match is found are quickly killed; the others continue to exist.<br><br>As an alternative to <b>tags-search</b>, you can run grep as a subprocess and have Emacs show you the matching lines one by one. See <a href="#Grep-Searching">Grep Searching</a>.</p>
<h2 id="List-Tags">Tags Table inquiries</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-M-i</b>, <b>M-&lt;TAB&gt;</b></td>
<td>Perform completion on the text around point, using the selected tags table if one is loaded (<b>completion-at-point</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x list-tags &lt;RET&gt; file &lt;RET&gt;</b></td>
<td>Display a list of the tags defined in the program file file.</td>
</tr>
<tr class="tcw">
<td><b>M-x tags-apropos &lt;RET&gt;</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Display a list of all tags matching <i>regexp</i>.</td>
</tr>
</table>
<p class="tab">In most programming language modes, you can type <b>C-M-i</b> or <b>M-&lt;TAB&gt;</b> (<b>completion-at-point</b>) to complete the symbol at point. If there is a selected tags table, this command can use it to generate completion candidates. See <a href="#Symbol-Completion">Symbol Completion</a>.<br><br><b>M-x list-tags</b> reads the name of one of the files covered by the selected tags table, and displays a list of tags defined in that file. Do not include a directory as part of the file name unless the file name recorded in the tags table includes a directory.<br><br><b>M-x tags-apropos</b> is like apropos for tags (see <a href="#Apropos">Apropos</a>). It displays a list of tags in the selected tags table whose entries match regexp. If the variable <b>tags-apropos-verbose</b> is non-nil, it displays the names of the tags files together with the tag names. You can customize the appearance of the output by setting the variable <b>tags-tag-face</b> to a face. You can display additional output by customizing the variable <b>tags-apropos-additional-actions</b>; see its documentation for details.<br><br><b>M-x next-file</b> visits files covered by the selected tags table. The first time it is called, it visits the first file covered by the table. Each subsequent call visits the next covered file, unless a prefix argument is supplied, where it returns to the first file.</p>
<h2 id="EDE">Emacs eevelopment environment</h2>
<p class="tab">EDE (Emacs Development Environment) is a package that simplifies the task of creating, building, and debugging large programs with Emacs. It provides some of the features of an IDE, or Integrated Development Environment, in Emacs.<br><br>This section provides a brief description of EDE usage.<br><br>EDE is implemented as a global minor mode (see <a href="#Minor-Modes">Minor Modes</a>). To enable it, type <b>M-x global-ede-mode</b> or click the '<b>Project Support (EDE)</b>' item in the '<b>Tools</b>' menu. You can also enable EDE each time you start Emacs, by adding the following line to your initialization file:</p>
<pre class="tab tcy">(global-ede-mode t)</pre>
<p class="tab">Activating EDE adds a menu named '<b>Development</b>' to the menu bar. Many EDE commands, including the ones described below, can be invoked from this menu.<br><br>EDE organizes files into projects, which correspond to directory trees. The project root is the topmost directory of a project. To define a new project, visit a file in the desired project root and type <b>M-x ede-new</b>. This command prompts for a project type, which refers to the underlying method that EDE uses to manage the project. The most common project types are '<b>Make</b>', which uses Makefiles, and '<b>Automake</b>', which uses GNU Automake. In both cases, EDE also creates a file named <b>Project.ede</b>, which stores information about the project.<br><br>A project may contain one or more targets. A target is an object file, executable program, or some other type of file, which is "built" from one or more of the files in the project.<br><br>To add a new target to a project, type <b>C-c . t</b> (<b>M-x ede-new-target</b>). This command also asks if you want to "add" the current file to that target, which indicates the target is to be built from that file. After you have defined a target, you can add more files to it by typing <b>C-c . a</b> (<b>ede-add-file</b>).<br><br>To build a target, type <b>C-c . c</b> (<b>ede-compile-target</b>). To build all the targets in the project, type <b>C-c . C</b> (<b>ede-compile-project</b>). EDE uses the file types to guess how the target should be built.</p>
<h2 id="Emerge">Merging files with Emerge</h2>
<p class="tab">It's not unusual for programmers to get their signals crossed and modify the same program in two different directions. To recover from this confusion, you need to merge the two versions. Emerge makes this easier. For other ways to compare files, see <a href="#Comparing-Files">Comparing Files</a>.</p>
<ul>
<li><a href="#Overview-of-Emerge">Overview of Emerge</a>: How to start Emerge. Basic concepts.</li>
<li><a href="#Submodes-of-Emerge">Submodes of Emerge</a>: Fast mode vs. Edit mode. Skip Prefers mode and Auto Advance mode.</li>
<li><a href="#State-of-Difference">State of Difference</a>: You do the merge by specifying state A or B for each difference.</li>
<li><a href="#Merge-Commands">Merge Commands</a>: Commands for selecting a difference, changing states of differences, etc.</li>
<li><a href="#Exiting-Emerge">Exiting Emerge</a>: What to do when you've finished the merge.</li>
<li><a href="#Combining-in-Emerge">Combining in Emerge</a>: How to keep both alternatives for a difference.</li>
<li><a href="#Fine-Points-of-Emerge">Fine Points of Emerge</a>: Miscellaneous issues.</li>
</ul>
<h2 id="Overview-of-Emerge">Overview of Emerge</h2>
<p class="tab">To start Emerge, run one of these four commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x emerge-files</b></td>
<td>Merge two specified files.</td>
</tr>
<tr class="tcw">
<td><b>M-x emerge-files-with-ancestor</b></td>
<td>Merge two specified files, with reference to a common ancestor.</td>
</tr>
<tr class="tcw">
<td><b>M-x emerge-buffers</b></td>
<td>Merge two buffers.</td>
</tr>
<tr class="tcw">
<td><b>M-x emerge-buffers-with-ancestor</b></td>
<td>Merge two buffers with reference to a common ancestor in a third buffer.</td>
</tr>
</table>
<p class="tab">The Emerge commands compare two files or buffers, and display the comparison in three buffers: one for each input text (the A buffer and the B buffer), and one (the merge buffer) where merging takes place. The merge buffer shows the full merged text, not only the differences. Wherever the two input texts differ, you can choose which one of them to include in the merge buffer.<br><br>The Emerge commands that take input from existing buffers use only the accessible portions of those buffers, if they are narrowed. See <a href="#Narrowing">Narrowing</a>.<br><br>If a common ancestor version is available, from which the two texts to be merged were both derived, Emerge can use it to guess which alternative is right. Wherever one current version agrees with the ancestor, Emerge presumes that the other current version is a deliberate change which should be kept in the merged version. Use the '<b>with-ancestor</b>' commands if you want to specify a common ancestor text. These commands read three file or buffer names&mdash;variant A, variant B, and the common ancestor.<br><br>After the comparison is done and the buffers are prepared, the interactive merging starts. You control the merging by typing special merge commands in the merge buffer (see <a href="#Merge-Commands">Merge Commands</a>). For each run of differences between the input texts, you can choose which one of them to keep, or edit them both together.<br><br>The merge buffer uses a special major mode, Emerge mode, with commands for making these choices. But you can also edit the buffer with ordinary Emacs commands.<br><br>At any given time, the attention of Emerge is focused on one particular difference, called the selected difference. This difference is marked off in the three buffers like this:</p>
<pre class="tab">vvvvvvvvvvvvvvvvvvvv
text that differs
^^^^^^^^^^^^^^^^^^^^
</pre>
<p class="tab">Emerge numbers all the differences sequentially and the mode line always shows the number of the selected difference.<br><br>Normally, the merge buffer starts out with the A version of the text. But when the A version of a difference agrees with the common ancestor, then the B version is initially preferred for that difference.<br><br>Emerge leaves the merged text in the merge buffer when you exit. At that point, you can save it in a file with <b>C-x C-w</b>. If you give a numeric argument to <b>emerge-files</b> or <b>emerge-files-with-ancestor</b>, it reads the name of the output file using the minibuffer. (This is the last file name those commands read.) Then exiting from Emerge saves the merged text in the output file.<br><br>Normally, Emerge commands save the output buffer in its file when you exit. If you abort Emerge with <b>C-]</b>, the Emerge command does not save the output buffer, but you can save it yourself if you want.</p>
<h2 id="Submodes-of-Emerge">Submodes of Emerge</h2>
<p class="tab">You can choose between two modes for giving merge commands: Fast mode and Edit mode. In Fast mode, basic merge commands are single characters, but ordinary Emacs commands are disabled. This is convenient if you use only merge commands. In Edit mode, all merge commands start with the prefix key <b>C-c C-c</b>, and the normal Emacs commands are also available. This allows editing the merge buffer, but slows down Emerge operations.<br><br>Use <b>e</b> to switch to Edit mode, and <b>C-c C-c f</b> to switch to Fast mode. The mode line indicates Edit and Fast modes with '<b>E</b>' and '<b>F</b>'.<br><br>Emerge has two additional submodes that affect how particular merge commands work: Auto Advance mode and Skip Prefers mode.<br><br>If Auto Advance mode is in effect, the a and b commands advance to the next difference. This lets you go through the merge faster as long as you choose one of the alternatives from the input. The mode line indicates Auto Advance mode with '<b>A</b>'.<br><br>If Skip Prefers mode is in effect, the n and p commands skip over differences in states "prefer-A" and "prefer-B" (see <a href="#State-of-Difference">State of Difference</a>). Thus you see only differences for which neither version is presumed "correct". The mode line indicates Skip Prefers mode with '<b>S</b>'. This mode is only relevant when there is an ancestor.<br><br>Use the command <b>s a</b> (<b>emerge-auto-advance</b>) to set or clear Auto Advance mode. Use <b>s s</b> (<b>emerge-skip-prefers</b>) to set or clear Skip Prefers mode. These commands turn on the mode with a positive argument, turn it off with a negative or zero argument, and toggle the mode with no argument.</p>
<h2 id="State-of-Difference">State of a difference</h2>
<p class="tab">In the merge buffer, a difference is marked with lines of '<b>v</b>' and '<b>^</b>' characters. Each difference has one of these seven states:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>A</b></td>
<td>The difference is showing the A version. The a command always produces this state; the mode line indicates it with '<b>A</b>'.</td>
</tr>
<tr class="tcw">
<td><b>B</b></td>
<td>The difference is showing the B version. The b command always produces this state; the mode line indicates it with '<b>B</b>'.</td>
</tr>
<tr class="tcw">
<td><b>default-A</b>, <b>default-B</b></td>
<td>The difference is showing the A or the B state by default, because you haven't made a choice. All differences start in the default-A state (and thus the merge buffer is a copy of the A buffer), except those for which one alternative is "preferred" (see below).<br><br>When you select a difference, its state changes from default-A or default-B to plain A or B. Thus, the selected difference never has state default-A or default-B, and these states are never displayed in the mode line.<br><br>The command d a chooses default-A as the default state, and d b chooses default-B. This chosen default applies to all differences that you have never selected and for which no alternative is preferred. If you are moving through the merge sequentially, the differences you haven't selected are those following the selected one. Thus, while moving sequentially, you can effectively make the A version the default for some sections of the merge buffer and the B version the default for others using d a and d b between sections.</td>
</tr>
<tr class="tcw">
<td><b>prefer-A</b>, <b>prefer-B</b></td>
<td>The difference is showing the A or B state because it is preferred. This means that you haven't made an explicit choice, but one alternative seems likely to be right because the other alternative agrees with the common ancestor. Thus, where the A buffer agrees with the common ancestor, the B version is preferred, because chances are it is the one that was changed.<br><br>These two states are displayed in the mode line as '<b>A*</b>' and '<b>B*</b>'.</td>
</tr>
<tr class="tcw">
<td><b>combined</b></td>
<td>The difference is showing a combination of the A and B states, as a result of the <b>x c</b> or <b>x C</b> commands.<br><br>Once a difference is in this state, the <b>a</b> and <b>b</b> commands don't do anything to it unless you give them a numeric argument. The mode line displays this state as '<b>comb</b>'.</td>
</tr>
</table>
<h2 id="Merge-Commands">Merge commands</h2>
<p class="tab">Here are the Merge commands for Fast mode; in Edit mode, precede them with <b>C-c C-c</b>:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>p</b></td>
<td>Select the previous difference.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Select the next difference.</td>
</tr>
<tr class="tcw">
<td><b>a</b></td>
<td>Choose the A version of this difference.</td>
</tr>
<tr class="tcw">
<td><b>b</b></td>
<td>Choose the B version of this difference.</td>
</tr>
<tr class="tcw">
<td><b>C-u</b> <i>n</i> <b>j</b></td>
<td>Select difference number <i>n</i>.</td>
</tr>
<tr class="tcw">
<td><b>.</b></td>
<td>Select the difference containing point.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Quit&mdash;finish the merge.</td>
</tr>
<tr class="tcw">
<td><b>C-]</b></td>
<td>Abort&mdash;exit merging and do not save the output.</td>
</tr>
<tr class="tcw">
<td><b>f</b></td>
<td>Go into Fast mode. (In Edit mode, this is actually <b>C-c C-c f</b>.)</td>
</tr>
<tr class="tcw">
<td><b>e</b></td>
<td>Go into Edit mode.</td>
</tr>
<tr class="tcw">
<td><b>l</b></td>
<td>Recenter (like <b>C-l</b>) all three windows. With an argument, reestablish the default three-window display.</td>
</tr>
<tr class="tcw">
<td><b>-</b></td>
<td>Specify part of a prefix numeric argument.</td>
</tr>
<tr class="tcw">
<td><b>digit</b></td>
<td>Specify part of a prefix numeric argument.</td>
</tr>
<tr class="tcw">
<td><b>d a</b></td>
<td>Choose the A version as the default from here down in the merge buffer.</td>
</tr>
<tr class="tcw">
<td><b>d b</b></td>
<td>Choose the B version as the default from here down in the merge buffer.</td>
</tr>
<tr class="tcw">
<td><b>c a</b></td>
<td>Copy the A version of this difference into the kill ring.</td>
</tr>
<tr class="tcw">
<td><b>c b</b></td>
<td>Copy the B version of this difference into the kill ring.</td>
</tr>
<tr class="tcw">
<td><b>i a</b></td>
<td>Insert the A version of this difference at point.</td>
</tr>
<tr class="tcw">
<td><b>i b</b></td>
<td>Insert the B version of this difference at point.</td>
</tr>
<tr class="tcw">
<td><b>m</b></td>
<td>Put point and mark around the difference.</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>Scroll all three windows down (like <b>M-v</b>).</td>
</tr>
<tr class="tcw">
<td><b>v</b></td>
<td>Scroll all three windows up (like <b>C-v</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;</b></td>
<td>Scroll all three windows left (like <b>C-x &lt;</b>).</td>
</tr>
<tr class="tcw">
<td><b>&gt;</b></td>
<td>Scroll all three windows right (like <b>C-x &gt;</b>).</td>
</tr>
<tr class="tcw">
<td><b>|</b></td>
<td>Reset horizontal scroll on all three windows.</td>
</tr>
<tr class="tcw">
<td><b>x 1</b></td>
<td>Shrink the merge window to one line. (Use <b>C-u l</b> to restore it to full size.)</td>
</tr>
<tr class="tcw">
<td><b>x c</b></td>
<td>Combine the two versions of this difference (see <a href="#Combining-in-Emerge">Combining in Emerge</a>).</td>
</tr>
<tr class="tcw">
<td><b>x f</b></td>
<td>Show the names of the files/buffers Emerge is operating on, in a Help window. (Use <b>C-u l</b> to restore windows.)</td>
</tr>
<tr class="tcw">
<td><b>x j</b></td>
<td>Join this difference with the following one. (<b>C-u x j</b> joins this difference with the previous one.)</td>
</tr>
<tr class="tcw">
<td><b>x s</b></td>
<td>Split this difference into two differences. Before you use this command, position point in each of the three buffers at the place where you want to split the difference.</td>
</tr>
<tr class="tcw">
<td><b>x t</b></td>
<td>Trim identical lines off the top and bottom of the difference. Such lines occur when the A and B versions are identical but differ from the ancestor version.</td>
</tr>
</table>
<h2 id="Exiting-Emerge">Exiting Emerge</h2>
<p class="tab">The <b>q</b> command (<b>emerge-quit</b>) finishes the merge, storing the results into the output file if you specified one. It restores the A and B buffers to their proper contents, or kills them if they were created by Emerge and you haven't changed them. It also disables the Emerge commands in the merge buffer, as executing them later could damage the contents of the various buffers.<br><br><b>C-]</b> aborts the merge. This means exiting without writing the output file. If you didn't specify an output file, then there is no real difference between aborting and finishing the merge.<br><br>If the Emerge command was called from another Lisp program, then its return value is <b>t</b> for successful completion, or <b>nil</b> if you abort.</p>
<h2 id="Combining-in-Emerge">Combining the two versions</h2>
<p class="tab">Sometimes you want to keep both alternatives for a particular difference. To do this, use <b>x c</b>, which edits the merge buffer like this:</p>
<pre class="tab tcy">#ifdef NEW
version from B buffer
#else /* not NEW */
version from A buffer
#endif /* not NEW */
</pre>
<p class="tab">While this example shows C preprocessor conditionals delimiting the two alternative versions, you can specify the strings to use by setting the variable <b>emerge-combine-versions-template</b> to a string of your choice. In the string, '<b>%a</b>' says where to put version A, and '<b>%b</b>' says where to put version B. The default setting, which produces the results shown above, looks like this:</p>
<pre class="tab tcy">"#ifdef NEW\n%b#else /* not NEW */\n%a#endif /* not NEW */\n"</pre>
<h2 id="Fine-Points-of-Emerge">Fine points of Emerge</h2>
<p class="tab">During the merge, you mustn't try to edit the A and B buffers yourself. Emerge modifies them temporarily, but ultimately puts them back the way they were.<br><br>You can have any number of merges going at once&mdash;only don't use any one buffer as input to more than one merge at once, as the temporary changes made in these buffers would get in each other's way.<br><br>Starting Emerge can take a long time because it needs to compare the files fully. Emacs can't do anything else until diff finishes. Perhaps in the future someone changes Emerge to do the comparison in the background when the input files are large&mdash;then you could keep on doing other things with Emacs until Emerge is ready to accept commands.<br><br>After setting up the merge, Emerge runs the hook <b>emerge-startup-hook</b>. See <a href="#Hooks">Hooks</a>.</p>
<h2 id="Abbrevs">Abbrevs</h2>
<p class="tab">A defined abbrev is a word which expands, if you insert it, into some different text. Abbrevs are defined by the user to expand in specific ways. For example, you might define '<b>foo</b>' as an abbrev expanding to '<b>find outer otter</b>'. Then you could insert '<b>find outer otter</b> ' into the buffer by typing <b>f o o &lt;SPC&gt;</b>.<br><br>A second kind of abbreviation facility is called dynamic abbrev expansion. You use dynamic abbrev expansion with an explicit command to expand the letters in the buffer before point by looking for other words in the buffer that start with those letters. See <a href="#Dynamic-Abbrevs">Dynamic Abbrevs</a>.</p>
<ul>
<li><a href="#Abbrev-Concepts">Abbrev Concepts</a>: Fundamentals of defined abbrevs.</li>
<li><a href="#Defining-Abbrevs">Defining Abbrevs</a>: Defining an abbrev, so it expands when typed.</li>
<li><a href="#Expanding-Abbrevs">Expanding Abbrevs</a>: Controlling expansion: prefixes, canceling expansion.</li>
<li><a href="#Editing-Abbrevs">Editing Abbrevs</a>: Viewing or editing the entire list of defined abbrevs.</li>
<li><a href="#Saving-Abbrevs">Saving Abbrevs</a>: Saving the entire list of abbrevs for another session.</li>
<li><a href="#Dynamic-Abbrevs">Dynamic Abbrevs</a>: Abbreviations for words already in the buffer.</li>
<li><a href="#Dabbrev-Customization">Dabbrev Customization</a>: What is a word, for dynamic abbrevs. Case handling.</li>
</ul>
<h2 id="Abbrev-Concepts">Abbrev concepts</h2>
<p class="tab">An abbrev is a word that is defined to expand into a specified expansion. When you insert a word-separator character following the abbrev, that expands the abbrev&mdash;replacing the abbrev with its expansion. For example, if '<b>foo</b>' is defined as an abbrev expanding to '<b>find outer otter</b>', then typing <b>f o o .</b> will insert '<b>find outer otter.</b>'.<br><br>Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is enabled. Disabling Abbrev mode does not cause abbrev definitions to be forgotten, but they do not expand until Abbrev mode is enabled again. The command <b>M-x abbrev-mode</b> toggles Abbrev mode; with a numeric argument, it turns Abbrev mode on if the argument is positive, off otherwise. See <a href="#Minor-Modes">Minor Modes</a>.<br><br>Abbrevs can have mode-specific definitions, active only in one major mode. Abbrevs can also have global definitions that are active in all major modes. The same abbrev can have a global definition and various mode-specific definitions for different major modes. A mode-specific definition for the current major mode overrides a global definition.<br><br>You can define abbrevs interactively during the editing session, irrespective of whether Abbrev mode is enabled. You can also save lists of abbrev definitions in files, which you can the reload for use in later sessions.</p>
<h2 id="Defining-Abbrevs">Defining abbrevs</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-x a g</b></td>
<td>Define an abbrev, using one or more words before point as its expansion (<b>add-global-abbrev</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x a l</b></td>
<td>Similar, but define an abbrev specific to the current major mode (<b>add-mode-abbrev</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x a i g</b></td>
<td>Define a word in the buffer as an abbrev (<b>inverse-add-global-abbrev</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x a i l</b></td>
<td>Define a word in the buffer as a mode-specific abbrev (<b>inverse-add-mode-abbrev</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x define-global-abbrev &lt;RET&gt;</b> <i>abbrev</i> <b>&lt;RET&gt;</b> <i>exp</i> <b>&lt;RET&gt;</b></td>
<td>Define <i>abbrev</i> as an abbrev expanding into <i>exp</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x define-mode-abbrev &lt;RET&gt;</b> <i>abbrev</i> <b>&lt;RET&gt;</b> <i>exp</i> <b>&lt;RET&gt;</b></td>
<td>Define <i>abbrev</i> as a mode-specific abbrev expanding into <i>exp</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x kill-all-abbrevs</b></td>
<td>Discard all abbrev definitions, leaving a blank slate.</td>
</tr>
</table>
<p class="tab">The usual way to define an abbrev is to enter the text you want the abbrev to expand to, position point after it, and type <b>C-x a g</b> (<b>add-global-abbrev</b>). This reads the abbrev itself using the minibuffer, and then defines it as an abbrev for one or more words before point. Use a numeric argument to say how many words before point should be taken as the expansion. For example, to define the abbrev '<b>foo</b>' as mentioned above, insert the text '<b>find outer otter</b>' and then type <b>C-u 3 C-x a g f o o &lt;RET&gt;</b>.<br><br>An argument of zero to <b>C-x a g</b> means to use the contents of the region as the expansion of the abbrev being defined.<br><br>The command <b>C-x a l</b> (<b>add-mode-abbrev</b>) is similar, but defines a mode-specific abbrev for the current major mode. The arguments work the same as for <b>C-x a g</b>.<br><br><b>C-x a i g</b> (<b>inverse-add-global-abbrev</b>) and <b>C-x a i l</b> (<b>inverse-add-mode-abbrev</b>) perform the opposite task: if the abbrev text is already in the buffer, you use these commands to define an abbrev by specifying the expansion in the minibuffer. These commands expand the abbrev text used for the definition.<br><br>You can define an abbrev without inserting either the abbrev or its expansion in the buffer using the command <b>define-global-abbrev</b>. It reads two arguments&mdash;the abbrev, and its expansion. The command <b>define-mode-abbrev</b> does likewise for a mode-specific abbrev.<br><br>To change the definition of an abbrev, only make a new definition. When an abbrev has a prior definition, the abbrev definition commands ask for confirmation before replacing it.<br><br>To remove an abbrev definition, give a negative argument to the abbrev definition command: <b>C-u - C-x a g</b> or <b>C-u - C-x a l</b>. The former removes a global definition, while the latter removes a mode-specific definition. M-x kill-all-abbrevs removes all abbrev definitions, both global and local.</p>
<h2 id="Expanding-Abbrevs">Controlling Abbrev expansion</h2>
<p class="tab">When Abbrev mode is enabled, abbrev expands whenever it is present in the buffer only before point and you type a self-inserting whitespace or punctuation character (<b>&lt;SPC&gt;</b>, comma, etc.). More precisely, any character that is not a word constituent expands an abbrev, and any word-constituent character can be part of an abbrev. The most common way to use an abbrev is to insert it and then insert a punctuation or whitespace character to expand it.<br><br>Abbrev expansion preserves case: '<b>foo</b>' expands to '<b>find outer otter</b>', and '<b>Foo</b>' to '<b>Find outer otter</b>'. '<b>FOO</b>' expands to '<b>Find Outer Otter</b>' by default, but if you change the variable abbrev-all-caps to a non-nil value, it expands to '<b>FIND OUTER OTTER</b>'.<br><br>These commands are used to control abbrev expansion:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>M-'</b></td>
<td>Separate a prefix from a following abbrev to be expanded (<b>abbrev-prefix-mark</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x a e</b></td>
<td>Expand the abbrev before point (<b>expand-abbrev</b>). This is effective even when Abbrev mode is not enabled.</td>
</tr>
<tr class="tcw">
<td><b>M-x expand-region-abbrevs</b></td>
<td>Expand some or all abbrevs found in the region.</td>
</tr>
</table>
<p class="tab">You may want to expand an abbrev and attach a prefix to the expansion; for example, if '<b>cnst</b>' expands into '<b>construction</b>', you might want to use it to enter '<b>reconstruction</b>'. It does not work to type recnst, because that is not necessarily a defined abbrev. What you can do is use the command <b>M-'</b> (<b>abbrev-prefix-mark</b>) between the prefix '<b>re</b>' and the abbrev '<b>cnst</b>'. First, insert '<b>re</b>'. Then type <b>M-'</b>; this inserts a hyphen in the buffer to indicate that it has done its work. Then insert the abbrev '<b>cnst</b>'; the buffer now contains '<b>re-cnst</b>'. Now insert a non-word character to expand the abbrev '<b>cnst</b>' into '<b>construction</b>'. This expansion step also deletes the hyphen that indicated <b>M-'</b> had been used. The result is the desired '<b>reconstruction</b>'.<br><br>If you actually want the text of the abbrev in the buffer, rather than its expansion, you can accomplish this by inserting the following punctuation with <b>C-q</b>. Thus, <b>foo C-q ,</b> leaves '<b>foo,</b>' in the buffer, not expanding it.<br><br>If you expand an abbrev by mistake, you can undo the expansion by typing <b>C-/</b> (<b>undo</b>). See <a href="#Undo">Undo</a>. This undoes the insertion of the abbrev expansion and brings back the abbrev text. If the result you want is the terminating non-word character plus the unexpanded abbrev, you must reinsert the terminating character, quoting it with <b>C-q</b>. You can also use the command <b>M-x unexpand-abbrev</b> to cancel the last expansion without deleting the terminating character.<br><br><b>M-x expand-region-abbrevs</b> searches through the region for defined abbrevs, and for each one found offers to replace it with its expansion. This command is useful if you have typed in text using abbrevs but forgot to turn on Abbrev mode first. It may also be useful together with a special set of abbrev definitions for making several global replacements at once. This command is effective even if Abbrev mode is not enabled.<br><br>Expanding any abbrev runs <b>abbrev-expand-functions</b>, a special hook. Functions in this special hook can make arbitrary changes to the abbrev expansion.</p>
<h2 id="Editing-Abbrevs">Examining and editing abbrevs</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>M-x list-abbrevs</b></td>
<td>Display a list of all abbrev definitions. With a numeric argument, list only local abbrevs.</td>
</tr>
<tr class="tcw">
<td><b>M-x edit-abbrevs</b></td>
<td>Edit a list of abbrevs; you can add, alter or remove definitions.</td>
</tr>
</table>
<p class="tab">The output from <b>M-x list-abbrevs</b> looks like this:</p>
<pre class="tab tcy">various other tables...
(lisp-mode-abbrev-table)
"dk"          0    "define-key"
(global-abbrev-table)
"dfn"         0    "definition"
</pre>
<p class="tab">(Some blank lines of no semantic significance, and some other abbrev tables, are omitted.)<br><br>A line containing a name in parentheses is the header for abbrevs in a particular abbrev table; <b>global-abbrev-table</b> contains all the global abbrevs, and the other abbrev tables that are named after major modes contain the mode-specific abbrevs.<br><br>Within each abbrev table, each nonblank line defines one abbrev. The word at the beginning of the line is the abbrev. The number that follows is the number of times the abbrev is expanded. Emacs keeps track of this to help you see which abbrevs you actually use, so that you can eliminate those that you don't use often. The string at the end of the line is the expansion.<br><br>Some abbrevs are marked with '<b>(sys)</b>'. These "system" abbrevs (see <a href="#Abbrevs">Abbrevs</a>) are pre-defined by various modes, and are not saved to your abbrev file. To disable a "system" abbrev, define an abbrev of the same name that expands to itself, and save it to your abbrev file.<br><br><b>M-x edit-abbrevs</b> allows you to add, change or kill abbrev definitions by editing a list of them in an Emacs buffer. The list has the same format described above. The buffer of abbrevs is called *Abbrevs*, and is in Edit-Abbrevs mode. Type <b>C-c C-c</b> in this buffer to install the abbrev definitions as specified in the buffer&mdash;and delete any abbrev definitions not listed.<br><br>The command <b>edit-abbrevs</b> is actually the same as list-abbrevs except that it selects the buffer *Abbrevs* whereas list-abbrevs merely displays it in another window.</p>
<h2 id="Saving-Abbrevs">Saving abbrevs</h2>
<p class="tab">These commands allow you to keep abbrev definitions between editing sessions.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x write-abbrev-file &lt;RET&gt; file &lt;RET&gt;</b></td>
<td>Write a file describing all defined abbrevs.</td>
</tr>
<tr class="tcw">
<td><b>M-x read-abbrev-file &lt;RET&gt; file &lt;RET&gt;</b></td>
<td>Read the file and define abbrevs as specified therein.</td>
</tr>
<tr class="tcw">
<td><b>M-x define-abbrevs</b></td>
<td>Define abbrevs from definitions in current buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x insert-abbrevs</b></td>
<td>Insert all abbrevs and their expansions to current buffer.</td>
</tr>
</table>
<p class="tab"><b>M-x write-abbrev-file</b> reads a file name using the minibuffer and then writes a description of all current abbrev definitions into that file. This is used to save abbrev definitions for use in a later session. The text stored in the file is a series of Lisp expressions that, when executed, define the same abbrevs that you currently have.<br><br><b>M-x read-abbrev-file</b> reads a file name using the minibuffer and then reads the file, defining abbrevs according to the contents of the file. The function <b>quietly-read-abbrev-file</b> is similar except that it does not display a message in the echo area; you cannot invoke it interactively, and it is used primarily in your init file (see <a href="#Init-File">Init File</a>). If either of these functions is called with <b>nil</b> as the argument, it uses the file given by the variable <b>abbrev-file-name</b>, which is <b>~/.emacs.d/abbrev_defs</b> by default. This is your standard abbrev definition file, and Emacs loads abbrevs from it automatically when it starts up. (As an exception, Emacs does not load the abbrev file when it is started in batch mode. See <a href="#Initial-Options">Options</a>, for a description of batch mode.)<br><br>Emacs offers to save abbrevs automatically if you have changed any of them, whenever it offers to save all files (for <b>C-x s</b> or <b>C-x C-c</b>). It saves them in the file specified by <b>abbrev-file-name</b>. This feature can be inhibited by setting the variable <b>save-abbrevs</b> to <b>nil</b>.<br><br>The commands <b>M-x insert-abbrevs</b> and <b>M-x define-abbrevs</b> are similar to the previous commands but work on text in an Emacs buffer. <b>M-x insert-abbrevs</b> inserts text into the current buffer after point, describing all current abbrev definitions; <b>M-x define-abbrevs</b> parses the entire current buffer and defines abbrevs accordingly.</p>
<h2 id="Dynamic-Abbrevs">Dynamic abbrev expansion</h2>
<p class="tab">The abbrev facility described above operates automatically as you insert text, but all abbrevs must be defined explicitly. By contrast, dynamic abbrevs allow the meanings of abbreviations to be determined automatically from the contents of the buffer, but dynamic abbrev expansion happens only when you request it explicitly.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>M-/</b></td>
<td>Expand the word in the buffer before point as a dynamic abbrev, by searching in the buffer for words starting with that abbreviation (<b>dabbrev-expand</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-/</b></td>
<td>Complete the word before point as a dynamic abbrev (<b>dabbrev-completion</b>).</td>
</tr>
</table>
<p class="tab">For example, if the buffer contains '<b>does this follow</b> ' and you type <b>f o M-/</b>, the effect is to insert '<b>follow</b>' because that is the last word in the buffer that starts with '<b>fo</b>'. A numeric argument to <b>M-/</b> says to take the second, third, etc. distinct expansion found looking backward from point. Repeating <b>M-/</b> searches for an alternative expansion by looking farther back. After scanning all the text before point, it searches the text after point. The variable <b>dabbrev-limit</b>, if non-nil, specifies how far away in the buffer to search for an expansion.<br><br>After scanning the current buffer, <b>M-/</b> normally searches other buffers, unless you have set <b>dabbrev-check-all-buffers</b> to <b>nil</b>.<br><br>For finer control over which buffers to scan, customize the variable <b>dabbrev-ignored-buffer-regexps</b>. Its value is a list of regular expressions. If a buffer's name matches any of these regular expressions, dynamic abbrev expansion skips that buffer.<br><br>A negative argument to <b>M-/</b>, as in <b>C-u - M-/</b>, says to search first for expansions after point, then other buffers, and consider expansions before point only as a last resort. If you repeat the <b>M-/</b> to look for another expansion, do not specify an argument. Repeating <b>M-/</b> cycles through all the expansions after point and then the expansions before point.<br><br>After you have expanded a dynamic abbrev, you can copy additional words that follow the expansion in its original context. Type <b>&lt;SPC&gt; M-/</b> for each additional word you want to copy. The spacing and punctuation between words is copied along with the words.<br><br>The command <b>C-M-/</b> (<b>dabbrev-completion</b>) performs completion of a dynamic abbrev. Instead of trying the possible expansions one by one, it finds all of them, then inserts the text that they have in common. If they have nothing in common, <b>C-M-/</b> displays a list of completions, from which you can select a choice in the usual manner. See <a href="#Completion">Completion</a>.<br><br>Dynamic abbrev expansion is completely independent of Abbrev mode; the expansion of a word with <b>M-/</b> is completely independent of whether it has a definition as an ordinary abbrev.</p>
<h2 id="Dabbrev-Customization">Customizing dynamic abbreviation</h2>
<p class="tab">Normally, dynamic abbrev expansion ignores case when searching for expansions. That is, the expansion need not agree in case with the word you are expanding.<br><br>This feature is controlled by the variable <b>dabbrev-case-fold-search</b>. If it's <b>t</b>, case is ignored in this search; if it's <b>nil</b>, the word and the expansion must match in case. If the value is <b>case-fold-search</b> (the default), then the variable <b>case-fold-search</b> controls whether to ignore case while searching for expansions (see <a href="#Search-Case">Search Case</a>).<br><br>Normally, dynamic abbrev expansion preserves the case pattern of the dynamic abbrev you are expanding, by converting the expansion to that case pattern.<br><br>The variable <b>dabbrev-case-replace</b> controls whether to preserve the case pattern of the dynamic abbrev. If it's <b>t</b>, the dynamic abbrev's case pattern is preserved in most cases; if it's <b>nil</b>, the expansion is always copied verbatim. If the value is <b>case-replace</b> (the default), then the variable <b>case-replace</b> controls whether to copy the expansion verbatim (see <a href="#Replacement-and-Case">Replacement and Case</a>).<br><br>However, if the expansion contains a complex mixed case pattern, and the dynamic abbrev matches this pattern as far as it goes, then the expansion is always copied verbatim, regardless of those variables. Thus, for example, if the buffer contains variable <b>WithSillyCasePattern</b>, and you type <b>v a M-/</b>, it copies the expansion verbatim including its case pattern.<br><br>The variable <b>dabbrev-abbrev-char-regexp</b>, if non-nil, controls which characters are considered part of a word, for dynamic expansion purposes. The regular expression must match only one character, never two or more. The same regular expression also determines which characters are part of an expansion. The value <b>nil</b> has a special meaning: dynamic abbrevs are made of word characters, but expansions are made of word and symbol characters.<br><br>In shell scripts and makefiles, a variable name is sometimes prefixed with '<b>$</b>' and sometimes not. Major modes for this kind of text can customize dynamic abbrev expansion to handle optional prefixes by setting the variable <b>dabbrev-abbrev-skip-leading-regexp</b>. Its value should be a regular expression that matches the optional prefix that dynamic abbrev expression should ignore.</p>
<h2 id="Dired">Dired: the directory editor</h2>
<p class="tab">Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files.<br><br>The Dired buffer is "read-only", and inserting text in it is not allowed. Ordinary printing characters such as <b>d</b> and <b>x</b> are redefined for special Dired commands. Some Dired commands mark or flag the current file (that is, the file on the current line); other commands operate on the marked files or on the flagged files. You first mark certain files to operate on all of them with one command.<br><br>You can also view a list of files in a directory with <b>C-x C-d</b> (<b>list-directory</b>). Unlike Dired, this command does not allow you to operate on the listed files. See <a href="#Directories">Directories</a>.</p>
<ul>
<li><a href="#Dired-Enter">Enter</a>: How to invoke Dired.</li>
<li><a href="#Dired-Navigation">Navigation</a>: Special motion commands in the Dired buffer.</li>
<li><a href="#Dired-Deletion">Deletion</a>: Deleting files with Dired.</li>
<li><a href="#Flagging-Many-Files">Flagging Many Files</a>: Flagging files based on their names.</li>
<li><a href="#Dired-Visiting">Visit</a>: Other file operations through Dired.</li>
<li><a href="#Marks-vs-Flags">Marks vs Flags</a>: Flagging for deletion vs marking.</li>
<li><a href="#Operating-on-Files">Operating on Files</a>: How to copy, rename, print, compress, etc. either one file or several files.</li>
<li><a href="#Shell-Commands-in-Dired">Shell Commands in Dired</a>: Running a shell command on the marked files.</li>
<li><a href="#Transforming-File-Names">Transforming File Names</a>: Using patterns to rename multiple files.</li>
<li><a href="#Comparison-in-Dired">Comparison in Dired</a>: Running diff by way of Dired.</li>
<li><a href="#Subdirectories-in-Dired">Subdirectories in Dired</a>: Adding subdirectories to the Dired buffer.</li>
<li><a href="#Subdir-Switches">Subdir Switches</a>: Subdirectory switches in Dired.</li>
<li><a href="#Subdirectory-Motion">Subdirectory Motion</a>: Moving across subdirectories, and up and down.</li>
<li><a href="#Hiding-Subdirectories">Hiding Subdirectories</a>: Making subdirectories visible or invisible.</li>
<li><a href="#Dired-Updating">Updating</a>: Discarding lines for files of no interest.</li>
<li><a href="#Dired-and-Find">Find</a>: Using find to choose the files for Dired.</li>
<li><a href="#Wdired">Wdired</a>: Operating on files by editing the Dired buffer.</li>
<li><a href="#Image_002dDired">Image-Dired</a>: Viewing image thumbnails in Dired.</li>
<li><a href="#Misc-Dired-Features">Misc</a>: Other features.</li>
</ul>
<h2 id="Dired-Enter">Entering Dired</h2>
<p class="tab">To invoke Dired, type <b>C-x d</b> (<b>dired</b>). This reads a directory name using the minibuffer, and opens a Dired buffer listing the files in that directory. You can also supply a wildcard file name pattern as the minibuffer argument, where the Dired buffer lists all files matching that pattern. The usual history and completion commands can be used in the minibuffer; in particular, <b>M-n</b> puts the name of the visited file (if any) in the minibuffer (see <a href="#Minibuffer-History">Minibuffer History</a>).<br><br>You can also invoke Dired by giving <b>C-x C-f</b> (<b>find-file</b>) a directory name.<br><br>The variable <b>dired-listing-switches</b> specifies the options to give to <a href="/unix/uls.htm">ls</a> for listing the directory; this string must contain '<b>-l</b>'. If you use a prefix argument with the dired command, you can specify the ls switches with the minibuffer before you enter the directory specification. No matter how they are specified, the ls switches can include short options (that is, single characters) requiring no arguments, and long options (starting with '<b>--</b>') whose arguments are specified with '<b>=</b>'.<br><br>If your ls program supports the '<b>--dired</b>' option, Dired automatically passes it that option; this causes ls to emit special escape sequences for certain unusual file names, without which Dired is not able to parse those names. The first time you run Dired in an Emacs session, it checks whether ls supports the '<b>--dired</b>' option by calling it once with that option. If the exit code is 0, Dired subsequently uses the '<b>--dired</b>' option; otherwise it does not. You can inhibit this check by customizing the variable <b>dired-use-ls-dired</b>. The value unspecified (the default) means to perform the check; any other non-nil value means to use the '<b>--dired</b>' option; and nil means not to use the '<b>--dired</b>' option.<br><br>On Microsoft Windows and MS-DOS systems, Emacs emulates ls. See <a href="#ls-in-Lisp">ls in Lisp</a>, for options and peculiarities of this emulation.<br><br>To display the Dired buffer in another window, use <b>C-x 4 d</b> (<b>dired-other-window</b>). <b>C-x 5 d</b> (<b>dired-other-frame</b>) displays the Dired buffer in a separate frame.<br><br>Typing <b>q</b> (<b>quit-window</b>) buries the Dired buffer, and deletes its window if the window was created only for that buffer.</p>
<h2 id="Dired-Navigation">Navigation in the Dired buffer</h2>
<p class="tab">All the usual Emacs cursor motion commands are available in Dired buffers. The keys <b>C-n</b> and <b>C-p</b> are redefined to put the cursor at the beginning of the file name on the line, rather than at the beginning of the line.<br><br>For extra convenience, <b>&lt;SPC&gt;</b> and <b>n</b> in Dired are equivalent to <b>C-n</b>. <b>p</b> is equivalent to <b>C-p</b>. (Moving by lines is so common in Dired that it deserves to be easy to type.) <b>&lt;DEL&gt;</b> (move up and unflag) is also often useful for moving up (see <a href="#Dired-Deletion">Dired Deletion</a>).<br><br><b>j</b> (<b>dired-goto-file</b>) prompts for a file name using the minibuffer, and moves point to the line in the Dired buffer describing that file.<br><br><b>M-s f C-s</b> (<b>dired-isearch-filenames</b>) performs a forward incremental search in the Dired buffer, looking for matches only amongst the file names and ignoring the rest of the text in the buffer. <b>M-s f M-C-s</b> (<b>dired-isearch-filenames-regexp</b>) does the same, using a regular expression search. If you change the variable <b>dired-isearch-filenames</b> to <b>t</b>, then the usual search commands also limit themselves to the file names; for instance, <b>C-s</b> behaves like <b>M-s f C-s</b>. If the value is <b>dwim</b>, then search commands match the file names only when point was on a file name initially. See <a href="#Search">Search</a>, for information about incremental search.<br><br>Some additional navigation commands are available when the Dired buffer includes several directories. See <a href="#Subdirectory-Motion">Subdirectory Motion</a>.</p>
<h2 id="Dired-Deletion">Deleting files with Dired</h2>
<p class="tab">One of the most frequent uses of Dired is to first flag files for deletion, then delete the files that were flagged.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>d</b></td>
<td>Flag this file for deletion (<b>dired-flag-file-deletion</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Remove the deletion flag (<b>dired-unmark</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b></td>
<td>Move point to previous line and remove the deletion flag on that line (<b>dired-unmark-backward</b>).</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Delete files flagged for deletion (<b>dired-do-flagged-delete</b>).</td>
</tr>
</table>
<p class="tab">You can flag a file for deletion by moving to the line describing the file and typing <b>d</b> (<b>dired-flag-file-deletion</b>). The deletion flag is visible as a '<b>D</b>' at the beginning of the line. This command moves point to the next line, so that repeated d commands flag successive files. A numeric prefix argument serves as a repeat count; a negative count means to flag preceding files.<br><br>If the region is active, the <b>d</b> command flags all files in the region for deletion; in this case, the command does not move point, and ignores any prefix argument.<br><br>The reason for flagging files for deletion, rather than deleting files immediately, is to reduce the danger of deleting a file accidentally. Until you direct Dired to delete the flagged files, you can remove deletion flags using the commands <b>u</b> and <b>&lt;DEL&gt;</b>. <b>u</b> (<b>dired-unmark</b>) works only like <b>d</b>, but removes flags rather than making flags. <b>&lt;DEL&gt;</b> (<b>dired-unmark-backward</b>) moves upward, removing flags; it is like <b>u</b> with argument <b>&minus;1</b>. A numeric prefix argument to either command serves as a repeat count, with a negative count meaning to unflag in the opposite direction. If the region is active, these commands instead unflag all files in the region, without moving point.<br><br>To delete flagged files, type <b>x</b> (<b>dired-do-flagged-delete</b>). This command displays a list of all the file names flagged for deletion, and requests confirmation with <b>yes</b>. If you confirm, Dired deletes the flagged files, then deletes their lines from the text of the Dired buffer. The Dired buffer, with somewhat fewer lines, remains selected.<br><br>If you answer <b>no</b> or quit with <b>C-g</b> when asked to confirm, you return immediately to Dired, with the deletion flags still present in the buffer, and no files actually deleted.<br><br>You can delete empty directories only like other files, but normally Dired cannot delete directories that are nonempty. If the variable <b>dired-recursive-deletes</b> is non-nil, then Dired can delete nonempty directories including all their contents. That can be somewhat risky.<br><br>If you change the variable <b>delete-by-moving-to-trash</b> to <b>t</b>, the above deletion commands move the affected files or directories into the operating system's Trash, instead of deleting them outright. See <a href="#Misc-File-Ops">Misc File Ops</a>.</p>
<h2 id="Flagging-Many-Files">Flagging many files at once</h2>
<p class="tab">The <b>#</b>, <b>~</b>, <b>.</b>, <b>% &amp;</b>, and <b>% d</b> commands flag many files for deletion, based on their file names:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>#</b></td>
<td>Flag all auto-save files (files whose names start and end with '<b>#</b>') for deletion (see <a href="#Auto-Save">Auto Save</a>).</td>
</tr>
<tr class="tcw">
<td><b>~</b></td>
<td>Flag all backup files (files whose names end with '<b>~</b>') for deletion (see <a href="#Backup">Backup</a>).</td>
</tr>
<tr class="tcw">
<td><b>.</b></td>
<td>(Period) Flag excess numeric backup files for deletion. The oldest and newest few backup files of any one file are exempt; the middle ones are flagged.</td>
</tr>
<tr class="tcw">
<td><b>% &amp;</b></td>
<td>Flag for deletion all files with certain kinds of names which suggest you could easily create those files again.</td>
</tr>
<tr class="tcw">
<td><b>% d</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Flag for deletion all files whose names match the regular expression <i>regexp</i>.</td>
</tr>
</table>
<p class="tab"><b>#</b> (<b>dired-flag-auto-save-files</b>) flags all files whose names look like auto-save files&mdash;that is, files whose names begin and end with '<b>#</b>'. See <a href="#Auto-Save">Auto Save</a>.<br><br><b>~</b> (<b>dired-flag-backup-files</b>) flags all files whose names say they are backup files&mdash;that is, files whose names end in '<b>~</b>'. See <a href="#Backup">Backup</a>.<br><br><b>.</b> (period, <b>dired-clean-directory</b>) flags only some of the backup files for deletion: all but the oldest few and newest few backups of any one file. Normally, the number of newest versions kept for each file is given by the variable <b>dired-kept-versions</b> (not <b>kept-new-versions</b>; that applies only when saving). The number of oldest versions to keep is given by the variable <b>kept-old-versions</b>.<br><br>Period with a positive numeric argument, as in <b>C-u 3 .</b>, specifies the number of newest versions to keep, overriding <b>dired-kept-versions</b>. A negative numeric argument overrides kept-old-versions, using minus the value of the argument to specify the number of oldest versions of each file to keep.<br><br><b>% &amp;</b> (<b>dired-flag-garbage-files</b>) flags files whose names match the regular expression specified by the variable <b>dired-garbage-files-regexp</b>. By default, this matches certain files produced by TeX, '<b>.bak</b>' files, and the '<b>.orig</b>' and '<b>.rej</b>' files produced by patch.<br><br><b>% d</b> flags all files whose names match a specified regular expression (<b>dired-flag-files-regexp</b>). Only the non-directory part of the file name is used in matching. You can use '<b>^</b>' and '<b>$</b>' to anchor matches. You can exclude certain subdirectories from marking by hiding them while you use <b>% d</b>. See <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>.</p>
<h2 id="Dired-Visiting">Visiting files in Dired</h2>
<p class="tab">There's several Dired commands for visiting or examining the files listed in the Dired buffer. All of them apply to the current line's file; if that file is a directory, these commands invoke Dired on that subdirectory (making a separate Dired buffer).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>f</b></td>
<td>Visit the file described on the current line, like typing <b>C-x C-f</b> and supplying that file name (<b>dired-find-file</b>). See <a href="#Visiting">Visiting</a>.</td>
</tr>
<tr class="tcw">
<td><b>&lt;RET&gt;</b>, <b>e</b></td>
<td>Equivalent to <b>f</b>.</td>
</tr>
<tr class="tcw">
<td><b>o</b></td>
<td>Like <b>f</b>, but uses another window to display the file's buffer (<b>dired-find-file-other-window</b>). The Dired buffer remains visible in the first window. This is like using <b>C-x 4 C-f</b> to visit the file. See <a href="#Windows">Windows</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-o</b></td>
<td>Visit the file described on the current line, and display the buffer in another window, but do not select that window (<b>dired-display-file</b>).</td>
</tr>
<tr class="tcw">
<td><b>Mouse-1</b>, <b>Mouse-2</b></td>
<td>Visit the file whose name you clicked on (<b>dired-mouse-find-file-other-window</b>). This uses another window to display the file, like the <b>o</b> command.</td>
</tr>
<tr class="tcw">
<td><b>v</b></td>
<td>View the file described on the current line, with View mode (<b>dired-view-file</b>). View mode provides convenient commands to navigate the buffer but forbids changing it; See <a href="#View-Mode">View Mode</a>.</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>Visit the parent directory of the current directory (<b>dired-up-directory</b>). This is equivalent to moving to the line for <b>..</b> and typing <b>f</b> there.</td>
</tr>
</table>
<h2 id="Marks-vs-Flags">Dired marks vs. Dired flags</h2>
<p class="tab">Instead of flagging a file with '<b>D</b>', you can mark the file with some other character (usually '<b>*</b>'). Most Dired commands to operate on files use the files marked with '<b>*</b>'. The only command that operates on flagged files is x, which deletes them.<br><br>Here are some commands for marking with '<b>*</b>', for unmarking, and for operating on marks. (See <a href="#Dired-Deletion">Dired Deletion</a>, for commands to flag and unflag files.)</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>m</b>, <b>* m</b></td>
<td>Mark the current file with '<b>*</b>' (<b>dired-mark</b>). If the region is active, mark all files in the region instead; otherwise, if a numeric argument <i>n</i> is supplied, mark the next <i>n</i> files instead, starting with the current file (if <i>n</i> is negative, mark the previous <i>&minus;n</i> files).</td>
</tr>
<tr class="tcw">
<td><b>* *</b></td>
<td>Mark all executable files with '<b>*</b>' (<b>dired-mark-executables</b>). With a numeric argument, unmark all those files.</td>
</tr>
<tr class="tcw">
<td><b>* @</b></td>
<td>Mark all symbolic links with '<b>*</b>' (<b>dired-mark-symlinks</b>). With a numeric argument, unmark all those files.</td>
</tr>
<tr class="tcw">
<td><b>* /</b></td>
<td>Mark with '<b>*</b>' all files that are directories, except for <b>.</b> and <b>..</b> (<b>dired-mark-directories</b>). With a numeric argument, unmark all those files.</td>
</tr>
<tr class="tcw">
<td><b>* s</b></td>
<td>Mark all the files in the current subdirectory, aside from <b>.</b> and <b>..</b> (<b>dired-mark-subdir-files</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b>, <b>* u</b></td>
<td>Remove any mark on this line (<b>dired-unmark</b>). If the region is active, unmark all files in the region instead; otherwise, if a numeric argument <i>n</i> is supplied, unmark the next <i>n</i> files instead, starting with the current file (if <i>n</i> is negative, unmark the previous <i>&minus;n</i> files).</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b>, <b>* &lt;DEL&gt;</b></td>
<td>Move point to previous line and remove any mark on that line (<b>dired-unmark-backward</b>). If the region is active, unmark all files in the region instead; otherwise, if a numeric argument <i>n</i> is supplied, unmark the <i>n</i> preceding files instead, starting with the current file (if <i>n</i> is negative, unmark the next <i>&minus;n</i> files).</td>
</tr>
<tr class="tcw">
<td><b>* !</b>, <b>U</b></td>
<td>Remove all marks from all the files in this Dired buffer (<b>dired-unmark-all-marks</b>).</td>
</tr>
<tr class="tcw">
<td><b>* ?</b> <i>markchar</i>,<br><b>M-&lt;DEL&gt;</b></td>
<td>Remove all marks that use the character <i>markchar</i> (<b>dired-unmark-all-files</b>). The argument is a single character&mdash;do not use <b>&lt;RET&gt;</b> to terminate it. See the description of the <b>* c</b> command below, which lets you replace one mark character with another.<br><br>With a numeric argument, this command queries about each marked file, asking whether to remove its mark. You can answer <b>y</b> meaning yes, <b>n</b> meaning no, or <b>!</b> to remove the marks from the remaining files without asking about them.</td>
</tr>
<tr class="tcw">
<td><b>* C-n</b>, <b>M-}</b></td>
<td>Move down to the next marked file (<b>dired-next-marked-file</b>) A file is "marked" if it has any kind of mark.</td>
</tr>
<tr class="tcw">
<td><b>* C-p</b>, <b>M-{</b></td>
<td>Move up to the previous marked file (<b>dired-prev-marked-file</b>)</td>
</tr>
<tr class="tcw">
<td><b>t</b>, <b>* t</b></td>
<td>Toggle all marks (<b>dired-toggle-marks</b>): files marked with '<b>*</b>' become unmarked, and unmarked files are marked with '<b>*</b>'. Files marked in any other way are not affected.</td>
</tr>
<tr class="tcw">
<td><b>* c</b> <i>old-markchar new-markchar</i></td>
<td>Replace all marks that use the character <i>old-markchar</i> with marks that use the character <i>new-markchar</i> (<b>dired-change-marks</b>). This command is the primary way to create or use marks other than '<b>*</b>' or '<b>D</b>'. The arguments are single characters&mdash;do not use <b>&lt;RET&gt;</b> to terminate them.<br><br>You can use almost any character as a mark character by means of this command, to distinguish various classes of files. If <i>old-markchar</i> is a space (' '), then the command operates on all unmarked files; if <i>new-markchar</i> is a space, then the command unmarks the files where it acts.<br><br>To illustrate the power of this command, here is how to put '<b>D</b>' flags on all the files that have no marks, while unflagging all those that already have '<b>D</b>' flags:<br><br><pre class="tcy">* c D t * c SPC D * c t SPC</pre> This assumes that no files were already marked with '<b>t</b>'.</td>
</tr>
<tr class="tcw">
<td><b>% m</b> <i>regexp</i> <b>&lt;RET&gt;</b>, <b>* %</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Mark (with '<b>*</b>') all files whose names match the regular expression <i>regexp</i> (<b>dired-mark-files-regexp</b>). This command is like <b>% d</b>, except that it marks files with '<b>*</b>' instead of flagging with '<b>D</b>'.<br><br>Only the non-directory part of the file name is used in matching. Use '<b>^</b>' and '<b>$</b>' to anchor matches. You can exclude subdirectories by temporarily hiding them (see <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>).</td>
</tr>
<tr class="tcw">
<td><b>% g</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Mark (with '<b>*</b>') all files whose contents contain a match for the regular expression <i>regexp</i> (<b>dired-mark-files-containing-regexp</b>). This command is like <b>% m</b>, except that it searches the file contents instead of the file name.</td>
</tr>
<tr class="tcw">
<td><b>C-/</b>, <b>C-x u</b>, <b>C-_</b></td>
<td>Undo changes in the Dired buffer, such as adding or removing marks (<b>dired-undo</b>). This command does not revert the actual file operations, nor recover lost files! It only undoes changes in the buffer itself.<br><br>In some cases, using this after commands that operate on files can cause trouble. For example, after renaming one or more files, <b>dired-undo</b> restores the original names in the Dired buffer, which gets the Dired buffer out of sync with the actual contents of the directory.</td>
</tr>
</table>
<h2 id="Operating-on-Files">Operating on files</h2>
<p class="tab">This section describes the basic Dired commands to operate on one file or several files. All of these commands are capital letters; all of them use the minibuffer, either to read an argument or to ask for confirmation, before they act. All of them let you specify the files to manipulate in these ways:</p>
<ul>
<li>If you give the command a numeric prefix argument n, it operates on the next n files, starting with the current file. (If n is negative, the command operates on the &minus;n files preceding the current line.)</li>
<li>Otherwise, if some files are marked with '<b>*</b>', the command operates on all those files.</li>
<li>Otherwise, the command operates on the current file only.</li>
</ul>
<p class="tab">Other Dired commands, such as <b>!</b> and the '<b>%</b>' commands, use the same conventions to decide the files where work is needed.<br><br>Commands which ask for a destination directory, such as those which copy and rename files or create links for them, try to guess the default target directory for the operation. Normally, they suggest the Dired buffer's default directory, but if the variable <b>dired-dwim-target</b> is non-nil, and if there is another Dired buffer displayed in the next window, that other buffer's directory is suggested instead.<br><br>Here are the file-manipulating Dired commands that operate on files.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>C</b> <i>new</i> <b>&lt;RET&gt;</b></td>
<td>Copy the specified files (<b>dired-do-copy</b>). The argument new is the directory to copy into, or (if copying a single file) the new name. This is like the shell command <a href="/unix/ucp.htm">cp</a>.<br><br>If <b>dired-copy-preserve-time</b> is non-nil, then copying with this command preserves the modification time of the old file in the copy, like '<b>cp -p</b>'. The <b>variable dired-recursive-copies</b> controls whether to copy directories recursively (like '<b>cp -r</b>'). The default is top, which means to ask before recursively copying a directory.</td>
</tr>
<tr class="tcw">
<td><b>D</b></td>
<td>Delete the specified files (<b>dired-do-delete</b>). This is like the shell command <a href="/unix/urm.htm">rm</a>.<br><br>Like the other commands in this section, this command operates on the marked files, or the next <i>n</i> files. By contrast, <b>x</b> (<b>dired-do-flagged-delete</b>) deletes all flagged files.</td>
</tr>
<tr class="tcw">
<td><b>R</b> <i>new</i> <b>&lt;RET&gt;</b></td>
<td>Rename the specified files (<b>dired-do-rename</b>). If you rename a single file, the argument <i>new</i> is the new name of the file. If you rename several files, the argument <i>new</i> is the directory where to move the files (this is like the shell command <a href="/unix/umv.htm">mv</a>).<br><br>Dired automatically changes the visited file name of buffers associated with renamed files so that they refer to the new names.</td>
</tr>
<tr class="tcw">
<td><b>H</b> <i>new</i> <b>&lt;RET&gt;</b></td>
<td>Make hard links to the specified files (<b>dired-do-hardlink</b>). This is like the shell command <a href="/unix/uln.htm">ln</a>. The argument <i>new</i> is the directory to make the links in, or (if making only one link) the name to give the link.</td>
</tr>
<tr class="tcw">
<td><b>S</b> <i>new</i> <b>&lt;RET&gt;</b></td>
<td>Make symbolic links to the specified files (<b>dired-do-symlink</b>). This is like '<b>ln -s</b>'. The argument <i>new</i> is the directory to make the links in, or (if making only one link) the name to give the link.</td>
</tr>
<tr class="tcw">
<td><b>M</b> <i>modespec</i> <b>&lt;RET&gt;</b></td>
<td>Change the mode (also called permission bits) of the specified files (<b>dired-do-chmod</b>). <i>modespec</i> can be in octal or symbolic notation, like arguments handled by the <a href="/unix/uchmod.htm">chmod</a> program.</td>
</tr>
<tr class="tcw">
<td><b>G</b> <i>newgroup</i> <b>&lt;RET&gt;</b></td>
<td>Change the group of the specified files to <i>newgroup</i> (<b>dired-do-chgrp</b>).</td>
</tr>
<tr class="tcw">
<td><b>O</b> <i>newowner</i> <b>&lt;RET&gt;</b></td>
<td>Change the owner of the specified files to <i>newowner</i> (<b>dired-do-chown</b>). (On most systems, only the <a href="/jargon/r/root.htm">superuser</a> can do this.)<br><br>The variable <b>dired-chown-program</b> specifies the name of the program to use to do the work (different systems put <b>chown</b> in different places).</td>
</tr>
<tr class="tcw">
<td><b>T</b> <i>timestamp</i> <b>&lt;RET&gt;</b></td>
<td>Touch the specified files (<b>dired-do-touch</b>). This means updating their modification times to the present time. This is like the shell command <a href="/unix/utouch.htm">touch</a>.</td>
</tr>
<tr class="tcw">
<td><b>P</b> <i>command</i> <b>&lt;RET&gt;</b></td>
<td>Print the specified files (<b>dired-do-print</b>). You must specify the command to print them with, but the minibuffer starts out with a suitable guess made using the variables <b>lpr-command</b> and <b>lpr-switches</b> (the same variables that <b>lpr-buffer</b> uses; see <a href="#Printing">Printing</a>).</td>
</tr>
<tr class="tcw">
<td><b>Z</b></td>
<td>Compress the specified files (<b>dired-do-compress</b>). If the file appears to be a compressed file already, uncompress it instead.</td>
</tr>
<tr class="tcw">
<td><b>:d</b></td>
<td>Decrypt the specified files (<b>epa-dired-do-decrypt</b>).</td>
</tr>
<tr class="tcw">
<td><b>:v</b></td>
<td>Verify digital signatures on the specified files (<b>epa-dired-do-verify</b>).</td>
</tr>
<tr class="tcw">
<td><b>:s</b></td>
<td>Digitally sign the specified files (<b>epa-dired-do-sign</b>).</td>
</tr>
<tr class="tcw">
<td><b>:e</b></td>
<td>Encrypt the specified files (<b>epa-dired-do-encrypt</b>).</td>
</tr>
<tr class="tcw">
<td><b>L</b></td>
<td>Load the specified Emacs Lisp files (<b>dired-do-load</b>). See <a href="#Lisp-Libraries">Lisp Libraries</a>.</td>
</tr>
<tr class="tcw">
<td><b>B</b></td>
<td>Byte compile the specified Emacs Lisp files (<b>dired-do-byte-compile</b>).</td>
</tr>
<tr class="tcw">
<td><b>A</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Search all the specified files for the regular expression <i>regexp</i> (<b>dired-do-search</b>).<br><br>This command is a variant of <b>tags-search</b>. The search stops at the first match it finds; use <b>M-</b>, to resume the search and find the next match. See <a href="#Tags-Search">Tags Search</a>.</td>
</tr>
<tr class="tcw">
<td><b>Q</b> <i>regexp</i> <b>&lt;RET&gt;</b> <i>to</i> <b>&lt;RET&gt;</b></td>
<td>Perform <b>query-replace-regexp</b> on each of the specified files, replacing matches for <i>regexp</i> with the string <i>to</i> (<b>dired-do-query-replace-regexp</b>).<br><br>This command is a variant of <b>tags-query-replace</b>. If you exit the query replace loop, you can use <b>M-</b>, to resume the scan and replace more matches. See <a href="#Tags-Search">Tags Search</a>.</td>
</tr>
</table>
<h2 id="Shell-Commands-in-Dired">Shell commands in Dired</h2>
<p class="tab">The Dired command <b>!</b> (<b>dired-do-shell-command</b>) reads a shell command string in the minibuffer, and runs that shell command on one or more files. The files that the shell command operates on are determined in the usual way for Dired commands (see <a href="#Operating-on-Files">Operating on Files</a>). The command <b>X</b> is a synonym for <b>!</b>.<br><br>The command <b>&amp;</b> (<b>dired-do-async-shell-command</b>) does the same, except that it runs the shell command asynchronously. (You can also do this with <b>!</b>, by appending a '<b>&amp;</b>' character to the end of the shell command.) When the command operates on more than one file, it runs multiple parallel copies of the specified shell command, one for each file. As an exception, if the specified shell command ends in '<b>;</b>' or '<b>;&amp;</b>', the shell command is run in the background on each file sequentially; Emacs waits for each invoked shell command to terminate before running the next one.<br><br>For both <b>!</b> and <b>&amp;</b>, the working directory for the shell command is the top-level directory of the Dired buffer.<br><br>If you tell <b>!</b> or <b>&amp;</b> to operate on more than one file, the shell command string determines how those files are passed to the shell command:</p>
<ul>
<li>If you use '<b>*</b>' surrounded by whitespace in the command string, then the command runs only once, with the list of file names substituted for the '<b>*</b>'. The order of file names is the order of appearance in the Dired buffer.</li>
<li>Thus, <b>! tar cf foo.tar * &lt;RET&gt;</b> runs tar on the entire list of file names, putting them into one tar file <b>foo.tar</b>.</li>
<li>If you want to use '<b>*</b>' as a shell wildcard with whitespace around it, write '<b>*""</b>'. In the shell, this is equivalent to '<b>*</b>'; but since the '<b>*</b>' is not surrounded by whitespace, Dired does not treat it specially.</li>
<li>Otherwise, if the command string contains '<b>?</b>' surrounded by whitespace, Emacs runs the shell command once for each file, substituting the current file name for '<b>?</b>' each time. You can use '<b>?</b>' more than once in the command; the same file name replaces each occurrence.</li>
<li>If the command string contains neither '<b>*</b>' nor '<b>?</b>', Emacs runs the shell command once for each file, adding the file name at the end. For example, <b>! uudecode &lt;RET&gt;</b> runs uudecode on each file.</li>
</ul>
<p class="tab">To iterate over the file names in a more complicated fashion, use an explicit shell loop. For example, here is how to uuencode each file, making the output file name by appending '<b>.uu</b>' to the input file name:</p>
<pre class="tab tcy">for file in * ; do uuencode "$file" "$file" &gt;"$file".uu; done</pre>
<p class="tab">The <b>!</b> and <b>&amp;</b> commands do not attempt to update the Dired buffer to show new or modified files, because they don't know what files are changed. Use the <b>g</b> command to update the Dired buffer (see <a href="#Dired-Updating">Dired Updating</a>).<br><br>See <a href="#Single-Shell">Single Shell</a>, for information about running shell commands outside Dired.</p>
<h2 id="Transforming-File-Names">Transforming file names in Dired</h2>
<p class="tab">This section describes Dired commands which alter file names in a systematic way. Each command operates on some or all the marked files, using a new name made by transforming the existing name.<br><br>Like the basic Dired file-manipulation commands (see <a href="#Operating-on-Files">Operating on Files</a>), the commands described here operate either on the next <i>n</i> files, or on all files marked with '<b>*</b>', or on the current file. (To mark files, use the commands described in <a href="#Marks-vs-Flags">Marks vs Flags</a>.)<br><br>All of the commands described in this section work interactively: they ask you to confirm the operation for each candidate file. Thus, you can select more files than you actually need to operate on (e.g., with a regexp that matches many files), and then filter the selected names by typing y or n when the command prompts for confirmation.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>% u</b></td>
<td>Rename each of the selected files to an upper-case name (<b>dired-upcase</b>). If the old file names are <b>Foo</b> and <b>bar</b>, the new names are <b>FOO</b> and <b>BAR</b>.</td>
</tr>
<tr class="tcw">
<td><b>% l</b></td>
<td>Rename each of the selected files to a lower-case name (<b>dired-downcase</b>). If the old file names are <b>Foo</b> and <b>bar</b>, the new names are <b>foo</b> and <b>bar</b>.</td>
</tr>
<tr class="tcw">
<td><b>% R</b> <i>from</i> <b>&lt;RET&gt;</b> <i>to</i> <b>&lt;RET&gt;</b>, <b>% C</b> <i>from</i> <b>&lt;RET&gt;</b> <i>to</i> <b>&lt;RET&gt;</b>, <b>% H</b> <i>from</i> <b>&lt;RET&gt;</b> <i>to</i> <b>&lt;RET&gt;</b>, <b>% S</b> <i>from</i> <b>&lt;RET&gt;</b> <i>to</i> <b>&lt;RET&gt;</b></td>
<td>These four commands rename, copy, make hard links and make soft links, in each case computing the new name by regular-expression substitution from the name of the old file.</td>
</tr>
</table>
<p class="tab">The four regular-expression substitution commands effectively perform a search-and-replace on the selected file names. They read two arguments: a regular expression from, and a substitution pattern to; they match each "old" file name against the from value, and then replace the matching part with a to value. You can use '<b>\&amp;</b>' and '<b>\digit</b>' in to for referring to all or part of what the pattern matched in the old file name, as in replace-regexp (see <a href="#Regexp-Replace">Regexp Replace</a>). If the regular expression matches more than once in a file name, only the first match is replaced.<br><br>For example, <b>% R ^.*$ &lt;RET&gt; x-\&amp; &lt;RET&gt;</b> renames each selected file by prepending '<b>x-</b>' to its name. The inverse of this, removing '<b>x-</b>' from the front of each file name, is also possible: one method is <b>% R ^x-\(.*\)$ &lt;RET&gt; \1 &lt;RET&gt;</b>; another is <b>% R ^x- &lt;RET&gt; &lt;RET&gt;</b>. (Use '<b>^</b>' and '<b>$</b>' to anchor matches that should span the whole file name.)<br><br>Normally, the replacement process does not consider the files' directory names; it operates on the file name in the directory. If you specify a numeric argument of zero, then replacement affects the entire absolute file name including directory name. (A non-zero argument specifies the number of files on which to operate.)<br><br>You may want to select the set of files to operate on using the same regexp from that you use to operate on them. To do this, mark those files with <b>% m</b> <i>from</i> <b>&lt;RET&gt;</b>, then use the same regular expression in the command to operate on the files. To make this more convenient, the <b>%</b> commands to operate on files use the last regular expression specified in any <b>%</b> command as a default.</p>
<h2 id="Comparison-in-Dired">File comparison with Dired</h2>
<p class="tab">The <b>=</b> (<b>dired-diff</b>) command compares the current file (the file at point) with another file (read using the minibuffer) using the <a href="/jargon/d/diff.htm">diff</a> program. The file specified with the minibuffer is the first argument of <b>diff</b>, and file at point is the second argument. The output of the <b>diff</b> program is shown in a buffer using Diff mode (see <a href="#Comparing-Files">Comparing Files</a>).<br><br>If the region is active, the default for the file read using the minibuffer is the file at the mark (i.e., the ordinary Emacs mark, not a Dired mark; see <a href="#Setting-Mark">Setting Mark</a>). Otherwise, if the file at point has a backup file (see <a href="#Backup">Backup</a>), that is the default.</p>
<h2 id="Subdirectories-in-Dired">Subdirectories in Dired</h2>
<p class="tab">A Dired buffer usually displays only one directory, but you can optionally include its subdirectories as well.<br><br>The simplest way to include multiple directories in one Dired buffer is to specify the options '<b>-lR</b>' for running ls. (If you give a numeric argument when you run Dired, then you can specify these options in the minibuffer.) That produces a recursive directory listing showing all subdirectories at all levels.<br><br>More often, you want to show only specific subdirectories. You can do this with <b>i</b> (<b>dired-maybe-insert-subdir</b>):</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>i</b></td>
<td>Insert the contents of a subdirectory later in the buffer.</td>
</tr>
</table>
<p class="tab">If you use this command on a line that describes a file which is a directory, it inserts the contents of that directory into the same Dired buffer, and moves there. Inserted subdirectory contents follow the top-level directory of the Dired buffer, only as they do in '<b>ls -lR</b>' output.<br><br>If the subdirectory's contents are already present in the buffer, the <b>i</b> command only moves to it.<br><br>In either case, <b>i</b> sets the Emacs mark before moving, so <b>C-u C-&lt;SPC&gt;</b> returns to your previous position in the Dired buffer (see <a href="#Setting-Mark">Setting Mark</a>). You can also use '<b>^</b>' to return to the parent directory in the same Dired buffer (see <a href="#Dired-Visiting">Dired Visiting</a>).<br><br>Use the <b>l</b> command (<b>dired-do-redisplay</b>) to update the subdirectory's contents, and use <b>C-u k</b> on the subdirectory header line to remove the subdirectory listing (see <a href="#Dired-Updating">Dired Updating</a>). You can also hide and show inserted subdirectories (see <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>).</p>
<h2 id="Subdir-Switches">Subdirectory switches in Dired</h2>
<p class="tab">You can insert subdirectories with specified <b>ls</b> switches in Dired buffers using <b>C-u i</b>. You can change the <b>ls</b> switches of an already inserted subdirectory at point using <b>C-u l</b>.<br><br>Dired preserves the switches if you revert the buffer. Deleting a subdirectory forgets about its switches.<br><br>Using <b>dired-undo</b> (see <a href="#Marks-vs-Flags">Marks vs Flags</a>) to reinsert or delete subdirectories that were inserted with explicit switches can bypass Dired's machinery for remembering (or forgetting) switches. Deleting a subdirectory using <b>dired-undo</b> does not forget its switches. When later reinserted using <b>i</b>, it is reinserted using its old switches. Using <b>dired-undo</b> to reinsert a subdirectory that was deleted using the regular Dired commands (not <b>dired-undo</b>) originally inserts it with its old switches. Reverting the buffer, however, relists it using the buffer's default switches. If any of this yields problems, you can easily correct the situation using <b>C-u i</b> or <b>C-u l</b>.<br><br>Dired does not remember the <b>R</b> switch. Inserting a subdirectory with switches that include the <b>R</b> switch is equivalent to inserting each of its subdirectories using all remaining switches. For instance, updating or killing a subdirectory that was inserted with the <b>R</b> switch does not update or kill its subdirectories.<br><br>The buffer's default switches do not affect subdirectories that were inserted using explicitly specified switches. In particular, commands such as <b>s</b> that change the buffer's switches do not affect such subdirectories. (They do, however, affect subdirectories without explicitly assigned switches.)<br><br>You can make Dired forget about all subdirectory switches and relist all subdirectories with the buffer's default switches using <b>M-x dired-reset-subdir-switches</b>. This also reverts the Dired buffer.</p>
<h2 id="Subdirectory-Motion">Moving over subdirectories</h2>
<p class="tab">When a Dired buffer lists subdirectories, you can use the page motion commands <b>C-x [</b> and <b>C-x ]</b> to move by entire directories (see <a href="#Pages">Pages</a>).<br><br>The following commands move across, up and down in the tree of directories within one Dired buffer. They move to directory header lines, which are the lines that give a directory's name, at the beginning of the directory's contents.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>C-M-n</b></td>
<td>Go to the next subdirectory header line, regardless of level (<b>dired-next-subdir</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-p</b></td>
<td>Go to previous subdirectory header line, regardless of level (<b>dired-prev-subdir</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-u</b></td>
<td>Go up to the parent directory's header line (<b>dired-tree-up</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-d</b></td>
<td>Go down in the directory tree, to the first subdirectory's header line (<b>dired-tree-down</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;</b></td>
<td>Move up to the previous directory-file line (<b>dired-prev-dirline</b>). These lines are the ones that describe a directory as a file in its parent directory.</td>
</tr>
<tr class="tcw">
<td><b>&gt;</b></td>
<td>Move down to the next directory-file line (<b>dired-prev-dirline</b>).</td>
</tr>
</table>
<h2 id="Hiding-Subdirectories">Hiding subdirectories</h2>
<p class="tab">Hiding a subdirectory means to make it invisible, except for its header line.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>$</b></td>
<td>Hide or show the subdirectory that point is in, and move point to the next subdirectory (<b>dired-hide-subdir</b>). This is a toggle. A numeric argument serves as a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>M-$</b></td>
<td>Hide all subdirectories in this Dired buffer, leaving only their header lines (<b>dired-hide-all</b>). Or, if any subdirectory is currently hidden, make all subdirectories visible again. You can use this command to get an overview in very deep directory trees or to move quickly to subdirectories far away.</td>
</tr>
</table>
<p class="tab">Ordinary Dired commands never consider files inside a hidden subdirectory. For example, the commands to operate on marked files ignore files in hidden directories even if they are marked. Thus you can use hiding to temporarily exclude subdirectories from operations without having to remove the Dired marks on files in those subdirectories.<br><br>See <a href="#Dired-Updating">Dired Updating</a>, for how to insert or delete a subdirectory listing.</p>
<h2 id="Dired-Updating">Updating the Dired buffer</h2>
<p class="tab">This section describes commands to update the Dired buffer to reflect outside (non-Dired) changes in the directories and files, and to delete part of the Dired buffer.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>g</b></td>
<td>Update the entire contents of the Dired buffer (<b>revert-buffer</b>).</td>
</tr>
<tr class="tcw">
<td><b>l</b></td>
<td>Update the specified files (<b>dired-do-redisplay</b>). You specify the files for <b>l</b> in the same way as for file operations.</td>
</tr>
<tr class="tcw">
<td><b>k</b></td>
<td>Delete the specified file lines&mdash;not the files, only the lines (<b>dired-do-kill-lines</b>).</td>
</tr>
<tr class="tcw">
<td><b>s</b></td>
<td>Toggle between alphabetical order and date/time order (<b>dired-sort-toggle-or-edit</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u s</b> <i>switches</i> <b>&lt;RET&gt;</b></td>
<td>Refresh the Dired buffer using switches as <b>dired-listing-switches</b>.</td>
</tr>
</table>
<p class="tab">Type <b>g</b> (<b>revert-buffer</b>) to update the contents of the Dired buffer, based on changes in the files and directories listed. This preserves all marks except for those on files that have vanished. Hidden subdirectories are updated but remain hidden.<br><br>To update only some of the files, type <b>l</b> (<b>dired-do-redisplay</b>). Like the Dired file-operating commands, this command operates on the next <i>n</i> files (or previous <i>&minus;n</i> files), or on the marked files if any, or on the current file. Updating the files means reading their current status, then updating their lines in the buffer to indicate that status.<br><br>If you use <b>l</b> on a subdirectory header line, it updates the contents of the corresponding subdirectory.<br><br>If you use <b>C-x d</b> or some other Dired command to visit a directory that is already being shown in a Dired buffer, Dired switches to that buffer but does not update it. If the buffer is not up-to-date, Dired displays a warning telling you to type <b>&lt;g&gt;</b> to update it. You can also tell Emacs to revert each Dired buffer automatically when you revisit it, by setting the variable <b>dired-auto-revert-buffer</b> to a non-nil value.<br><br>To delete file lines from the buffer&mdash;without actually deleting the files&mdash;type <b>k</b> (<b>dired-do-kill-lines</b>). Like the file-operating commands, this command operates on the next <b>n</b> files, or on the marked files if any. However, it does not operate on the current file, as otherwise mistyping <b>k</b> could be annoying.<br><br>If you use <b>k</b> to kill the line for a directory file which you had inserted in the Dired buffer as a subdirectory (see <a href="#Subdirectories-in-Dired">Subdirectories in Dired</a>), it removes the subdirectory listing as well. Typing <b>C-u k</b> on the header line for a subdirectory also removes the subdirectory line from the Dired buffer.<br><br>The <b>g</b> command brings back any individual lines that you have killed in this way, but not subdirectories&mdash;you must use <b>i</b> to reinsert a subdirectory.<br><br>The files in a Dired buffers are normally listed in alphabetical order by file names. Alternatively Dired can sort them by date/time. The Dired command <b>s</b> (<b>dired-sort-toggle-or-edit</b>) switches between these two sorting modes. The mode line in a Dired buffer indicates which way it is currently sorted&mdash;by name, or by date.<br><br><b>C-u s</b> <i>switches</i> <b>&lt;RET&gt;</b> lets you specify a new value for <b>dired-listing-switches</b>.</p>
<h2 id="Dired-and-Find">Dired and find</h2>
<p class="tab">You can select a set of files for display in a Dired buffer more flexibly using the find utility to choose the files.<br><br>To search for files with names matching a wildcard pattern use <b>M-x find-name-dired</b>. It reads arguments directory and pattern, and chooses all the files in the directory or its subdirectories whose individual names match pattern.<br><br>The files thus chosen are displayed in a Dired buffer, where the ordinary Dired commands are available.<br><br>If you want to test the contents of files, rather than their names, use <b>M-x find-grep-dired</b>. This command reads two minibuffer arguments, directory and regexp; it chooses all the files in the directory or its subdirectories that contain a match for regexp. It works by running the programs find and grep. See also <b>M-x grep-find</b>, in <a href="#Grep-Searching">Grep Searching</a>. Remember to write the regular expression for grep, not for Emacs. (An alternative method of showing files whose contents match a given regexp is the <b>% g</b> <i>regexp</i> command, see <a href="#Marks-vs-Flags">Marks vs Flags</a>.)<br><br>The most general command in this series is <b>M-x find-dired</b>, which lets you specify any condition that find can test. It takes two minibuffer arguments, directory and find-args; it runs find in the directory, passing <b>find-args</b> to tell find what condition to test. To use this command, you need to know how to use find.<br><br>The format of listing produced by these commands is controlled by the variable <b>find-ls-option</b>. This is a pair of options; the first specifying how to call find to produce the file listing, and the second telling Dired to parse the output.<br><br>The command <b>M-x locate</b> provides a similar interface to the locate program. <b>M-x locate-with-filter</b> is similar, but keeps only files whose names match a given regular expression.<br><br>These buffers don't work entirely like ordinary Dired buffers: file operations work, but do not always automatically update the buffer. Reverting the buffer with <b>g</b> deletes all inserted subdirectories, and erases all flags and marks.</p>
<h2 id="Wdired">Wdired: editing the Dired buffer</h2>
<p class="tab">Wdired is a special mode that allows you to perform file operations by editing the Dired buffer directly (the "W" in "Wdired" stands for "writable".) To enter Wdired mode, type <b>C-x C-q</b> (<b>dired-toggle-read-only</b>) while in a Dired buffer. Alternatively, use the '<b>Immediate / Edit File Names</b>' menu item.<br><br>While in Wdired mode, you can rename files by editing the file names displayed in the Dired buffer. All the ordinary Emacs editing commands, including rectangle operations and <b>query-replace</b>, are available for this. Once you are done editing, type <b>C-c C-c</b> (<b>wdired-finish-edit</b>). This applies your changes and switches back to ordinary Dired mode.<br><br>Apart from renaming files, you can move a file to another directory by typing in the new file name (either absolute or relative). To mark a file for deletion, delete the entire file name. To change the target of a symbolic link, edit the link target name which appears next to the link name.<br><br>The rest of the text in the buffer, such as the file sizes and modification dates, is marked read-only, so you can't edit it. However, if you set <b>wdired-allow-to-change-permissions</b> to <b>t</b>, you can edit the file permissions. For example, you can change '<b>-rw-r--r--</b>' to '<b>-rw-rw-rw-</b>' to make a file world-writable. These changes also take effect when you type <b>C-c C-c</b>.</p>
<h2 id="Image_002dDired">Viewing image thumbnails in Dired</h2>
<p class="tab">Image-Dired is a facility for browsing image files. It provides viewing the images either as thumbnails or in full size, either inside Emacs or through an external viewer.<br><br>To enter Image-Dired, mark the image files you want to look at in the Dired buffer, using <b>m</b> as usual. Then type <b>C-t d</b> (<b>image-dired-display-thumbs</b>). This creates and switches to a buffer containing image-dired, corresponding to the marked files.<br><br>You can also enter Image-Dired directly by typing <b>M-x image-dired</b>. This prompts for a directory; specify one with image files. This creates thumbnails for all the images in that directory, and displays them all in the "thumbnail buffer". This takes a long time if the directory contains many image files, and it asks for confirmation if the number of image files exceeds <b>image-dired-show-all-from-dir-max-files</b>.<br><br>With point in the thumbnail buffer, you can type <b>RET</b> (<b>image-dired-display-thumbnail-original-image</b>) to display a sized version of it in another window. This sizes the image to fit the window. Use the arrow keys to move around in the buffer. For easy browsing, use <b>SPC</b> (<b>image-dired-display-next-thumbnail-original</b>) to advance and display the next image. Typing <b>DEL</b> (<b>image-dired-display-previous-thumbnail-original</b>) backs up to the previous thumbnail and displays that instead.<br><br>To view and the image in its original size, either provide a prefix argument (<b>C-u</b>) before pressing <b>RET</b>, or type <b>C-&lt;RET&gt;</b> (<b>image-dired-thumbnail-display-external</b>) to display the image in an external viewer. You must first configure <b>image-dired-external-viewer</b>.<br><br>You can delete images through Image-Dired also. Type <b>d</b> (<b>image-dired-flag-thumb-original-file</b>) to flag the image file for deletion in the Dired buffer. You can also delete the thumbnail image from the thumbnail buffer with <b>C-d</b> (<b>image-dired-delete-char</b>).<br><br>More advanced features include image tags, which are metadata used to categorize image files. The tags are stored in a plain text file configured by <b>image-dired-db-file</b>.<br><br>To tag image files, mark them in the dired buffer (you can also mark files in Dired from the thumbnail buffer by typing <b>m</b>) and type <b>C-t t</b> (<b>image-dired-tag-files</b>). This reads the tag name in the minibuffer. To mark files having a certain tag, type <b>C-t f</b> (<b>image-dired-mark-tagged-files</b>). After marking image files with a certain tag, you can use <b>C-t d</b> to view them.<br><br>You can also tag a file directly from the thumbnail buffer by typing <b>t t</b> and you can remove a tag by typing <b>t r</b>. There is also a special "tag" called "comment" for each file (it is not a tag in the exact same sense as the other tags, it is handled slightly different). That is used to enter a comment or description about the image. You comment a file from the thumbnail buffer by typing <b>c</b>. You are prompted for a comment. Type <b>C-t c</b> to add a comment from Dired (<b>image-dired-dired-comment-files</b>).<br><br>Image-Dired also provides simple image manipulation. In the thumbnail buffer, type <b>L</b> to rotate the original image 90 degrees anti clockwise, and <b>R</b> to rotate it 90 degrees clockwise. This rotation is lossless, and uses an external utility called JpegTRAN.</p>
<h2 id="Misc-Dired-Features">Other Dired features</h2>
<p class="tab">The command <b>+</b> (<b>dired-create-directory</b>) reads a directory name, and creates that directory. It signals an error if the directory already exists.<br><br>The command <b>M-s a C-s</b> (<b>dired-do-isearch</b>) begins a "multi-file" incremental search on the marked files. If a search fails at the end of a file, typing <b>C-s</b> advances to the next marked file and repeats the search; at the end of the last marked file, the search wraps around to the first marked file. The command <b>M-s a M-C-s</b> (<b>dired-do-isearch-regexp</b>) does the same with a regular expression search. See <a href="#Repeat-Isearch">Repeat Isearch</a>, for information about search repetition.<br><br>The command <b>w</b> (<b>dired-copy-filename-as-kill</b>) puts the names of the marked (or next <i>n</i>) files into the kill ring, as if you had killed them with <b>C-w</b>. The names are separated by a space.<br><br>With a zero prefix argument, this uses the absolute file name of each marked file. With only <b>C-u</b> as the prefix argument, it uses file names relative to the Dired buffer's default directory. (This can still contain slashes if in a subdirectory.) As a special case, if point is on a directory headerline, <b>w</b> gives you the absolute name of that directory. Any prefix argument or marked files are ignored in this case.<br><br>The main purpose of this command is so that you can yank the file names into arguments for other Emacs commands. It also displays what it added to the kill ring, so you can use it to display the list of currently marked files in the echo area.<br><br>If the directory you are visiting is under version control (see <a href="#Version-Control">Version Control</a>), then the normal VC diff and log commands will operate on the selected files.<br><br>The command <b>M-x dired-compare-directories</b> is used to compare the current Dired buffer with another directory. It marks all the files that are "different" between the two directories. It puts these marks in all Dired buffers where these files are listed, which of course includes the current buffer.<br><br>The default comparison method (used if you type <b>&lt;RET&gt;</b> at the prompt) is to compare only the file names&mdash;each file name that does not appear in the other directory is "different". You can specify more stringent comparisons by entering a Lisp expression, which can refer to the variables <b>size1</b> and <b>size2</b>, the respective file sizes; <b>mtime1</b> and <b>mtime2</b>, the last modification times in seconds, as floating point numbers; and <b>fa1</b> and <b>fa2</b>, the respective file attribute lists (as returned by the function <b>file-attributes</b>). This expression is evaluated for each pair of like-named files, and if the expression's value is non-nil, those files are considered "different".<br><br>For instance, the sequence <b>M-x dired-compare-directories &lt;RET&gt; (&gt; mtime1 mtime2) &lt;RET&gt;</b> marks files newer in this directory than in the other, and marks files older in the other directory than in this one. It also marks files with no counterpart, in both directories, as always.<br><br>On the <a href="/jargon/x/xwin.htm">X Window System</a>, Emacs supports the "drag-and-drop" protocol. You can drag a file object from another program, and drop it onto a Dired buffer; this either moves, copies, or creates a link to the file in that directory. Precisely which action is taken is determined by the originating program. Dragging files out of a Dired buffer is currently not supported.</p>
<h2 id="Calendar_002fDiary">The calendar and the diary</h2>
<p class="tab">Emacs provides the functions of a desk calendar, with a diary of planned or past events. It also has facilities for managing your appointments, and keeping track of how much time you spend working on certain projects.<br><br>To enter the calendar, type <b>M-x calendar</b>; this displays a three-month calendar centered on the current month, with point on the current date. With a numeric argument, as in <b>C-u M-x calendar</b>, it prompts you for the month and year to be the center of the three-month calendar. The calendar uses its own buffer, whose major mode is Calendar mode.<br><br><b>Mouse-3</b> in the calendar brings up a menu of operations on a particular date; <b>Mouse-2</b> brings up a menu of commonly used calendar features that are independent of any particular date. To exit the calendar, type <b>q</b>.</p>
<ul>
<li><a href="#Calendar-Motion">Calendar Motion</a>: Moving through the calendar; selecting a date.</li>
<li><a href="#Scroll-Calendar">Scroll Calendar</a>: Bringing earlier or later months onto the screen.</li>
<li><a href="#Counting-Days">Counting Days</a>: How many days are there between two dates?</li>
<li><a href="#General-Calendar">General Calendar</a>: Exiting or recomputing the calendar.</li>
<li><a href="#Writing-Calendar-Files">Writing Calendar Files</a>: Writing calendars to files of various formats.</li>
<li><a href="#Holidays">Holidays</a>: Displaying dates of holidays.</li>
<li><a href="#Sunrise_002fSunset">Sunrise/Sunset</a>: Displaying local times of sunrise and sunset.</li>
<li><a href="#Lunar-Phases">Lunar Phases</a>: Displaying phases of the moon.</li>
<li><a href="#Other-Calendars">Other Calendars</a>: Converting dates to other calendar systems.</li>
<li><a href="#Diary">Diary</a>: Displaying events from your diary.</li>
<li><a href="#Appointments">Appointments</a>: Reminders when it's time to do something.</li>
<li><a href="#Importing-Diary">Importing Diary</a>: Converting diary events to/from other formats.</li>
<li><a href="#Daylight-Saving">Daylight Saving</a>: How to specify when daylight saving time is active.</li>
<li><a href="#Time-Intervals">Time Intervals</a>: Keeping track of time intervals.</li>
<li><a href="#Advanced-Calendar_002fDiary-Usage">Advanced Calendar/Diary Usage</a>: Advanced Calendar/Diary customization.</li>
</ul>
<h2 id="Calendar-Motion">Movement in the calendar</h2>
<p class="tab">Calendar mode provides commands to move through the calendar in logical units of time such as days, weeks, months, and years. If you move outside the three months originally displayed, the calendar display "scrolls" automatically through time to make the selected date visible. Moving to a date lets you view its holidays or diary entries, or convert it to other calendars; moving by long periods is also useful to scroll the calendar.</p>
<ul>
<li><a href="#Calendar-Unit-Motion">Calendar Unit Motion:</a> Moving by days, weeks, months, and years.</li>
<li><a href="#Move-to-Beginning-or-End">Move to Beginning or End:</a> Moving to start/end of weeks, months, and years.</li>
<li><a href="#Specified-Dates">Specified Dates:</a> Moving to the current date or another specific date.</li>
</ul>
<h2 id="Calendar-Unit-Motion">Motion by standard lengths of time</h2>
<p class="tab">The commands for movement in the calendar buffer parallel the commands for movement in text. You can move forward and backward by days, weeks, months, and years.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>C-f</b></td>
<td>Move point one day forward (<b>calendar-forward-day</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-b</b></td>
<td>Move point one day backward (<b>calendar-backward-day</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-n</b></td>
<td>Move point one week forward (<b>calendar-forward-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-p</b></td>
<td>Move point one week backward (<b>calendar-backward-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-}</b></td>
<td>Move point one month forward (<b>calendar-forward-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-{</b></td>
<td>Move point one month backward (<b>calendar-backward-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x ]</b></td>
<td>Move point one year forward (<b>calendar-forward-year</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x [</b></td>
<td>Move point one year backward (<b>calendar-backward-year</b>).</td>
</tr>
</table>
<p class="tab">The day and week commands are natural analogues of the usual Emacs commands for moving by characters and by lines. As <b>C-n</b> usually moves to the same column in the following line, in Calendar mode it moves to the same day in the following week. And <b>C-p</b> moves to the same day in the previous week.<br><br>The arrow keys are equivalent to <b>C-f</b>, <b>C-b</b>, <b>C-n</b> and <b>C-p</b>, only as they normally are in other modes.<br><br>The commands for motion by months and years work like those for weeks, but move a larger distance. The month commands <b>M-}</b> and <b>M-{</b> move forward or backward by an entire month. The year commands <b>C-x ]</b> and <b>C-x [</b> move forward or backward a whole year.<br><br>The easiest way to remember these commands is to consider months and years analogous to paragraphs and pages of text, respectively. But the commands themselves are not quite analogous. The ordinary Emacs paragraph commands move to the beginning or end of a paragraph, whereas these month and year commands move by an entire month or an entire year, keeping the same date in the month or year.<br><br>All these commands accept a numeric argument as a repeat count. For convenience, the digit keys and the minus sign specify numeric arguments in Calendar mode even without the Meta modifier. For example, <b>100 C-f</b> moves point 100 days forward from its present location.</p>
<h2 id="Move-to-Beginning-or-End">Beginning or end of week, month, or year</h2>
<p class="tab">A week (or month, or year) is not only a quantity of days; we think of weeks (months, years) as starting on particular dates. So Calendar mode provides commands to move to the start or end of a week, month or year:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>C-a</b></td>
<td>Move point to start of week (<b>calendar-beginning-of-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-e</b></td>
<td>Move point to end of week (<b>calendar-end-of-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-a</b></td>
<td>Move point to start of month (<b>calendar-beginning-of-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-e</b></td>
<td>Move point to end of month (<b>calendar-end-of-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-&lt;</b></td>
<td>Move point to start of year (<b>calendar-beginning-of-year</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-&gt;</b></td>
<td>Move point to end of year (<b>calendar-end-of-year</b>).</td>
</tr>
</table>
<p class="tab">These commands also take numeric arguments as repeat counts, with the repeat count indicating how many weeks, months, or years to move backward or forward.<br><br>By default, weeks begin on Sunday. To make them begin on Monday instead, set the variable <b>calendar-week-start-day</b> to 1.</p>
<h2 id="Specified-Dates">Specified dates</h2>
<p class="tab">Calendar mode provides commands for moving to a particular date specified in various ways.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:60px"><b>g d</b></td>
<td>Move point to specified date (<b>calendar-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g D</b></td>
<td>Move point to specified day of year (<b>calendar-goto-day-of-year</b>).</td>
</tr>
<tr class="tcw">
<td><b>g w</b></td>
<td>Move point to specified week of year (<b>calendar-iso-goto-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>o</b></td>
<td>Center calendar around specified month (<b>calendar-other-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>.</b></td>
<td>Move point to today's date (<b>calendar-goto-today</b>).</td>
</tr>
</table>
<p class="tab"><b>g d</b> (<b>calendar-goto-date</b>) prompts for a year, a month, and a day of the month, and then moves to that date. Because the calendar includes all dates from the beginning of the current era, you must type the year in its entirety; that is, type '<b>1990</b>', not '<b>90</b>'.<br><br><b>g D</b> (<b>calendar-goto-day-of-year</b>) prompts for a year and day number, and moves to that date. Negative day numbers count backward from the end of the year. <b>g w</b> (<b>calendar-iso-goto-week</b>) prompts for a year and week number, and moves to that week.<br><br><b>o</b> (<b>calendar-other-month</b>) prompts for a month and year, then centers the three-month calendar around that month.<br><br>You can return to today's date with <b>.</b> (<b>calendar-goto-today</b>).</p>
<h2 id="Scroll-Calendar">Scrolling in the calendar</h2>
<p class="tab">The calendar display scrolls automatically through time when you move out of the visible portion. You can also scroll it manually. Imagine that the calendar window contains a long strip of paper with the months on it. Scrolling the calendar means moving the strip horizontally, so that new months become visible in the window.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>&gt;</b></td>
<td>Scroll calendar one month forward (<b>calendar-scroll-left</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;</b></td>
<td>Scroll calendar one month backward (<b>calendar-scroll-right</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-v</b>, <b>&lt;next&gt;</b></td>
<td>Scroll forward by three months (<b>calendar-scroll-left-three-months</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-v</b>, <b>&lt;prior&gt;</b></td>
<td>Scroll backward by three months (<b>calendar-scroll-right-three-months</b>).</td>
</tr>
</table>
<p class="tab">The most basic calendar scroll commands scroll by one month at a time. This indicates there are two months of overlap between the display before the command and the display after. <b>&gt;</b> scrolls the calendar contents one month forward in time. <b>&lt;</b> scrolls the contents one month backwards in time.<br><br>The commands <b>C-v</b> and <b>M-v</b> scroll the calendar by an entire "screenful"&mdash;three months&mdash;in analogy with the usual meaning of these commands. <b>C-v</b> makes later dates visible and <b>M-v</b> makes earlier dates visible. These commands take a numeric argument as a repeat count; in particular, as <b>C-u</b> multiplies the next command by four, typing <b>C-u C-v</b> scrolls the calendar forward by a year and typing <b>C-u M-v</b> scrolls the calendar backward by a year.<br><br>The function keys <b>&lt;next&gt;</b> and <b>&lt;prior&gt;</b> are equivalent to <b>C-v</b> and <b>M-v</b>, only as they are in other modes.</p>
<h2 id="Counting-Days">Counting days</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>M-=</b></td>
<td>Display the number of days in the current region (<b>calendar-count-days-region</b>).</td>
</tr>
</table>
<p class="tab">To determine the number of days in a range, set the mark on one date using <b>C-SPC</b>, move point to another date, and type <b>M-=</b> (<b>calendar-count-days-region</b>). The numbers of days shown is inclusive; that is, it includes the days specified by mark and point.</p>
<h2 id="General-Calendar">Miscellaneous calendar commands</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>p d</b></td>
<td>Display day-in-year (<b>calendar-print-day-of-year</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-l</b></td>
<td>Regenerate the calendar window (<b>calendar-redraw</b>).</td>
</tr>
<tr class="tcw">
<td><b>SPC</b></td>
<td>Scroll the next window up (<b>scroll-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>DEL</b></td>
<td>Scroll the next window down (<b>scroll-other-window-down</b>).</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Exit from calendar (<b>calendar-exit</b>).</td>
</tr>
</table>
<p class="tab">To display the number of days elapsed since the start of the year, or the number of days remaining in the year, type the <b>p d</b> command (<b>calendar-print-day-of-year</b>). This displays both of those numbers in the echo area. The count of days elapsed includes the selected date. The count of days remaining does not include that date.<br><br>If the calendar window text gets corrupted, type <b>C-c C-l</b> (<b>calendar-redraw</b>) to redraw it. (This can only happen if you use non-Calendar-mode editing commands.)<br><br>In Calendar mode, you can use <b>SPC</b> (<b>scroll-other-window</b>) and <b>DEL</b> (<b>scroll-other-window-down</b>) to scroll the other window (if there is one) up or down, respectively. This is handy when you display a list of holidays or diary entries in another window.<br><br>To exit from the calendar, type <b>q</b> (<b>calendar-exit</b>). This buries all buffers related to the calendar, selecting other buffers. (If a frame contains a dedicated calendar window, exiting from the calendar deletes or iconifies that frame depending on the value of <b>calendar-remove-frame-by-deleting</b>.)</p>
<h2 id="Writing-Calendar-Files">Writing calendar files</h2>
<p class="tab">You can write calendars and diary entries to HTML and LaTeX files.<br><br>The Calendar HTML commands produce files of HTML code that contain calendar, holiday, and diary entries. Each file applies to one month, and has a name of the format <b>yyyy-mm.html</b>, where <b>yyyy</b> and <b>mm</b> are the four-digit year and two-digit month, respectively. The variable <b>cal-html-directory</b> specifies the default output directory for the HTML files. To prevent holidays from being shown, customize <b>cal-html-holidays</b>.<br><br>Diary entries enclosed by <b>&lt;</b> and <b>&gt;</b> are interpreted as HTML tags (for example: this is a diary entry with <b>&lt;font color="red"&gt;some red text&lt;/font&gt;</b>). You can change the overall appearance of the displayed HTML pages (for example, the color of various page elements, header styles) via a stylesheet <b>cal.css</b> in the directory containing the HTML files (see the value of the variable <b>cal-html-css-default</b> for relevant style settings).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>H m</b></td>
<td>Generate a one-month calendar (<b>cal-html-cursor-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>H y</b></td>
<td>Generate a calendar file for each month of a year, and an index page (<b>cal-html-cursor-year</b>). By default, this command writes files to a <b>yyyy</b> subdirectory&mdash;if this is altered some hyperlinks between years will not work.</td>
</tr>
</table>
<p class="tab">If the variable <b>cal-html-print-day-number-flag</b> is non-nil, then the monthly calendars show the <b>day-of-the-year</b> number. The variable <b>cal-html-year-index-cols</b> specifies the number of columns in the yearly index page.<br><br>The Calendar LaTeX commands produce a buffer of LaTeX code that prints as a calendar. Depending on the command you use, the printed calendar covers the day, week, month, or year where that point is located.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>t m</b></td>
<td>Generate a one-month calendar (<b>cal-tex-cursor-month</b>).</td>
</tr>
<tr class="tcw">
<td><b>t M</b></td>
<td>Generate a sideways-printing one-month calendar (<b>cal-tex-cursor-month-landscape</b>).</td>
</tr>
<tr class="tcw">
<td><b>t d</b></td>
<td>Generate a one-day calendar (<b>cal-tex-cursor-day</b>).</td>
</tr>
<tr class="tcw">
<td><b>t w 1</b></td>
<td>Generate a one-page calendar for one week, with hours (<b>cal-tex-cursor-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>t w 2</b></td>
<td>Generate a two-page calendar for one week, with hours (<b>cal-tex-cursor-week2</b>).</td>
</tr>
<tr class="tcw">
<td><b>t w 3</b></td>
<td>Generate an ISO-style calendar for one week, without hours (<b>cal-tex-cursor-week-iso</b>).</td>
</tr>
<tr class="tcw">
<td><b>t w 4</b></td>
<td>Generate a calendar for one Monday-starting week, with hours (<b>cal-tex-cursor-week-monday</b>).</td>
</tr>
<tr class="tcw">
<td><b>t w W</b></td>
<td>Generate a two-page calendar for one week, without hours (<b>cal-tex-cursor-week2-summary</b>).</td>
</tr>
<tr class="tcw">
<td><b>t f w</b></td>
<td>Generate a Filofax-style two-weeks-at-a-glance calendar (<b>cal-tex-cursor-filofax-2week</b>).</td>
</tr>
<tr class="tcw">
<td><b>t f W</b></td>
<td>Generate a Filofax-style one-week-at-a-glance calendar (<b>cal-tex-cursor-filofax-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>t y</b></td>
<td>Generate a calendar for one year (<b>cal-tex-cursor-year</b>).</td>
</tr>
<tr class="tcw">
<td><b>t Y</b></td>
<td>Generate a sideways-printing calendar for one year (<b>cal-tex-cursor-year-landscape</b>).</td>
</tr>
<tr class="tcw">
<td><b>t f y</b></td>
<td>Generate a Filofax-style calendar for one year (<b>cal-tex-cursor-filofax-year</b>).</td>
</tr>
</table>
<p class="tab">Some of these commands print the calendar sideways (in "landscape mode"), so it can be wider than it is long. Some of them use Filofax paper size (3.75in x 6.75in). All of these commands accept a prefix argument, which specifies how many days, weeks, months or years to print (starting always with the selected one).<br><br>If the variable <b>cal-tex-holidays</b> is non-nil (the default), then the printed calendars show the holidays in <b>calendar-holidays</b>. If the variable <b>cal-tex-diary</b> is non-nil (the default is <b>nil</b>), diary entries are included also (in monthly, filofax, and iso-week calendars only). If the variable <b>cal-tex-rules</b> is non-nil (the default is <b>nil</b>), the calendar displays ruled pages in styles that have sufficient room. Consult the documentation of the individual cal-tex functions to see which calendars support which features.<br><br>You can use the variable <b>cal-tex-preamble-extra</b> to insert extra LaTeX commands in the preamble of the generated document if you need to.</p>
<h2 id="Holidays">Holidays</h2>
<p class="tab">The Emacs calendar knows about many major and minor holidays, and can display them. You can also add holidays to the default list.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>Mouse-3 Holidays</b>, <b>h</b></td>
<td>Display holidays for the selected date (<b>calendar-cursor-holidays</b>).</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Mark holidays in the calendar window (<b>calendar-mark-holidays</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Unmark calendar window (<b>calendar-unmark</b>).</td>
</tr>
<tr class="tcw">
<td><b>a</b></td>
<td>List all holidays for the displayed three months in another window (<b>calendar-list-holidays</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x holidays</b></td>
<td>List all holidays for three months around today's date in another window.</td>
</tr>
<tr class="tcw">
<td><b>M-x list-holidays</b></td>
<td>List holidays in another window for a specified range of years.</td>
</tr>
</table>
<p class="tab">To see if any holidays fall on a given date, position point on that date in the calendar window and use the <b>h</b> command. Alternatively, click that date with <b>Mouse-3</b> and then choose Holidays from the menu that appears. Either way, this displays the holidays for that date, in the echo area if they fit there, otherwise in a separate window.<br><br>To view the distribution of holidays for all the dates shown in the calendar, use the <b>x</b> command. This displays the dates that are holidays in a different face. See <b>calendar-holiday-marker</b>. The command applies both to the currently visible months and to other months that subsequently become visible by scrolling. To turn marking off and erase the current marks, type <b>u</b>, erasing any diary marks (see <a href="#Diary">Diary</a>). If the variable <b>calendar-mark-holidays-flag</b> is non-nil, creating or updating the calendar marks holidays automatically.<br><br>To get even more detailed information, use the a command, which displays a separate buffer containing a list of all holidays in the current three-month range. You can use <b>&lt;SPC&gt;</b> and <b>&lt;DEL&gt;</b> in the calendar window to scroll that list up and down, respectively.<br><br>The command <b>M-x holidays</b> displays the list of holidays for the current month and the preceding and succeeding months; this works even if you don't have a calendar window. If the variable <b>calendar-view-holidays-initially-flag</b> is non-nil, creating the calendar displays holidays in this way. If you want the list of holidays centered around a different month, use <b>C-u M-x holidays</b>, which prompts for the month and year.<br><br>The holidays known to Emacs include United States holidays and the major Chinese, Christian, Islamic, and Jewant holidays; also the solstices and equinoxes.<br><br>The command <b>M-x holiday-list</b> displays the list of holidays for a range of years. This function asks you for the starting and stopping years, and allows you to choose all the holidays or one of several categories of holidays. You can use this command even if you don't have a calendar window.<br><br>The dates used by Emacs for holidays are based on current practice, not historical fact. For example Veteran's Day began in 1919, but is shown in earlier years.</p>
<h2 id="Sunrise_002fSunset">Times of sunrise and sunset</h2>
<p class="tab">Special calendar commands can tell you, to within a minute or two, the times of sunrise and sunset for any date.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px"><b>Mouse-3 Sunrise/sunset</b>, <b>S</b></td>
<td>Display times of sunrise and sunset for the selected date (<b>calendar-sunrise-sunset</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x sunrise-sunset</b></td>
<td>Display times of sunrise and sunset for today's date.</td>
</tr>
<tr class="tcw">
<td><b>C-u M-x sunrise-sunset</b></td>
<td>Display times of sunrise and sunset for a specified date.</td>
</tr>
<tr class="tcw">
<td><b>M-x calendar-sunrise-sunset-month</b></td>
<td>Display times of sunrise and sunset for the selected month.</td>
</tr>
</table>
<p class="tab">In the calendar, to display the local times of sunrise and sunset in the echo area, move point to the date you want, and type <b>S</b>. Alternatively, click <b>Mouse-3</b> on the date, then choose '<b>Sunrise/sunset</b>' from the menu that appears. The command <b>M-x sunrise-sunset</b> is available outside the calendar to display this information for today's date or a specified date. To specify a date other than today, use <b>C-u M-x sunrise-sunset</b>, which prompts for the year, month, and day.<br><br>You can display the times of sunrise and sunset for any location and any date with <b>C-u C-u M-x sunrise-sunset</b>. This asks you for a longitude, latitude, number of minutes difference from Coordinated Universal Time, and date, and then tells you the times of sunrise and sunset for that location on that date.<br><br>Because the times of sunrise and sunset depend on the location on earth, you need to tell Emacs your latitude, longitude, and location name before using these commands. Here is an example of what to set:</p>
<pre class="tab tcy">(setq calendar-latitude 40.1)
(setq calendar-longitude -88.2)
(setq calendar-location-name "Urbana, IL")</pre>
<p class="tab">Use one decimal place in the values of <b>calendar-latitude</b> and <b>calendar-longitude</b>.<br><br>Your time zone also affects the local time of sunrise and sunset. Emacs usually gets time zone information from the operating system, but if these values are not what you want (or if the operating system does not supply them), you must set them yourself. Here is an example:</p>
<pre class="tab tcy">(setq calendar-time-zone -360)
(setq calendar-standard-time-zone-name "CST")
(setq calendar-daylight-time-zone-name "CDT")</pre>
<p class="tab">The value of <b>calendar-time-zone</b> is the number of minutes difference between your local standard time and Coordinated Universal Time (Greenwich time). The values of <b>calendar-standard-time-zone-name</b> and <b>calendar-daylight-time-zone-name</b> are the abbreviations used in your time zone. Emacs displays the times of sunrise and sunset corrected for daylight saving time. See <a href="#Daylight-Saving">Daylight Saving</a>, for how daylight saving time is determined.<br><br>As a user, you might find it convenient to set the calendar location variables for your usual physical location in your .emacs file. If you are a system administrator, you may want to set these variables for all users in a default.el file. See <a href="#Init-File">Init File</a>.</p>
<h2 id="Lunar-Phases">Phases of the moon</h2>
<p class="tab">These calendar commands display the dates and times of the phases of the moon (new moon, first quarter, full moon, last quarter). This feature is useful for debugging problems that "depend on the phase of the moon".</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>M</b></td>
<td>Display the dates and times for all the quarters of the moon for the three-month period shown (<b>calendar-lunar-phases</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x lunar-phases</b></td>
<td>Display dates and times of the quarters of the moon for three months around today's date.</td>
</tr>
</table>
<p class="tab">In the calendar, use the <b>M</b> command to display a separate buffer of the phases of the moon for the current three-month range. The dates and times listed are accurate to within a few minutes.<br><br>Outside the calendar, use the command <b>M-x lunar-phases</b> to display the list of the phases of the moon for the current month and the preceding and succeeding months. For information about a different month, use <b>C-u M-x lunar-phases</b>, which prompts for the month and year.<br><br>The dates and times given for the phases of the moon are given in local time (corrected for daylight saving, when appropriate). See the discussion in the previous section. See <a href="#Sunrise_002fSunset">Sunrise/Sunset</a>.</p>
<h2 id="Other-Calendars">Conversion to and from other calendars</h2>
<p class="tab">The Emacs calendar displayed is always the Gregorian calendar, sometimes called the "new style" calendar, which is used in most of the world today. However, this calendar did not exist before the sixteenth century and was not widely used before the eighteenth century; it did not fully displace the Julian calendar and gain universal acceptance until the early twentieth century. The Emacs calendar can display any month since January, year 1 of the current era, but the calendar displayed is always the Gregorian, even for a date at which the Gregorian calendar did not exist.<br><br>While Emacs cannot display other calendars, it can convert dates to and from other calendars.</p>
<ul>
<li><a href="#Calendar-Systems">Calendar Systems</a>: The calendars Emacs understands (aside from Gregorian).</li>
<li><a href="#To-Other-Calendar">To Other Calendar</a>: Converting the selected date to various calendars.</li>
<li><a href="#From-Other-Calendar">From Other Calendar</a>: Moving to a date specified in another calendar.</li>
<li><a href="#Mayan-Calendar">Mayan Calendar</a>: Moving to a date specified in a Mayan calendar.</li>
</ul>
<h2 id="Calendar-Systems">Supported calendar systems</h2>
<p class="tab">The ISO commercial calendar is often used in business.<br><br>The Julian calendar, named after Julius Caesar, was the one used in Europe throughout medieval times, and in many countries up until the nineteenth century.<br><br>Astronomers use a simple counting of days elapsed since noon, Monday, January 1, 4713 B.C. on the Julian calendar. The number of days elapsed is called the Julian day number or the Astronomical day number.<br><br>The Hebrew calendar is used by tradition in the Jewant religion. The Emacs calendar program uses the Hebrew calendar to determine the dates of Jewant holidays. Hebrew calendar dates begin and end at sunset.<br><br>The Islamic calendar is used in many predominantly Islamic countries. Emacs uses it to determine the dates of Islamic holidays. There is no universal agreement in the Islamic world about the calendar; Emacs uses a widely accepted version, but the precise dates of Islamic holidays often depend on proclamation by religious authorities, not on calculations. As a consequence, the actual dates of observance can vary slightly from the dates computed by Emacs. Islamic calendar dates begin and end at sunset.<br><br>The French Revolutionary calendar was created by the Jacobins after the 1789 revolution, to represent a more secular and nature-based view of the annual cycle, and to install a 10-day week in a rationalization measure similar to the metric system. The French government officially abandoned this calendar at the end of 1805.<br><br>The Maya of Central America used three separate, overlapping calendar systems, the long count, the tzolkin, and the haab. Emacs knows about all three of these calendars. Experts dispute the exact correlation between the Mayan calendar and our calendar; Emacs uses the Goodman-Martinez-Thompson correlation in its calculations.<br><br>The Copts use a calendar based on the ancient Egyptian solar calendar. Their calendar consists of twelve 30-day months followed by an extra five-day period. Once every fourth year they add a leap day to this extra period to make it six days. The Ethiopic calendar is identical in structure, but has different year numbers and month names.<br><br>The Persians use a solar calendar based on a design of Omar Khayyam. Their calendar consists of twelve months of which the first six have 31 days, the next five have 30 days, and the last has 29 in ordinary years and 30 in leap years. Leap years occur in a complicated pattern every four or five years. The calendar implemented here is the arithmetical Persian calendar championed by Birashk, based on a 2,820-year cycle. It differs from the astronomical Persian calendar, which is based on astronomical events. As of this writing the first future discrepancy is projected to occur on March 20, 2025. It is currently not clear what the official calendar of Iran is at that time.<br><br>The Chinese calendar is a complicated system of lunar months arranged into solar years. The years go in cycles of sixty, each year containing either twelve months in an ordinary year or thirteen months in a leap year; each month has either 29 or 30 days. Years, ordinary months, and days are named by combining one of ten "celestial stems" with one of twelve "terrestrial branches" for a total of sixty names that are repeated in a cycle of sixty.</p>
<h2 id="To-Other-Calendar">Converting to other calendars</h2>
<p class="tab">The following commands describe the selected date (the date at point) in other calendar systems:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>Mouse-3 Other calendars</b>, <b>p o</b></td>
<td>Display the selected date in other calendars. (<b>calendar-print-other-dates</b>).</td>
</tr>
<tr class="tcw">
<td><b>p c</b></td>
<td>Display ISO commercial calendar equivalent for selected day (<b>calendar-iso-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p j</b></td>
<td>Display Julian date for selected day (<b>calendar-julian-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p a</b></td>
<td>Display astronomical (Julian) day number for selected day (<b>calendar-astro-print-day-number</b>).</td>
</tr>
<tr class="tcw">
<td><b>p h</b></td>
<td>Display Hebrew date for selected day (<b>calendar-hebrew-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p i</b></td>
<td>Display Islamic date for selected day (<b>calendar-islamic-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p f</b></td>
<td>Display French Revolutionary date for selected day (<b>calendar-french-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p b</b></td>
<td>Display Baha'i date for selected day (<b>calendar-bahai-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p C</b></td>
<td>Display Chinese date for selected day (<b>calendar-chinese-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p k</b></td>
<td>Display Coptic date for selected day (<b>calendar-coptic-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p e</b></td>
<td>Display Ethiopic date for selected day (<b>calendar-ethiopic-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p p</b></td>
<td>Display Persian date for selected day (<b>calendar-persian-print-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>p m</b></td>
<td>Display Mayan date for selected day (<b>calendar-mayan-print-date</b>).</td>
</tr>
</table>
<p class="tab">Otherwise, move point to the date you want to convert, then type the appropriate command starting with <b>p</b> from the table above. The prefix <b>p</b> is a mnemonic for "print", as Emacs "prints" the equivalent date in the echo area. <b>p o</b> displays the date in all forms known to Emacs. You can also use <b>Mouse-3</b> and then choose Other calendars from the menu that appears. This displays the equivalent forms of the date in all the calendars Emacs understands, in the form of a menu. (Choosing an alternative from this menu doesn't actually do anything&mdash;the menu is used only for display.)</p>
<h2 id="From-Other-Calendar">Converting from other calendars</h2>
<p class="tab">You can use the other supported calendars to specify a date for where to move. This section describes the commands for doing this using calendars other than Mayan; for the Mayan calendar, see the following section.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>g c</b></td>
<td>Move to a date specified in the ISO commercial calendar (<b>calendar-iso-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g w</b></td>
<td>Move to a week specified in the ISO commercial calendar (<b>calendar-iso-goto-week</b>).</td>
</tr>
<tr class="tcw">
<td><b>g j</b></td>
<td>Move to a date specified in the Julian calendar (<b>calendar-julian-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g a</b></td>
<td>Move to a date specified with an astronomical (Julian) day number (<b>calendar-astro-goto-day-number</b>).</td>
</tr>
<tr class="tcw">
<td><b>g b</b></td>
<td>Move to a date specified in the Baha'i calendar (<b>calendar-bahai-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g h</b></td>
<td>Move to a date specified in the Hebrew calendar (<b>calendar-hebrew-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g i</b></td>
<td>Move to a date specified in the Islamic calendar (<b>calendar-islamic-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g f</b></td>
<td>Move to a date specified in the French Revolutionary calendar (<b>calendar-french-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g C</b></td>
<td>Move to a date specified in the Chinese calendar (<b>calendar-chinese-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g p</b></td>
<td>Move to a date specified in the Persian calendar (<b>calendar-persian-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g k</b></td>
<td>Move to a date specified in the Coptic calendar (<b>calendar-coptic-goto-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g e</b></td>
<td>Move to a date specified in the Ethiopic calendar (<b>calendar-ethiopic-goto-date</b>).</td>
</tr>
</table>
<p class="tab">These commands ask you for a date on the other calendar, move point to the Gregorian calendar date equivalent to that date, and display the other calendar's date in the echo area. Emacs uses strict completion (see <a href="#Completion-Exit">Completion Exit</a>) whenever it asks you to type a month name, so you don't have to worry about the spelling of Hebrew, Islamic, or French names.<br><br>One common issue concerning the Hebrew calendar is the computation of the anniversary of a date of death, called a "yahrzeit". The Emacs calendar includes a facility for such calculations. If you are in the calendar, the command <b>M-x calendar-hebrew-list-yahrzeits</b> asks you for a range of years and then displays a list of the yahrzeit dates for those years for the date given by point. If you are not in the calendar, this command first asks you for the date of death and the range of years, and then displays the list of yahrzeit dates.</p>
<h2 id="Mayan-Calendar">Converting from the Mayan calendar</h2>
<p class="tab">Here are the commands to select dates based on the Mayan calendar:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>g m l</b></td>
<td>Move to a date specified by the long count calendar (<b>calendar-mayan-goto-long-count-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g m n t</b></td>
<td>Move to the next occurrence of a place in the tzolkin calendar (<b>calendar-mayan-next-tzolkin-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g m p t</b></td>
<td>Move to the previous occurrence of a place in the tzolkin calendar (<b>calendar-mayan-previous-tzolkin-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g m n h</b></td>
<td>Move to the next occurrence of a place in the haab calendar (<b>calendar-mayan-next-haab-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g m p h</b></td>
<td>Move to the previous occurrence of a place in the haab calendar (<b>calendar-mayan-previous-haab-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g m n c</b></td>
<td>Move to the next occurrence of a place in the calendar round (<b>calendar-mayan-next-calendar-round-date</b>).</td>
</tr>
<tr class="tcw">
<td><b>g m p c</b></td>
<td>Move to the previous occurrence of a place in the calendar round (<b>calendar-mayan-previous-calendar-round-date</b>).</td>
</tr>
</table>
<p class="tab">To understand these commands, you need to understand the Mayan calendars. The long count is a counting of days with these units:</p>
<pre class="tab">1 kin = 1 day
1 uinal = 20 kin
1 tun = 18 uinal
1 katun = 20 tun
1 baktun = 20 katun</pre>
<p class="tab">Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11 tun, 16 uinal, and 6 kin. The Emacs calendar can handle Mayan long count dates as early as 7.17.18.13.3, but no earlier. When you use the <b>g m l</b> command, type the Mayan long count date with the baktun, katun, tun, uinal, and kin separated by periods.<br><br>The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of independent cycles of 13 and 20 days. Since this cycle repeats endlessly, Emacs provides commands to move backward and forward to the previous or next point in the cycle. Type <b>g m p t</b> to go to the previous tzolkin date; Emacs asks you for a tzolkin date and moves point to the previous occurrence of that date. Similarly, type <b>g m n t</b> to go to the next occurrence of a tzolkin date.<br><br>The Mayan haab calendar is a cycle of 365 days arranged as 18 months of 20 days each, followed by a 5-day monthless period. Like the tzolkin cycle, this cycle repeats endlessly, and there are commands to move backward and forward to the previous or next point in the cycle. Type <b>g m p h</b> to go to the previous haab date; Emacs asks you for a haab date and moves point to the previous occurrence of that date. Similarly, type <b>g m n h</b> to go to the next occurrence of a haab date.<br><br>The Maya also used the combination of the tzolkin date and the haab date. This combination is a cycle of about 52 years called a calendar round. If you type <b>g m p c</b>, Emacs asks you for both a haab and a tzolkin date and then moves point to the previous occurrence of that combination. Use <b>g m n c</b> to move point to the next occurrence of a combination. These commands signal an error if the haab/tzolkin date combination you have typed is impossible.<br><br>Emacs uses strict completion (see <a href="#Completion-Exit">Completion Exit</a>) whenever it asks you to type a Mayan name, so you don't have to worry about spelling.</p>
<h2 id="Diary">The diary</h2>
<p class="tab">The Emacs diary keeps track of appointments or other events on a daily basis, in conjunction with the calendar. To use the diary feature, you must first create a diary file containing a list of events and their dates. Then Emacs can automatically pick out and display the events for today, for the immediate future, or for any specified date.<br><br>The name of the diary file is specified by the variable diary-file; <b>~/diary</b> is the default. Here's an example showing what that file looks like:</p>
<pre class="tab tcy">12/22/2012       Twentieth wedding anniversary!!
&amp;1/1.            Happy New Year!
10/22            Ruth's birthday.
* 21, *:         Payday
Tuesday--weekly  meeting with grad students at 10am
                 Supowit, Shen, Bitner, and Kapoor to attend.
1/13/89          Friday the thirteenth!!
&amp;thu 4pm         squash game with Lloyd.
mar 16           Dad's birthday
April 15, 2013   Income tax due.
&amp;* 15            time cards due.
</pre>
<p class="tab">This format is essentially the same as the one used by the separate calendar utility that is present on some Unix systems. This example uses extra spaces to align the event descriptions of most of the entries. Such formatting is purely a matter of taste.<br><br>Although you probably start by creating a diary manually, Emacs provides some commands to let you view, add, and change diary entries.</p>
<ul>
<li><a href="#Displaying-the-Diary">Displaying the Diary</a>: Viewing diary entries and associated calendar dates.</li>
<li><a href="#Format-of-Diary-File">Format of Diary File</a>: Entering events in your diary.</li>
<li><a href="#Date-Formats">Date Formats</a>: Various ways you can specify dates.</li>
<li><a href="#Adding-to-Diary">Adding to Diary</a>: Commands to create diary entries.</li>
<li><a href="#Special-Diary-Entries">Special Diary Entries</a>: Anniversaries, blocks of dates, cyclic entries, etc.</li>
</ul>
<h2 id="Displaying-the-Diary">Displaying the diary</h2>
<p class="tab">Once you have created a diary file, you can use the calendar to view it. You can also view today's events outside of Calendar mode. In the following, key bindings refer to the Calendar buffer.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>Mouse-3 Diary</b>, <b>d</b></td>
<td>Display all diary entries for the selected date (<b>diary-view-entries</b>).</td>
</tr>
<tr class="tcw">
<td><b>s</b></td>
<td>Display the entire diary file (<b>diary-show-all-entries</b>).</td>
</tr>
<tr class="tcw">
<td><b>m</b></td>
<td>Mark all visible dates that have diary entries (<b>diary-mark-entries</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Unmark the calendar window (<b>calendar-unmark</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x diary-print-entries</b></td>
<td>Print hard copy of the diary display as it appears.</td>
</tr>
<tr class="tcw">
<td><b>M-x diary</b></td>
<td>Display all diary entries for today's date.</td>
</tr>
<tr class="tcw">
<td><b>M-x diary-mail-entries</b></td>
<td>Mail yourself e-mail reminders about upcoming diary entries.</td>
</tr>
</table>
<p class="tab">Displaying the diary entries with d shows in a separate window the diary entries for the selected date in the calendar. The mode line of the new window shows the date of the diary entries. Holidays are shown either in the buffer or in the mode line, depending on the display method you choose (see <a href="#Diary-Display">Diary Display</a>). If you specify a numeric argument with <b>d</b>, it shows all the diary entries for that many successive days. Thus, <b>2 d</b> displays all the entries for the selected date and for the following day.<br><br>Another way to display the diary entries for a date is to click <b>Mouse-3</b> on the date, and then choose Diary entries from the menu that appears. If the variable <b>calendar-view-diary-initially-flag</b> is non-nil, creating the calendar lists the diary entries for the current date (provided the current date is visible).<br><br>To get a broader view of which days are mentioned in the diary, use the <b>m</b> command. This marks the dates that have diary entries in a different face. See <a href="#Calendar-Customizing">diary-entry-marker</a>.<br><br>This command applies both to the months that are currently visible and to those that subsequently become visible after scrolling. To turn marking off and erase the current marks, type <b>u</b>, turning off holiday marks (see <a href="#Holidays">Holidays</a>). If the variable <b>calendar-mark-diary-entries-flag</b> is non-nil, creating or updating the calendar marks diary dates automatically.<br><br>To see the full diary file, rather than only some of the entries, use the <b>s</b> command.<br><br>The command <b>M-x diary</b> displays the diary entries for the current date, independently of the calendar display, and optionally for the next few days as well; the variable <b>diary-number-of-entries</b> specifies how many days to include. See <b>diary-number-of-entries</b>.<br><br>If you put <b>(diary)</b> in your .emacs file, this automatically displays a window with the day's diary entries when you start Emacs.<br><br>Some people like to receive e-mail notifications of events in their diary. To send such mail to yourself, use the command <b>M-x diary-mail-entries</b>. A prefix argument specifies how many days (starting with today) to check; otherwise, the variable <b>diary-mail-days</b> says how many days.</p>
<h2 id="Format-of-Diary-File">The diary file</h2>
<p class="tab">Your diary file is a file that records events associated with particular dates. The name of the diary file is specified by the variable <b>diary-file</b> <b>~/diary</b> is the default. The calendar utility program supports a subset of the format allowed by the Emacs diary facilities, so you can use that utility to view the diary file, with reasonable results aside from the entries it cannot understand.<br><br>Each entry in the diary file describes one event and consists of one or more lines. An entry always begins with a date specification at the left margin. The rest of the entry is text to describe the event. If the entry has more than one line, then the lines after the first must begin with whitespace to indicate they continue a previous entry. Lines that do not begin with valid dates and do not continue a preceding entry are ignored.<br><br>You can also use a format where the first line of a diary entry consists only of the date or day name (with no following blanks or punctuation). For example:</p>
<pre class="tab tcy">02/11/2012
      Bill B. visits Princeton today
      2pm Cognitive Studies Committee meeting
      2:30-5:30 Liz at Lawrenceville
      4:00pm Dentist appt
      7:30pm Dinner at George's
      8:00-10:00pm concert
</pre>
<p class="tab">This entry has a different appearance if you use the simple diary display (see <a href="#Diary-Display">Diary Display</a>). The simple diary display omits the date line at the beginning; only the continuation lines appear. This style of entry looks neater when you display only a single day's entries, but can cause confusion if you ask for more than one day's entries.<br><br>You can inhibit the marking of certain diary entries in the calendar window; to do this, insert the string that <b>diary-nonmarking-symbol</b> specifies (default '<b>&amp;</b>') at the beginning of the entry, before the date. This has no effect on display of the entry in the diary window; it only affects marks on dates in the calendar window. Nonmarking entries are especially useful for generic entries that would otherwise mark many different dates.</p>
<h2 id="Date-Formats">Date formats</h2>
<p class="tab">Here are some sample diary entries, illustrating different ways of formatting a date. The examples all show dates in American order (month, day, year), but Calendar mode supports European order (day, month, year) and ISO order (year, month, day) as options.</p>
<pre class="tab tcy">4/20/12  Switch-over to new tabulation system
apr. 25  Start tabulating annual results
4/30  Results for April are due
*/25  Monthly cycle finishes
Friday  Don't leave without backing up files
</pre>
<p class="tab">The first entry appears only once, on April 20, 2012. The second and third appear every year on the specified dates, and the fourth uses a wildcard (asterisk) for the month, so it appears on the 25th of every month. The final entry appears every week on Friday.<br><br>You can use only numbers to express a date, as in '<b>month/day</b>' or '<b>month/day/year</b>'. This must be followed by a nondigit. In the date itself, month and day are numbers of one or two digits. The optional year is also a number, and may be abbreviated to the last two digits; that is, you can use '<b>11/12/2012</b>' or '<b>11/12/12</b>'.<br><br>Dates can also have the form '<b>monthname day</b>' or '<b>monthname day, year</b>', where the month's name can be spelled in full or abbreviated (with or without a period). The preferred abbreviations for month and day names can be set using the variables <b>calendar-abbrev-length</b>, <b>calendar-month-abbrev-array</b>, and <b>calendar-day-abbrev-array</b>. The default is to use the first three letters of a name as its abbreviation. Case is not significant.<br><br>A date may be generic; that is, partially unspecified. Then the entry applies to all dates that match the specification. If the date does not contain a year, it is generic and applies to any year. Alternatively, month, day, or year can be '<b>*</b>'; this matches any month, day, or year, respectively. Thus, a diary entry '<b>3/*/*</b>' matches any day in March of any year; so does '<b>march *</b>'.<br><br>If you prefer the European style of writing dates (where the day comes before the month), or the ISO style (where the order is year, month, day), type <b>M-x calendar-set-date-style</b> while in the calendar, or customize the variable <b>calendar-date-style</b>. This affects how diary dates are interpreted, date display, and the order that some commands expect their arguments to be given.<br><br>You can use the name of a day of the week as a generic date which applies to any date falling on that day of the week. You can abbreviate the day of the week as described above, or spell it in full; case is not significant.</p>
<h2 id="Adding-to-Diary">Commands to add to the diary</h2>
<p class="tab">While in the calendar, there's several commands to create diary entries. The basic commands are listed here; more sophisticated commands are in the next section (see <a href="#Special-Diary-Entries">Special Diary Entries</a>). Entries can also be based on non-Gregorian calendars. See <a href="#Non_002dGregorian-Diary">Non-Gregorian Diary</a>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>i d</b></td>
<td>Add a diary entry for the selected date (<b>diary-insert-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>i w</b></td>
<td>Add a diary entry for the selected day of the week (<b>diary-insert-weekly-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>i m</b></td>
<td>Add a diary entry for the selected day of the month (<b>diary-insert-monthly-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>i y</b></td>
<td>Add a diary entry for the selected day of the year (<b>diary-insert-yearly-entry</b>).</td>
</tr>
</table>
<p class="tab">You can make a diary entry for a specific date by selecting that date in the calendar window and typing the <b>i d</b> command. This command displays the end of your diary file in another window and inserts the date; you can then type the rest of the diary entry.<br><br>If you want to make a diary entry that applies to a specific day of the week, select that day of the week (any occurrence will do) and type <b>i w</b>. This inserts the day-of-week as a generic date; you can then type the rest of the diary entry. You can make a monthly diary entry in the same fashion: select the day of the month, use the <b>i m</b> command, and type the rest of the entry. Similarly, you can insert a yearly diary entry with the <b>i y</b> command.<br><br>All of the above commands make marking diary entries by default. To make a nonmarking diary entry, give a prefix argument to the command. For example, <b>C-u i w</b> makes a nonmarking weekly diary entry.<br><br>When you modify the diary file, save the file before exiting Emacs. Saving the diary file after using any of the insertion commands above automatically updates the diary marks in the calendar window, if appropriate. You can use the command <b>calendar-redraw</b> to force an update at any time.</p>
<h2 id="Special-Diary-Entries">Special diary entries</h2>
<p class="tab">In addition to entries based on calendar dates, the diary file can contain sexp entries for regular events such as anniversaries. These entries are based on Lisp expressions (sexps) that Emacs evaluates as it scans the diary file. Instead of a date, a sexp entry contains '<b>%%</b>' followed by a Lisp expression which must begin and end with parentheses. The Lisp expression determines which dates the entry applies.<br><br>Calendar mode provides commands to insert certain commonly used sexp entries:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>i a</b></td>
<td>Add an anniversary diary entry for the selected date (<b>diary-insert-anniversary-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>i b</b></td>
<td>Add a block diary entry for the current region (<b>diary-insert-block-entry</b>).</td>
</tr>
<tr class="tcw">
<td><b>i c</b></td>
<td>Add a cyclic diary entry starting at the date (<b>diary-insert-cyclic-entry</b>).</td>
</tr>
</table>
<p class="tab">If you want to make a diary entry that applies to the anniversary of a specific date, move point to that date and use the <b>i a</b> command. This displays the end of your diary file in another window and inserts the anniversary description; you can then type the rest of the diary entry. The entry looks like this:</p>
<pre class="tab tcy">%%(diary-anniversary 10 31 1948) Arthur's birthday</pre>
<p class="tab">This entry applies to October 31 in any year after 1948; '<b>10 31 1948</b>' specifies the date. (If you are using the European or ISO calendar style, the input order of month, day and year is different.) The reason this expression requires a beginning year is that advanced diary functions can use it to calculate the number of elapsed years.<br><br>A block diary entry applies to a specified range of consecutive dates. Here is a block diary entry that applies to all dates from June 24, 2012 through July 10, 2012:</p>
<pre class="tab tcy">%%(diary-block 6 24 2012 7 10 2012) Vacation</pre>
<p class="tab">The '<b>6 24 2012</b>' indicates the starting date and the '<b>7 10 2012</b>' indicates the stopping date. (Again, if you are using the European or ISO calendar style, the input order of month, day and year is different.)<br><br>To insert a block entry, place point and the mark on the two dates that begin and end the range, and type <b>i b</b>. This command displays the end of your diary file in another window and inserts the block description; you can then type the diary entry.<br><br>Cyclic diary entries repeat after a fixed interval of days. To create one, select the starting date and use the i c command. The command prompts for the length of interval, then inserts the entry, which looks like this:</p>
<pre class="tab tcy">%%(diary-cyclic 50 3 1 2012) Renew medication</pre>
<p class="tab">This entry applies to March 1, 2012, and every 50th day following; '<b>3 1 2012</b>' specifies the starting date. (If you are using the European or ISO calendar style, the input order of month, day and year is different.)<br><br>All three of these commands make marking diary entries. To insert a nonmarking entry, give a prefix argument to the command. For example, <b>C-u i a</b> makes a nonmarking anniversary diary entry.<br><br>Marking sexp diary entries in the calendar can be time-consuming, as every date visible in the calendar window must be individually checked. So it's a good idea to make sexp diary entries nonmarking (with '<b>&amp;</b>') when possible.<br><br>Another sophisticated kind of sexp entry, a floating diary entry, specifies a regularly occurring event by offsets specified in days, weeks, and months. It is comparable to a crontab entry interpreted by the cron utility. Here is a nonmarking, floating diary entry that applies to the fourth Thursday in November:</p>
<pre class="tab tcy">&amp;%%(diary-float 11 4 4) American Thanksgiving</pre>
<p class="tab">The 11 specifies November (the eleventh month), the 4 specifies Thursday (the fourth day of the week, where Sunday is numbered zero), and the second 4 specifies the fourth Thursday (1 would mean "first", 2 would mean "second", &minus;2 would mean "second-to-last", and so on). The month is a single month or a list of months. Thus you could change the 11 above to '<b>'(1 2 3)</b>' and have the entry apply to the last Thursday of January, February, and March. If the month is <b>t</b>, the entry applies to all months of the year.<br><br>Each of the standard sexp diary entries takes an optional parameter specifying the name of a face or a single-character string to use when marking the entry in the calendar. Most generally, sexp diary entries can perform arbitrary computations to determine when they apply. See <a href="#Sexp-Diary-Entries">Sexp Diary Entries</a>.</p>
<h2 id="Appointments">Appointments</h2>
<p class="tab">If you have a diary entry for an appointment, and that diary entry begins with a recognizable time of day, Emacs can warn you in advance that an appointment is pending. Emacs alerts you to the appointment by displaying a message in your chosen format, as specified by the variable <b>appt-display-format</b>. If the value of <b>appt-audible</b> is non-nil, the warning includes an audible reminder. Also, if <b>appt-display-mode-line</b> is non-nil, Emacs displays the number of minutes to the appointment on the mode line.<br><br>If <b>appt-display-format</b> has the value window, then the variable <b>appt-display-duration</b> controls how long the reminder window is visible for; and the variables <b>appt-disp-window-function</b> and <b>appt-delete-window-function</b> give the names of functions used to create and destroy the window, respectively.<br><br>To enable appointment notification, type <b>M-x appt-activate</b>. With a positive argument, it enables notification; with a negative argument, it disables notification; with no argument, it toggles. Enabling notification also sets up an appointment list for today from the diary file, giving all diary entries found with recognizable times of day, and reminds you only before each of them.<br><br>For example, suppose the diary file contains these lines:</p>
<pre class="tab">Monday 9:30am Coffee break 12:00pm Lunch</pre>
<p class="tab">Then on Mondays, you are reminded at around 9:20am about your coffee break and at around 11:50am about lunch. The variable <b>appt-message-warning-time</b> specifies how many minutes (default 12) in advance to warn you. This is a default warning time. Each appointment can specify a different warning time by adding a piece matching <b>appt-warning-time-regexp</b> (see that variable's documentation for details).<br><br>You can write times in am/pm style (with '<b>12:00am</b>' standing for midnight and '<b>12:00pm</b>' standing for noon), or 24-hour European/military style. You need not be consistent; your diary file can have a mixture of the two styles. Times must be at the beginning of diary entries if they are to be recognized.<br><br>Emacs updates the appointments list from the diary file automatically only after midnight. You can force an update at any time by re-enabling appointment notification. Both these actions also display the day's diary buffer, unless you set <b>appt-display-diary</b> to <b>nil</b>. The appointments list is also updated whenever the diary file (or a file it includes; see <a href="#Fancy-Diary-Display">Fancy Diary Display</a>) is saved.<br><br>You can also use the appointment notification facility like an alarm clock. The command <b>M-x appt-add</b> adds entries to the appointment list without affecting your diary file. You delete entries from the appointment list with <b>M-x appt-delete</b>.</p>
<h2 id="Importing-Diary">Importing and exporting diary entries</h2>
<p class="tab">You can transfer diary entries between Emacs diary files and a variety of other formats.<br><br>You can import diary entries from <a href="/jargon/o/outlook.htm">Outlook</a>-generated appointment messages. While viewing such a message in <a href="/unix/umail.htm">Rmail</a> or <b>Gnus</b>, do <b>M-x diary-from-outlook</b> to import the entry. You can make this command recognize additional appointment message formats by customizing the variable <b>diary-outlook-formats</b>.<br><br>The <b>icalendar</b> package allows you to transfer data between your Emacs diary file and iCalendar files, which are defined in "RFC 2445&mdash;Internet Calendaring and Scheduling Core Object Specification (iCalendar)" (and the earlier vCalendar format).<br><br>The command <b>icalendar-import-buffer</b> extracts iCalendar data from the current buffer and adds it to your diary file. This function is also suitable for automatic extraction of iCalendar data; for example with the Rmail mail client one could use:</p>
<pre class="tab">(add-hook 'rmail-show-message-hook 'icalendar-import-buffer)</pre>
<p class="tab">The command <b>icalendar-import-file</b> imports an iCalendar file and adds the results to an Emacs diary file. For example:</p>
<pre class="tab">(icalendar-import-file "/here/is/calendar.ics" "/there/goes/ical-diary")</pre>
<p class="tab">You can use an #include directive to add the import file contents to the main diary file, if these are different files. See <a href="#Fancy-Diary-Display">Fancy Diary Display</a>.<br><br>Use <b>icalendar-export-file</b> to interactively export an entire Emacs diary file to iCalendar format. To export only a part of a diary file, mark the relevant area, and call <b>icalendar-export-region</b>. In both cases, Emacs appends the result to the target file.</p>
<h2 id="Daylight-Saving">Daylight savings time</h2>
<p class="tab">Emacs understands the difference between standard time and daylight saving time&mdash;the times given for sunrise, sunset, solstices, equinoxes, and the phases of the moon take that into account. The rules for daylight saving time vary from place to place and have also varied historically from year to year. To do the job properly, Emacs needs to know which rules to use.<br><br>Some operating systems keep track of the rules that apply to the place where you are; on these systems, Emacs gets the information it needs from the system automatically. If some or all of this information is missing, Emacs fills in the gaps with the rules currently used in Cambridge, Massachusetts. If the resulting rules are not what you want, you can tell Emacs the rules to use by setting certain variables: <b>calendar-daylight-savings-starts</b> and <b>calendar-daylight-savings-ends</b>.<br><br>These values should be Lisp expressions that refer to the variable year, and evaluate to the Gregorian date on which daylight saving time starts or (respectively) ends, in the form of a list (month day year). The values should be nil if your area does not use daylight saving time.<br><br>Emacs uses these expressions to determine the starting date of daylight saving time for the holiday list and for correcting times of day in the solar and lunar calculations.<br><br>The values for Cambridge, Massachusetts are as follows:</p>
<pre class="tab">(calendar-nth-named-day 2 0 3 year) (calendar-nth-named-day 1 0 11 year)</pre>
<p class="tab">That is, the second 0th day (Sunday) of the third month (March) in the year specified by year, and the first Sunday of the eleventh month (November) of that year. If daylight saving time were changed to start on October 1, you would set <b>calendar-daylight-savings-starts</b> to this:</p>
<pre class="tab">(list 10 1 year)</pre>
<p class="tab">If there is no daylight saving time at your location, or if you want all times in standard time, set <b>calendar-daylight-savings-starts</b> and <b>calendar-daylight-savings-ends</b> to <b>nil</b>.<br><br>The variable <b>calendar-daylight-time-offset</b> specifies the difference between daylight saving time and standard time, measured in minutes. The value for Cambridge, Massachusetts is 60.<br><br>Finally, the two variables <b>calendar-daylight-savings-starts-time</b> and <b>calendar-daylight-savings-ends-time</b> specify the number of minutes after midnight local time when the transition to and from daylight saving time should occur. For Cambridge, Massachusetts both variables' values are 120.</p>
<h2 id="Time-Intervals">Summing time intervals</h2>
<p class="tab">The <b>timeclock</b> package adds up time intervals, so you can (for instance) keep track of how much time you spend working on particular projects.<br><br>Use the <b>M-x timeclock-in</b> command when you start working on a project, and <b>M-x timeclock-out</b> command when you're done. Each time you do this, it adds one time interval to the record of the project. You can change to working on a different project with <b>M-x timeclock-change</b>.<br><br>Once you've collected data from some time intervals, you can use <b>M-x timeclock-workday-remaining</b> to see how much time is left to work today (assuming a typical average of 8 hours a day), and <b>M-x timeclock-when-to-leave</b> which will calculate when you're "done".<br><br>If you want Emacs to display the amount of time "left" of your workday in the mode line, either customize the <b>timeclock-modeline-display</b> variable and set its value to <b>t</b>, or invoke the <b>M-x timeclock-modeline-display</b> command.<br><br>Terminating the current Emacs session might or might not mean that you have stopped working on the project and, by default, Emacs asks you. You can, however, customize the value of the variable <b>timeclock-ask-before-exiting</b> to <b>nil</b> to avoid the question; then, only an explicit <b>M-x timeclock-out</b> or <b>M-x timeclock-change</b> will tell Emacs that the current interval is over.<br><br>The timeclock functions work by accumulating the data in a file called <b>.timelog</b> in your home directory. You can specify a different name for this file by customizing the variable <b>timeclock-file</b>. If you edit the timeclock file manually, or if you change the value of any of timeclock's customizable variables, run the command <b>M-x timeclock-reread-log</b> to update the data in Emacs from the file.</p>
<h2 id="Advanced-Calendar_002fDiary-Usage">Advanced calendar/diary usage</h2>
<p class="tab">This section describes some of the more advanced/specialized features of the calendar and diary. It starts with some of the many ways that you can customize the calendar and diary to suit your tastes.</p>
<ul>
<li><a href="#Calendar-Customizing">Calendar Customizing</a>: Calendar layout and hooks.</li>
<li><a href="#Holiday-Customizing">Holiday Customizing</a>: Defining your holidays.</li>
<li><a href="#Date-Display-Format">Date Display Format</a>: Changing the format.</li>
<li><a href="#Time-Display-Format">Time Display Format</a>: Changing the format.</li>
<li><a href="#Diary-Customizing">Diary Customizing</a>: Defaults you can set.</li>
<li><a href="#Non_002dGregorian-Diary">Non-Gregorian Diary</a>: Diary entries based on other calendars.</li>
<li><a href="#Diary-Display">Diary Display</a>: A choice of ways to display the diary.</li>
<li><a href="#Fancy-Diary-Display">Fancy Diary Display</a>: Sorting diary entries, using included diary files.</li>
<li><a href="#Sexp-Diary-Entries">Sexp Diary Entries</a>: More flexible diary entries.</li>
</ul>
<h2 id="Calendar-Customizing">Customizing the calendar</h2>
<p class="tab">The calendar display unfortunately cannot be changed from three months, but you can customize the whitespace used by setting the variables: <b>calendar-left-margin</b>, <b>calendar-day-header-width</b>, <b>calendar-day-digit-width</b>, <b>calendar-column-width</b>, and <b>calendar-intermonth-spacing</b>. To display text between the months, for example week numbers, customize the variables <b>calendar-intermonth-header</b> and <b>calendar-intermonth-text</b> as described in their documentation.<br><br>The variable <b>calendar-month-header</b> controls the text that appears above each month in the calendar. By default, it shows the month and year.<br><br>The variable <b>calendar-holiday-marker</b> specifies how to mark a date that is a holiday. Its value may be a single-character string to insert next to the date, or a face name to use for displaying the date. Likewise, the variable <b>diary-entry-marker</b> specifies how to mark a date with diary entries. The function <b>calendar-mark-today</b> uses <b>calendar-today-marker</b> to mark today's date. By default, the calendar uses faces named <b>holiday</b>, <b>diary</b>, and <b>calendar-today</b> for these purposes.<br><br>The variable <b>calendar-load-hook</b> is a normal hook run when the calendar package is first loaded (before actually starting to display the calendar).<br><br>Starting the calendar runs the normal hook <b>calendar-initial-window-hook</b>. Recomputation of the calendar display does not run this hook. But if you leave the calendar with the <b>q</b> command and reenter it, the hook runs again.<br><br>The variable <b>calendar-today-visible-hook</b> is a normal hook run after the calendar buffer is prepared with the calendar, when the current date is visible in the window. One use of this hook is to mark today's date; to do that use either of the functions <b>calendar-mark-today</b> or <b>calendar-star-date</b>:</p>
<pre class="tab">(add-hook 'calendar-today-visible-hook 'calendar-mark-today)</pre>
<p class="tab">A similar normal hook, <b>calendar-today-invisible-hook</b> is run if the current date is not visible in the window.<br><br>Each of the calendar cursor motion commands runs the hook <b>calendar-move-hook</b> after it moves the cursor.</p>
<h2 id="Holiday-Customizing">Customizing the holidays</h2>
<p class="tab">There's several variables listing the default holidays that Emacs knows. These are: <b>holiday-general-holidays</b>, <b>holiday-local-holidays</b>, <b>holiday-solar-holidays</b>, <b>holiday-bahai-holidays</b>, <b>holiday-christian-holidays</b>, <b>holiday-hebrew-holidays</b>, <b>holiday-islamic-holidays</b>, <b>holiday-oriental-holidays</b>, and <b>holiday-other-holidays</b>. The names should be self-explanatory; e.g., <b>holiday-solar-holidays</b> lists sun and moon-related holidays.<br><br>You can customize these lists, delete or add holidays as described below. Set any of them to <b>nil</b> to not show the associated holidays.<br><br>The general holidays are, by default, holidays common throughout the United States. In contrast, <b>holiday-local-holidays</b> and <b>holiday-other-holidays</b> are both empty by default. These are intended for system-wide settings and your individual use, respectively.<br><br>By default, Emacs does not include all the holidays of the religions that it knows, only those commonly found in secular calendars. For a more extensive collection of religious holidays, you can set any (or all) of the variables <b>calendar-bahai-all-holidays-flag</b>, <b>calendar-christian-all-holidays-flag</b>, <b>calendar-hebrew-all-holidays-flag</b>, or <b>calendar-islamic-all-holidays-flag</b> to <b>t</b>.<br><br>Each of the holiday variables is a list of holiday forms, each form describing a holiday (or sometimes a list of holidays). Here is a table of the possible kinds of holiday form. Day numbers and month numbers count starting from 1, but "dayname" numbers count Sunday as 0. The argument string is always the description of the holiday, as a string.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:360px"><b>(holiday-fixed month day string)</b></td>
<td>A fixed date on the Gregorian calendar.</td>
</tr>
<tr class="tcw">
<td><b>(holiday-float month dayname</b> <i>k</i> <b>string &amp;optional day)</b></td>
<td>The <i>k</i>th dayname (dayname=0 for Sunday, and so on) after or before Gregorian date month, day. Negative <i>k</i> means count back from the end of the month. Optional day defaults to 1 if <i>k</i> is positive, and the last day of month otherwise.</td>
</tr>
<tr class="tcw">
<td><b>(holiday-chinese month day string)</b></td>
<td>A fixed date on the Chinese calendar.</td>
</tr>
<tr class="tcw">
<td><b>(holiday-hebrew month day string)</b></td>
<td>A fixed date on the Hebrew calendar.</td>
</tr>
<tr class="tcw">
<td><b>(holiday-islamic month day string)</b></td>
<td>A fixed date on the Islamic calendar.</td>
</tr>
<tr class="tcw">
<td><b>(holiday-julian month day string)</b></td>
<td>A fixed date on the Julian calendar.</td>
</tr>
<tr class="tcw">
<td><b>(holiday-sexp sexp string)</b></td>
<td>A date calculated by the Lisp expression sexp. The expression should use the variable year to compute and return the date of a holiday in the form of a list (month day year), or nil if the holiday doesn't happen this year.</td>
</tr>
<tr class="tcw">
<td><b>(if condition holiday-form)</b></td>
<td>A holiday that happens only if condition is true.</td>
</tr>
<tr class="tcw">
<td><b>(function [args])</b></td>
<td>A list of dates calculated by the function <i>function</i>, called with arguments <i>args</i>.</td>
</tr>
</table>
<p class="tab">For example, suppose you want to add Bastille Day, celebrated in France on July 14 (i.e., the fourteenth day of the seventh month). You can do this as follows:</p>
<pre class="tab">(setq holiday-other-holidays '((holiday-fixed 7 14 "Bastille Day")))</pre>
<p class="tab">Many holidays occur on a specific day of the week, at a specific time of month. Here is a holiday form describing Hurricane Supplication Day, celebrated in the Virgin Islands on the fourth Monday in August:</p>
<pre class="tab">(holiday-float 8 1 4 "Hurricane Supplication Day")</pre>
<p class="tab">Here the 8 specifies August, the 1 specifies Monday (Sunday is 0, Tuesday is 2, and so on), and the 4 specifies the fourth occurrence in the month (1 specifies the first occurrence, 2 the second occurrence, &minus;1 the last occurrence, &minus;2 the second-to-last occurrence, and so on).<br><br>You can specify holidays that occur on fixed days of the Baha'i, Chinese, Hebrew, Islamic, and Julian calendars too. For example,</p>
<pre class="tab">(setq holiday-other-holidays '((holiday-hebrew 10 2 "Last day of Hanukkah") (holiday-islamic 3 12 "Mohammed's Birthday") (holiday-julian 4 2 "Jefferson's Birthday")))</pre>
<p class="tab">Adds the last day of Hanukkah (since the Hebrew months are numbered with 1 starting from Nisan), the Islamic feast celebrating Mohammed's birthday (since the Islamic months are numbered from 1 starting with Muharram), and Thomas Jefferson's birthday, which is 2 April 1743 on the Julian calendar.<br><br>To include a holiday conditionally, use either Emacs Lisp's <b>if</b> or the <b>holiday-sexp</b> form. For example, American presidential elections occur on the first Tuesday after the first Monday in November of years divisible by 4:</p>
<pre class="tab">(holiday-sexp '(if (zerop (% year 4)) (calendar-gregorian-from-absolute (1+ (calendar-dayname-on-or-before 1 (+ 6 (calendar-absolute-from-gregorian (list 11 1 year))))))) "US Presidential Election")</pre>
<p class="tab">Or</p>
<pre class="tab">(if (zerop (% displayed-year 4)) (holiday-fixed 11 (calendar-extract-day (calendar-gregorian-from-absolute (1+ (calendar-dayname-on-or-before 1 (+ 6 (calendar-absolute-from-gregorian (list 11 1 displayed-year))))))) "US Presidential Election"))</pre>
<p class="tab">Some holidays only don't fit into any of these forms because special calculations are involved in their determination. In such cases you must write a Lisp function to do the calculation. To include eclipses, for example, add <b>(eclipses)</b> to <b>holiday-other-holidays</b> and write an Emacs Lisp function eclipses that returns a <b>(possibly empty)</b> list of the relevant Gregorian dates among the range visible in the calendar window, with descriptive strings, like this:</p>
<pre class="tab">(((6 4 2012) "Lunar Eclipse") ((11 13 2012) "Solar Eclipse") ... )</pre>
<h2 id="Date-Display-Format">Date display format</h2>
<p class="tab">You can customize the way dates are displayed in the diary, mode lines, and messages by setting <b>calendar-date-display-form</b>. This variable holds a list of expressions that involve the variables month, day, and year, which are all numbers in string form, and monthname and dayname, which are both alphabetic strings. In the American style, the default value of this list is as follows:</p>
<pre class="tab">((if dayname (concat dayname ", ")) monthname " " day ", " year)</pre>
<p class="tab">While in the European style this value is the default:</p>
<pre class="tab">((if dayname (concat dayname ", ")) day " " monthname " " year)</pre>
<p class="tab">The default ISO date representation is:</p>
<pre class="tab">((format "%s-%.2d-%.2d" year (string-to-number month) (string-to-number day)))</pre>
<p class="tab">Another typical American format is:</p>
<pre class="tab">(month "/" day "/" (substring year -2))</pre>
<h2 id="Time-Display-Format">Time display format</h2>
<p class="tab">The calendar and diary by default display times of day in the conventional American style with the hours from 1 through 12, minutes, and either '<b>am</b>' or '<b>pm</b>'. If you prefer the European style, also known in the US as military, where the hours go from 00 to 23, you can alter the variable <b>calendar-time-display-form</b>. This variable is a list of expressions that involve the variables 12-hours, 24-hours, and minutes, which are all numbers in string form, and am-pm and time-zone, which are both alphabetic strings. The default value is:</p>
<pre class="tab">(12-hours ":" minutes am-pm (if time-zone " (") time-zone (if time-zone ")"))</pre>
<p class="tab">Here is a value that provides European style times:</p>
<pre class="tab">(24-hours ":" minutes (if time-zone " (") time-zone (if time-zone ")"))</pre>
<p class="tab">Note that few calendar functions return a time of day (at present, only solar functions).</p>
<h2 id="Diary-Customizing">Customizing the diary</h2>
<p class="tab">Ordinarily, the diary window indicates any holidays that fall on the date of the diary entries, either in the mode line or the buffer itself. Checking for holidays can be slow, depending on the defined holidays. In that case, setting <b>diary-show-holidays-flag</b> to <b>nil</b> will speed up the diary display.<br><br>The variable <b>diary-number-of-entries</b> controls the number of days of diary entries to be displayed at one time. It affects the initial display when <b>calendar-view-diary-initially-flag</b> is <b>t</b>, and the command <b>M-x diary</b>. For example, a value of 1 (the default) displays only the current day's diary entries, whereas a value of 2 also shows the next day's entries. The value can also be a vector of seven integers: for example, if the value is [0 2 2 2 2 4 1] then no diary entries appear on Sunday, the current date's and the next day's diary entries appear Monday through Thursday, Friday through Monday's entries appear on Friday, while on Saturday only that day's entries appear.<br><br>You can customize the form of dates in your diary file by setting the variable <b>diary-date-forms</b>. This variable is a list of patterns for recognizing a date. Each date pattern is a list whose elements may be regular expressions or the symbols month, day, year, monthname, and dayname. All these elements serve as patterns that match certain kinds of text in the diary file. In order for the date pattern as a whole to match, all its elements must match consecutively.<br><br>A regular expression in a date pattern matches in its usual fashion, using the standard syntax table altered so that '<b>*</b>' is a word constituent.<br><br>The symbols <b>month</b>, <b>day</b>, <b>year</b>, <b>monthname</b>, and <b>dayname</b> match the month number, day number, year number, month name, and day name of the date being considered. The symbols that match numbers allow leading zeros; those that match names allow capitalization and abbreviation (as specified by <b>calendar-month-abbrev-array</b> and <b>calendar-day-abbrev-array</b>). All the symbols can match '<b>*</b>'; since '<b>*</b>' in a diary entry means "any day", "any month", and so on, it should match regardless of the date being considered.<br><br>The default value of <b>diary-date-forms</b> in the American style is provided by <b>diary-american-date-forms</b>:</p>
<pre class="tab">((month "/" day "[^/0-9]") (month "/" day "/" year "[^0-9]") (monthname " *" day "[^,0-9]") (monthname " *" day ", *" year "[^0-9]") (dayname "\\W"))</pre>
<p class="tab">The variables <b>diary-european-date-forms</b> and <b>diary-iso-date-forms</b> provide other default styles.<br><br>The date patterns in the list must be mutually exclusive and must not match any portion of the diary entry itself, only the date and one character of whitespace. If, to be mutually exclusive, the pattern must match a portion of the diary entry text&mdash;beyond the whitespace that ends the date&mdash;then the first element of the date pattern must be backup. This causes the date recognizer to back up to the beginning of the current word of the diary entry, after finishing the match. Even if you use backup, the date pattern must absolutely not match more than a portion of the first word of the diary entry. For example, the default value of <b>diary-european-date-forms</b> is:</p>
<pre class="tab">((day "/" month "[^/0-9]") (day "/" month "/" year "[^0-9]") (backup day " *" monthname "\\W+\\&lt;\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)") (day " *" monthname " *" year "[^0-9]") (dayname "\\W"))</pre>
<p class="tab">Notice the use of backup in the third pattern, because it needs to match part of a word beyond the date itself to distinguish it from the fourth pattern.</p>
<h2 id="Non_002dGregorian-Diary">Diary entries using non-Gregorian calendars</h2>
<p class="tab">Like entries based on the standard Gregorian calendar, your diary can have entries based on Baha'i, Hebrew, or Islamic dates. Recognition of such entries can be time-consuming, however, and since most people don't use them, you must explicitly enable their use. If you want the diary to recognize Hebrew-date diary entries, for example, you must do this:</p>
<pre class="tab">(add-hook 'diary-nongregorian-listing-hook 'diary-hebrew-list-entries) (add-hook 'diary-nongregorian-marking-hook 'diary-hebrew-mark-entries)</pre>
<p class="tab">Similarly, for Islamic and Baha'i entries, add <b>diary-islamic-list-entries</b> and <b>diary-islamic-mark-entries</b>, or <b>diary-bahai-list-entries</b> and <b>diary-bahai-mark-entries</b>.<br><br>These diary entries have the same formats as Gregorian-date diary entries; except that <b>diary-bahai-entry-symbol</b> (default '<b>B</b>') must precede a Baha'i date, <b>diary-hebrew-entry-symbol</b> (default '<b>H</b>') a Hebrew date, and <b>diary-islamic-entry-symbol</b> (default '<b>I</b>') an Islamic date. Moreover, non-Gregorian month names may not be abbreviated (because the first three letters are often not unique). (Note also that you must use "Adar I" if you want Adar of a common Hebrew year.) For example, a diary entry for the Hebrew date Heshvan 25 could look like this:</p>
<pre class="tab">HHeshvan 25 Happy Hebrew birthday!</pre>
<p class="tab">It would appear in the diary for any date that corresponds to Heshvan 25 on the Hebrew calendar. And here is an Islamic-date diary entry that matches Dhu al-Qada 25:</p>
<pre class="tab">IDhu al-Qada 25 Happy Islamic birthday!</pre>
<p class="tab">As with Gregorian-date diary entries, non-Gregorian entries are nonmarking if preceded by <b>diary-nonmarking-symbol</b> (default '<b>&amp;</b>').<br><br>Here is a table of commands used in the calendar to create diary entries that match the selected date and other dates that are similar in the Baha'i, Hebrew, or Islamic calendars:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>i h d</b></td>
<td>diary-hebrew-insert-entry</td>
</tr>
<tr class="tcw">
<td><b>i h m</b></td>
<td>diary-hebrew-insert-monthly-entry</td>
</tr>
<tr class="tcw">
<td><b>i h y</b></td>
<td>diary-hebrew-insert-yearly-entry</td>
</tr>
<tr class="tcw">
<td><b>i i d</b></td>
<td>diary-islamic-insert-entry</td>
</tr>
<tr class="tcw">
<td><b>i i m</b></td>
<td>diary-islamic-insert-monthly-entry</td>
</tr>
<tr class="tcw">
<td><b>i i y</b></td>
<td>diary-islamic-insert-yearly-entry</td>
</tr>
<tr class="tcw">
<td><b>i B d</b></td>
<td>diary-bahai-insert-entry</td>
</tr>
<tr class="tcw">
<td><b>i B m</b></td>
<td>diary-bahai-insert-monthly-entry</td>
</tr>
<tr class="tcw">
<td><b>i B y</b></td>
<td>diary-bahai-insert-yearly-entry</td>
</tr>
</table>
<p class="tab">These commands work much like the corresponding commands for ordinary diary entries: they apply to the date that point is on in the calendar window, and what they do is insert only the date portion of a diary entry at the end of your diary file. You must then insert the rest of the diary entry. The basic commands add an entry for the specific non-Gregorian date, the '<b>monthly</b>' commands for the given non-Gregorian day-within-month in every month, and the '<b>yearly</b>' commands for the given non-Gregorian day and month in every year.</p>
<h2 id="Diary-Display">Diary display</h2>
<p class="tab">Diary display works by preparing the list of diary entries and then running the function specified by the variable <b>diary-display-function</b>. The default value <b>diary-fancy-display</b> displays diary entries and holidays by copying them into a special buffer that exists only for the sake of display. Copying diary entries to a separate buffer provides an opportunity to change the displayed text to make it prettier&mdash;for example, to sort the entries by the dates they apply.<br><br>Ordinarily, the fancy diary buffer does not show days for which there are no diary entries, even if that day is a holiday. If you want such days to show in the fancy diary buffer, set the variable <b>diary-list-include-blanks</b> to <b>t</b>.<br><br>The fancy diary buffer enables View mode (see <a href="#View-Mode">View Mode</a>).<br><br>The alternative display method <b>diary-simple-display</b> shows the actual diary buffer, and uses invisible text to hide entries that don't apply. Holidays are shown in the mode line. The advantage of this method is that you can edit the buffer and save your changes directly to the diary file. This method is not as flexible as the fancy method, however. For example, it cannot sort entries. Another disadvantage is that invisible text can be confusing. For example, if you copy a region of text to paste it elsewhere, invisible text may be included. Similarly, because the diary buffer as you see it is an illusion, printing the buffer may not print what you see on your screen.<br><br>For this reason, there is a special command to print hard copy of the diary buffer as it appears; this command is <b>M-x diary-print-entries</b>. It works with either display method, although with the fancy display you can also print the buffer like any other. To print a hard copy of a day-by-day diary for a week, position point on the first day of the week, type <b>7 d</b>, and then do <b>M-x diary-print-entries</b>. As usual, the inclusion of the holidays slows down the display slightly; you can speed things up by setting the variable <b>diary-show-holidays-flag</b> to <b>nil</b>.<br><br>This command prepares a temporary buffer containing only the diary entries currently visible in the diary buffer. Unlike with the simple display, the other irrelevant entries are really absent, not only hidden. After preparing the buffer, it runs the hook <b>diary-print-entries-hook</b>. The default value of this hook sends the data directly to the printer with the command <b>lpr-buffer</b> (see <a href="#Printing">Printing</a>). If you want to use a different command to do the printing, only change the value of this hook. Other uses might include, for example, rearranging the lines into order by day and time.<br><br>You can edit the diary entries as they appear in the simple diary window, but it is important to remember that the buffer displayed contains the entire diary file, with portions of it concealed from view. This means, for instance, that the <b>C-f</b> (<b>forward-char</b>) command can put point at what appears to be the end of the line, but what is in reality the middle of some concealed line.<br><br>Be careful when editing the diary entries in the simple display! Inserting additional lines or adding/deleting characters in the middle of a visible line cannot cause problems, but editing at the end of a line may not do what you expect. Deleting a line may delete other invisible entries that follow it. Before editing the simple diary buffer, it is best to display the entire file with <b>s</b> (<b>diary-show-all-entries</b>).</p>
<h2 id="Fancy-Diary-Display">Fancy diary display</h2>
<p class="tab">The following features only work with the fancy diary display.<br><br>You can use the normal hook <b>diary-list-entries-hook</b> to sort each day's diary entries by their time of day. Here's how:</p>
<pre class="tab">(add-hook 'diary-list-entries-hook 'diary-sort-entries t)</pre>
<p class="tab">For each day, this sorts diary entries that begin with a recognizable time of day according to their times. Diary entries without times come first within each day. Note how the sort command is placed at the end of the hook list, in case earlier members of the list change the order of the diary entries, or add items.<br><br>You can write '<b>comments</b>' in diary entries, by setting the variables <b>diary-comment-start</b> and <b>diary-comment-end</b> to strings that delimit comments. The fancy display does not print comments. You might want to put meta-data for the use of other packages (e.g., the appointment package, see <a href="#Appointments">Appointments</a>) inside comments.<br><br>Your main diary file can include other files. This permits a group of people to share a diary file for events that apply to all of them. Lines in the diary file starting with <b>diary-include-string</b>:</p>
<pre class="tab">#include "filename"</pre>
<p class="tab">Include the diary entries from the file <i>filename</i> in the fancy diary buffer. The include mechanism is recursive, so that included files can include other files, and so on (you must be careful not to have a cycle of inclusions, of course). Here is how to enable the include facility:</p>
<pre class="tab">(add-hook 'diary-list-entries-hook 'diary-include-other-diary-files) (add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)</pre>
<p class="tab">The include mechanism works only with the fancy diary display, because simple diary display shows the entries directly from your diary file.</p>
<h2 id="Sexp-Diary-Entries">Sexp entries and the fancy diary display</h2>
<p class="tab">Sexp diary entries allow you to do more than only have complicated conditions under which a diary entry applies. Sexp entries should be preceded by <b>diary-sexp-entry-symbol</b> (default '<b>%%</b>') in the diary file. With the fancy diary display, sexp entries can generate the text of the entry depending on the date itself.<br><br>For example, an anniversary diary entry can insert the number of years since the anniversary date into the text of the diary entry. Thus the '<b>%d</b>' in this diary entry:</p>
<pre class="tab">%%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)</pre>
<p class="tab">Gets replaced by the age, so on October 31, 1990 the entry appears in the fancy diary buffer like this:</p>
<pre class="tab">Arthur's birthday (42 years old)</pre>
<p class="tab">If the diary file instead contains this entry:</p>
<pre class="tab">%%(diary-anniversary 10 31 1948) Arthur's %d%s birthday</pre>
<p class="tab">The entry in the fancy diary buffer for October 31, 1990 appears like this:</p>
<pre class="tab">Arthur's 42nd birthday</pre>
<p class="tab">Similarly, cyclic diary entries can interpolate the number of repetitions that have occurred:</p>
<pre class="tab">%%(diary-cyclic 50 1 1 2012) Renew medication (%d%s time)</pre>
<p class="tab">Looks like this:</p>
<pre class="tab">Renew medication (5th time)</pre>
<p class="tab">In the fancy diary display on September 7, 2012.<br><br>There is an "early reminder" diary sexp that includes its entry in the diary not only on the date of occurrence, but also on earlier dates. For example, if you want a reminder a week before your anniversary, you can use</p>
<pre class="tab">%%(diary-remind '(diary-anniversary 12 22 1968) 7) Ed's anniversary</pre>
<p class="tab">And the fancy diary shows '<b>Ed's anniversary</b>' both on December 15 and on December 22.<br><br>The function diary-date applies to dates described by a month, day, year combination, each of which is an integer, a list of integers, or <b>t</b> (meaning all values). For example,</p>
<pre class="tab">%%(diary-date '(10 11 12) 22 t) Rake leaves</pre>
<p class="tab">Causes the fancy diary to show</p>
<pre class="tab">Rake leaves</pre>
<p class="tab">On October 22, November 22, and December 22 of every year.<br><br>The function <b>diary-float</b> allows you to describe diary entries that apply to dates like the third Friday of November, or the last Tuesday in April. The parameters are the month, dayname, and an index <i>n</i>. The entry appears on the <i>n</i>th dayname after the first day of month, where dayname=0 means Sunday, 1 means Monday, etc. If <i>n</i> is negative it counts backward from the end of month. The value of month is a list of months, a single month, or <b>t</b> to specify all months. You can also use an optional parameter day to specify the nth dayname on or after/before day of month; the value of day defaults to 1 if <i>n</i> is positive and to the last day of month if <i>n</i> is negative. For example,</p>
<pre class="tab">%%(diary-float t 1 -1) Pay rent</pre>
<p class="tab">Causes the fancy diary to show</p>
<pre class="tab">Pay rent</pre>
<p class="tab">On the last Monday of every month.<br><br>The generality of sexp diary entries lets you specify any diary entry that you can describe algorithmically. A sexp diary entry contains an expression that computes whether the entry applies to any given date. If its value is non-nil, the entry applies to that date; otherwise, it does not. The expression can use the variable date to find the date being considered; its value is a list (month day year) that refers to the Gregorian calendar.<br><br>The sexp diary entry applies to a date when the expression's value is non-nil, but some values have more specific meanings. If the value is a string, that string is a description of the event which occurs on that date. The value can also have the form <b>(mark . string)</b>; then mark specifies how to mark the date in the calendar, and string is the description of the event. If mark is a single-character string, that character appears next to the date in the calendar. If mark is a face name, the date is displayed in that face. If mark is <b>nil</b>, that specifies no particular highlighting for the date.<br><br>Suppose you get paid on the 21st of the month if it's a weekday, and on the Friday before if the 21st is on a weekend. Here is how to write a sexp diary entry that matches those dates:</p>
<pre class="tab">&amp;%%(let ((dayname (calendar-day-of-week date)) (day (cadr date))) (or (and (= day 21) (memq dayname '(1 2 3 4 5))) (and (memq day '(19 20)) (= dayname 5))) ) Pay check deposited</pre>
<p class="tab">The following sexp diary entries take advantage of the ability (in the fancy diary display) to concoct diary entries whose text varies based on the date:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:310px"><b>%%(diary-sunrise-sunset)</b></td>
<td>Make a diary entry for today's local times of sunrise and sunset.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-lunar-phases)</b></td>
<td>Make a diary entry for the phases (quarters) of the moon.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-day-of-year)</b></td>
<td>Make a diary entry with today's day number in the current year and the number of days remaining in the current year.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-iso-date)</b></td>
<td>Make a diary entry with today's equivalent ISO commercial date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-julian-date)</b></td>
<td>Make a diary entry with today's equivalent Julian calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-astro-day-number)</b></td>
<td>Make a diary entry with today's equivalent astronomical (Julian) day number.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-bahai-date)</b></td>
<td>Make a diary entry with today's equivalent Baha'i calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-chinese-date)</b></td>
<td>Make a diary entry with today's equivalent Chinese calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-coptic-date)</b></td>
<td>Make a diary entry with today's equivalent Coptic calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-ethiopic-date)</b></td>
<td>Make a diary entry with today's equivalent Ethiopic calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-french-date)</b></td>
<td>Make a diary entry with today's equivalent date on the French Revolutionary calendar.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-hebrew-date)</b></td>
<td>Make a diary entry with today's equivalent Hebrew calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-islamic-date)</b></td>
<td>Make a diary entry with today's equivalent Islamic calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-mayan-date)</b></td>
<td>Make a diary entry with today's equivalent Mayan calendar date.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-persian-date)</b></td>
<td>Make a diary entry with today's equivalent Persian calendar date.</td>
</tr>
</table>
<p class="tab">For example, including the diary entry</p>
<pre class="tab">&amp;%%(diary-hebrew-date)</pre>
<p class="tab">Causes every day's diary display to contain the equivalent date on the Hebrew calendar, if you are using the fancy diary display. (With simple diary display, the literal line '<b>&amp;%%(diary-hebrew-date)</b>' appears in the diary for any date.)<br><br>This function is used to construct certain standard Hebrew sexp diary entries:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:380px"><b>%%(diary-hebrew-rosh-hodesh)</b></td>
<td>Make a diary entry that tells the occurrence and ritual announcement of each new Hebrew month.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-hebrew-parasha)</b></td>
<td>Make a Saturday diary entry that tells the weekly synagogue scripture reading.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-hebrew-sabbath-candles)</b></td>
<td>Make a Friday diary entry that tells the local time of Sabbath candle lighting.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-hebrew-omer)</b></td>
<td>Make a diary entry that gives the omer count, when appropriate.</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-hebrew-yahrzeit month day year) name</b></td>
<td>Make a diary entry marking the anniversary of a date of death. The date is the Gregorian (civil) date of death. The diary entry appears on the proper Hebrew calendar anniversary and on the day before. (The order of the parameters changes according to the calendar date style; for example in the European style to day, month, year.)</td>
</tr>
<tr class="tcw">
<td><b>%%(diary-hebrew-birthday month day year)</b></td>
<td>Make a diary entry for a birthday on the Hebrew calendar.</td>
</tr>
</table>
<p class="tab">All the functions documented above take an optional argument mark which specifies how to mark the date in the calendar display. If one of these functions decides that it applies to a certain date, it returns a value containing mark, as described above.</p>
<h2 id="Sending-Mail">Sending mail</h2>
<p class="tab">To send an e-mail message from Emacs, type <b>C-x m</b>. This switches to a buffer named *unsent mail*, where you can edit the text and headers of the message. When done, type <b>C-c C-s</b> or <b>C-c C-c</b> to send it.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>C-x m</b></td>
<td>Begin composing mail (<b>compose-mail</b>).</td>
</tr>
<tr class="tcw">
<td style="width:100px"><b>C-x 4 m</b></td>
<td>Likewise, in another window (<b>compose-mail-other-window</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 m</b></td>
<td>Likewise, but in a new frame (<b>compose-mail-other-frame</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b></td>
<td>In the mail buffer, send the message (<b>message-send</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-c</b></td>
<td>In the mail buffer, send the message and bury the buffer (<b>message-send-and-exit</b>).</td>
</tr>
</table>
<p class="tab">The mail buffer is an ordinary Emacs buffer, so you can switch to other buffers while composing the mail. If you want to send another mail before finishing the current one, type <b>C-x m</b> again to open a new mail buffer whose name has a different numeric suffix (see <a href="#Misc-Buffer">Misc Buffer</a>). If you invoke the command with a prefix argument, <b>C-u C-x m</b>, Emacs switches back to the last mail buffer, and asks if you want to erase the message in that buffer; if you answer no, this lets you pick up editing the message where you left off.<br><br>The command <b>C-x 4 m</b> (<b>compose-mail-other-window</b>) does the same as <b>C-x m</b>, except it displays the mail buffer in a different window. The command <b>C-x 5 m</b> (<b>compose-mail-other-frame</b>) does it in a new frame.<br><br>When you type <b>C-c C-c</b> or <b>C-c C-s</b> to send the mail, Emacs may ask you how it should deliver the mail&mdash;either directly via SMTP, or using some other method. See <a href="#Mail-Sending">Mail Sending</a>, for details.</p>
<ul>
<li><a href="#Mail-Format">Format</a>: Format of a mail message.</li>
<li><a href="#Mail-Headers">Headers</a>: Details of some standard mail header fields.</li>
<li><a href="#Mail-Aliases">Aliases</a>: Abbreviating and grouping mail addresses.</li>
<li><a href="#Mail-Commands">Commands</a>: Special commands for editing mail being composed.</li>
<li><a href="#Mail-Signature">Signature</a>: Adding a signature to every message.</li>
<li><a href="#Mail-Amusements">Amuse</a>: Distracting the NSA; adding fortune messages.</li>
<li><a href="#Mail-Methods">Methods</a>: Using alternative mail-composition methods.</li>
</ul>
<h2 id="Mail-Format">The format of the mail buffer</h2>
<p class="tab">Here is an example of the contents of a mail buffer:</p>
<pre class="tab">To: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7e0d0b1c110a1f173e1b061f130e121b50110c19">[email&#160;protected]</a> CC: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6f020001080003411c00030b060a1d2f0a170e021f030a41010a1b">[email&#160;protected]</a>, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e99b849aa98e879cc7869b8e">[email&#160;protected]</a> Subject: Re: What is best in life? From: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4a2925242b240a2f322b273a262f6425382d">[email&#160;protected]</a> --text follows this line-- To crush your enemies, see them driven before you, and to hear the lamentation of their women.</pre>
<p class="tab">At the top of the mail buffer is a set of header fields, which are used for specifying information about the e-mail's recipient(s), subject, etc. The above buffer contains header fields for '<b>To</b>', '<b>Cc</b>', '<b>Subject</b>', and '<b>From</b>'. Some header fields are automatically pre-initialized in the mail buffer, when appropriate.<br><br>The line that says '<b>--text follows this line--</b>' separates the header fields from the body (or text) of the message. Everything above that line is treated as part of the headers; everything below it is treated as the body. The delimiter line itself does not appear in the message actually sent.<br><br>You can insert and edit header fields using ordinary editing commands. See Header Editing, for commands specific to editing header fields. Certain headers, such as '<b>Date</b>' and '<b>Message-Id</b>', are normally omitted from the mail buffer and are created automatically when the message is sent.</p>
<h2 id="Mail-Headers">Mail header fields</h2>
<p class="tab">A header field in the mail buffer starts with a field name at the beginning of a line, terminated by a colon. Upper and lowercase are equivalent in field names. After the colon and optional whitespace comes the contents of the field.<br><br>You can use any name you like for a header field, but normally people use only standard field names with accepted meanings.<br><br>The '<b>From</b>' header field identifies the person sending the e-mail (i.e., you). This should be a valid mailing address, as replies are normally sent there. The default contents of this header field are computed from the variables <b>user-full-name</b> (which specifies your full name) and <b>user-mail-address</b> (your e-mail address). On some operating systems, Emacs initializes these two variables using environment variables (see <a href="#General-Variables">General Variables</a>). If this information is unavailable or wrong, customize the variables yourself (see <a href="#Easy-Customization">Easy Customization</a>).<br><br>The value of the variable <b>mail-from-style</b> specifies how to format the contents of the '<b>From</b>' field:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>nil</b></td>
<td>Use only the address, as in '<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f79c9e9990b790859684849b969993d994989a">[email&#160;protected]</a></b>'.</td>
</tr>
<tr class="tcw">
<td><b>parens</b></td>
<td>Use both address and full name, as in:<br><br>'<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="294240474e694e5b485a5a4548474d074a4644">[email&#160;protected]</a> (Elvis Parsley)</b>'.</td>
</tr>
<tr class="tcw">
<td><b>angles</b></td>
<td>Use both address and full name, as in:<br><br>'<b>Elvis Parsley &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9df6f4f3faddfaeffceeeef1fcf3f9b3fef2f0">[email&#160;protected]</a>&gt;</b>'.</td>
</tr>
<tr class="tcw">
<td><b>any other value</b></td>
<td>Use angles normally. But if the address must be "quoted" to remain syntactically valid under the angles format but not under the parens format, use parens instead. This is the default.</td>
</tr>
</table>
<p class="tab">Apart from '<b>From</b>', here is a table of commonly-used fields:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px">'<b>To</b>'</td>
<td>The mailing address(es) that the message is addressed. To list more than one address, use commas to separate them.</td>
</tr>
<tr class="tcw">
<td>'<b>Subject</b>'</td>
<td>The subject of the message.</td>
</tr>
<tr class="tcw">
<td>'<b>CC</b>'</td>
<td>Additional mailing address(es) where to send the message. This is like '<b>To</b>', except that these readers should not regard the message as directed at them.</td>
</tr>
<tr class="tcw">
<td>'<b>BCC</b>'</td>
<td>Additional mailing address(es) to send the message to, which should not appear in the header of the message actually sent. "BCC" stands for blind carbon copies.</td>
</tr>
<tr class="tcw">
<td>'<b>FCC</b>'</td>
<td>The name of a file, that a copy of the sent message should be appended. Emacs writes the message in mbox format, unless the file is in Babyl format (used by Rmail before Emacs 23), where Emacs writes in Babyl format. If a Rmail buffer is visiting the file, Emacs updates it accordingly. To specify more than one file, use several '<b>FCC</b>' fields, with one file name in each field.</td>
</tr>
<tr class="tcw">
<td>'<b>Reply-to</b>'</td>
<td>An address where replies should be sent, instead of '<b>From</b>'. This is used if, for some reason, your '<b>From</b>' address cannot receive replies.</td>
</tr>
<tr class="tcw">
<td>'<b>Mail-reply-to</b>'</td>
<td>This field takes precedence over '<b>Reply-to</b>'. It is used because some mailing lists set the '<b>Reply-to</b>' field for their purposes (a somewhat controversial practice).</td>
</tr>
<tr class="tcw">
<td>'<b>Mail-followup-to</b>'</td>
<td>One of more address(es) to use as default recipient(s) for follow-up messages. This is often used when you reply to a message from a mailing list that you are subscribed to, and want replies to go to the list without sending an extra copy to you.</td>
</tr>
<tr class="tcw">
<td>'<b>In-reply-to</b>'</td>
<td>An identifier for the message you are replying. Most mail readers use this information to group related messages together. Normally, this header is filled in automatically when you reply to a message in any mail program built into Emacs.</td>
</tr>
<tr class="tcw">
<td>'<b>References</b>'</td>
<td>Identifiers for previous related messages. Like '<b>In-reply-to</b>', this is normally filled in automatically for you.</td>
</tr>
</table>
<p class="tab">The '<b>To</b>', '<b>CC</b>', and '<b>BCC</b>' fields can appear any number of times, and each such header field can contain multiple addresses, separated by commas. This way, you can specify any number of places to send the message. These fields can also have continuation lines: one or more lines starting with whitespace, following the starting line of the field, are considered part of the field. Here's an example of a '<b>To</b>' field with a continuation line:</p>
<pre class="tab">To: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9ff9f0f0dffae7fef2eff3fab1f1faeb">[email&#160;protected]</a>, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="afdbc7c6dcefcad7cec2dfc3ca81c1cadb">[email&#160;protected]</a>, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6b0904092b0e130a061b070e45080406">[email&#160;protected]</a></pre>
<p class="tab">You can direct Emacs to insert certain default headers into the mail buffer by setting the variable <b>mail-default-headers</b> to a string. Then <b>C-x m</b> inserts this string into the message headers. For example, here is how to add a '<b>Reply-to</b>' and '<b>FCC</b>' header to each message:</p>
<pre class="tab">(setq mail-default-headers "Reply-to: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d0b6bfbf90b5a8b1bda0bcb5feb3bfbd">[email&#160;protected]</a>\nFCC: ~/Mail/sent")</pre>
<p class="tab">If the default header fields are not appropriate for a particular message, edit them as necessary before sending the message.</p>
<h2 id="Mail-Aliases">Mail aliases</h2>
<p class="tab">You can define mail aliases, which are short mnemonic names that stand for one or more mailing addresses. By default, mail aliases are defined in the file <b>~/.mailrc</b>. You can specify a different file name to use, by setting the variable <b>mail-personal-alias-file</b>.<br><br>To define an alias in .mailrc, write a line like this:</p>
<pre class="tab">alias nick fulladdresses</pre>
<p class="tab">This means that nick should expand into fulladdresses, where fulladdresses can be either a single address, or multiple addresses separated with spaces. For instance, to make maingnu stand for <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="43242d3603242d366d2c3124">[email&#160;protected]</a> plus your local address, put in this line:</p>
<pre class="tab">alias maingnu <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="10777e6550777e653e7f6277">[email&#160;protected]</a> local-gnu</pre>
<p class="tab">If an address contains a space, quote the whole address with a pair of double quotes, like this:</p>
<pre class="tab">alias jsmith "John Q. Smith &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dbb5b4b5be9bbea3bab6abb7bef5b8b4b6">[email&#160;protected]</a>&gt;"</pre>
<p class="tab">Note that you need not include double quotes around individual parts of the address, such as the person's full name. Emacs puts them in if they are needed. For instance, it inserts the above address as '<b>"John Q. Smith" &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4f2120212a0f2a372e223f232a612c2022">[email&#160;protected]</a>&gt;</b>'.<br><br>Emacs also recognizes "include" commands in .mailrc. They look like this:</p>
<pre class="tab">source filename</pre>
<p class="tab">The <b>.mailrc</b> file is not unique to Emacs; other mail-reading programs use it for mail aliases, and it can contain other commands. However, Emacs ignores everything except alias definitions and include commands.<br><br>Mail aliases expand as abbrevs&mdash;that is to say, as soon as you type a word-separator character after an alias (see <a href="#Abbrevs">Abbrevs</a>). This expansion takes place only in the '<b>To</b>', '<b>From</b>', '<b>CC</b>', '<b>BCC</b>', and '<b>Reply-to</b>' header fields (plus their '<b>Resent-</b>' variants); it does not take place in other header fields, such as '<b>Subject</b>'.<br><br>You can also insert an aliased address directly, using the command <b>M-x mail-abbrev-insert-alias</b>. This reads an alias name, with completion, and inserts its definition at point.</p>
<h2 id="Mail-Commands">Mail commands</h2>
<p class="tab">The default major mode for the *mail* buffer is called Message mode. It behaves like Text mode in many ways, but provides several additional commands on the <b>C-c</b> prefix, which make editing a message more convenient.<br><br>In this section, we will describe some of the most commonly-used commands available in Message mode. Message mode also has its own manual, where its features are described in greater detail.</p>
<ul>
<li><a href="#Mail-Sending">Mail Sending</a>: Commands to send the message.</li>
<li><a href="#Header-Editing">Header Editing</a>: Commands to move to header fields and edit them.</li>
<li><a href="#Citing-Mail">Citing Mail</a>: Quoting a message you are replying.</li>
<li><a href="#Mail-Misc">Mail Misc</a>: Attachments, spell checking, etc.</li>
</ul>
<h2 id="Mail-Sending">Mail sending</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-c</b></td>
<td>Send the message, and bury the mail buffer (<b>message-send-and-exit</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b></td>
<td>Send the message, and leave the mail buffer selected (<b>message-send</b>).</td>
</tr>
</table>
<p class="tab">The usual command to send a message is <b>C-c C-c</b> (<b>mail-send-and-exit</b>). This sends the message and then "buries" the mail buffer, putting it at the lowest priority for reselection. If you want it to kill the mail buffer instead, change the variable <b>message-kill-buffer-on-exit</b> to <b>t</b>.<br><br>The command <b>C-c C-s</b> (<b>message-send</b>) sends the message and leaves the buffer selected. Use this command if you want to modify the message (perhaps with new recipients) and send it again.<br><br>Sending a message runs the hook <b>message-send-hook</b>. It also marks the mail buffer as unmodified, except if the mail buffer is also a file-visiting buffer (in that case, only saving the file does that, and you don't get a warning if you try to send the same message twice).<br><br>The variable <b>send-mail-function</b> controls how the message is delivered. Its value should be one of the following functions:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>sendmail-query-once</b></td>
<td>Query for a delivery method (one of the other entries in this list), and use that method for this message; then save the method to <b>send-mail-function</b>, so that it is used for future deliveries. This is the default, unless you have already set the variables for sending mail via <b>smtpmail-send-it</b> (see below).</td>
</tr>
<tr class="tcw">
<td><b>smtpmail-send-it</b></td>
<td>Send mail using the through an external mail host, such as your Internet service provider's outgoing SMTP mail server. If you have not told Emacs how to contact the SMTP server, it prompts for this information, which is saved in the <b>smtpmail-smtp-server</b> variable and the file <b>~/.authinfo</b>.</td>
</tr>
<tr class="tcw">
<td><b>sendmail-send-it</b></td>
<td>Send mail using the system's default sendmail program, or equivalent. This requires the system to be set up for delivering mail directly via SMTP.</td>
</tr>
<tr class="tcw">
<td><b>mailclient-send-it</b></td>
<td>Pass the mail buffer on to the system's designated mail client. See the commentary section in the file mailclient.el for details.</td>
</tr>
<tr class="tcw">
<td><b>feedmail-send-it</b></td>
<td>This is similar to <b>sendmail-send-it</b>, but allows you to queue messages for later sending. See the commentary section in the file feedmail.el for details.</td>
</tr>
</table>
<p class="tab">When you send a message containing non-ASCII characters, they need to be encoded with a coding system (see <a href="#Coding-Systems">Coding Systems</a>). Usually the coding system is specified automatically by your chosen language environment (see <a href="#Language-Environments">Language Environments</a>). You can explicitly specify the coding system for outgoing mail by setting the variable <b>sendmail-coding-system</b> (see <a href="#Recognize-Coding">Recognize Coding</a>). If the coding system thus determined does not handle the characters in a particular message, Emacs asks you to select the coding system to use, showing a list of possible coding systems.</p>
<h2 id="Header-Editing">Mail header editing</h2>
<p class="tab">Message mode provides the following special commands to move to particular header fields and to complete addresses in headers.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>C-c C-f C-t</b></td>
<td>Move to the '<b>To</b>' header (<b>message-goto-to</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f C-s</b></td>
<td>Move to the '<b>Subject</b>' header (<b>message-goto-subject</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f C-c</b></td>
<td>Move to the '<b>CC</b>' header (<b>message-goto-cc</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f C-b</b></td>
<td>Move to the '<b>BCC</b>' header (<b>message-goto-bcc</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f C-r</b></td>
<td>Move to the '<b>Reply-To</b>' header (<b>message-goto-reply-to</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f C-f</b></td>
<td>Move to the '<b>Mail-Followup-To</b>' header field (<b>message-goto-followup-to</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f C-w</b></td>
<td>Add a new '<b>FCC</b>' header field, with file-name completion (<b>message-goto-fcc</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-b</b></td>
<td>Move to the start of the message body (<b>message-goto-body</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>Complete a mailing address (<b>message-tab</b>).</td>
</tr>
</table>
<p class="tab">The commands to move point to particular header fields are all based on the prefix <b>C-c C-f</b> ('<b>C-f</b>' is for "field"). If the field in question does not exist, the command creates one (the exception is mail-fcc, which creates a new field each time).<br><br>The command <b>C-c C-b</b> (<b>message-goto-body</b>) moves point to only after the header separator line&mdash;that is, to the beginning of the body.<br><br>While editing a header field containing addresses, such as '<b>To:</b>', '<b>CC:</b>' and '<b>BCC:</b>', you can complete an address by typing <b>&lt;TAB&gt;</b> (<b>message-tab</b>). This attempts to insert the full name corresponding to the address based on a few methods, including EUDC, a library that recognizes some directory server protocols. Failing that, it attempts to expand the address as a mail alias (see <a href="#Mail-Aliases">Mail Aliases</a>). If point is on a header field that does not take addresses, or if it's in the message body, then <b>&lt;TAB&gt;</b> only inserts a tab character.</p>
<h2 id="Citing-Mail">Citing mail</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-y</b></td>
<td>Yank the selected message from the mail reader, as a citation (<b>message-yank-original</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-q</b></td>
<td>Fill each paragraph cited from another message (message-fill-yanked-message).</td>
</tr>
</table>
<p class="tab">You can use the command <b>C-c C-y</b> (<b>message-yank-original</b>) to cite a message you are replying. This inserts the text of that message into the mail buffer. This command works only if the mail buffer is invoked from a mail reader running in Emacs, such as Rmail.<br><br>By default, Emacs inserts the string '<b>&gt;</b>' in front of each line of the cited text; this prefix string is specified by the variable <b>message-yank-prefix</b>. If you call <b>message-yank-original</b> with a prefix argument, the citation prefix is not inserted.<br><br>After using <b>C-c C-y</b>, you can type <b>C-c C-q</b> (<b>message-fill-yanked-message</b>) to fill the paragraphs of the cited message. One use of <b>C-c C-q</b> fills all such paragraphs, each one individually. To fill a single paragraph of the quoted message, use <b>M-q</b>. If filling does not automatically handle the type of citation prefix you use, try setting the fill prefix explicitly. See <a href="#Filling">Filling</a>.<br><br>You can customize mail citation through the hook <b>mail-citation-hook</b>. For example, you can use the Supercite package, which provides more flexible citation.</p>
<h2 id="Mail-Misc">Mail miscellany</h2>
<p class="tab">You can attach a file to an outgoing message by typing <b>C-c C-a</b> (<b>mml-attach-file</b>) in the mail buffer. Attaching is done using the Multipurpose Internet Mail Extensions (MIME) standard.<br><br>The <b>mml-attach-file</b> command prompts for the name of the file, and for the attachment's content type, description, and disposition. The content type is normally detected automatically; only type <b>&lt;RET&gt;</b> to accept the default. The description is a single line of text that the recipient sees next to the attachment; you may also choose to leave this empty. The disposition is either '<b>inline</b>' (the default), which means the recipient sees a link to the attachment in the message body, or '<b>attachment</b>', which means the link is separate from the body.<br><br>The <b>mml-attach-file</b> command is specific to Message mode; in Mail mode use <b>mail-add-attachment</b> instead. It prompts only for the name of the file, and determines the content type and the disposition automatically. If you want to include some description of the attached file, type that in the message body.<br><br>The actual contents of the attached file are not inserted into the mail buffer. Instead, some placeholder text is inserted into the mail buffer, like this:</p>
<pre class="tab">&lt;#part type="text/plain" filename="~/foo.txt" disposition=inline&gt; &lt;#/part&gt;</pre>
<p class="tab">When you type <b>C-c C-c</b> or <b>C-c C-s</b> to send the message, the attached file is delivered with it.<br><br>While composing a message, you can do spelling correction on the message text by typing <b>M-x ispell-message</b>. If you have yanked an incoming message into the outgoing draft, this command skips what was yanked, but it checks the text that you yourself inserted (it looks for indentation or <b>mail-yank-prefix</b> to distinguish the cited lines from your input). See <a href="#Spelling">Spelling</a>.<br><br>Turning on Message mode (which <b>C-x m</b> does automatically) runs the normal hooks <b>text-mode-hook</b> and <b>message-mode-hook</b>. Initializing a new outgoing message runs the normal hook <b>message-setup-hook</b>; you can use this hook if you want to make changes to the appearance of the mail buffer. See <a href="#Hooks">Hooks</a>.<br><br>The main difference between these hooks is only when they are invoked. Whenever you type <b>C-x m</b>, <b>message-mode-hook</b> runs as soon as the mail buffer is created. Then the <b>message-setup</b> function inserts the default contents of the buffer. After these default contents are inserted, <b>message-setup-hook</b> runs.<br><br>If you use <b>C-x m</b> to continue an existing composition, <b>message-mode-hook</b> runs immediately after switching to the mail buffer. If the buffer is unmodified, or if you decide to erase it and start again, <b>message-setup-hook</b> runs after the default contents are inserted.</p>
<h2 id="Mail-Signature">Mail signature</h2>
<p class="tab">You can add a standard piece of text&mdash;your mail signature&mdash;to the end of every message. This signature may contain information such as your telephone number or your physical location. The variable <b>mail-signature</b> determines how Emacs handles the mail signature.<br><br>The default value of <b>mail-signature</b> is <b>t</b>; this means to look for your mail signature in the file <b>~/.signature</b>. If this file exists, its contents are automatically inserted into the end of the mail buffer. You can change the signature file via the variable <b>mail-signature-file</b>.<br><br>If you change <b>mail-signature</b> to a string, that specifies the text of the signature directly.<br><br>If you change <b>mail-signature</b> to <b>nil</b>, Emacs does not insert your mail signature automatically. You can insert your mail signature by typing <b>C-c C-w</b> (<b>message-insert-signature</b>) in the mail buffer. Emacs looks for your signature in the signature file.<br><br>By convention, a mail signature should be marked by a line whose contents are '<b>--</b> '. If your signature lacks this prefix, it is added for you. The remainder of your signature should be no more than four lines.</p>
<h2 id="Mail-Amusements">Mail amusements</h2>
<p class="tab"><b>M-x spook</b> adds a line of randomly chosen keywords to an outgoing mail message. The keywords are chosen from a list of words that suggest you are discussing something subversive.<br><br>The idea behind this feature is the suspicion that the NSA12 and other intelligence agencies snoop on all electronic mail messages that contain keywords suggesting they might find them interesting. (The agencies say that they don't, but that's what they would say.) The idea is that if lots of people add suspicious words to their messages, the agencies get so busy with spurious input that they have to give up reading it all. Whether or not this is true, it at least amuses some people.<br><br>You can use the fortune program to put a "fortune cookie" message into outgoing mail. To do this, add <b>fortune-to-signature</b> to <b>mail-setup-hook</b>:</p>
<pre class="tab">(add-hook 'mail-setup-hook 'fortune-to-signature)</pre>
<p class="tab">You probably need to set the variable <b>fortune-file</b> before using this.</p>
<h2 id="Mail-Methods">Mail composition methods</h2>
<p class="tab">In this chapter we have described the usual Emacs mode for editing and sending mail&mdash;Message mode. This is only one of several available modes. Before Emacs 23.2, the default mode was Mail mode, which is similar to Message mode in many respects but lacks features such as MIME support. Another available mode is MH-E.<br><br>You can choose any of these mail user agents as your preferred method for editing and sending mail. The commands <b>C-x m</b>, <b>C-x 4 m</b> and <b>C-x 5 m</b> use whichever agent you have specified; so do other parts of Emacs that send mail, such as the bug reporter. To specify a mail user agent, customize the variable <b>mail-user-agent</b>. Currently, legitimate values include <b>message-user-agent</b> (Message mode) <b>sendmail-user-agent</b> (Mail mode), <b>gnus-user-agent</b>, and <b>mh-e-user-agent</b>.<br><br>If you select a different mail-composition method, the information in this chapter about the mail buffer and Message mode does not apply; the other methods use a different format of text in a different buffer, and their commands are different as well.<br><br>Similarly, to specify your preferred method for reading mail, customize the variable <b>read-mail-command</b>. The default is <b>rmail</b> (see <a href="#Rmail">Rmail</a>).</p>
<h2 id="Rmail">Reading mail with Rmail</h2>
<p class="tab">Rmail is an Emacs subsystem for reading and disposing of mail that you receive. Rmail stores mail messages in files called Rmail files. Reading the messages in a Rmail file is done in a special major mode, Rmail mode, which redefines most letters to run commands for managing mail.</p>
<ul>
<li><a href="#Rmail-Basics">Basic</a>: Basic concepts of Rmail, and simple use.</li>
<li><a href="#Rmail-Scrolling">Scroll</a>: Scrolling through a message.</li>
<li><a href="#Rmail-Motion">Motion</a>: Moving to another message.</li>
<li><a href="#Rmail-Deletion">Deletion</a>: Deleting and expunging messages.</li>
<li><a href="#Rmail-Inbox">Inbox</a>: How mail gets into the Rmail file.</li>
<li><a href="#Rmail-Files">Files</a>: Using multiple Rmail files.</li>
<li><a href="#Rmail-Output">Output</a>: Copying messages out to files.</li>
<li><a href="#Rmail-Labels">Labels</a>: Classifying messages by labeling them.</li>
<li><a href="#Rmail-Attributes">Attrs</a>: Certain standard labels, called attributes.</li>
<li><a href="#Rmail-Reply">Reply</a>: Sending replies to messages you are viewing.</li>
<li><a href="#Rmail-Summary">Summary</a>: Summaries show brief info on many messages.</li>
<li><a href="#Rmail-Sorting">Sort</a>: Sorting messages in Rmail.</li>
<li><a href="#Rmail-Display">Display</a>: How Rmail displays a message; customization.</li>
<li><a href="#Rmail-Coding">Coding</a>: How Rmail handles decoding character sets.</li>
<li><a href="#Rmail-Editing">Editing</a>: Editing message text and headers in Rmail.</li>
<li><a href="#Rmail-Digest">Digest</a>: Extracting the messages from a digest message.</li>
<li><a href="#Rmail-Rot13">Rot13</a>: Reading messages encoded in the rot13 code.</li>
<li><a href="#Movemail">Movemail</a>: More details of fetching new mail.</li>
<li><a href="#Remote-Mailboxes">Remote Mailboxes</a>: Retrieving mail from remote mailboxes.</li>
<li><a href="#Other-Mailbox-Formats">Other Mailbox Formats</a>: Retrieving mail from local mailboxes in various formats.</li>
</ul>
<h2 id="Rmail-Basics">Basic concepts of Rmail</h2>
<p class="tab">Using Rmail in the simplest fashion, you have one Rmail file <b>~/RMAIL</b> where all your mail is saved. It is called your primary Rmail file. The command <b>M-x rmail</b> reads your primary Rmail file, merges new mail in from your inboxes, displays the first message you haven't read yet, and lets you begin reading. The variable <b>rmail-file-name</b> specifies the name of the primary Rmail file.<br><br>Rmail displays only one message in the Rmail file at a time. The message that is shown is called the current message. Rmail mode's special commands can do such things as delete the current message, copy it into another file, send a reply, or move to another message. You can also create multiple Rmail files and use Rmail to move messages between them.<br><br>In the Rmail file, messages are normally arranged sequentially in order of receipt; you can specify other ways to sort them (see <a href="#Rmail-Sorting">Rmail Sorting</a>). Messages are identified by consecutive integers which are their message numbers. The number of the current message is displayed in Rmail's mode line, followed by the total number of messages in the file. You can move to a message by specifying its message number with the j key (see <a href="#Rmail-Motion">Rmail Motion</a>).<br><br>Following the usual conventions of Emacs, changes in a Rmail file become permanent only when you save the file. You can save it with <b>s</b> (<b>rmail-expunge-and-save</b>), expunging deleted messages from the file first (see <a href="#Rmail-Deletion">Rmail Deletion</a>). To save the file without expunging, use <b>C-x C-s</b>. Rmail also saves the Rmail file after merging new mail from an inbox file (see <a href="#Rmail-Inbox">Rmail Inbox</a>).<br><br>You can exit Rmail with <b>q</b> (<b>rmail-quit</b>); this expunges and saves the Rmail file, then buries the Rmail buffer and its summary buffer, if present (see <a href="#Rmail-Summary">Rmail Summary</a>). But there is no need to "exit" formally. If you switch from Rmail to editing in other buffers, and never switch back, you have exited. Make sure to save the Rmail file eventually (like any other file you have changed). <b>C-x s</b> is a suitable way to do this (see <a href="#Save-Commands">Save Commands</a>). The Rmail command <b>b</b>, <b>rmail-bury</b>, buries the Rmail buffer and its summary without expunging and saving the Rmail file.</p>
<h2 id="Rmail-Scrolling">Scrolling within a message</h2>
<p class="tab">When Rmail displays a message that does not fit on the screen, you must scroll through it to read the rest. You could do this with <b>C-v</b>, <b>M-v</b> and <b>M-&lt;</b>, but in Rmail scrolling is so frequent that it deserves to be easier.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>&lt;SPC&gt;</b></td>
<td>Scroll forward (<b>scroll-up-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b></td>
<td>Scroll backward (<b>scroll-down-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>.</b></td>
<td>Scroll to start of message (<b>rmail-beginning-of-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>/</b></td>
<td>Scroll to end of message (<b>rmail-end-of-message</b>).</td>
</tr>
</table>
<p class="tab">Since the most common thing to do while reading a message is to scroll through it by screenfuls, Rmail makes <b>&lt;SPC&gt;</b> and <b>&lt;DEL&gt;</b> do the same as <b>C-v</b> (<b>scroll-up-command</b>) and <b>M-v</b> (<b>scroll-down-command</b>) respectively.<br><br>The command <b>.</b> (<b>rmail-beginning-of-message</b>) scrolls back to the beginning of the selected message. This is not quite the same as <b>M-&lt;</b>: for one thing, it does not set the mark; for another, it resets the buffer boundaries of the current message if you have changed them. Similarly, the command <b>/</b> (<b>rmail-end-of-message</b>) scrolls forward to the end of the selected message.</p>
<h2 id="Rmail-Motion">Moving among messages in Rmail</h2>
<p class="tab">The most basic thing to do with a message is to read it. The way to do this in Rmail is to make the message current. The usual practice is to move sequentially through the file, as this is the order of receipt of messages. When you enter Rmail, you are positioned at the first message that you have not yet made current (that is, the first one with the '<b>unseen</b>' attribute; see <a href="#Rmail-Attributes">Rmail Attributes</a>). Move forward to see the other new messages; move backward to re-examine old messages.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>n</b></td>
<td>Move to the next nondeleted message, skipping any intervening deleted messages (rmail-next-undeleted-message).</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Move to the previous nondeleted message (<b>rmail-previous-undeleted-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-n</b></td>
<td>Move to the next message, including deleted messages (<b>rmail-next-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-p</b></td>
<td>Move to the previous message, including deleted messages (<b>rmail-previous-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-n</b></td>
<td>Move to the next message with the same subject as the current one (<b>rmail-next-same-subject</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p</b></td>
<td>Move to the previous message with the same subject as the current one (<b>rmail-previous-same-subject</b>).</td>
</tr>
<tr class="tcw">
<td><b>j</b></td>
<td>Move to the first message. With argument <i>n</i>, move to message number <i>n</i> (<b>rmail-show-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>&gt;</b></td>
<td>Move to the last message (<b>rmail-last-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;</b></td>
<td>Move to the first message (<b>rmail-first-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-s</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Move to the next message containing a match for <i>regexp</i> (<b>rmail-search</b>).</td>
</tr>
<tr class="tcw">
<td><b>- M-s</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Move to the previous message containing a match for <i>regexp</i>.</td>
</tr>
</table>
<p class="tab"><b>n</b> and <b>p</b> are the usual way of moving among messages in Rmail. They move through the messages sequentially, but skip over deleted messages, which is usually what you want to do. Their command definitions are named <b>rmail-next-undeleted-message</b> and <b>rmail-previous-undeleted-message</b>. If you do not want to skip deleted messages&mdash;for example, if you want to move to a message to undelete it&mdash;use the variants <b>M-n</b> and <b>M-p</b> (<b>rmail-next-message</b> and <b>rmail-previous-message</b>). A numeric argument to any of these commands serves as a repeat count.<br><br>In Rmail, you can specify a numeric argument by typing only the digits. You don't need to type <b>C-u</b> first.<br><br>The <b>M-s</b> (<b>rmail-search</b>) command is Rmail's version of search. The usual incremental search command <b>C-s</b> works in Rmail, but it searches only in the current message. The purpose of <b>M-s</b> is to search for another message. It reads a regular expression (see <a href="#Regexps">Regexps</a>) nonincrementally, then searches starting at the beginning of the following message for a match. It then selects that message. If <i>regexp</i> is empty, <b>M-s</b> reuses the regexp used the previous time.<br><br>To search backward in the file for another message, give <b>M-s</b> a negative argument. In Rmail you can do this with <b>- M-s</b>. This begins searching from the end of the previous message.<br><br>It is also possible to search for a message based on labels. See <a href="#Rmail-Labels">Rmail Labels</a>.<br><br>The <b>C-c C-n</b> (<b>rmail-next-same-subject</b>) command moves to the next message with the same subject as the current one. A prefix argument serves as a repeat count. With a negative argument, this command moves backward, acting like <b>C-c C-p</b> (<b>rmail-previous-same-subject</b>). When comparing subjects, these commands ignore the prefixes often added to the subjects of replies.<br><br>To move to a message specified by absolute message number, use <b>j</b> (<b>rmail-show-message</b>) with the message number as argument. With no argument, <b>j</b> selects the first message. <b>&lt;</b> (<b>rmail-first-message</b>) also selects the first message. <b>&gt;</b> (<b>rmail-last-message</b>) selects the last message.</p>
<h2 id="Rmail-Deletion">Deleting messages with Rmail</h2>
<p class="tab">When you no longer need to keep a message, you can delete it. This flags it as ignorable, and some Rmail commands pretend it is no longer present; but it still has its place in the Rmail file, and still has its message number.<br><br>Expunging the Rmail file actually removes the deleted messages. The remaining messages are renumbered consecutively.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>d</b></td>
<td>Delete the current message, and move to the next nondeleted message (<b>rmail-delete-forward</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-d</b></td>
<td>Delete the current message, and move to the previous nondeleted message (<b>rmail-delete-backward</b>).</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Undelete the current message, or move back to the previous deleted message and undelete it (<b>rmail-undelete-previous-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Expunge the Rmail file (<b>rmail-expunge</b>).</td>
</tr>
</table>
<p class="tab">There are two Rmail commands for deleting messages. Both delete the current message and select another. <b>d</b> (<b>rmail-delete-forward</b>) moves to the following message, skipping messages already deleted, while <b>C-d</b> (<b>rmail-delete-backward</b>) moves to the previous nondeleted message. If there is no nondeleted message to move to in the specified direction, the message that was only deleted remains current. <b>d</b> with a prefix argument is equivalent to <b>C-d</b>. Note that the Rmail summary versions of these commands behave slightly differently (see <a href="#Rmail-Summary-Edit">Rmail Summary Edit</a>).<br><br>Whenever Rmail deletes a message, it runs the hook <b>rmail-delete-message-hook</b>. When the hook functions are invoked, the message is marked deleted, but it is still the current message in the Rmail buffer.<br><br>To make all the deleted messages finally vanish from the Rmail file, type <b>x</b> (<b>rmail-expunge</b>). Until you do this, you can still undelete the deleted messages. The undeletion command, <b>u</b> (<b>rmail-undelete-previous-message</b>), is designed to cancel the effect of a <b>d</b> command in most cases. It undeletes the current message if the current message is deleted. Otherwise, it moves backward to previous messages until a deleted message is found, and undeletes that message.<br><br>You can usually undo a <b>d</b> with a <b>u</b> because the <b>u</b> moves back to and undeletes the message that the <b>d</b> deleted. But this does not work when the <b>d</b> skips a few already-deleted messages that follow the message being deleted; then the <b>u</b> command undeletes the last of the messages that were skipped. There is no clean way to avoid this problem. However, by repeating the <b>u</b> command, you can eventually get back to the message that you intend to undelete. You can also select a particular deleted message with the <b>M-p</b> command, then type <b>u</b> to undelete it.<br><br>A deleted message has the '<b>deleted</b>' attribute, and as a result '<b>deleted</b>' appears in the mode line when the current message is deleted. In fact, deleting or undeleting a message is nothing more than adding or removing this attribute. See <a href="#Rmail-Attributes">Rmail Attributes</a>.</p>
<h2 id="Rmail-Inbox">Rmail files and inboxes</h2>
<p class="tab">When you receive mail locally, the operating system places incoming mail for you in a file that we call your inbox. When you start up Rmail, it runs a C program called <b>movemail</b> to copy the new messages from your local inbox into your primary Rmail file, containing other messages saved from previous Rmail sessions. It is in this file that you actually read the mail with Rmail. This operation is called getting new mail. You can get new mail at any time in Rmail by typing <b>g</b>.<br><br>The variable <b>rmail-primary-inbox-list</b> contains a list of the files that are inboxes for your primary Rmail file. If you don't set this variable explicitly, Rmail uses the MAIL environment variable, or, as a last resort, a default inbox based on <b>rmail-spool-directory</b>. The default inbox file depends on your operating system; often it is <b>/var/mail/username</b>, <b>/var/spool/mail/username</b>, or <b>/usr/spool/mail/username</b>.<br><br>You can specify the inbox file(s) for any Rmail file for the current session with the command <b>set-rmail-inbox-list</b>; see <a href="#Rmail-Files">Rmail Files</a>.<br><br>There are two reasons for having separate Rmail files and inboxes.</p>
<ol>
<li>The inbox file format varies between operating systems and according to the other mail software in use. Only one part of Rmail needs to know about the alternatives, and it need only understand how to convert all of them to Rmail's own format.</li>
<li>It is very cumbersome to access an inbox file without danger of losing mail, because it is necessary to interlock with mail delivery. Moreover, different operating systems use different interlocking techniques. The strategy of moving mail out of the inbox once and for all into a separate Rmail file avoids the need for interlocking in all the rest of Rmail, as only Rmail operates on the Rmail file.</li>
</ol>
<p class="tab">Rmail was originally written to use the Babyl format as its internal format. Since then, it is recognized that the usual inbox format ('<b>mbox</b>') on Unix and GNU systems is adequate for the job, and so since Emacs 23 Rmail uses that as its internal format. The Rmail file is still separate from the inbox file, even though their format is the same.<br><br>When getting new mail, Rmail first copies the new mail from the inbox file to the Rmail file; then it saves the Rmail file; then it clears out the inbox file. This way, a system crash may cause duplication of mail between the inbox and the Rmail file, but cannot lose mail. If <b>rmail-preserve-inbox</b> is non-nil, then Rmail does not clear out the inbox file when it gets new mail. You may want to set this, for example, on a portable computer you use to check your mail via POP while traveling, so your mail remains on the server and you can save it later on your workstation.<br><br>In some cases, Rmail copies the new mail from the inbox file indirectly. First it runs the <b>movemail</b> program to move the mail from the inbox to an intermediate file called <b>.newmail-inboxname</b>, in the same directory as the Rmail file. Then Rmail merges the new mail from that file, saves the Rmail file, and only then deletes the intermediate file. If there is a crash at the wrong time, this file continues to exist, and Rmail uses it again the next time it gets new mail from that inbox.<br><br>If Rmail cannot convert the data in <b>.newmail-inboxname</b> into mbox format, it renames the file to <b>RMAILOSE.n</b> (<b>n</b> is an integer chosen to make the name unique) so that Rmail does not have trouble with the data again. Look at the file, find whatever message confuses Rmail (probably one that includes the control-underscore character, octal code 037), and delete it. Then you can use <b>1 g</b> to get new mail from the corrected file.</p>
<h2 id="Rmail-Files">Multiple Rmail files</h2>
<p class="tab">Rmail operates by default on your primary Rmail file, which is named <b>~/RMAIL</b> and receives your incoming mail from your system inbox file. But you can also have other Rmail files and edit them with Rmail. These files can receive mail through their inboxes, or you can move messages into them with explicit Rmail commands (see <a href="#Rmail-Output">Rmail Output</a>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>i</b> <i>file</i> <b>&lt;RET&gt;</b></td>
<td>Read <i>file</i> into Emacs and run Rmail on it (<b>rmail-input</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x set-rmail-inbox-list &lt;RET&gt;</b> <i>files</i> <b>&lt;RET&gt;</b></td>
<td>Specify inbox file names for where the current Rmail file gets mail.</td>
</tr>
<tr class="tcw">
<td><b>g</b></td>
<td>Merge new mail from current Rmail file's inboxes (<b>rmail-get-new-mail</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u g</b> <i>file</i> <b>&lt;RET&gt;</b></td>
<td>Merge new mail from inbox file <i>file</i>.</td>
</tr>
</table>
<p class="tab">To run Rmail on a file other than your primary Rmail file, you can use the <b>i</b> (<b>rmail-input</b>) command in Rmail. This visits the file in Rmail mode. You can use <b>M-x rmail-input</b> even when not in Rmail, but it is easier to type <b>C-u M-x rmail</b>, which does the same thing.<br><br>The file you read with <b>i</b> should normally be a valid mbox file. If it's not, Rmail tries to convert its text to mbox format, and visits the converted text in the buffer. If you save the buffer, that converts the file.<br><br>If you specify a file name that doesn't exist, <b>i</b> initializes a new buffer for creating a new Rmail file.<br><br>You can also select a Rmail file from a menu. In the Classify menu, choose the Input Rmail File item; then choose the Rmail file you want. The variables <b>rmail-secondary-file-directory</b> and <b>rmail-secondary-file-regexp</b> specify which files to offer in the menu: the first variable says which directory to find them in; the second says which files in that directory to offer (all those that match the regular expression). If no files match, you cannot select this menu item. These variables also apply to choosing a file for output (see <a href="#Rmail-Output">Rmail Output</a>).<br><br>The inbox files to use are specified by the variable <b>rmail-inbox-list</b>, which is buffer-local in Rmail mode. As a special exception, if you have specified no inbox files for your primary Rmail file, it uses the MAIL environment variable, or your standard system inbox.<br><br>The <b>g</b> command (<b>rmail-get-new-mail</b>) merges mail into the current Rmail file from its inboxes. If the Rmail file has no inboxes, <b>g</b> does nothing. The command <b>M-x rmail</b> also merges new mail into your primary Rmail file.<br><br>To merge mail from a file that is not the usual inbox, give the <b>g</b> key a numeric argument, as in <b>C-u g</b>. Then it reads a file name and merges mail from that file. The inbox file is not deleted or changed in any way when <b>g</b> with an argument is used. This is, therefore, a general way of merging one file of messages into another.</p>
<h2 id="Rmail-Output">Copying messages out to files</h2>
<p class="tab">These commands copy messages from a Rmail file into another file.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>o</b> <i>file</i> <b>&lt;RET&gt;</b></td>
<td>Append a full copy of the current message to the file <i>file</i> (<b>rmail-output</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-o</b> <i>file</i> <b>&lt;RET&gt;</b></td>
<td>Append a copy of the current message, as displayed, to the file <i>file</i> (<b>rmail-output-as-seen</b>).</td>
</tr>
<tr class="tcw">
<td><b>w</b> <i>file</i> <b>&lt;RET&gt;</b></td>
<td>Output only the message body to the file <i>file</i>, taking the default file name from the message '<b>Subject</b>' header.</td>
</tr>
</table>
<p class="tab">The commands <b>o</b> and <b>C-o</b> copy the current message into a specified file, adding it at the end. The two commands differ mainly in how much to copy: <b>o</b> copies the full message headers, even if they are not all visible, while <b>C-o</b> copies exactly the headers currently displayed and no more. See <a href="#Rmail-Display">Rmail Display</a>. Also, <b>o</b> converts the message to Babyl format (used by Rmail in Emacs version 22 and before) if the file is in Babyl format; <b>C-o</b> cannot output to Babyl files at all.<br><br>If the output file is currently visited in an Emacs buffer, the output commands append the message to that buffer. It is up to you to save the buffer eventually in its file.<br><br>Sometimes you may receive a message whose body holds the contents of a file. You can save the body to a file (excluding the message header) with the <b>w</b> command (<b>rmail-output-body-to-file</b>). Often these messages contain the intended file name in the '<b>Subject</b>' field, so the <b>w</b> command uses the '<b>Subject</b>' field as the default for the output file name. However, the file name is read using the minibuffer, so you can specify a different name if you want.<br><br>You can also output a message to a Rmail file chosen with a menu. In the Classify menu, choose the Output Rmail file menu item; then choose the Rmail file you want. This outputs the current message to that file, like the <b>o</b> command. The variables <b>rmail-secondary-file-directory</b> and <b>rmail-secondary-file-regexp</b> specify which files to offer in the menu: the first variable says which directory to find them in; the second says which files in that directory to offer (all those that match the regular expression). If no files match, you cannot select this menu item.<br><br>Copying a message with <b>o</b> or <b>C-o</b> gives the original copy of the message the '<b>filed</b>' attribute, so that '<b>filed</b>' appears in the mode line when such a message is current.<br><br>If you like to keep only a single copy of every mail message, set the variable <b>rmail-delete-after-output</b> to <b>t</b>; then the <b>o</b>, <b>C-o</b> and <b>w</b> commands delete the original message after copying it. (You can undelete it afterward if you want.)<br><br>The variable <b>rmail-output-file-alist</b> lets you specify intelligent defaults for the output file, based on the contents of the current message. The value should be a list whose elements have this form:</p>
<pre class="tab">(regexp . name-exp)</pre>
<p class="tab">If there's a match for <i>regexp</i> in the current message, then the default file name for output is <i>name-exp</i>. If multiple elements match the message, the first matching element decides the default file name. The subexpression <i>name-exp</i> may be a string constant giving the file name to use, or more generally it may be any Lisp expression that returns a file name as a string. <b>rmail-output-file-alist</b> applies to both <b>o</b> and <b>C-o</b>.<br><br>Rmail can automatically save messages from your primary Rmail file (the one that <b>rmail-file-name</b> specifies) to other files, based on the value of the variable <b>rmail-automatic-folder-directives</b>. This variable is a list of elements ('<b>directives</b>') that say which messages to save where. Each directive is a list consisting of an output file, followed by one or more pairs of a header name and a regular expression. If a message has a header matching the specified regular expression, that message is saved to the given file. If the directive has more than one header entry, all must match. Rmail checks directives when it shows a message from the file <b>rmail-file-name</b>, and applies the first that matches (if any). If the output file is <b>nil</b>, the message is deleted, not saved. For example, you can use this feature to save messages from a particular address, or with a particular subject, to a dedicated file.</p>
<h2 id="Rmail-Labels">Labels in Rmail</h2>
<p class="tab">Each message can have various labels assigned to it for classification. Each label has a name; different names are different labels. Any given label is either present or absent on a particular message. A few label names have standard meanings and are given to messages automatically by Rmail when appropriate; these special labels are called attributes. (See <a href="#Rmail-Attributes">Rmail Attributes</a>.) All other labels are assigned only by users.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:200px"><b>a</b> <i>label</i> <b>&lt;RET&gt;</b></td>
<td>Assign the label <i>label</i> to the current message (<b>rmail-add-label</b>).</td>
</tr>
<tr class="tcw">
<td><b>k</b> <i>label</i> <b>&lt;RET&gt;</b></td>
<td>Remove the label <i>label</i> from the current message (<b>rmail-kill-label</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-n</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Move to the next message with one of the labels <i>labels</i> (<b>rmail-next-labeled-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-p</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Move to the previous message with one of the labels <i>labels</i> (<b>rmail-previous-labeled-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>l</b> <i>labels</i> <b>&lt;RET&gt;</b>,<br><b>C-M-l</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Make a summary of all messages containing any of the labels <i>labels</i> (<b>rmail-summary-by-labels</b>).</td>
</tr>
</table>
<p class="tab">The <b>a</b> (<b>rmail-add-label</b>) and <b>k</b> (<b>rmail-kill-label</b>) commands allow you to assign or remove any label on the current message. If the <i>label</i> argument is empty, it means to assign or remove the same label most recently assigned or removed.<br><br>Once you have given messages labels to classify them as you want, there are three ways to use the labels: in moving, in summaries, and in sorting.<br><br><b>C-M-n</b> <i>labels</i> <b>&lt;RET&gt;</b> (<b>rmail-next-labeled-message</b>) moves to the next message with one of the labels labels. The argument labels specifies one or more label names, separated by commas. <b>C-M-p</b> (<b>rmail-previous-labeled-message</b>) is similar, but moves backwards to previous messages. A numeric argument to either command serves as a repeat count.<br><br>The command <b>C-M-l</b> <i>labels</i> <b>&lt;RET&gt;</b> (<b>rmail-summary-by-labels</b>) displays a summary containing only the messages with at least one of a specified set of labels. The argument labels is one or more label names, separated by commas. See <a href="#Rmail-Summary">Rmail Summary</a>, for information on summaries.<br><br>If the labels argument to <b>C-M-n</b>, <b>C-M-p</b> or <b>C-M-l</b> is empty, it means to use the last set of labels specified for any of these commands.<br><br>See <a href="#Rmail-Sorting">Rmail Sorting</a>, for information on sorting messages with labels.</p>
<h2 id="Rmail-Attributes">Rmail attributes</h2>
<p class="tab">Some labels such as '<b>deleted</b>' and '<b>filed</b>' have built-in meanings, and Rmail assigns them to messages automatically at appropriate times; these labels are called attributes. Here is a list of Rmail attributes:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:120px">'<b>unseen</b>'</td>
<td>Means the message has never been current. Assigned to messages when they come from an inbox file, and removed when a message is made current. When you start Rmail, it initially shows the first message with this attribute.</td>
</tr>
<tr class="tcw">
<td>'<b>deleted</b>'</td>
<td>Means the message is deleted. Assigned by deletion commands and removed by undeletion commands (see <a href="#Rmail-Deletion">Rmail Deletion</a>).</td>
</tr>
<tr class="tcw">
<td>'<b>filed</b>'</td>
<td>Means the message was copied to some other file. Assigned by the <b>o</b> and <b>C-o</b> file output commands (see <a href="#Rmail-Output">Rmail Output</a>).</td>
</tr>
<tr class="tcw">
<td>'<b>answered</b>'</td>
<td>Means you have mailed an answer to the message. Assigned by the <b>r</b> command (<b>rmail-reply</b>). See <a href="#Rmail-Reply">Rmail Reply</a>.</td>
</tr>
<tr class="tcw">
<td>'<b>forwarded</b>'</td>
<td>Means you have forwarded the message. Assigned by the <b>f</b> command (<b>rmail-forward</b>). See <a href="#Rmail-Reply">Rmail Reply</a>.</td>
</tr>
<tr class="tcw">
<td>'<b>edited</b>'</td>
<td>Means you have edited the text of the message within Rmail. See <a href="#Rmail-Editing">Rmail Editing</a>.</td>
</tr>
<tr class="tcw">
<td>'<b>resent</b>'</td>
<td>Means you have resent the message. Assigned by the command <b>M-x rmail-resend</b>. See <a href="#Rmail-Reply">Rmail Reply</a>.</td>
</tr>
<tr class="tcw">
<td>'<b>retried</b>'</td>
<td>Means you have retried a failed outgoing message. Assigned by the command <b>M-x rmail-retry-failure</b>. See <a href="#Rmail-Reply">Rmail Reply</a>.</td>
</tr>
</table>
<p class="tab">All other labels are assigned or removed only by users, and have no standard meaning.</p>
<h2 id="Rmail-Reply">Sending replies</h2>
<p class="tab">Rmail has several commands to send outgoing mail. See <a href="#Sending-Mail">Sending Mail</a>, for information on using Message mode, including certain features meant to work with Rmail. What this section documents are the special commands of Rmail for entering the mail buffer. Note that the usual keys for sending mail&mdash;<b>C-x m</b>, <b>C-x 4 m</b>, and <b>C-x 5 m</b>&mdash;also work normally in Rmail mode.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>m</b></td>
<td>Send a message (<b>rmail-mail</b>).</td>
</tr>
<tr class="tcw">
<td><b>c</b></td>
<td>Continue editing the already started outgoing message (<b>rmail-continue</b>).</td>
</tr>
<tr class="tcw">
<td><b>r</b></td>
<td>Send a reply to the current Rmail message (<b>rmail-reply</b>).</td>
</tr>
<tr class="tcw">
<td><b>f</b></td>
<td>Forward the current message to other users (<b>rmail-forward</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-u f</b></td>
<td>Resend the current message to other users (<b>rmail-resend</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-m</b></td>
<td>Try sending a bounced message a second time (<b>rmail-retry-failure</b>).</td>
</tr>
</table>
<p class="tab">The most common reason to send a message while in Rmail is to reply to the message you are reading. To do this, type <b>r</b> (<b>rmail-reply</b>). This displays a mail composition buffer in another window, much like <b>C-x 4 m</b>, but preinitializes the '<b>Subject</b>', '<b>To</b>', '<b>CC</b>', '<b>In-reply-to</b>' and '<b>References</b>' header fields based on the message you are replying. The '<b>To</b>' field starts out as the address of the person who sent the message you received, and the '<b>CC</b>' field starts out with all the other recipients of that message.<br><br>You can exclude certain recipients from being included automatically in replies, using the variable <b>mail-dont-reply-to-names</b>. Its value should be a regular expression; any recipients that match are excluded from the '<b>CC</b>' field. They are also excluded from the '<b>To</b>' field, unless this would leave the field empty. If this variable is nil, then the first time you compose a reply it is initialized to a default value that matches your address.<br><br>To omit the '<b>CC</b>' field completely for a particular reply, enter the reply command with a numeric argument: <b>C-u r</b> or <b>1 r</b>. This means to reply only to the sender of the original message.<br><br>Once the mail composition buffer is initialized, editing and sending the mail goes as usual (see <a href="#Sending-Mail">Sending Mail</a>). You can edit the presupplied header fields if they are not what you want. You can also use commands such as <b>C-c C-y</b>, which yanks in the message that you are replying to (see <a href="#Mail-Commands">Mail Commands</a>). You can also switch to the Rmail buffer, select a different message there, switch back, and yank the new current message.<br><br>Sometimes a message does not reach its destination. Mailers usually send the failed message back to you, enclosed in a failure message. The Rmail command <b>M-m</b> (<b>rmail-retry-failure</b>) prepares to send the same message a second time: it sets up a mail composition buffer with the same text and header fields as before. If you type <b>C-c C-c</b> right away, you send the message again the same as the first time. Alternatively, you can edit the text or headers and then send it. The variable <b>rmail-retry-ignored-headers</b>, in the same format as <b>rmail-ignored-headers</b> (see <a href="#Rmail-Display">Rmail Display</a>), controls which headers are stripped from the failed message when retrying it.<br><br>Another frequent reason to send mail in Rmail is to forward the current message to other users. <b>f</b> (<b>rmail-forward</b>) makes this easy by preinitializing the mail composition buffer with the current message as the text, and a subject of the form [from: subject], where from and subject are the sender and subject of the original message. All you have to do is fill in the recipients and send. When you forward a message, recipients get a message which is "from" you, and which has the original message in its contents.<br><br>Rmail offers two formats for forwarded messages. The default is to use MIME (see <a href="#Rmail-Display">Rmail Display</a>) format. This includes the original message as a separate part. You can use a simpler format if you prefer, by setting the variable <b>rmail-enable-mime-composing</b> to <b>nil</b>. In this case, Rmail only includes the original message enclosed between two delimiter lines. It also modifies every line that starts with a dash, by inserting '<b>-</b> ' at the start of the line. When you receive a forwarded message in this format, if it contains something besides ordinary text&mdash;for example, program source code&mdash;you might find it useful to undo that transformation. You can do this by selecting the forwarded message and typing <b>M-x unforward-rmail-message</b>. This command extracts the original forwarded message, deleting the inserted '<b>-</b> ' strings, and inserts it into the Rmail file as a separate message immediately following the current one.<br><br>Resending is an alternative similar to forwarding; the difference is that resending sends a message that is "from" the original sender, only as it reached you&mdash;with a few added header fields ('<b>Resent-From</b>' and '<b>Resent-To</b>') to indicate that it came via you. To resend a message in Rmail, use <b>C-u f</b>. (f runs <b>rmail-forward</b>, which invokes <b>rmail-resend</b> if you provide a numeric argument.)<br><br>Use the <b>m</b> (<b>rmail-mail</b>) command to start editing an outgoing message that is not a reply. It leaves the header fields empty. Its only difference from <b>C-x 4 m</b> is that it makes the Rmail buffer accessible for <b>C-c C-y</b>, only as <b>r</b> does.<br><br>The <b>c</b> (<b>rmail-continue</b>) command resumes editing the mail composition buffer, to finish editing an outgoing message you were already composing, or to alter a message you have sent.<br><br>If you set the variable <b>rmail-mail-new-frame</b> to a non-nil value, then all the Rmail commands to start sending a message create a new frame where edits are done. This frame is deleted when you send the message.<br><br>All the Rmail commands to send a message use the mail-composition method that you have chosen (see <a href="#Mail-Methods">Mail Methods</a>).</p>
<h2 id="Rmail-Summary">Summaries</h2>
<p class="tab">A summary is a buffer containing one line per message to give you an overview of the mail in a Rmail file. Each line shows the message number and date, the sender, the line count, the labels, and the subject. Moving point in the summary buffer selects messages as you move to their summary lines. Almost all Rmail commands are valid in the summary buffer also; when used there, they apply to the message described by the current line of the summary.<br><br>A summary buffer applies to a single Rmail file only; if you are editing multiple Rmail files, each one can have its own summary buffer. The summary buffer name is made by appending '<b>-summary</b>' to the Rmail buffer's name. Normally only one summary buffer is displayed at a time.</p>
<ul>
<li><a href="#Rmail-Make-Summary">Rmail Make Summary</a>: Making various sorts of summaries.</li>
<li><a href="#Rmail-Summary-Edit">Rmail Summary Edit</a>: Manipulating messages from the summary.</li>
</ul>
<h2 id="Rmail-Make-Summary">Making summaries</h2>
<p class="tab">Here are the commands to create a summary for the current Rmail buffer. Once the Rmail buffer has a summary, changes in the Rmail buffer (such as deleting or expunging messages, and getting new mail) automatically update the summary.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>h</b>, <b>C-M-h</b></td>
<td>Summarize all messages (<b>rmail-summary</b>).</td>
</tr>
<tr class="tcw">
<td><b>l</b> <i>labels</i> <b>&lt;RET&gt;</b>,<br><b>C-M-l</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Summarize messages that have one or more of the specified labels (<b>rmail-summary-by-labels</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-r</b> <i>rcpts</i> <b>&lt;RET&gt;</b></td>
<td>Summarize messages that match the specified recipients (<b>rmail-summary-by-recipients</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-t</b> <i>topic</i> <b>&lt;RET&gt;</b></td>
<td>Summarize messages with a match for the specified <i>regexp</i> topic in their subjects (<b>rmail-summary-by-topic</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-s</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Summarize messages whose headers match the specified regular expression <i>regexp</i> (<b>rmail-summary-by-regexp</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-M-f</b> <i>senders</i> <b>&lt;RET&gt;</b></td>
<td>Summarize messages that match the specified senders. (<b>rmail-summary-by-senders</b>).</td>
</tr>
</table>
<p class="tab">The <b>h</b> or <b>C-M-h</b> (<b>rmail-summary</b>) command fills the summary buffer for the current Rmail buffer with a summary of all the messages in the buffer. It then displays and selects the summary buffer in another window.<br><br><b>C-M-l</b> <i>labels</i> <b>&lt;RET&gt;</b> (<b>rmail-summary-by-labels</b>) makes a partial summary mentioning only the messages that have one or more of the labels. Labels should contain label names separated by commas.<br><br><b>C-M-r</b> <i>rcpts</i> <b>&lt;RET&gt;</b> (<b>rmail-summary-by-recipients</b>) makes a partial summary mentioning only the messages that have one or more recipients matching the regular expression <i>rcpts</i>. You can use commas to separate multiple regular expressions. These are matched against the '<b>To</b>', '<b>From</b>', and '<b>CC</b>' headers (supply a prefix argument to exclude this header).<br><br><b>C-M-t</b> <i>topic</i> <b>&lt;RET&gt;</b> (<b>rmail-summary-by-topic</b>) makes a partial summary mentioning only the messages whose subjects have a match for the regular expression topic. You can use commas to separate multiple regular expressions. With a prefix argument, the match is against the whole message, not only the subject.<br><br><b>C-M-s</b> <i>regexp</i> <b>&lt;RET&gt;</b> (<b>rmail-summary-by-regexp</b>) makes a partial summary that mentions only the messages whose headers (including the date and the subject lines) match the regular expression <i>regexp</i>.<br><br><b>C-M-f</b> <i>senders</i> <b>&lt;RET&gt;</b> (<b>rmail-summary-by-senders</b>) makes a partial summary that mentions only the messages whose '<b>From</b>' fields match the regular expression senders. You can use commas to separate multiple regular expressions.<br><br>Note that there is only one summary buffer for any Rmail buffer; making any kind of summary discards any previous summary.<br><br>The variable <b>rmail-summary-window-size</b> says how many lines to use for the summary window. The variable <b>rmail-summary-line-count-flag</b> controls whether the summary line for a message should include the line count of the message. Setting this option to nil might speed up the generation of summaries.</p>
<h2 id="Rmail-Summary-Edit">Editing in summaries</h2>
<p class="tab">You can use the Rmail summary buffer to do almost anything you can do in the Rmail buffer itself. In fact, once you have a summary buffer, there's no need to switch back to the Rmail buffer.<br><br>You can select and display various messages in the Rmail buffer, from the summary buffer, only by moving point in the summary buffer to different lines. It doesn't matter what Emacs command you use to move point; whichever line point is on at the end of the command, that message is selected in the Rmail buffer.<br><br>Almost all Rmail commands work in the summary buffer and in the Rmail buffer. Thus, <b>d</b> in the summary buffer deletes the current message, <b>u</b> undeletes, and <b>x</b> expunges. (However, in the summary buffer, a numeric argument to <b>d</b>, <b>C-d</b> and <b>u</b> serves as a repeat count. A negative argument reverses the meaning of <b>d</b> and <b>C-d</b>. Also, if there are no more undeleted messages in the relevant direction, the delete commands go to the first or last message, rather than staying on the current message.) <b>o</b> and <b>C-o</b> output the current message to a FILE; <b>r</b> starts a reply to it; etc. You can scroll the current message while remaining in the summary buffer using <b>&lt;SPC&gt;</b> and <b>&lt;DEL&gt;</b>.<br><br><b>M-u</b> (<b>rmail-summary-undelete-many</b>) undeletes all deleted messages in the summary. A prefix argument means to undelete that many of the previous deleted messages.<br><br>The Rmail commands to move between messages also work in the summary buffer, but with a twist: they move through the set of messages included in the summary. They also ensure the Rmail buffer appears on the screen (unlike cursor motion commands, which update the contents of the Rmail buffer but don't display it in a window unless it already appears). Here is a list of these commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>n</b></td>
<td>Move to the next line, skipping lines saying &#96;deleted', and select its message (<b>rmail-summary-next-msg</b>).</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Move to previous line, skipping lines saying &#96;deleted', and select its message (<b>rmail-summary-previous-msg</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-n</b></td>
<td>Move to the next line and select its message (<b>rmail-summary-next-all</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-p</b></td>
<td>Move to previous line and select its message (<b>rmail-summary-previous-all</b>).</td>
</tr>
<tr class="tcw">
<td><b>&gt;</b></td>
<td>Move to the last line, and select its message (<b>rmail-summary-last-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;</b></td>
<td>Move to the first line, and select its message (<b>rmail-summary-first-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>j</b>, <b>&lt;RET&gt;</b></td>
<td>Select the message on the current line (ensuring that the Rmail buffer appears on the screen; <b>rmail-summary-goto-msg</b>). With argument <i>n</i>, select message number n and move to its line in the summary buffer; this signals an error if the message is not listed in the summary buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-s</b> <i>pattern</i> <b>&lt;RET&gt;</b></td>
<td>Search through messages for pattern starting with the current message; select the message found, and move point in the summary buffer to that message's line (<b>rmail-summary-search</b>). A prefix argument acts as a repeat count; a negative argument means search backward (equivalent to <b>rmail-summary-search-backward</b>.)</td>
</tr>
<tr class="tcw">
<td><b>C-M-n</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Move to the next message with at least one of the specified labels (<b>rmail-summary-next-labeled-message</b>). Labels is a comma-separated list of labels. A prefix argument acts as a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>C-M-p</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Move to the previous message with at least one of the specified labels (<b>rmail-summary-previous-labeled-message</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-n &lt;RET&gt;</b></td>
<td>Move to the next message with the same subject as the current message (<b>rmail-summary-next-same-subject</b>). A prefix argument acts as a repeat count.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-p &lt;RET&gt;</b></td>
<td>Move to the previous message with the same subject as the current message (<b>rmail-summary-previous-same-subject</b>).</td>
</tr>
</table>
<p class="tab">Deletion, undeletion, and getting new mail, and even selection of a different message all update the summary buffer when you do them in the Rmail buffer. If the variable <b>rmail-redisplay-summary</b> is non-nil, these actions also bring the summary buffer back onto the screen.<br><br>When you are finished using the summary, type <b>Q</b> (<b>rmail-summary-wipe</b>) to delete the summary buffer's window. You can also exit Rmail while in the summary: <b>q</b> (<b>rmail-summary-quit</b>) deletes the summary window, then exits from Rmail by saving the Rmail file and switching to another buffer. Alternatively, <b>b</b> (<b>rmail-summary-bury</b>) buries the Rmail summary and buffer.</p>
<h2 id="Rmail-Sorting">Sorting the Rmail file</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:330px"><b>C-c C-s C-d</b>,<br><b>M-x rmail-sort-by-date</b></td>
<td>Sort messages of current Rmail buffer by date.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s C-s</b>,<br><b>M-x rmail-sort-by-subject</b></td>
<td>Sort messages of current Rmail buffer by subject.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s C-a</b>,<br><b>M-x rmail-sort-by-author</b></td>
<td>Sort messages of current Rmail buffer by author's name.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s C-r</b>,<br><b>M-x rmail-sort-by-recipient</b></td>
<td>Sort messages of current Rmail buffer by recipient's names.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s C-c</b>,<br><b>M-x rmail-sort-by-correspondent</b></td>
<td>Sort messages of current Rmail buffer by the name of the other correspondent.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s C-l</b>,<br><b>M-x rmail-sort-by-lines</b></td>
<td>Sort messages of current Rmail buffer by number of lines.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s C-k &lt;RET&gt;</b> <i>labels</i> <b>&lt;RET&gt;</b>, <b>M-x rmail-sort-by-labels &lt;RET&gt;</b> <i>labels</i> <b>&lt;RET&gt;</b></td>
<td>Sort messages of current Rmail buffer by labels. The argument labels should be a comma-separated list of labels. The order of these labels specifies the order of messages; messages with the first label come first, messages with the second label come second, etc. Messages that have none of these labels come last.</td>
</tr>
</table>
<p class="tab">The Rmail sort commands perform a stable sort: if there is no reason to prefer either one of two messages, their order remains unchanged. You can use this to sort by more than one criterion. For example, if you use <b>rmail-sort-by-date</b> and then <b>rmail-sort-by-author</b>, messages from the same author appear in order by date.<br><br>With a prefix argument, all these commands reverse the order of comparison. This means they sort messages from newest to oldest, from biggest to smallest, or in reverse alphabetical order.<br><br>The same keys in the summary buffer run similar functions; for example, <b>C-c C-s C-l</b> runs <b>rmail-summary-sort-by-lines</b>. Note that these commands always sort the whole Rmail buffer, even if the summary is only showing a subset of messages.<br><br>Note that you cannot undo a sort, so you may want to save the Rmail buffer before sorting it.</p>
<h2 id="Rmail-Display">Displaying Rmail messages</h2>
<p class="tab">This section describes how Rmail displays mail headers, MIME sections and attachments, URLs, and encrypted messages.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>t</b></td>
<td>Toggle display of complete header (<b>rmail-toggle-header</b>).</td>
</tr>
</table>
<p class="tab">Before displaying each message for the first time, Rmail reformats its header, hiding uninteresting header fields to reduce clutter. The <b>t</b> (<b>rmail-toggle-header</b>) command toggles this, switching between showing the reformatted header fields and showing the complete, original header. With a positive prefix argument, the command shows the reformatted header; with a zero or negative prefix argument, it shows the full header. Selecting the message again also reformats it if necessary.<br><br>The variable <b>rmail-ignored-headers</b> holds a regular expression specifying the header fields to hide; any matching header line is hidden. The variable <b>rmail-nonignored-headers</b> overrides this: any header field matching that regular expression is shown even if it matches <b>rmail-ignored-headers</b> too. The variable <b>rmail-displayed-headers</b> is an alternative to these two variables; if non-nil, this should be a regular expression specifying which headers to display (the default is <b>nil</b>).<br><br>Rmail highlights certain header fields that are especially interesting&mdash;by default, the '<b>From</b>' and '<b>Subject</b>' fields. This highlighting uses the <b>rmail-highlight</b> face. The variable <b>rmail-highlighted-headers</b> holds a regular expression specifying the header fields to highlight; if it matches the beginning of a header field, that whole field is highlighted. To disable this feature, set <b>rmail-highlighted-headers</b> to <b>nil</b>.<br><br>If a message is in <a href="/jargon/m/mime.htm">MIME</a> (Multipurpose Internet Mail Extensions) format and contains multiple parts (MIME entities), Rmail displays each part with a tagline. The tagline summarizes the part's index, size, and content type. Depending on the content type, it may also contain one or more buttons; these perform actions such as saving the part into a file.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>&lt;RET&gt;</b></td>
<td>Hide or show the MIME part at point (<b>rmail-mime-toggle-hidden</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>Move point to the next MIME tagline button. (<b>rmail-mime-next-item</b>).</td>
</tr>
<tr class="tcw">
<td><b>S-&lt;TAB&gt;</b></td>
<td>Move point to the previous MIME part (<b>rmail-mime-previous-item</b>).</td>
</tr>
<tr class="tcw">
<td><b>v</b></td>
<td>Toggle between MIME display and raw message (<b>rmail-mime</b>).</td>
</tr>
</table>
<p class="tab">Each plain-text MIME part is initially displayed immediately after its tagline, as part of the Rmail buffer, while MIME parts of other types are represented only by their taglines, with their actual contents hidden. In either case, you can toggle a MIME part between its "displayed" and "hidden" states by typing <b>&lt;RET&gt;</b> anywhere in the part&mdash;or anywhere in its tagline (except for buttons for other actions, if there are any). Type <b>&lt;RET&gt;</b> (or click with the mouse) to activate a tagline button, and <b>&lt;TAB&gt;</b> to cycle point between tagline buttons.<br><br>The <b>v</b> (<b>rmail-mime</b>) command toggles between the default MIME display described above, and a "raw" display showing the undecoded MIME data. With a prefix argument, this command toggles the display of only an entity at point.<br><br>To prevent Rmail from handling MIME decoded messages, change the variable <b>rmail-enable-mime</b> to <b>nil</b>. When this is the case, the <b>v</b> (<b>rmail-mime</b>) command instead creates a temporary buffer to display the current MIME message.<br><br>If the current message is an encrypted one, use the command <b>M-x rmail-epa-decrypt</b> to decrypt it, using the EasyPG library.<br><br>You can highlight and activate URLs in the Rmail buffer using Goto Address mode:</p>
<pre class="tab">(add-hook 'rmail-show-message-hook 'goto-address-mode)</pre>
<p class="tab">Then you can browse these URLs by clicking them with <b>Mouse-2</b> (or <b>Mouse-1</b> quickly) or by moving to one and typing <b>C-c &lt;RET&gt;</b>. See <a href="#Goto-Address-mode">Activating URLs</a>.</p>
<h2 id="Rmail-Coding">Rmail and coding systems</h2>
<p class="tab">Rmail automatically decodes messages which contain non-ASCII characters, only as Emacs does with files you visit and with subprocess output. Rmail uses the standard '<b>charset=charset</b>' header in the message, if any, to determine how the message was encoded by the sender. It maps charset into the corresponding Emacs coding system (see <a href="#Coding-Systems">Coding Systems</a>), and uses that coding system to decode message text. If the message header doesn't have the '<b>charset</b>' specification, or if charset is not recognized, Rmail chooses the coding system with the usual Emacs heuristics and defaults (see <a href="#Recognize-Coding">Recognize Coding</a>).<br><br>Occasionally, a message is decoded incorrectly, either because Emacs guessed the wrong coding system in the absence of the '<b>charset</b>' specification, or because the specification was inaccurate. For example, a misconfigured mailer could send a message with a '<b>charset=iso-8859-1</b>' header when the message is actually encoded in koi8-r. When you see the message text garbled, or some of its characters displayed as hex codes or empty boxes, this may have happened.<br><br>You can correct the problem by decoding the message again using the right coding system, if you can figure out or guess which one is right. To do this, invoke the <b>M-x rmail-redecode-body command</b>. It reads the name of a coding system, and then redecodes the message using the coding system you specified. If you specified the right coding system, the result should be readable.</p>
<h2 id="Rmail-Editing">Editing within a message</h2>
<p class="tab">Most of the usual Emacs key bindings are available in Rmail mode, though a few, such as <b>C-M-n</b> and <b>C-M-h</b>, are redefined by Rmail for other purposes. However, the Rmail buffer is normally read-only, and most of the letters are redefined as Rmail commands. If you want to edit the text of a message, you must use the Rmail command <b>e</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>e</b></td>
<td>Edit the current message as ordinary text.</td>
</tr>
</table>
<p class="tab">The <b>e</b> command (<b>rmail-edit-current-message</b>) switches from Rmail mode into Rmail Edit mode, another major mode which is nearly the same as Text mode. The mode line indicates this change.<br><br>In Rmail Edit mode, letters insert themselves as usual and the Rmail commands are not available. You can edit the message body and header fields. When you are finished editing the message, type <b>C-c C-c</b> to switch back to Rmail mode. Alternatively, you can return to Rmail mode but cancel any editing that you have done, by typing <b>C-c C-]</b>.<br><br>Entering Rmail Edit mode runs the hook <b>text-mode-hook</b>; then it runs the hook <b>rmail-edit-mode-hook</b> (see <a href="#Hooks">Hooks</a>). Returning to ordinary Rmail mode adds the attribute '<b>edited</b>' to the message, if you have made any changes in it.</p>
<h2 id="Rmail-Digest">Digest messages</h2>
<p class="tab">A digest message is a message that exists to contain and carry other messages. Digests are used on some mailing lists; all the messages that arrive for the list each day or week are put in a single digest that is then sent to the subscribers daily or weekly. Transmitting the single digest uses less computer time than transmitting the individual messages even though the total size is the same, because of the per-message overhead in network mail transmission.<br><br>When you receive a digest message, the most convenient way to read it is to undigestify it: to turn it back into many individual messages. Then you can read and delete the individual messages as it suits you. To do this, select the digest message and type the command <b>M-x undigestify-rmail-message</b>. This extracts the submessages as separate Rmail messages, and inserts them following the digest. The digest message itself is flagged as deleted.</p>
<h2 id="Rmail-Rot13">Reading rot13 messages</h2>
<p class="tab">Mailing list messages that might offend or annoy some readers are sometimes encoded in a simple code called rot13&mdash;so named because it rotates the alphabet by 13 letters. This code is not for secrecy, as it provides none; rather, it enables those who want to avoid seeing the real text of the message. For example, a review of a film might use rot13 to hide important plot points.<br><br>To view a buffer that uses the rot13 code, use the command <b>M-x rot13-other-window</b>. This displays the current buffer in another window which applies the code when displaying the text.</p>
<h2 id="Movemail">The movemail program</h2>
<p class="tab">Rmail uses the movemail program to move mail from your inbox to your Rmail file (see <a href="#Rmail-Inbox">Rmail Inbox</a>). When loaded for the first time, Rmail attempts to locate the movemail program and determine its version. There are two versions of the movemail program: the native one, shipped with GNU Emacs (the "emacs version") and the one included in GNU mailutils (the "mailutils version"). They support the same command line syntax and the same basic subset of options. However, the Mailutils version offers additional features.<br><br>The Emacs version of movemail can retrieve mail from the usual Unix mailbox formats and from remote mailboxes using the POP3 protocol.<br><br>The Mailutils version can handle a wide set of mailbox formats, such as plain Unix mailboxes, maildir and MH mailboxes, etc. It can access remote mailboxes using the POP3 or IMAP4 protocol, and can retrieve mail from them using a TLS encrypted channel. It also accepts mailbox arguments in URL form. The detailed description of mailbox URLs is in URL. In short, a URL is:</p>
<pre class="tab">proto://[user[:password]@]host-or-file-name</pre>
<p class="tab">Where square brackets denote optional elements.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:190px"><b>proto</b></td>
<td>Specifies the mailbox protocol, or format to use. The exact semantics of the rest of URL elements depends on the actual value of proto (see below).</td>
</tr>
<tr class="tcw">
<td><b>user</b></td>
<td>Username to access the remote mailbox.</td>
</tr>
<tr class="tcw">
<td><b>password</b></td>
<td>User password to access the remote mailbox.</td>
</tr>
<tr class="tcw">
<td><b>host-or-file-name</b></td>
<td>Hostname of the remote server for remote mailboxes or file name of a local mailbox.</td>
</tr>
</table>
<p class="tab">Proto can be one of:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>mbox</b></td>
<td>Usual Unix mailbox format. In this case, neither user nor pass are used, and <b>host-or-file-name</b> denotes the file name of the mailbox file, e.g., <b>mbox://var/spool/mail/smith</b>.</td>
</tr>
<tr class="tcw">
<td><b>mh</b></td>
<td>A local mailbox in the MH format. User and pass are not used. <b>Host-or-file-name</b> denotes the name of MH folder, e.g., <b>mh://Mail/inbox</b>.</td>
</tr>
<tr class="tcw">
<td><b>maildir</b></td>
<td>A local mailbox in the maildir format. User and pass are not used, and <b>host-or-file-name</b> denotes the name of maildir mailbox, e.g., <b>maildir://mail/inbox</b>.</td>
</tr>
<tr class="tcw">
<td><b>file</b></td>
<td>Any local mailbox format. Its actual format is detected automatically by movemail.</td>
</tr>
<tr class="tcw">
<td><b>pop</b></td>
<td>A remote mailbox to be accessed via POP3 protocol. User specifies the remote username to use, pass may be used to specify the user password, <b>host-or-file-name</b> is the name or IP address of the remote mail server to connect to; e.g., <b>pop://smith:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfd8cadaccccd2daffcddad2d0cbda91ccdacdc9dacd91d1dacb">[email&#160;protected]</a></b>.</td>
</tr>
<tr class="tcw">
<td><b>imap</b></td>
<td>A remote mailbox to be accessed via IMAP4 protocol. User specifies the remote username to use, pass may be used to specify the user password, <b>host-or-file-name</b> is the name or IP address of the remote mail server to connect to; e.g., <b>imap://smith:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bed9cbdbcdcdd3dbfeccdbd3d1cadb90cddbccc8dbcc90d0dbca">[email&#160;protected]</a></b>.</td>
</tr>
</table>
<p class="tab">Alternatively, you can specify the file name of the mailbox to use. This is equivalent to specifying the '<b>file</b>' protocol:</p>
<pre class="tab">/var/spool/mail/user == file://var/spool/mail/user</pre>
<p class="tab">The variable <b>rmail-movemail-program</b> controls which version of movemail to use. If that is a string, it specifies the absolute file name of the movemail executable. If it's <b>nil</b>, Rmail searches for movemail in the directories listed in <b>rmail-movemail-search-path</b>, then in <b>exec-path</b> (see <a href="#Shell">Shell</a>), then in <b>exec-directory</b>.</p>
<h2 id="Remote-Mailboxes">Retrieving mail from remote mailboxes</h2>
<p class="tab">Some sites use a method called POP for accessing users' inbox data instead of storing the data in inbox files. By default, the Emacs movemail can work with POP (unless the Emacs configure script was run with the option '<b>--without-pop</b>').<br><br>Similarly, the Mailutils movemail by default supports POP, unless it was configured with the '<b>--disable-pop</b>' option.<br><br>Both versions of movemail only work with POP3, not with older versions of POP.<br><br>No matter which flavor of movemail you use, you can specify a POP inbox using a POP URL (see <a href="#Movemail">Movemail</a>). A POP URL is a "file name" of the form '<b>pop://<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f4818791869a959991b49c9b87809a959991">[email&#160;protected]</a></b>', where hostname is the hostname or IP address of the remote mail server and username is the username on that server. Additionally, you may specify the password in the mailbox URL: '<b>pop://username:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d4a4b5a7a7a3bba6b094bcbba7a0bab5b9b1">[email&#160;protected]</a></b>'. In this case, password takes preference over the one set by <b>rmail-remote-password</b> (see below). This is especially useful if you have several remote mailboxes with different passwords.<br><br>For backward compatibility, Rmail also supports an alternative way of specifying remote POP mailboxes. Specifying an inbox name in the form '<b>po:username:hostname</b>' is equivalent to '<b>pop://<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="760305130418171b13361e19050218171b13">[email&#160;protected]</a></b>'. If you omit the :hostname part, the MAILHOST environment variable specifies the machine on which to look for the POP server.<br><br>Another method for accessing remote mailboxes is IMAP. This method is supported only by the Mailutils movemail. To specify an IMAP mailbox in the inbox list, use the following mailbox URL: '<b>imap://username[:password]@hostname</b>'. The password part is optional, as described above.<br><br>Accessing a remote mailbox may require a password. Rmail uses the following algorithm to retrieve it:</p>
<ol>
<li>If a password is present in the mailbox URL (see above), it is used.</li>
<li>If the variable <b>rmail-remote-password-required</b> is <b>nil</b>, Rmail assumes no password is required.</li>
<li>If the variable <b>rmail-remote-password</b> is <b>non-nil</b>, its value is used.</li>
<li>Otherwise, Rmail asks you for the password to use.</li>
</ol>
<p class="tab">If you need to pass additional command-line flags to movemail, set the variable <b>rmail-movemail-flags</b> a list of the flags you want to use. Do not use this variable to pass the '<b>-p</b>' flag to preserve your inbox contents; use <b>rmail-preserve-inbox</b> instead.<br><br>The movemail program installed at your site may support Kerberos authentication (the Emacs movemail does so if Emacs was configured with the option --with-kerberos or --with-kerberos5). If it's supported, it is used by default whenever you attempt to retrieve POP mail when <b>rmail-remote-password</b> and <b>rmail-remote-password-required</b> are unset.<br><br>Some POP servers store messages in reverse order. If your server does this, and you would rather read your mail in the order it was received, you can tell movemail to reverse the order of downloaded messages by adding the '<b>-r</b>' flag to <b>rmail-movemail-flags</b>.<br><br>Mailutils movemail supports TLS encryption. If you want to use it, add the '<b>--tls</b>' flag to <b>rmail-movemail-flags</b>.</p>
<h2 id="Other-Mailbox-Formats">Retrieving mail from local mailboxes in various formats</h2>
<p class="tab">If your incoming mail is stored on a local machine in a format other than Unix mailbox, you need the Mailutils movemail to retrieve it. For example, to access mail from a inbox in maildir format located in <b>/var/spool/mail/in</b>, you would include the following in the Rmail inbox list:</p>
<pre class="tab">maildir://var/spool/mail/in</pre>
<h2 id="Gnus">Gnus: The Gnu news reader</h2>
<p class="tab">Gnus is an Emacs package primarily designed for reading and posting Usenet news. It can also read and respond to messages from some other sources&mdash;email, remote directories, digests, etc. Here we introduce Gnus and describe several basic features.</p>
<ul>
<li><a href="#Buffers-of-Gnus">Buffers of Gnus</a>: The group, summary, and article buffers.</li>
<li><a href="#Gnus-Startup">Gnus Startup</a>: What to know about starting Gnus.</li>
<li><a href="#Gnus-Group-Buffer">Gnus Group Buffer</a>: A short description of Gnus group commands.</li>
<li><a href="#Gnus-Summary-Buffer">Gnus Summary Buffer</a>: A short description of Gnus summary commands.</li>
</ul>
<h2 id="Buffers-of-Gnus">Gnus buffers</h2>
<p class="tab">Gnus uses several buffers to display information and to receive commands. The three most commonly-used Gnus buffers are the group buffer, the summary buffer and the article buffer.<br><br>The group buffer contains a list of article sources (e.g., newsgroups and e-mail inboxes), which are collectively referred to as groups. This is the first buffer Gnus displays when it starts up. It normally displays only the groups that you subscribe to and contain unread articles. From this buffer, you can select a group to read.<br><br>The summary buffer lists the articles in a single group, showing one article per line. By default, it displays each article's author, subject, and line number, but this is customizable. The summary buffer is created when you select a group in the group buffer, and is killed when you exit the group.<br><br>From the summary buffer, you can choose an article to view. The article is displayed in the article buffer. In normal Gnus usage, you view this buffer but do not select it&mdash;all useful Gnus commands can be invoked from the summary buffer. But you can select the article buffer, and execute Gnus commands from it, if you want.</p>
<h2 id="Gnus-Startup">When Gnus starts up</h2>
<p class="tab">If your system is set up for reading Usenet news, getting started with Gnus is easy&mdash;only type <b>M-x gnus</b>.<br><br>On starting up, Gnus reads your news initialization file: a file named .newsrc in your home directory which lists your Usenet newsgroups and subscriptions (this file is not unique to Gnus; it is used by other newsreader programs). It then tries to contact the system's default news server, which is often specified by the NNTPSERVER <a href="/jargon/e/envivari.htm">environment variable</a>.<br><br>If your system does not have a default news server, or if you want to use Gnus for reading e-mail, then before invoking <b>M-x gnus</b> you need to tell Gnus where to get news and/or mail. To do this, customize the variables <b>gnus-select-method</b> and/or <b>gnus-secondary-select-methods</b>.<br><br>Once Gnus has started up, it displays the group buffer. By default, the group buffer shows only a small number of subscribed groups. Groups with other statuses&mdash;unsubscribed, killed, or zombie&mdash;are hidden. The first time you start Gnus, any group that you are not subscribed is made into a killed group; any group that subsequently appears on the news server becomes a zombie group.<br><br>To proceed, you must select a group in the group buffer to open the summary buffer for that group; then, select an article in the summary buffer to view its article buffer in a separate window. The following sections explain how to use the group and summary buffers to do this.<br><br>To quit Gnus, type <b>q</b> in the group buffer. This automatically records your group statuses in the files .newsrc and .newsrc.eld, so that they take effect in subsequent Gnus sessions.</p>
<h2 id="Gnus-Group-Buffer">Using the Gnus group buffer</h2>
<p class="tab">The following commands are available in the Gnus group buffer:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:80px"><b>&lt;SPC&gt;</b></td>
<td>Switch to the summary buffer for the group on the current line.</td>
</tr>
<tr class="tcw">
<td><b>l</b>, <b>A s</b></td>
<td>In the group buffer, list only the groups that you subscribe to and which contain unread articles (this is the default listing).</td>
</tr>
<tr class="tcw">
<td><b>L</b>, <b>A u</b></td>
<td>List all subscribed and unsubscribed groups, but not killed or zombie groups.</td>
</tr>
<tr class="tcw">
<td><b>A k</b></td>
<td>List killed groups.</td>
</tr>
<tr class="tcw">
<td><b>A z</b></td>
<td>List zombie groups.</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Toggle the subscription status of the group on the current line (i.e., turn a subscribed group into an unsubscribed group, or vice versa). Invoking this on a killed or zombie group turns it into an unsubscribed group.</td>
</tr>
<tr class="tcw">
<td><b>C-k</b></td>
<td>Kill the group on the current line. Killed groups are not recorded in the <b>.newsrc</b> file, and they are not shown in the <b>l</b> or <b>L</b> listings.</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b></td>
<td>Move point to the previous group containing unread articles.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Move point to the next unread group.</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Move point to the previous unread group.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Update your Gnus settings, and quit Gnus.</td>
</tr>
</table>
<h2 id="Gnus-Summary-Buffer">Using the Gnus summary buffer</h2>
<p class="tab">The following commands are available in the Gnus summary buffer:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>&lt;SPC&gt;</b></td>
<td>If there is no article selected, select the article on the current line and display its article buffer. Otherwise, try scrolling the selected article buffer in its window; on reaching the end of the buffer, select the next unread article.<br><br>Thus, you can read through all articles by repeatedly typing <b>&lt;SPC&gt;</b>.</td>
</tr>
<tr class="tcw">
<td><b>&lt;DEL&gt;</b></td>
<td>Scroll the text of the article backwards.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Select the next unread article.</td>
</tr>
<tr class="tcw">
<td><b>p</b></td>
<td>Select the previous unread article.</td>
</tr>
<tr class="tcw">
<td><b>s</b></td>
<td>Do an incremental search on the selected article buffer, as if you switched to the buffer and typed C-s (see Incremental Search).</td>
</tr>
<tr class="tcw">
<td><b>M-s</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Search forward for articles containing a match for <i>regexp</i>.</td>
</tr>
<tr class="tcw">
<td><b>q</b></td>
<td>Exit the summary buffer and return to the group buffer.</td>
</tr>
</table>
<h2 id="Document-View">Document viewing</h2>
<p class="tab">DocView mode is a major mode for viewing DVI, <a href="/jargon/p/postscri.htm">PostScript</a> (PS), <a href="/jargon/p/pdf.htm">PDF</a>, OpenDocument, and <a href="/jargon/o/office.htm">Microsoft Office</a> documents. It provides features such as slicing, zooming, and searching inside documents. It works by converting the document to a set of images using the <b>gs</b> (GhostScript) command and other external tools, and displaying those images.<br><br>When you visit a document file that is displayed with DocView mode, Emacs automatically uses DocView mode. As an exception, when you visit a PostScript file, Emacs switches to PS mode, a major mode for editing PostScript files as text; however, it also enables DocView minor mode, so you can type <b>C-c C-c</b> to view the document with DocView. In either DocView mode or DocView minor mode, repeating <b>C-c C-c</b> (<b>doc-view-toggle-display</b>) toggles between DocView and the underlying file contents.<br><br>You can explicitly enable DocView mode with the command <b>M-x doc-view-mode</b>. You can toggle DocView minor mode with <b>M-x doc-view-minor-mode</b>.<br><br>When DocView mode starts, it displays a welcome screen and begins formatting the file, page by page. It displays the first page once that is formatted.<br><br>To kill the DocView buffer, type <b>k</b> (<b>doc-view-kill-proc-and-buffer</b>). To bury it, type <b>q</b> (<b>quit-window</b>).</p>
<ul>
<li><a href="#DocView-Navigation">Navigation</a>:Navigating DocView buffers.</li>
<li><a href="#DocView-Searching">Searching</a>:Searching inside documents.</li>
<li><a href="#DocView-Slicing">Slicing</a>:Specifying which part of a page is displayed.</li>
<li><a href="#DocView-Conversion">Conversion</a>:Influencing and triggering conversion.</li>
</ul>
<h2 id="DocView-Navigation">DocVew navigation</h2>
<p class="tab">In DocView mode, you can scroll the current page using the usual Emacs movement keys: <b>C-p</b>, <b>C-n</b>, <b>C-b</b>, <b>C-f</b>, and the arrow keys.<br><br>By default, the line-motion keys <b>C-p</b> and <b>C-n</b> stop scrolling at the beginning and end of the current page, respectively. However, if you change the variable <b>doc-view-continuous</b> to a non-nil value, then <b>C-p</b> displays the previous page if you are already at the beginning of the current page, and <b>C-n</b> displays the next page if you are at the end of the current page.<br><br>You can also display the next page by typing <b>n</b>, <b>&lt;next&gt;</b> or <b>C-x ]</b> (<b>doc-view-next-page</b>). To display the previous page, type <b>p</b>, <b>&lt;prior&gt;</b> or <b>C-x [</b> (<b>doc-view-previous-page</b>).<br><br><b>&lt;SPC&gt;</b> (<b>doc-view-scroll-up-or-next-page</b>) is a convenient way to advance through the document. It scrolls in the current page or advances to the next. <b>&lt;DEL&gt;</b> moves backwards in a similar way (<b>doc-view-scroll-down-or-previous-page</b>).<br><br>To go to the first page, type <b>M-&lt;</b> (<b>doc-view-first-page</b>); to go to the last one, type <b>M-&gt;</b> (<b>doc-view-last-page</b>). To jump to a page by its number, type <b>M-g M-g</b> or <b>M-g g</b> (<b>doc-view-goto-page</b>).<br><br>You can enlarge or shrink the document with <b>+</b> (<b>doc-view-enlarge</b>) and <b>-</b> (<b>doc-view-shrink</b>). These commands work by reconverting the document at the new size. To specify the default size for DocView, customize the variable <b>doc-view-resolution</b>.</p>
<h2 id="DocView-Searching">DocView searching</h2>
<p class="tab">In DocView mode, you can search the file's text for a regular expression (see <a href="#Regexps">Regexps</a>). The interface for searching is inspired by <b>isearch</b> (see <a href="#Incremental-Search">Incremental Search</a>).<br><br>To begin a search, type <b>C-s</b> (<b>doc-view-search</b>) or <b>C-r</b> (<b>doc-view-search-backward</b>). This reads a regular expression using a minibuffer, then echoes the number of matches found in the document. You can move forward and back among the matches by typing <b>C-s</b> and <b>C-r</b>. DocView mode has no way to show the match inside the page image; instead, it displays a tooltip (at the mouse position) listing all matching lines in the current page. To force display of this tooltip, type <b>C-t</b> (<b>doc-view-show-tooltip</b>).<br><br>To start a new search, use the search command with a prefix argument; i.e., <b>C-u C-s</b> for a forward search or <b>C-u C-r</b> for a backward search.</p>
<h2 id="DocView-Slicing">DocView slicing</h2>
<p class="tab">Documents often have wide margins for printing. They are annoying when reading the document on the screen, because they use up screen space and can cause inconvenient scrolling.<br><br>With DocView you can hide these margins by selecting a slice of pages to display. A slice is a rectangle in the page area; once you specify a slice in DocView, it applies to the page you are viewing.<br><br>To specify the slice numerically, type <b>s s</b> (<b>doc-view-set-slice</b>); then enter the top-left pixel position and the slice's width and height.<br><br>A more convenient graphical way to specify the slice is with <b>s m</b> (<b>doc-view-set-slice-using-mouse</b>), where you use the mouse to select the slice.<br><br>The most convenient way is to set the optimal slice using BoundingBox information automatically determined from the document by typing <b>s b</b> (<b>doc-view-set-slice-using-mouse</b>).<br><br>To cancel the selected slice, type <b>s r</b> (<b>doc-view-reset-slice</b>). Then DocView shows the entire page including its entire margins.</p>
<h2 id="DocView-Conversion">DocView conversions</h2>
<p class="tab">For efficiency, DocView caches the images produced by gs. The name of this directory is given by the variable <b>doc-view-cache-directory</b>. You can clear the cache directory by typing <b>M-x doc-view-clear-cache</b>.<br><br>To force reconversion of the currently viewed document, type <b>r</b> or <b>g</b> (<b>revert-buffer</b>). To kill the converter process associated with the current buffer, type <b>K</b> (<b>doc-view-kill-proc</b>). The command <b>k</b> (<b>doc-view-kill-proc-and-buffer</b>) kills the converter process and the DocView buffer.</p>
<h2 id="Shell">Running shell commands from Emacs</h2>
<p class="tab">Emacs has commands for passing single command lines to shell subprocesses, and for running a shell interactively with input and output to an Emacs buffer, and for running a shell in a terminal emulator window.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>M-!</b> <i>cmd</i> <b>&lt;RET&gt;</b></td>
<td>Run the shell command <i>cmd</i> and display the output (<b>shell-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-|</b> <i>cmd</i> <b>&lt;RET&gt;</b></td>
<td>Run the shell command <i>cmd</i> with region contents as input; optionally replace the region with the output (<b>shell-command-on-region</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-&amp;</b> <i>cmd</i> <b>&lt;RET&gt;</b></td>
<td>Run the shell command <i>cmd</i> asynchronously, and display the output (<b>async-shell-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x shell</b></td>
<td>Run a subshell with input and output through an Emacs buffer. You can then give commands interactively.</td>
</tr>
<tr class="tcw">
<td><b>M-x term</b></td>
<td>Run a subshell with input and output through an Emacs buffer. You can then give commands interactively. Full terminal emulation is available.</td>
</tr>
</table>
<p class="tab">Whenever you specify a relative file name for an executable program (either in the cmd argument to one of the above commands, or in other contexts), Emacs searches for the program in the directories specified by the variable <b>exec-path</b>. The value of this variable must be a list of directory names; the default value is initialized from the environment variable PATH when Emacs is started (see <a href="#General-Variables">General Variables</a>).<br><br><b>M-x eshell</b> invokes a shell implemented entirely in Emacs. It is documented in its own manual.</p>
<ul>
<li><a href="#Single-Shell">Single Shell</a>: How to run one shell command and return.</li>
<li><a href="#Interactive-Shell">Interactive Shell</a>: Permanent shell taking input via Emacs.</li>
<li><a href="#Shell-Mode">Shell Mode</a>: Special Emacs commands used with permanent shell.</li>
<li><a href="#Shell-Prompts">Shell Prompts</a>: Two ways to recognize shell prompts.</li>
<li><a href="#Shell-History">History</a>: Repeating previous commands in a shell buffer.</li>
<li><a href="#Directory-Tracking">Directory Tracking</a>: Keeping track when the subshell changes directory.</li>
<li><a href="#Shell-Options">Options</a>: Options for customizing Shell mode.</li>
<li><a href="#Terminal-emulator">Terminal emulator</a>: An Emacs window as a terminal emulator.</li>
<li><a href="#Term-Mode">Term Mode</a>: Special Emacs commands used in Term mode.</li>
<li><a href="#Remote-Host">Remote Host</a>: Connecting to another computer.</li>
<li><a href="#Serial-Terminal">Serial Terminal</a>: Connecting to a serial port.</li>
</ul>
<h2 id="Single-Shell">Single shell commands</h2>
<p class="tab"><b>M-!</b> (<b>shell-command</b>) reads a line of text using the minibuffer and executes it as a shell command, in a subshell made only for that command. Standard input for the command comes from the null device. If the shell command produces any output, the output appears in the echo area (if it's short) or Emacs buffer named *Shell Command Output*, displayed in another window (if the output is long).<br><br>For instance, one way to decompress a file named <b>foo.gz</b> is to type <b>M-! gunzip foo.gz &lt;RET&gt;</b>. That shell command normally creates the file foo and produces no terminal output.<br><br>A numeric argument to shell-command, e.g., <b>M-1 M-!</b>, causes it to insert terminal output into the current buffer instead of a separate buffer. It puts point before the output, and sets the mark after the output. For instance, <b>M-1 M-! gunzip &lt; foo.gz &lt;RET&gt;</b> would insert the uncompressed form of the file <b>foo.gz</b> into the current buffer.<br><br>Provided the specified shell command does not end with '<b>&amp;</b>', it runs synchronously, and you must wait for it to exit before continuing to use Emacs. To stop waiting, type <b>C-g</b> to quit; this sends a SIGINT <a href="/unix/signals.htm">signal</a> to terminate the shell command (this is the same signal that C-c normally generates in the shell). Emacs then waits until the command actually terminates. If the shell command doesn't stop (because it ignores the SIGINT signal), type <b>C-g</b> again; this sends the command a SIGKILL signal, which is impossible to ignore.<br><br>A shell command that ends in '<b>&amp;</b>' is executed asynchronously, and you can continue to use Emacs as it runs. You can also type <b>M-&amp;</b> (<b>async-shell-command</b>) to execute a shell command asynchronously; this is exactly like calling <b>M-!</b> with a trailing '<b>&amp;</b>', except that you do not need the '<b>&amp;</b>'. The default output buffer for asynchronous shell commands is named '<b>*Async Shell Command*</b>'. Emacs inserts the output into this buffer as it comes in, whether or not the buffer is visible in a window.<br><br>If you want to run more than one asynchronous shell command at the same time, they could end up competing for the output buffer. The option <b>async-shell-command-buffer</b> specifies what to do about this; e.g., whether to rename the pre-existing output buffer, or to use a different buffer for the new command. Consult the variable's documentation for more possibilities.<br><br><b>M-|</b> (<b>shell-command-on-region</b>) is like <b>M-!</b>, but passes the contents of the region as the standard input to the shell command, instead of no input. With a numeric argument, it deletes the old region and replaces it with the output from the shell command.<br><br>For example, you can use <b>M-|</b> with the gpg program to see what keys are in the buffer. If the buffer contains a GnuPG key, type <b>C-x h M-| gpg &lt;RET&gt;</b> to feed the entire buffer contents to gpg. This outputs the list of keys to the *Shell Command Output* buffer.<br><br>The above commands use the shell specified by the variable <b>shell-file-name</b>. Its default value is determined by the SHELL environment variable when Emacs is started. If the file name is relative, Emacs searches the directories listed in <b>exec-path</b> (see <a href="#Shell">Shell</a>).<br><br>To specify a coding system for <b>M-!</b> or <b>M-|</b>, use the command <b>C-x &lt;RET&gt; c</b> immediately beforehand. See <a href="#Communication-Coding">Communication Coding</a>.<br><br>By default, error output is intermixed with the regular output in the output buffer. But if you change the value of the variable <b>shell-command-default-error-buffer</b> to a string, error output is inserted into a buffer of that name.</p>
<h2 id="Interactive-Shell">Interactive subshell</h2>
<p class="tab">To run a subshell interactively, type <b>M-x shell</b>. This creates (or reuses) a buffer named *shell*, and runs a shell subprocess with input coming from and output going to that buffer. That is to say, any terminal output from the subshell goes into the buffer, advancing point, and any terminal input for the subshell comes from text in the buffer. To give input to the subshell, go to the end of the buffer and type the input, terminated by <b>&lt;RET&gt;</b>.<br><br>While the subshell is waiting or running a command, you can switch windows or buffers and perform other editing in Emacs. Emacs inserts the output from the subshell into the Shell buffer whenever it has time to process it (e.g., while waiting for keyboard input).<br><br>In the Shell buffer, prompts are displayed with the face <b>comint-highlight-prompt</b>, and submitted input lines are displayed with the face <b>comint-highlight-input</b>. This makes it easier to distinguish input lines from the shell output. See <a href="#Faces">Faces</a>.<br><br>To make multiple subshells, invoke <b>M-x shell</b> with a prefix argument (e.g., <b>C-u M-x shell</b>). Then the command will read a buffer name, and create (or reuse) a subshell in that buffer. You can also rename the *shell* buffer using <b>M-x rename-uniquely</b>, then create a new *shell* buffer using plain <b>M-x shell</b>. Subshells in different buffers run independently and in parallel.<br><br>To specify the shell file name used by <b>M-x shell</b>, customize the variable <b>explicit-shell-file-name</b>. If this is <b>nil</b> (the default), Emacs uses the environment variable ESHELL if it exists. Otherwise, it usually uses the variable <b>shell-file-name</b> (see <a href="#Single-Shell">Single Shell</a>); but if the default directory is remote (see <a href="#Remote-Files">Remote Files</a>), it prompts you for the shell file name.<br><br>Emacs sends the new shell the contents of the file <b>~/.emacs_shellname</b> as input, if it exists, where shellname is the name of the file that loaded the shell. For example, if you use bash, the file sent to it is <b>~/.emacs_bash</b>. If this file is not found, Emacs tries with <b>~/.emacs.d/init_shellname.sh</b>.<br><br>To specify a coding system for the shell, you can use the command <b>C-x &lt;RET&gt; c</b> immediately before <b>M-x shell</b>. You can also change the coding system for a running subshell by typing <b>C-x &lt;RET&gt; p</b> in the shell buffer. See <a href="#Communication-Coding">Communication Coding</a>.<br><br>Emacs sets the environment variable INSIDE_EMACS in the subshell to '<b>version,comint</b>', where version is the Emacs version (e.g., '<b>24.1</b>'). Programs can check this variable to determine whether they are running inside an Emacs subshell. (It also sets the EMACS environment variable to t, if that environment variable is not already defined. However, this environment variable is deprecated; programs that use it should switch to using INSIDE_EMACS instead.)</p>
<h2 id="Shell-Mode">Shell mode</h2>
<p class="tab">The major mode for Shell buffers is Shell mode. Many of its special commands are bound to the <b>C-c</b> prefix, and resemble the usual editing and job control characters present in ordinary shells, except that you must type <b>C-c</b> first. Here is a list of Shell mode commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>&lt;RET&gt;</b></td>
<td>Send the current line as input to the subshell (<b>comint-send-input</b>). Any shell prompt at the beginning of the line is omitted (see <a href="#Shell-Prompts">Shell Prompts</a>). If point is at the end of buffer, this is like submitting the command line in an ordinary interactive shell. However, you can also invoke <b>&lt;RET&gt;</b> elsewhere in the shell buffer to submit the current line as input.</td>
</tr>
<tr class="tcw">
<td><b>&lt;TAB&gt;</b></td>
<td>Complete the command name or file name before point in the shell buffer (<b>completion-at-point</b>). This uses the usual Emacs completion rules (see <a href="#Completion">Completion</a>), with the completion alternatives being file names, environment variable names, the shell command history, and history references (see <a href="#History-References">History References</a>).<br><br>The variable <b>shell-completion-fignore</b> specifies a list of file name extensions to ignore in Shell mode completion. The default setting is <b>nil</b>, but some users prefer ("~" "#" "%") to ignore file names ending in '<b>~</b>', '<b>#</b>' or '<b>%</b>'. Other related Comint modes use the variable <b>comint-completion-fignore</b> instead.</td>
</tr>
<tr class="tcw">
<td><b>M-?</b></td>
<td>Display temporarily a list of the possible completions of the file name before point (<b>comint-dynamic-list-filename-completions</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-d</b></td>
<td>Either delete a character or send EOF (<b>comint-delchar-or-maybe-eof</b>). Typed at the end of the shell buffer, this sends EOF to the subshell. Typed at any other position in the buffer, this deletes a character as usual.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-a</b></td>
<td>Move to the beginning of the line, but after the prompt if any (<b>comint-bol-or-process-mark</b>). If you repeat this command twice in a row, the second time it moves back to the process mark, which is the beginning of the input that you have not yet sent to the subshell. (Normally that is the same place&mdash;the end of the prompt on this line&mdash;but after <b>C-c &lt;SPC&gt;</b> the process mark may be in a previous line.)</td>
</tr>
<tr class="tcw">
<td><b>C-c &lt;SPC&gt;</b></td>
<td>Accumulate multiple lines of input, then send them together. This command inserts a newline before point, but does not send the preceding text as input to the subshell&mdash;at least, not yet. Both lines, the one before this newline and the one after, are sent together (along with the newline that separates them), when you type <b>&lt;RET&gt;</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-u</b></td>
<td>Kill all text pending at end of buffer to be sent as input (<b>comint-kill-input</b>). If point is not at end of buffer, this only kills the part of this text that precedes point.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-w</b></td>
<td>Kill a word before point (<b>backward-kill-word</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-c</b></td>
<td>Interrupt the shell or its current subjob if any (<b>comint-interrupt-subjob</b>). This command also kills any shell input pending in the shell buffer and not yet sent.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-z</b></td>
<td>Stop the shell or its current subjob if any (<b>comint-stop-subjob</b>). This command also kills any shell input pending in the shell buffer and not yet sent.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-\</b></td>
<td>Send quit signal to the shell or its current subjob if any (<b>comint-quit-subjob</b>). This command also kills any shell input pending in the shell buffer and not yet sent.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-o</b></td>
<td>Delete the last batch of output from a shell command (<b>comint-delete-output</b>). This is useful if a shell command spews out lots of output that only gets in the way.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-s</b></td>
<td>Write the last batch of output from a shell command to a file (<b>comint-write-output</b>). With a prefix argument, the file is appended to instead. Any prompt at the end of the output is not written.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-r</b>, <b>C-M-l</b></td>
<td>Scroll to display the beginning of the last batch of output at the top of the window; also move the cursor there (<b>comint-show-output</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-e</b></td>
<td>Scroll to put the end of the buffer at the bottom of the window (<b>comint-show-maximum-output</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-f</b></td>
<td>Move forward across one shell command, but not beyond the current line (<b>shell-forward-command</b>). The variable <b>shell-command-regexp</b> specifies how to recognize the end of a command.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-b</b></td>
<td>Move backward across one shell command, but not beyond the current line (<b>shell-backward-command</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x</b> <i>dirs</i></td>
<td>Ask the shell for its working directory, and update the Shell buffer's default directory. See <a href="#Directory-Tracking">Directory Tracking</a>.</td>
</tr>
<tr class="tcw">
<td><b>M-x send-invisible &lt;RET&gt;</b> <i>text</i> <b>&lt;RET&gt;</b></td>
<td>Send text as input to the shell, after reading it without echoing. This is useful when a shell command runs a program that asks for a password.<br><br>Please note that Emacs will not echo passwords by default. If you want them to be echoed, evaluate the following Lisp expression:<br><pre>(remove-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)</pre></td>
</tr>
<tr class="tcw">
<td><b>M-x comint-continue-subjob</b></td>
<td>Continue the shell process. This is useful if you accidentally suspend the shell process.</td>
</tr>
<tr class="tcw">
<td><b>M-x comint-strip-ctrl-m</b></td>
<td> Discard all control-M characters from the current group of shell output. The most convenient way to use this command is to make it run automatically when you get output from the subshell. To do that, evaluate this Lisp expression:<br><pre>(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)</pre></td>
</tr>
<tr class="tcw">
<td><b>M-x comint-truncate-buffer</b></td>
<td>This command truncates the shell buffer to a certain maximum number of lines, specified by the variable <b>comint-buffer-maximum-size</b>. Here's how to do this automatically each time you get output from the subshell:<br><pre>(add-hook 'comint-output-filter-functions 'comint-truncate-buffer)</pre></td>
</tr>
</table>
<p class="tab">Shell mode is a derivative of Comint mode, a general-purpose mode for communicating with interactive subprocesses. Most of the features of Shell mode actually come from Comint mode, as you can see from the command names listed above. The special features of Shell mode include the directory tracking feature, and a few user commands.<br><br>Other Emacs features that use variants of Comint mode include GUD (see <a href="#Debuggers">Debuggers</a>) and <b>M-x run-lisp</b> (see <a href="#External-Lisp">External Lisp</a>).<br><br>You can use <b>M-x comint-run</b> to execute any program of your choice in a subprocess using unmodified Comint mode&mdash;without the specializations of Shell mode.</p>
<h2 id="Shell-Prompts">Shell prompts</h2>
<p class="tab">A prompt is text output by a program to show that it is ready to accept new user input. Normally, Comint mode (and thus Shell mode) automatically figures out part of the buffer is a prompt, based on the output of the subprocess. (Specifically, it assumes that any received output line which doesn't end with a newline is a prompt.)<br><br>Comint mode divides the buffer into two types of fields: input fields (where user input is typed) and output fields (everywhere else). Prompts are part of the output fields. Most Emacs motion commands do not cross field boundaries, unless they move over multiple lines. For instance, when point is in the input field on a shell command line, <b>C-a</b> puts point at the beginning of the input field, after the prompt. Internally, the fields are implemented using the field text property.<br><br>If you change the variable <b>comint-use-prompt-regexp</b> to a non-nil value, then Comint mode recognize prompts using a regular expression (see <a href="#Regexps">Regexps</a>). In Shell mode, the regular expression is specified by the variable <b>shell-prompt-pattern</b>. The default value of <b>comint-use-prompt-regexp</b> is <b>nil</b>, because this method for recognizing prompts is unreliable, but you may want to set it to a non-nil value in unusual circumstances. In that case, Emacs does not divide the Comint buffer into fields, so the general motion commands behave as they normally do in buffers without special text properties. However, you can use the paragraph motion commands to conveniently navigate the buffer (see <a href="#Paragraphs">Paragraphs</a>); in Shell mode, Emacs uses <b>shell-prompt-pattern</b> as paragraph boundaries.</p>
<h2 id="Shell-History">Shell command history</h2>
<p class="tab">Shell buffers support three ways of repeating earlier commands. You can use keys like those used for the minibuffer history; these work much as they do in the minibuffer, inserting text from prior commands while point remains always at the end of the buffer. You can move through the buffer to previous inputs in their original place, then resubmit them or copy them to the end. Or you can use a '<b>!</b>'-style history reference.</p>
<ul>
<li><a href="#Shell-Ring">Ring</a>: Fetching commands from the history list.</li>
<li><a href="#Shell-History-Copy">Copy</a>: Moving to a command and then copying it.</li>
<li><a href="#History-References">History References</a>: Expanding '<b>!</b>'-style history references.</li>
</ul>
<h2 id="Shell-Ring">Shell history ring</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>M-p</b>, <b>C-&lt;UP&gt;</b></td>
<td>Fetch the next earlier old shell command</td>
</tr>
<tr class="tcw">
<td><b>M-n</b>, <b>C-&lt;DOWN&gt;</b></td>
<td>Fetch the next later old shell command.</td>
</tr>
<tr class="tcw">
<td><b>M-r</b></td>
<td>Begin an incremental regexp search of old shell commands.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-x</b></td>
<td>Fetch the next subsequent command from the history.</td>
</tr>
<tr class="tcw">
<td><b>C-c .</b></td>
<td>Fetch one argument from an old shell command.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-l</b></td>
<td>Display the buffer's history of shell commands in another window (<b>comint-dynamic-list-input-ring</b>).</td>
</tr>
</table>
<p class="tab">Shell buffers provide a history of previously entered shell commands. To reuse shell commands from the history, use the editing commands <b>M-p</b>, <b>M-n</b>, <b>M-r</b> and <b>M-s</b>. These work only like the minibuffer history commands (see <a href="#Minibuffer-History">Minibuffer History</a>), except that they operate in the Shell buffer rather than the minibuffer.<br><br><b>M-p</b> fetches an earlier shell command to the end of the shell buffer. Successive use of <b>M-p</b> fetches successively earlier shell commands, each replacing any text that was already present as potential shell input. <b>M-n</b> does likewise except that it finds successively more recent shell commands from the buffer. <b>C-&lt;UP&gt;</b> works like <b>M-p</b>, and <b>C-&lt;DOWN&gt;</b> like <b>M-n</b>.<br><br>The history search command <b>M-r</b> begins an incremental regular expression search of previous shell commands. After typing <b>M-r</b>, start typing the desired string or regular expression; the last matching shell command is displayed in the current line. Incremental search commands have their usual effects&mdash;for instance, <b>C-s</b> and <b>C-r</b> search forward and backward for the next match (see <a href="#Incremental-Search">Incremental Search</a>). When you find the desired input, type <b>&lt;RET&gt;</b> to terminate the search. This puts the input in the command line. Any partial input you were composing before navigating the history list is restored when you go to the beginning or end of the history ring.<br><br>Often it is useful to reexecute several successive shell commands that were previously executed in sequence. To do this, first find and reexecute the first command of the sequence. Then type <b>C-c C-x</b>; that fetches the following command&mdash;the one that follows the command you only repeated. Then type <b>&lt;RET&gt;</b> to reexecute this command. You can reexecute several successive commands by typing <b>C-c C-x &lt;RET&gt;</b> over and over.<br><br>The command <b>C-c . (comint-input-previous-argument)</b> copies an individual argument from a previous command, like <b>&lt;ESC&gt; .</b> in Bash. The simplest use copies the last argument from the previous shell command. With a prefix argument <b>n</b>, it copies the <b>n</b>th argument instead. Repeating <b>C-c .</b> copies from an earlier shell command instead, always using the same value of <b>n</b> (don't give a prefix argument when you repeat the <b>C-c .</b> command).<br><br>These commands get the text of previous shell commands from a special history list, not from the shell buffer itself. Thus, editing the shell buffer, or even killing large parts of it, does not affect the history that these commands access.<br><br>Some shells store their command histories in files so that you can refer to commands from previous shell sessions. Emacs reads the command history file for your chosen shell, to initialize its own command history. The file name is <b>~/.bash_history</b> for bash, <b>~/.sh_history</b> for ksh, and <b>~/.history</b> for other shells.</p>
<h2 id="Shell-History-Copy">Shell history copying</h2>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>C-c C-p</b></td>
<td>Move point to the previous prompt (<b>comint-previous-prompt</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-n</b></td>
<td>Move point to the following prompt (<b>comint-next-prompt</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c &lt;RET&gt;</b></td>
<td>Copy the input command at point, inserting the copy at the end of the buffer (<b>comint-copy-old-input</b>). This is useful if you move point back to a previous command. After you copy the command, you can submit the copy as input with <b>&lt;RET&gt;</b>. If you want, you can edit the copy before resubmitting it. If you use this command on an output line, it copies that line to the end of the buffer.</td>
</tr>
<tr class="tcw">
<td><b>Mouse-2</b></td>
<td>If <b>comint-use-prompt-regexp</b> is <b>nil</b> (the default), copy the old input command that you click, inserting the copy at the end of the buffer (<b>comint-insert-input</b>). If <b>comint-use-prompt-regexp</b> is non-nil, or if the click is not over old input, only yank as usual.</td>
</tr>
</table>
<p class="tab">Moving to a previous input and then copying it with <b>C-c &lt;RET&gt;</b> or <b>Mouse-2</b> produces the same results&mdash;the same buffer contents&mdash;that you would get using <b>M-p</b> enough times to fetch that previous input from the history list. However, <b>C-c &lt;RET&gt;</b> copies the text from the buffer, which can be different from what is in the history list if you edit the input text in the buffer after it is sent.</p>
<h2 id="History-References">Shell history references</h2>
<p class="tab">Various shells including csh and bash support history references that begin with '<b>!</b>' and '<b>^</b>'. Shell mode recognizes these constructs, and can perform the history substitution for you.<br><br>If you insert a history reference and type <b>&lt;TAB&gt;</b>, this searches the input history for a matching command, performs substitution if necessary, and places the result in the buffer in place of the history reference. For example, you can fetch the most recent command beginning with '<b>mv</b>' with <b>! m v &lt;TAB&gt;</b>. You can edit the command if you want, and then resubmit the command to the shell by typing <b>&lt;RET&gt;</b>.<br><br>Shell mode can optionally expand history references in the buffer when you send them to the shell. To request this, set the variable <b>comint-input-autoexpand</b> to input. You can make <b>&lt;SPC&gt;</b> perform history expansion by binding <b>&lt;SPC&gt;</b> to the command <b>comint-magic-space</b>.<br><br>Shell mode recognizes history references when they follow a prompt. See <a href="#Shell-Prompts">Shell Prompts</a>, for how Shell mode recognizes prompts.</p>
<h2 id="Directory-Tracking">Directory tracking</h2>
<p class="tab">Shell mode keeps track of '<b>cd</b>', '<b>pushd</b>' and '<b>popd</b>' commands given to the subshell, to keep the Shell buffer's default directory (see <a href="#File-Names">File Names</a>) the same as the shell's working directory. It recognizes these commands by examining lines of input that you send.<br><br>If you use aliases for these commands, you can tell Emacs to recognize them also, by setting the variables <b>shell-pushd-regexp</b>, <b>shell-popd-regexp</b>, and <b>shell-cd-regexp</b> to the appropriate regular expressions (see <a href="#Regexps">Regexps</a>). For example, if <b>shell-pushd-regexp</b> matches the beginning of a shell command line, that line is regarded as a pushd command. These commands are recognized only at the beginning of a shell command line.<br><br>If Emacs gets confused about changes in the working directory of the subshell, type <b>M-x dirs</b>. This command asks the shell for its working directory and updates the default directory accordingly. It works for shells that support the most common command syntax, but may not work for unusual shells.<br><br>You can also use Dirtrack mode, a buffer-local minor mode that implements an alternative method of tracking the shell's working directory. To use this method, your shell prompt must contain the working directory at all times, and you must supply a regular expression for recognizing which part of the prompt contains the working directory; see the documentation of the variable <b>dirtrack-list</b> for details. To use Dirtrack mode, type <b>M-x dirtrack-mode</b> in the Shell buffer, or add <b>dirtrack-mode</b> to <b>shell-mode-hook</b> (see <a href="#Hooks">Hooks</a>).</p>
<h2 id="Shell-Options">Options</h2>
<p class="tab">If the variable <b>comint-scroll-to-bottom-on-input</b> is non-nil, insertion and yank commands scroll the selected window to the bottom before inserting. The default is <b>nil</b>.<br><br>If <b>comint-scroll-show-maximum-output</b> is non-nil, then arrival of output when point is at the end tries to scroll the last line of text to the bottom line of the window, showing as much useful text as possible. (This mimics the scrolling behavior of most terminals.) The default is <b>t</b>.<br><br>By setting <b>comint-move-point-for-output</b>, you can opt for having point jump to the end of the buffer whenever output arrives&mdash;no matter where in the buffer point was before. If the value is this, point jumps in the selected window. If the value is <b>all</b>, point jumps in each window that shows the Comint buffer. If the value is other, point jumps in all non-selected windows showing the current buffer. The default value is <b>nil</b>, which means point does not jump to the end.<br><br>If you set <b>comint-prompt-read-only</b>, the prompts in the Comint buffer are read-only.<br><br>The variable <b>comint-input-ignoredups</b> controls whether successive identical inputs are stored in the input history. A non-nil value means to omit an input that is the same as the previous input. The default is <b>nil</b>, which means to store each input even if it's equal to the previous input.<br><br>Three variables customize file name completion. The variable <b>comint-completion-addsuffix</b> controls whether completion inserts a space or a slash to indicate a fully completed file or directory name (non-nil means do insert a space or slash). <b>comint-completion-recexact</b>, if non-nil, directs <b>&lt;TAB&gt;</b> to choose the shortest possible completion if the usual Emacs completion algorithm cannot add even a single character. <b>comint-completion-autolist</b>, if non-nil, says to list all the possible completions whenever completion is not exact.<br><br>Command completion normally considers only executable files. If you set <b>shell-completion-execonly</b> to <b>nil</b>, it considers nonexecutable files as well.<br><br>You can configure the behavior of '<b>pushd</b>'. Variables control whether '<b>pushd</b>' behaves like '<b>cd</b>' if no argument is given (<b>shell-pushd-tohome</b>), pop rather than rotate with a numeric argument (<b>shell-pushd-dextract</b>), and only add directories to the directory stack if they are not already on it (<b>shell-pushd-dunique</b>). The values you choose should match the underlying shell, of course.</p>
<h2 id="Terminal-emulator">Emacs terminal emulator</h2>
<p class="tab">To run a subshell in a text terminal emulator, use <b>M-x term</b>. This creates (or reuses) a buffer named *terminal*, and runs a subshell with input coming from your keyboard, and output going to that buffer.<br><br>The terminal emulator uses Term mode, which has two input modes. In line mode, Term acts like Shell mode (see <a href="#Shell-Mode">Shell Mode</a>). In char mode, each character is sent directly to the subshell, as terminal input; the sole exception is the terminal escape character, which by default is <b>C-c</b> (see <a href="#Term-Mode">Term Mode</a>). Any echoing of your input is the responsibility of the subshell; any terminal output from the subshell goes into the buffer, advancing point.<br><br>Some programs (such as Emacs itself) need to control the appearance of the terminal screen in detail. They do this by emitting special control codes. Term mode recognizes and handles ANSI-standard VT100-style escape sequences, which are accepted by most modern terminals, including <b>xterm</b>. (Hence, you can actually run Emacs inside an Emacs Term window.)<br><br>The term face specifies the default appearance of text in the terminal emulator (the default is the same appearance as the default face). When terminal control codes are used to change the appearance of text, these are represented in the terminal emulator by the faces <b>term-color-black</b>, <b>term-color-red</b>, <b>term-color-green</b>, <b>term-color-yellow</b>, <b>term-color-blue</b>, <b>term-color-magenta</b>, <b>term-color-cyan</b>, <b>term-color-white</b>, <b>term-color-underline</b>, and <b>term-color-bold</b>. See <a href="#Faces">Faces</a>.<br><br>You can also Term mode to communicate with a device connected to a serial port. See <a href="#Serial-Terminal">Serial Terminal</a>.<br><br>The file name used to load the subshell is determined the same way as for Shell mode. To make multiple terminal emulators, rename the buffer *terminal* to something different using <b>M-x rename-uniquely</b>, only as with Shell mode.<br><br>Unlike Shell mode, Term mode does not track the current directory by examining your input. But some shells can tell Term what the current directory is. This is done automatically by bash version 1.15 and later.</p>
<h2 id="Term-Mode">Term mode</h2>
<p class="tab">The terminal emulator uses Term mode, which has two input modes. In line mode, Term acts like Shell mode (see <a href="#Shell-Mode">Shell Mode</a>). In char mode, each character is sent directly to the subshell, except for the Term escape character, normally <b>C-c</b>.<br><br>To switch between line and char mode, use these commands:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-j</b></td>
<td>Switch to line mode (<b>term-line-mode</b>). Do nothing if already in line mode.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-k</b></td>
<td>Switch to char mode (<b>term-char-mode</b>). Do nothing if already in char mode.</td>
</tr>
</table>
<p class="tab">The following commands are only available in char mode:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-c</b></td>
<td>Send a literal <b>&lt;C-c&gt;</b> to the sub-shell.</td>
</tr>
<tr class="tcw">
<td><b>C-c char</b></td>
<td>This is equivalent to <b>C-x char</b> in normal Emacs. For example, <b>C-c o</b> invokes the global binding of <b>C-x o</b>, which is normally '<b>other-window</b>'.</td>
</tr>
</table>
<p class="tab">Term mode has a page-at-a-time feature. When enabled, it makes output pause at the end of each screenful:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-q</b></td>
<td>Toggle the page-at-a-time feature. This command works in both line and char modes. When the feature is enabled, the mode-line displays the word '<b>page</b>', and each time Term receives more than a screenful of output, it pauses and displays '<b>**MORE**</b>' in the mode-line. Type <b>&lt;SPC&gt;</b> to display the next screenful of output, or <b>?</b> to see your other options. The interface is similar to the more program.</td>
</tr>
</table>
<h2 id="Remote-Host">Remote host shell</h2>
<p class="tab">You can log in to a remote computer, using whatever commands you would from a regular terminal (e.g., using the telnet or rlogin commands), from a Term window.<br><br>A program that asks you for a password normally suppresses echoing of the password, so the password does not show up in the buffer. This happens only as if you were using a real terminal, if the buffer is in char mode. If it's in line mode, the password is temporarily visible, but is erased when you hit return. (This happens automatically; there is no special password processing.)<br><br>When you log in to a different machine, you need to specify the type of terminal you're using, by setting the TERM environment variable in the environment for the remote login command. (If you use bash, you do that by writing the variable assignment before the remote login command, without a separating comma.) Terminal types '<b>ansi</b>' or '<b>vt100</b>' work on most systems.</p>
<h2 id="Serial-Terminal">Serial terminal</h2>
<p class="tab">If you have a device connected to a serial port of your computer, you can communicate with it by typing <b>M-x serial-term</b>. This command asks for a serial port name and speed, and switches to a new Term mode buffer. Emacs communicates with the serial device through this buffer only like it does with a terminal in ordinary Term mode.<br><br>The speed of the serial port is measured in bits per second. The most common speed is 9600 bits per second. You can change the speed interactively by clicking the mode line.<br><br>A serial port can be configured even more by clicking &quot;8N1&quot; in the mode line. By default, a serial port is configured as "8N1", which means that each byte consists of 8 data bits, No parity check bit, and 1 stopbit.<br><br>If the speed or the configuration is wrong, you cannot communicate with your device and probably only see garbage output in the window.</p>
<h2 id="Emacs-Server">Using Emacs as a server</h2>
<p class="tab">Various programs can invoke your choice of editor to edit a particular piece of text. For instance, version control programs invoke an editor to enter version control logs (see <a href="#Version-Control">Version Control</a>), and the Unix mail utility invokes an editor to enter a message to send. By convention, your choice of editor is specified by the environment variable EDITOR. If you set EDITOR to '<b>emacs</b>', Emacs would be invoked, but in an inconvenient way&mdash;by starting a new Emacs process. This is inconvenient because the new Emacs process doesn't share buffers, a command history, or other kinds of information with any existing Emacs process.<br><br>You can solve this problem by setting up Emacs as an edit server, so that it "listens" for external edit requests and acts accordingly. There are two ways to start an Emacs server:</p>
<ul>
<li>Run the command server-start in an existing Emacs process: either type <b>M-x server-start</b>, or put the expression (<b>server-start</b>) in your init file (see <a href="#Init-File">Init File</a>). The existing Emacs process is the server; when you exit Emacs, the server dies with the Emacs process.</li>
<li>Run Emacs as a daemon, using the '<b>--daemon</b>' command-line option. See <a href="#Initial-Options">Options</a>. When Emacs is started this way, it calls server-start after initialization, and returns control to the calling terminal instead of opening an initial frame; it then waits in the background, listening for edit requests</li>
</ul>
<p class="tab">Either way, once an Emacs server is started, you can use a shell command called <b>emacsclient</b> to connect to the Emacs process and tell it to visit a file. You can then set the EDITOR environment variable to '<b>emacsclient</b>', so that external programs use the existing Emacs process for editing.<br><br>You can run multiple Emacs servers on the same machine by giving each one a unique "server name", using the variable <b>server-name</b>. For example, <b>M-x set-variable &lt;RET&gt; server-name &lt;RET&gt; foo &lt;RET&gt;</b> sets the server name to '<b>foo</b>'. The <b>emacsclient</b> program can specify a server by name, using the '<b>-s</b>' option (see <a href="#emacsclient-Options">Options</a>).<br><br>If you have defined a server by a unique server name, it is possible to connect to the server from another Emacs instance and evaluate Lisp expressions on the server, using the <b>server-eval-at</b> function. For instance, <b>(server-eval-at "foo" '(+ 1 2))</b> evaluates the expression <b>(+ 1 2)</b> on the '<b>foo</b>' server, and returns 3. (If there is no server with that name, an error is signaled.) Currently, this feature is mainly useful for developers.</p>
<ul>
<li><a href="#Invoking-emacsclient">Invoking emacsclient</a>: Connecting to the Emacs server.</li>
<li><a href="#emacsclient-Options">Options</a>: Emacs client startup options.</li>
</ul>
<h2 id="Invoking-emacsclient">Invoking emacsclient</h2>
<p class="tab">The simplest way to use the emacsclient program is to run the shell command '<b>emacsclient file</b>', where file is a file name. This connects to an Emacs server, and tells that Emacs process to visit file in one of its existing frames&mdash;either a graphical frame, or one in a text terminal (see <a href="#Frames">Frames</a>). You can then select that frame to begin editing.<br><br>If there is no Emacs server, the <b>emacsclient</b> program halts with an error message. If the Emacs process has no existing frame&mdash;which can happen if it was started as a daemon (see <a href="#Emacs-Server">Emacs Server</a>)&mdash;then Emacs opens a frame on the terminal where you called <b>emacsclient</b>.<br><br>You can also force <b>emacsclient</b> to open a new frame on a graphical display, or on a text terminal, using the '<b>-c</b>' and '<b>-t</b>' options. See <a href="#emacsclient-Options">Options</a>.<br><br>If you are running on a single text terminal, you can switch between emacsclient's shell and the Emacs server using one of two methods: (i) run the Emacs server and emacsclient on different virtual terminals, and switch to the Emacs server's virtual terminal after calling emacsclient; or (ii) call emacsclient from in the Emacs server itself, using Shell mode (see <a href="#Interactive-Shell">Interactive Shell</a>) or Term mode (see <a href="#Term-Mode">Term Mode</a>); emacsclient blocks only the subshell under Emacs, and you can still use Emacs to edit the file.<br><br>When you finish editing file in the Emacs server, type <b>C-x #</b> (<b>server-edit</b>) in its buffer. This saves the file and sends a message back to the <b>emacsclient</b> program, telling it to exit. Programs that use EDITOR usually wait for the "editor"&mdash;in this case <b>emacsclient</b>&mdash;to exit before doing something else.<br><br>You can also call <b>emacsclient</b> with multiple file name arguments: '<b>emacsclient file1 file2 ...</b>' tells the Emacs server to visit file1, file2, and so forth. Emacs selects the buffer visiting file1, and buries the other buffers at the bottom of the buffer list (see <a href="#Buffers">Buffers</a>). The emacsclient program exits once all the specified files are finished (i.e., once you have typed <b>C-x #</b> in each server buffer).<br><br>Finishing with a server buffer also kills the buffer, unless it already existed in the Emacs session before the server was asked to create it. However, if you set <b>server-kill-new-buffers</b> to <b>nil</b>, then a different criterion is used: finishing with a server buffer kills it if the file name matches the regular expression <b>server-temp-file-regexp</b>. This is set up to distinguish certain "temporary" files.<br><br>Each <b>C-x #</b> checks for other pending external requests to edit various files, and selects the next such file. You can switch to a server buffer manually if you want; you don't have to arrive at it with <b>C-x #</b>. But <b>C-x #</b> is the way to tell emacsclient that you are finished.<br><br>If you set the value of the variable server-window to a window or a frame, <b>C-x #</b> always displays the next server buffer in that window or in that frame.</p>
<h2 id="emacsclient-Options">Options</h2>
<p class="tab">You can pass some optional arguments to the <b>emacsclient</b> program, such as:</p>
<p class="tab tcy">emacsclient -c +12 file1 +4:3 file2</p>
<p class="tab">The '<b>+line</b>' or '<b>+line:column</b>' arguments specify line numbers, or line and column numbers, for the next file argument. These behave like the command line arguments for Emacs itself. See <a href="#Action-Arguments">Action Arguments</a>.<br><br>The other optional arguments recognized by emacsclient are listed below:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px">'<b>-a command</b>',<br>'<b>--alternate-editor=command</b>'</td>
<td>Specify a command to run if emacsclient fails to contact Emacs. This is useful when running emacsclient in a script.<br><br>As a special exception, if command is the empty string, then emacsclient starts Emacs in daemon mode (as emacs --daemon) and then tries connecting again.<br><br>The environment variable ALTERNATE_EDITOR has the same effect as the '<b>-a</b>' option. If both are present, the latter takes precedence.</td>
</tr>
<tr class="tcw">
<td>'<b>-c</b>'</td>
<td>Create a new graphical client frame, instead of using an existing Emacs frame. See below for the special behavior of <b>C-x C-c</b> in a client frame. If Emacs cannot create a new graphical frame (e.g., if it cannot connect to the X server), it tries to create a text terminal client frame, as though you had supplied the '<b>-t</b>' option instead.<br><br>On Microsoft Windows, a single Emacs session cannot display frames on both graphical and text terminals, nor on multiple text terminals. Thus, if the Emacs server is running on a text terminal, the '<b>-c</b>' option, like the '<b>-t</b>' option, creates a new frame in the server's current text terminal. See <a href="#Windows-Startup">Windows Startup</a>.<br><br>If you omit a file name argument while supplying the '<b>-c</b>' option, the new frame displays the *scratch* buffer by default. If <b>initial-buffer-choice</b> is a string (see <a href="#Entering-Emacs">Entering Emacs</a>), the new frame displays that file or directory instead.</td>
</tr>
<tr class="tcw">
<td>'<b>-F alist</b>',<br>'<b>--frame-parameters=alist</b>'</td>
<td>Set the parameters for a newly-created graphical frame (see <a href="#Frame-Parameters">Frame Parameters</a>).</td>
</tr>
<tr class="tcw">
<td>'<b>-d display</b>',<br>'<b>--display=display</b>'</td>
<td>Tell Emacs to open the given files on the X display (assuming there is more than one X display available).</td>
</tr>
<tr class="tcw">
<td>'<b>-e</b>', '<b>--eval</b>'</td>
<td>Tell Emacs to evaluate some Emacs Lisp code, instead of visiting some files. When this option is given, the arguments to emacsclient are interpreted as a list of expressions to evaluate, not as a list of files to visit.</td>
</tr>
<tr class="tcw">
<td>'<b>-f server-file</b>',<br>'<b>--server-file=server-file</b>'</td>
<td>Specify a server file for connecting to an Emacs server via <a href="/jargon/t/tcpip.htm">TCP</a>.<br><br>An Emacs server usually uses an operating system feature called a "local socket" to listen for connections. Some operating systems, such as Microsoft Windows, do not support local sockets; in that case, the server communicates with emacsclient via TCP.<br><br>When you start a TCP Emacs server, Emacs creates a server file containing the TCP information to be used by emacsclient to connect to the server. The variable <b>server-auth-dir</b> specifies the directory containing the server file; by default, this is <b>~/.emacs.d/server/</b>. To tell emacsclient to connect to the server over TCP with a specific server file, use the '<b>-f</b>' or '<b>--server-file</b>' option, or set the EMACS_SERVER_FILE environment variable.</td>
</tr>
<tr class="tcw">
<td>'<b>-n</b>', '<b>--no-wait</b>'</td>
<td>Let emacsclient exit immediately, instead of waiting until all server buffers are finished. You can take as long as you like to edit the server buffers within Emacs, and they are not killed when you type <b>C-x #</b> in them.</td>
</tr>
<tr class="tcw">
<td>'<b>--parent-id ID</b>'</td>
<td>Open an emacsclient frame as a client frame in the parent X window with id ID, via the XEmbed protocol. Currently, this option is mainly useful for developers.</td>
</tr>
<tr class="tcw">
<td>'<b>-q</b>', '<b>--quiet</b>'</td>
<td>Do not let emacsclient display messages about waiting for Emacs or connecting to remote server sockets.</td>
</tr>
<tr class="tcw">
<td>'<b>-s server-name</b>',<br>'<b>--socket-name=server-name</b>'</td>
<td>Connect to the Emacs server named <b>server-name</b>. The server name is given by the variable <b>server-name</b> on the Emacs server. If this option is omitted, emacsclient connects to the first server it finds. (This option is not supported on Microsoft Windows.)</td>
</tr>
<tr class="tcw">
<td>'<b>-t</b>', '<b>--tty</b>', '<b>-nw</b>'</td>
<td>Create a new client frame on the current text terminal, instead of using an existing Emacs frame. This behaves only like the '<b>-c</b>' option, described above, except that it creates a text terminal frame (see <a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>).<br><br>On Microsoft Windows, '<b>-t</b>' behaves only like '<b>-c</b>' if the Emacs server uses the graphical display, but if the Emacs server is running on a text terminal, it creates a new frame in the current text terminal.</td>
</tr>
</table>
<p class="tab">The new graphical or text terminal frames created by the '<b>-c</b>' or '<b>-t</b>' options are considered client frames. Any new frame that you create from a client frame is also considered a client frame. If you type <b>C-x C-c</b> (<b>save-buffers-kill-terminal</b>) in a client frame, that command does not kill the Emacs session as it normally does (see <a href="#Exiting">Exiting</a>). Instead, Emacs deletes the client frame; furthermore, if the client frame has an emacsclient waiting to regain control (i.e., if you did not supply the '<b>-n</b>' option), Emacs deletes all other frames of the same client, and marks the client's server buffers as finished, as though you had typed <b>C-x #</b> in all of them. If it so happens that there are no remaining frames after the client frame(s) are deleted, the Emacs session exits.<br><br>As an exception, when Emacs is started as a daemon, all frames are considered client frames, and <b>C-x C-c</b> never kills Emacs. To kill a daemon session, type <b>M-x kill-emacs</b>.<br><br>Note that the '<b>-t</b>' and '<b>-n</b>' options are contradictory: '<b>-t</b>' says to take control of the current text terminal to create a new client frame, while '<b>-n</b>' says not to take control of the text terminal. If you supply both options, Emacs visits the specified files(s) in an existing frame rather than a new client frame, negating the effect of '<b>-t</b>'.</p>
<h2 id="Printing">Printing hard copies</h2>
<p class="tab">Emacs provides commands for printing hardcopies of either an entire buffer or part of one. You can invoke the printing commands directly, as detailed below, or using the '<b>File</b>' menu on the menu bar.<br><br>Aside from the commands described in this section, you can also print hardcopies from Dired (see <a href="#Operating-on-Files">Operating on Files</a>) and the diary (see <a href="#Displaying-the-Diary">Displaying the Diary</a>). You can also "print" an Emacs buffer to HTML with the command <b>M-x htmlfontify-buffer</b>, which converts the current buffer to an HTML file, replacing Emacs faces with CSS-based markup. Furthermore, Org mode allows you to "print" Org files to a variety of formats, such as PDF (see <a href="#Org-Mode">Org Mode</a>).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:190px"><b>M-x print-buffer</b></td>
<td>Print hardcopy of current buffer with page headings containing the file name and page number.</td>
</tr>
<tr class="tcw">
<td><b>M-x lpr-buffer</b></td>
<td>Print hardcopy of current buffer without page headings.</td>
</tr>
<tr class="tcw">
<td><b>M-x print-region</b></td>
<td>Like print-buffer but print only the current region.</td>
</tr>
<tr class="tcw">
<td><b>M-x lpr-region</b></td>
<td>Like lpr-buffer but print only the current region.</td>
</tr>
</table>
<p class="tab">On most operating system, the above hardcopy commands submit files for printing by calling the lpr program. To change the printer program, customize the variable <b>lpr-command</b>. To specify extra switches to give the printer program, customize the list variable <b>lpr-switches</b>. Its value should be a list of option strings, each of which should start with '<b>-</b>' (e.g., the option string "-w80" specifies a line width of 80 columns). The default is the empty list, <b>nil</b>.<br><br>To specify the printer to use, set the variable <b>printer-name</b>. The default, <b>nil</b>, specifies the default printer. If you set it to a printer name (a string), that name is passed to lpr with the '<b>-P</b>' switch; if you are not using lpr, specify the switch with <b>lpr-printer-switch</b>.<br><br>The variable <b>lpr-headers-switches</b> similarly specifies the extra switches to use to make page headers. The variable <b>lpr-add-switches</b> controls whether to supply '<b>-T</b>' and '<b>-J</b>' options (suitable for <b>lpr</b>) to the printer program: <b>nil</b> means don't add them (this should be the value if your printer program is not compatible with lpr).</p>
<ul>
<li><a href="#PostScript">PostScript:</a> Printing buffers or regions as PostScript.</li>
<li><a href="#PostScript-Variables">PostScript Variables:</a> Customizing the PostScript printing commands.</li>
<li><a href="#Printing-Package">Printing Package:</a> An optional advanced printing interface.</li>
</ul>
<h2 id="PostScript">PostScript hardcopy</h2>
<p class="tab">These commands convert buffer contents to PostScript, either printing it or leaving it in another Emacs buffer.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x ps-print-buffer</b></td>
<td>Print hardcopy of the current buffer in PostScript form.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-print-region</b></td>
<td>Print hardcopy of the current region in PostScript form.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-print-buffer-with-faces</b></td>
<td>Print hardcopy of the current buffer in PostScript form, showing the faces used in the text by means of PostScript features.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-print-region-with-faces</b></td>
<td>Print hardcopy of the current region in PostScript form, showing the faces used in the text.</td>
 </tr>
<tr class="tcw">
<td><b>M-x ps-spool-buffer</b></td>
<td>Generate and spool a PostScript image for the current buffer text.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-spool-region</b></td>
<td>Generate and spool a PostScript image for the current region.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-spool-buffer-with-faces</b></td>
<td>Generate and spool a PostScript image for the current buffer, showing the faces used.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-spool-region-with-faces</b></td>
<td>Generate and spool a PostScript image for the current region, showing the faces used.</td>
</tr>
<tr class="tcw">
<td><b>M-x ps-despool</b></td>
<td>Send the spooled PostScript to the printer.</td>
</tr>
<tr class="tcw">
<td><b>M-x handwrite</b></td>
<td>Generate/print PostScript for the current buffer as if handwritten.</td>
</tr>
</table>
<p class="tab">The <b>ps-print-buffer</b> and <b>ps-print-region</b> commands print buffer contents in PostScript form. One command prints the entire buffer; the other, only the region. The commands <b>ps-print-buffer-with-faces</b> and <b>ps-print-region-with-faces</b> behave similarly, but use PostScript features to show the faces (fonts and colors) of the buffer text.<br><br>Interactively, when you use a prefix argument (<b>C-u</b>), the command prompts the user for a file name, and saves the PostScript image in that file instead of sending it to the printer.<br><br>The commands whose names have '<b>spool</b>' instead of '<b>print</b>', generate the PostScript output in an Emacs buffer instead of sending it to the printer.<br><br>Use the command <b>ps-despool</b> to send the spooled images to the printer. This command sends the PostScript generated by '<b>-spool-</b>' commands (see commands above) to the printer. With a prefix argument (<b>C-u</b>), it prompts for a file name, and saves the spooled PostScript image in that file instead of sending it to the printer.<br><br><b>M-x handwrite</b> is more frivolous. It generates a PostScript rendition of the current buffer as a cursive handwritten document. It can be customized in group <b>handwrite</b>. This function only supports ISO 8859-1 characters.</p>
<h2 id="PostScript-Variables">Variables for postscript hardcopy</h2>
<p class="tab">All the PostScript hardcopy commands use the variables <b>ps-lpr-command</b> and <b>ps-lpr-switches</b> to specify how to print the output. <b>ps-lpr-command</b> specifies the command name to run, <b>ps-lpr-switches</b> specifies command line options to use, and <b>ps-printer-name</b> specifies the printer. If you don't set the first two variables yourself, they take their initial values from <b>lpr-command</b> and <b>lpr-switches</b>. If <b>ps-printer-name</b> is <b>nil</b>, <b>printer-name</b> is used.<br><br>The variable <b>ps-print-header</b> controls whether these commands add header lines to each page&mdash;set it to <b>nil</b> to turn headers off.<br><br>If your printer doesn't support colors, turn off color processing by setting <b>ps-print-color-p</b> to <b>nil</b>. By default, if the display supports colors, Emacs produces hardcopy output with color information; on black-and-white printers, colors are emulated with shades of gray. This might produce illegible output, even if your screen colors only use shades of gray.<br><br>Alternatively, you can set <b>ps-print-color-p</b> to <b>black-white</b> to print colors on black/white printers.<br><br>By default, PostScript printing ignores the background colors of the faces, unless the variable <b>ps-use-face-background</b> is non-nil. This is to avoid unwanted interference with the zebra stripes and background image/text.<br><br>The variable <b>ps-paper-type</b> specifies which size of paper to format for; legitimate values include <b>a4</b>, <b>a3</b>, <b>a4small</b>, <b>b4</b>, <b>b5</b>, <b>executive</b>, <b>ledger</b>, <b>legal</b>, <b>letter</b>, <b>letter-small</b>, <b>statement</b>, <b>tabloid</b>. The default is <b>letter</b>. You can define additional paper sizes by changing the variable <b>ps-page-dimensions-database</b>.<br><br>The variable <b>ps-landscape-mode</b> specifies the orientation of printing on the page. The default is <b>nil</b>, which stands for "portrait" mode. Any non-nil value specifies "landscape" mode.<br><br>The variable <b>ps-number-of-columns</b> specifies the number of columns; it takes effect in both landscape and portrait mode. The default is 1.<br><br>The variable <b>ps-font-family</b> specifies which font family to use for printing ordinary text. Legitimate values include <b>Courier</b>, <b>Helvetica</b>, <b>NewCenturySchlbk</b>, <b>Palatino</b> and <b>Times</b>. The variable <b>ps-font-size</b> specifies the size of the font for ordinary text. It defaults to 8.5 points.<br><br>Emacs supports more scripts and characters than a typical PostScript printer. Thus, some of the characters in your buffer might not be printable using the fonts built into your printer. You can augment the fonts supplied with the printer with those from the GNU Intlfonts package, or you can instruct Emacs to use Intlfonts exclusively. The variable <b>ps-multibyte-buffer</b> controls this: the default value, <b>nil</b>, is appropriate for printing ASCII and Latin-1 characters; a value of <b>non-latin-printer</b> is for printers which have the fonts for ASCII, Latin-1, Japanese, and Korean characters built into them. A value of <b>bdf-font</b> arranges for the BDF fonts from the Intlfonts package to be used for all characters. Finally, a value of <b>bdf-font-except-latin</b> instructs the printer to use built-in fonts for ASCII and Latin-1 characters, and Intlfonts BDF fonts for the rest.<br><br>To be able to use the BDF fonts, Emacs needs to know where to find them. The variable <b>bdf-directory-list</b> holds the list of directories where Emacs should look for the fonts; the default value includes a single directory <b>/usr/local/share/emacs/fonts/bdf</b>.<br><br>Other customization variables for these commands are defined and described in the Lisp files <b>ps-print.el</b> and <b>ps-mule.el</b>.</p>
<h2 id="Printing-Package">Printing package</h2>
<p class="tab">The basic Emacs facilities for printing hardcopy can be extended using the Printing package. This provides an easy-to-use interface for choosing what to print, previewing PostScript files before printing, and setting various printing options such as print headers, landscape or portrait modes, duplex modes, and so forth. On GNU/Linux or Unix systems, the Printing package relies on the <b>gs</b> and <b>gv</b> utilities, which are distributed as part of the GhostScript program. On Microsoft Windows, the <b>gstools</b> port of Ghostscript can be used.<br><br>To use the Printing package, add <b>(require 'printing)</b> to your init file (see <a href="#Init-File">Init File</a>), followed by <b>(pr-update-menus)</b>. This function replaces the usual printing commands in the menu bar with a '<b>Printing</b>' submenu containing various printing options. You can also type <b>M-x pr-interface RET</b>; this creates a *Printing Interface* buffer, similar to a customization buffer, where you can set the printing options. After selecting what and how to print, you start the print job using the '<b>Print</b>' button (click <b>mouse-2</b> on it, or move point over it and type <b>RET</b>). For further information on the various options, use the '<b>Interface Help</b>' button.</p>
<h2 id="Sorting">Sorting text</h2>
<p class="tab">Emacs provides several commands for sorting text in the buffer. All operate on the contents of the region. They divide the text of the region into many sort records, identify a sort key for each record, and then reorder the records into the order determined by the sort keys. The records are ordered so that their keys are in alphabetical order, or, for numeric sorting, in numeric order. In alphabetic sorting, all upper-case letters &#96;A' through &#96;Z' come before lower-case &#96;a', in accord with the ASCII character sequence.<br><br>The various sort commands differ in how they divide the text into sort records and which part of each record is used as the sort key. Most of the commands make each line a separate sort record, but some commands use paragraphs or pages as sort records. Most of the sort commands use each entire sort record as its own sort key, but some use only a portion of the record as the sort key.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x sort-lines</b></td>
<td>Divide the region into lines, and sort by comparing the entire text of a line. A numeric argument means sort into descending order.</td>
</tr>
<tr class="tcw">
<td><b>M-x sort-paragraphs</b></td>
<td>Divide the region into paragraphs, and sort by comparing the entire text of a paragraph (except for leading blank lines). A numeric argument means sort into descending order.</td>
</tr>
<tr class="tcw">
<td><b>M-x sort-pages</b></td>
<td>Divide the region into pages, and sort by comparing the entire text of a page (except for leading blank lines). A numeric argument means sort into descending order.</td>
</tr>
<tr class="tcw">
<td><b>M-x sort-fields</b></td>
<td>Divide the region into lines, and sort by comparing the contents of one field in each line. Fields are defined as separated by whitespace, so the first run of consecutive non-whitespace characters in a line constitutes field 1, the second such run constitutes field 2, etc.<br><br>Specify which field to sort by with a numeric argument: 1 to sort by field 1, etc. A negative argument means count fields from the right instead of from the left; thus, minus 1 means sort by the last field. If several lines have identical contents in the field being sorted, they keep the same relative order that they had in the original buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x sort-numeric-fields</b></td>
<td>Like <b>M-x sort-fields</b> except the specified field is converted to an integer for each line, and the numbers are compared. '<b>10</b>' comes before '<b>2</b>' when considered as text, but after it when considered as a number. By default, numbers are interpreted according to <b>sort-numeric-base</b>, but numbers beginning with '<b>0x</b>' or '<b>0</b>' are interpreted as hexadecimal and octal, respectively.</td>
</tr>
<tr class="tcw">
<td><b>M-x sort-columns</b></td>
<td>Like <b>M-x sort-fields</b> except that the text within each line used for comparison comes from a fixed range of columns. See below for an explanation.</td>
</tr>
<tr class="tcw">
<td><b>M-x reverse-region</b></td>
<td>Reverse the order of the lines in the region. This is useful for sorting into descending order by fields or columns, as those sort commands do not have a feature for doing that.</td>
</tr>
</table>
<p class="tab">For example, if the buffer contains this:</p>
<pre class="tab tcy">On systems where clash detection (locking of files being edited) is
implemented, Emacs also checks the first time you modify a buffer
whether the file has changed on disk since it was last visited or
saved. If it has, you are asked to confirm that you want to change
the buffer.</pre>
<p class="tab">applying <b>M-x sort-lines</b> to the entire buffer produces this:</p>
<pre class="tab tcy">On systems where clash detection (locking of files being edited) is
implemented, Emacs also checks the first time you modify a buffer
saved.  If it has, you are asked to confirm that you want to change
the buffer.
whether the file has changed on disk since it was last visited or</pre>
<p class="tab">Where the upper-case '<b>O</b>' sorts before all lower-case letters. If you use <b>C-u 2 M-x sort-fields</b> instead, you get this:</p>
<pre class="tab tcy">implemented, Emacs also checks the first time you modify a buffer
saved. If it has, you are asked to confirm that you want to change
the buffer.
On systems where clash detection (locking of files being edited) is
whether the file has changed on disk since it was last visited or</pre>
<p class="tab">Where the sort keys were '<b>Emacs</b>', '<b>If</b>', '<b>buffer</b>', '<b>systems</b>' and '<b>the</b>'.<br><br><b>M-x sort-columns</b> requires more explanation. You specify the columns by putting point at one of the columns and the mark at the other column. Because this means you cannot put point or the mark at the beginning of the first line of the text you want to sort, this command uses an unusual definition of "region": all the line point is in is considered part of the region, and so is all the line the mark is in, and all the lines between.<br><br>For example, to sort a table by information found in columns 10 to 15, you could put the mark on column 10 in the first line of the table, and point on column 15 in the last line of the table, and then run <b>sort-columns</b>. Equivalently, you could run it with the mark on column 15 in the first line and point on column 10 in the last line.<br><br>This can be thought of as sorting the rectangle specified by point and the mark, except that the text on each line to the left or right of the rectangle moves along with the text inside the rectangle. See <a href="#Rectangles">Rectangles</a>.<br><br>Many of the sort commands ignore case differences when comparing, if <b>sort-fold-case</b> is non-nil.</p>
<h2 id="Picture-Mode">Editing pictures</h2>
<p class="tab">To edit a picture made out of text characters (for example, a picture of the division of a register into fields, as a comment in a program), use the command <b>M-x picture-mode</b> to enter Picture mode.<br><br>In Picture mode, editing is based on the quarter-plane model of text, according to where the text characters lie studded on an area that stretches infinitely far to the right and downward. The concept of the end of a line does not exist in this model; the most you can say is where the last nonblank character on the line is found.<br><br>Of course, Emacs really always considers text as a sequence of characters, and lines really do have ends. But Picture mode replaces the most frequently-used commands with variants that simulate the quarter-plane model of text. They do this by inserting spaces or by converting tabs to spaces.<br><br>Most of the basic editing commands of Emacs are redefined by Picture mode to do essentially the same thing but in a quarter-plane way. Also, Picture mode defines various keys starting with the <b>C-c</b> prefix to run special picture editing commands.<br><br>One of these keys, <b>C-c C-c</b>, is particularly important. Often a picture is part of a larger file that is usually edited in some other major mode. Picture mode records the name of the previous major mode so you can use the <b>C-c C-c</b> command (<b>picture-mode-exit</b>) later to go back to that mode. <b>C-c C-c</b> also deletes spaces from the ends of lines, unless given a numeric argument.<br><br>The special commands of Picture mode all work in other modes (provided the picture library is loaded), but are not bound to keys except in Picture mode. The descriptions below talk of moving "one column" and so on, but all the picture mode commands handle numeric arguments as their normal equivalents do.<br><br>Turning on Picture mode runs the hook <b>picture-mode-hook</b>. Additional extensions to Picture mode are in <b>artist.el</b>.</p>
<ul>
<li><a href="#Basic-Picture">Basic Picture</a>: Basic concepts and simple commands of Picture Mode.</li>
<li><a href="#Insert-in-Picture">Insert in Picture</a>: Controlling direction of cursor motion after "self-inserting" characters.</li>
<li><a href="#Tabs-in-Picture">Tabs in Picture</a>: Various features for tab stops and indentation.</li>
<li><a href="#Rectangles-in-Picture">Rectangles in Picture</a>: Clearing and superimposing rectangles.</li>
</ul>
<h2 id="Basic-Picture">Basic editing in picture mode</h2>
<p class="tab">Most keys do the same thing in Picture mode that they usually do, but do it in a quarter-plane style. For example, <b>C-f</b> is rebound to run <b>picture-forward-column</b>, a command which moves point one column to the right, inserting a space if necessary so that the actual end of the line makes no difference. <b>C-b</b> is rebound to run <b>picture-backward-column</b>, which always moves point left one column, converting a tab to multiple spaces if necessary. <b>C-n</b> and <b>C-p</b> are rebound to run <b>picture-move-down</b> and <b>picture-move-up</b>, which can either insert spaces or convert tabs as necessary to make sure that point stays in the same column. <b>C-e</b> runs <b>picture-end-of-line</b>, which moves to after the last nonblank character on the line. <b>C-a</b> runs <b>picture-beginning-of-line</b>. (The choice of screen model does not affect beginnings of lines; the only extra thing this command does is update the current picture column to 0.)<br><br>Insertion of text is adapted to the quarter-plane screen model through the use of Overwrite mode (see <a href="#Minor-Modes">Minor Modes</a>.) Self-inserting characters replace existing text, column by column, rather than pushing existing text to the right. <b>&lt;RET&gt;</b> runs <b>picture-newline</b>, which moves to the beginning of the following line so that new text replaces that line.<br><br>In Picture mode, the commands that normally delete or kill text, instead erase text (replacing it with spaces). <b>&lt;DEL&gt; (picture-backward-clear-column)</b> replaces the preceding character with a space rather than removing it; this moves point backwards. <b>C-d (picture-clear-column)</b> replaces the next character or characters with spaces, but does not move point. (If you want to clear characters to spaces and move forward over them, use <b>&lt;SPC&gt;</b>.) <b>C-k (picture-clear-line)</b> really kills the contents of lines, but does not delete the newlines from the buffer.<br><br>To do actual insertion, you must use special commands. <b>C-o (picture-open-line)</b> creates a blank line after the current line; it never splits a line. <b>C-M-o (split-line)</b> makes sense in Picture mode, so it is not changed. <b>C-j (picture-duplicate-line)</b> inserts another line with the same contents below the current line.<br><br>To do actual deletion in Picture mode, use <b>C-w</b>, <b>C-c C-d</b> (which is defined as <b>delete-char</b>, as <b>C-d</b> is in other modes), or one of the picture rectangle commands (see <a href="#Rectangles-in-Picture">Rectangles in Picture</a>).</p>
<h2 id="Insert-in-Picture">Controlling motion after insert</h2>
<p class="tab">Since "self-inserting" characters in Picture mode overwrite and move point, there is no essential restriction on how point should be moved. Normally point moves right, but you can specify any of the eight orthogonal or diagonal directions for motion after a "self-inserting" character. This is useful for drawing lines in the buffer.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:210px"><b>C-c &lt;</b>,<b>C-c &lt;LEFT&gt;</b></td>
<td>Move left after insertion (<b>picture-movement-left</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c &gt;</b>, <b>C-c &lt;RIGHT&gt;</b></td>
<td>Move right after insertion (<b>picture-movement-right</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c ^</b>, <b>C-c &lt;UP&gt;</b></td>
<td>Move up after insertion (<b>picture-movement-up</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c .</b>, <b>C-c &lt;DOWN&gt;</b></td>
<td>Move down after insertion (<b>picture-movement-down</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c &#96;</b>, <b>C-c &lt;HOME&gt;</b></td>
<td>Move up and left ("northwest") after insertion (<b>picture-movement-nw</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c '</b>, <b>C-c &lt;prior&gt;</b></td>
<td>Move up and right ("northeast") after insertion (<b>picture-movement-ne</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c /</b>, <b>C-c &lt;END&gt;</b></td>
<td>Move down and left ("southwest") after insertion (<b>picture-movement-sw</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c \</b>, <b>C-c &lt;next&gt;</b></td>
<td>Move down and right ("southeast") after insertion (<b>picture-movement-se</b>).</td>
</tr>
</table>
<p class="tab">Two motion commands move based on the current Picture insertion direction. The command <b>C-c C-f</b> (<b>picture-motion</b>) moves in the same direction as motion after "insertion" currently does, while <b>C-c C-b</b> (<b>picture-motion-reverse</b>) moves in the opposite direction.</p>
<h2 id="Tabs-in-Picture">Picture tabs</h2>
<p class="tab">Two kinds of tab-like action are provided in Picture mode. Use <b>M-&lt;TAB&gt;</b> (<b>picture-tab-search</b>) for context-based tabbing. With no argument, it moves to a point underneath the next "interesting" character that follows whitespace in the previous nonblank line. "Next" here means "appearing at a horizontal position greater than the one point starts out at". With an argument, as in <b>C-u M-&lt;TAB&gt;</b>, this command moves to the next such interesting character in the current line. <b>M-&lt;TAB&gt;</b> does not change the text; it only moves point. "Interesting" characters are defined by the variable <b>picture-tab-chars</b>, which should define a set of characters. The syntax for this variable is like the syntax used inside of '<b>[...]</b>' in a regular expression&mdash;but without the '<b>[</b>' and the '<b>]</b>'. Its default value is "!-~".<br><br><b>&lt;TAB&gt;</b> itself runs <b>picture-tab</b>, which operates based on the current tab stop settings; it is the Picture mode equivalent of tab-to-tab-stop. Normally it only moves point, but with a numeric argument it clears the text that it moves over.<br><br>The context-based and tab-stop-based forms of tabbing are brought together by the command <b>C-c &lt;TAB&gt;</b> (<b>picture-set-tab-stops</b>). This command sets the tab stops to the positions which <b>M-&lt;TAB&gt;</b> would consider significant in the current line. The use of this command, together with <b>&lt;TAB&gt;</b>, can get the effect of context-based tabbing. But <b>M-&lt;TAB&gt;</b> is more convenient in the cases where it is sufficient.<br><br>It may be convenient to prevent use of actual tab characters in pictures. For example, this prevents <b>C-x &lt;TAB&gt;</b> from messing up the picture. You can do this by setting the variable <b>indent-tabs-mode</b> to <b>nil</b>.</p>
<h2 id="Rectangles-in-Picture">Pictures in rectangle tab</h2>
<p class="tab">Picture mode defines commands for working on rectangular pieces of the text in ways that fit with the quarter-plane model. The standard rectangle commands may also be useful. See <a href="#Rectangles">Rectangles</a>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>C-c C-k</b></td>
<td>Clear out the region-rectangle with spaces (<b>picture-clear-rectangle</b>). With a prefix argument, delete the text.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-w r</b></td>
<td>Similar, but save rectangle contents in register <b>r</b> first (<b>picture-clear-rectangle-to-register</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-c C-y</b></td>
<td>Copy last killed rectangle into the buffer by overwriting, with upper left corner at point (<b>picture-yank-rectangle</b>). With argument, insert instead.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-x r</b></td>
<td>Similar, but use the rectangle in register <b>r</b> (<b>picture-yank-rectangle-from-register</b>).</td>
</tr>
</table>
<p class="tab">The picture rectangle commands <b>C-c C-k</b> (<b>picture-clear-rectangle</b>) and <b>C-c C-w</b> (<b>picture-clear-rectangle-to-register</b>) differ from the standard rectangle commands in that they normally clear the rectangle instead of deleting it; this is analogous with the way <b>C-d</b> is changed in Picture mode.<br><br>However, deletion of rectangles can be useful in Picture mode, so these commands delete the rectangle if given a numeric argument. <b>C-c C-k</b> either with or without a numeric argument saves the rectangle for <b>C-c C-y</b>.<br><br>The Picture mode commands for yanking rectangles differ from the standard ones in that they overwrite instead of inserting. This is the same way that Picture mode insertion of other text differs from other modes. <b>C-c C-y</b> (<b>picture-yank-rectangle</b>) inserts (by overwriting) the rectangle that was most recently killed, while <b>C-c C-x</b> (<b>picture-yank-rectangle-from-register</b>) does likewise for the rectangle found in a specified register.</p>
<h2 id="Editing-Binary-Files">Editing binary files</h2>
<p class="tab">There is a special major mode for editing <a href="/jargon/b/binary.htm">binary</a> files: Hexl mode. To use it, use <b>M-x hexl-find-file</b> instead of <b>C-x C-f</b> to visit the file. This command converts the file's contents to <a href="/jargon/h/hex.htm">hexadecimal</a> and lets you edit the translation. When you save the file, it is converted automatically back to binary.<br><br>You can also use <b>M-x hexl-mode</b> to translate an existing buffer into hex. This is useful if you visit a file normally and then discover it is a binary file.<br><br>Ordinary text characters overwrite in Hexl mode. This is to reduce the risk of accidentally spoiling the alignment of data in the file. There are special commands for insertion. Here is a list of the commands of Hexl mode:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>C-M-d</b></td>
<td>Insert a byte with a code typed in <a href="/jargon/d/decimal.htm">decimal</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-M-o</b></td>
<td>Insert a byte with a code typed in <a href="/jargon/o/octal.htm">octal</a>.</td>
</tr>
<tr class="tcw">
<td><b>C-M-x</b></td>
<td>Insert a byte with a code typed in hex.</td>
</tr>
<tr class="tcw">
<td><b>C-x [</b></td>
<td>Move to the beginning of a 1000 byte "page".</td>
</tr>
<tr class="tcw">
<td><b>C-x ]</b></td>
<td>Move to the end of a 1000 byte "page".</td>
</tr>
<tr class="tcw">
<td><b>M-g</b></td>
<td>Move to an address specified in hex.</td>
</tr>
<tr class="tcw">
<td><b>M-j</b></td>
<td>Move to an address specified in decimal.</td>
</tr>
<tr class="tcw">
<td><b>C-c C-c</b></td>
<td>Leave Hexl mode, going back to the major mode this buffer had before you invoked hexl-mode.</td>
</tr>
</table>
<p class="tab">Other Hexl commands let you insert strings (sequences) of binary bytes, move by shorts or ints, etc.; type <b>C-h a hexl-&lt;RET&gt;</b> for details.</p>
<h2 id="Saving-Emacs-Sessions">Saving Emacs sessions</h2>
<p class="tab">Use the desktop library to save the state of Emacs from one session to another. Once you save the Emacs desktop&mdash;the buffers, their file names, major modes, buffer positions, and so on&mdash;then subsequent Emacs sessions reload the saved desktop.<br><br>You can save the desktop manually with the command <b>M-x desktop-save</b>. You can also enable automatic saving of the desktop when you exit Emacs, and automatic restoration of the last saved desktop when Emacs starts: use the Customization buffer (see <a href="#Easy-Customization">Easy Customization</a>) to set <b>desktop-save-mode</b> to <b>t</b> for future sessions, or add this line in your init file (see <a href="#Init-File">Init File</a>):</p>
<pre class="tab tcy">(desktop-save-mode 1)</pre>
<p class="tab">If you turn on <b>desktop-save-mode</b> in your init file, then when Emacs starts, it looks for a saved desktop in the current directory. (More precisely, it looks in the directories specified by desktop-path, and uses the first desktop it finds.) Thus, you can have separate saved desktops in different directories, and the starting directory determines which one Emacs reloads. You can save the current desktop and reload one saved in another directory by typing <b>M-x desktop-change-dir</b>. Typing <b>M-x desktop-revert</b> reverts to the desktop previously reloaded.<br><br>Specify the option '<b>--no-desktop</b>' on the command line when you don't want it to reload any saved desktop. This turns off <b>desktop-save-mode</b> for the current session. Starting Emacs with the '<b>--no-init-file</b>' option also disables desktop reloading, as it bypasses the init file, where <b>desktop-save-mode</b> is usually enabled.<br><br>By default, all the buffers in the desktop are restored at one go. However, this may be slow if there are a lot of buffers in the desktop. You can specify the maximum number of buffers to restore immediately with the variable <b>desktop-restore-eager</b>; the remaining buffers are restored "lazily", when Emacs is idle.<br><br>Type <b>M-x desktop-clear</b> to empty the Emacs desktop. This kills all buffers except for internal ones, and clears the global variables listed in <b>desktop-globals-to-clear</b>. If you want this to preserve certain buffers, customize the variable <b>desktop-clear-preserve-buffers-regexp</b>, whose value is a regular expression matching the names of buffers not to kill.<br><br>If you want to save minibuffer history from one session to another, use the savehist library.</p>
<h2 id="Recursive-Edit">Recursive Editing levels</h2>
<p class="tab">A recursive edit is a situation where you are using Emacs commands to perform arbitrary editing while in the middle of another Emacs command. For example, when you type <b>C-r</b> inside of a <b>query-replace</b>, you enter a recursive edit where you can change the current buffer. On exiting from the recursive edit, you go back to the <b>query-replace</b>.<br><br>Exiting the recursive edit means returning to the unfinished command, which continues execution. The command to exit is <b>C-M-c</b> (<b>exit-recursive-edit</b>).<br><br>You can also abort the recursive edit. This is like exiting, but also quits the unfinished command immediately. Use the command <b>C-]</b> (<b>abort-recursive-edit</b>) to do this. See <a href="#Quitting">Quitting</a>.<br><br>The mode line shows you when you are in a recursive edit by displaying square brackets around the parentheses that always surround the major and minor mode names. Every window's mode line shows this in the same way, as being in a recursive edit is true of Emacs as a whole rather than any particular window or buffer.<br><br>It is possible to be in recursive edits within recursive edits. For example, after typing <b>C-r</b> in a <b>query-replace</b>, you may type a command that enters the debugger. This begins a recursive editing level for the debugger, in the recursive editing level for <b>C-r</b>. Mode lines display a pair of square brackets for each recursive editing level currently in progress.<br><br>Exiting the inner recursive edit (such as with the debugger <b>c</b> command) resumes the command running in the next level up. When that command finishes, you can then use <b>C-M-c</b> to exit another recursive editing level. Exiting applies to the innermost level only. Aborting also gets out of only one level of recursive edit; it returns immediately to the command level of the previous recursive edit. If you want, you can then abort the next recursive editing level.<br><br>Alternatively, the command <b>M-x top-level</b> aborts all levels of recursive edits, returning immediately to the top-level command reader. It also exits the minibuffer, if it's active.<br><br>The text being edited inside the recursive edit need not be the same text that you were editing at top level. It depends on the use of the recursive edit. If the command that invokes the recursive edit selects a different buffer first, that is the buffer you will edit recursively. In any case, you can switch buffers in the recursive edit in the normal manner (as long as the buffer-switching keys have not been rebound). You could probably do all the rest of your editing inside the recursive edit, visiting files and all. But this could have surprising effects (such as <a href="/jargon/s/stacover.htm">stack overflow</a>) from time to time. So remember to exit or abort the recursive edit when you no longer need it.<br><br>In general, we try to minimize the use of recursive editing levels in GNU Emacs. This is because they constrain you to "go back" in a particular order&mdash;from the innermost level toward the top level. When possible, we present different activities in separate buffers so that you can switch between them as you please. Some commands switch to a new major mode which provides a command to switch back. These approaches give you more flexibility to go back to unfinished tasks in the order you choose.</p>
<h2 id="Emulation">Emulation</h2>
<p class="tab">GNU Emacs can be programmed to emulate (more or less) most other editors. Standard facilities can emulate these:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:120px"><b>CRiSP/Brief</b></td>
<td style="width:190px">(PC editor)</td>
<td><b>M-x crisp-mode</b> enables key bindings to emulate the CRiSP/Brief editor. Note that this rebinds <b>M-x</b> to exit Emacs unless you set the variable <b>crisp-override-meta-x</b>. You can also use the command <b>M-x scroll-all-mode</b> or set the variable <b>crisp-load-scroll-all</b> to emulate CRiSP's <b>scroll-all</b> feature (scrolling all windows together).</td>
</tr>
<tr class="tcw">
<td><b>EDT</b></td>
<td>(DEC VMS editor)</td>
<td>Turn on EDT emulation with <b>M-x edt-emulation-on</b>; restore normal command bindings with <b>M-x edt-emulation-off</b>.<br><br>Most of the EDT emulation commands are keypad keys, and most standard Emacs key bindings are still available. The EDT emulation rebindings are done in the global keymap, so there is no problem switching buffers or major modes while in EDT emulation.</td>
</tr>
<tr class="tcw">
<td><b>TPU</b></td>
<td>(DEC VMS editor)</td>
<td><b>M-x tpu-edt-on</b> turns on emulation of the TPU editor emulating EDT.</td>
</tr>
<tr class="tcw">
<td><b>vi</b></td>
<td>(Berkeley editor)</td>
<td>Viper is the newest emulator for <a href="/unix/uvi.htm">vi</a>. It implements several levels of emulation; level 1 is closest to vi itself, while level 5 departs somewhat from strict emulation to take advantage of the capabilities of Emacs. To invoke Viper, type <b>M-x viper-mode</b>; it guides you the rest of the way and ask for the emulation level.</td>
</tr>
<tr class="tcw">
<td><b>vi</b></td>
<td>(another emulator)</td>
<td><b>M-x vi-mode</b> enters a major mode that replaces the previously established major mode. All of the vi commands that, in real vi, enter "input" mode are programmed instead to return to the previous major mode. Thus, ordinary Emacs serves as vi's "input" mode.<br><br>Because vi emulation works through major modes, it does not work to switch buffers during emulation. Return to normal Emacs first.<br><br>If you plan to use vi emulation much, you probably want to bind a key to the <b>vi-mode</b> command.</td>
</tr>
<tr class="tcw">
<td><b>vi</b></td>
<td>(alternate emulator)</td>
<td><b>M-x vip-mode</b> invokes another vi emulator, said to resemble real vi more thoroughly than <b>M-x vi-mode</b>. "Input" mode in this emulator is changed from ordinary Emacs so you can use <b>&lt;ESC&gt;</b> to go back to emulated vi command mode. To get from emulated vi command mode back to ordinary Emacs, type <b>C-z</b>.<br><br>This emulation does not work through major modes, and it is possible to switch buffers in various ways in the emulator. It is not so necessary to assign a key to the command <b>vip-mode</b> as it is with <b>vi-mode</b> because terminating insert mode does not use it.<br><br>See VIP, for full information.</td>
</tr>
<tr class="tcw">
<td><b>WordStar</b></td>
<td>(old wordprocessor)</td>
<td><b>M-x wordstar-mode</b> provides a major mode with WordStar-like key bindings.</td>
</tr>
</table>
<h2 id="Hyperlinking">Hyperlinking and navigation features</h2>
<p class="tab">The following subsections describe convenience features for handling URLs and other types of links occurring in Emacs buffer text.</p>
<ul>
<li><a href="#Browse_002dURL">Browse-URL</a>: Following URLs.</li>
<li><a href="#Goto-Address-mode">Goto Address mode</a>: Activating URLs.</li>
<li><a href="#FFAP">FFAP</a>: Finding files etc. at point.</li>
</ul>
<h2 id="Browse_002dURL">Following URLs</h2>
<table class="mtable4 tab"> 
<tr class="tcw">
<td style="width:340px"><b>M-x browse-url &lt;RET&gt;</b> <i>url</i> <b>&lt;RET&gt;</b></td>
<td>Load a URL into a Web browser.</td>
</tr>
</table>
<p class="tab">The Browse-URL package allows you to easily follow URLs from within Emacs. Most URLs are followed by invoking a web browser; '<b>mailto:</b>' URLs are followed by invoking the <b>compose-mail</b> Emacs command to send mail to the specified address (see <a href="#Sending-Mail">Sending Mail</a>).<br><br>The command <b>M-x browse-url</b> prompts for a URL, and follows it. If point is located near a plausible URL, that URL is offered as the default. The Browse-URL package also provides other commands which you might like to bind to keys, such as <b>browse-url-at-point</b> and <b>browse-url-at-mouse</b>.<br><br>You can customize Browse-URL's behavior via various options in the browse-url Customize group. In particular, the option <b>browse-url-mailto-function</b> lets you define how to follow '<b>mailto:</b>' URLs, while <b>browse-url-browser-function</b> lets you define how to follow other types of URLs. For more information, view the package commentary by typing <b>C-h P browse-url &lt;RET&gt;</b>.</p>
<h2 id="Goto-Address-mode">Activating URLs</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>M-x goto-address-mode</b></td>
<td>Activate URLs and e-mail addresses in the current buffer.</td>
</tr>
</table>
<p class="tab">You can make Emacs mark out URLs specially in the current buffer, by typing <b>M-x goto-address-mode</b>. When this <b>buffer-local</b> minor mode is enabled, it finds all the URLs in the buffer, highlights them, and turns them into clickable buttons. You can follow the URL by typing <b>C-c &lt;RET&gt;</b> (<b>goto-address-at-point</b>) while point is on its text; or by clicking with <b>Mouse-2</b>, or by clicking <b>Mouse-1</b> quickly (see <a href="#Mouse-References">Mouse References</a>). Following a URL is done by calling <b>browse-url</b> as a subroutine (see <a href="#Browse_002dURL">Browse-URL</a>).<br><br>It can be useful to add <b>goto-address-mode</b> to mode hooks and hooks for displaying an incoming message (e.g., <b>rmail-show-message-hook</b> for Rmail, and <b>mh-show-mode-hook</b> for MH-E). This is not needed for Gnus, which has a similar feature of its own.</p>
<h2 id="FFAP">Finding URLs and files at point</h2>
<p class="tab">The FFAP package replaces certain key bindings for finding files, such as <b>C-x C-f</b>, with commands that provide more sensitive defaults. These commands behave like the ordinary ones when given a prefix argument. Otherwise, they get the default file name or URL from the text around point. If what is found in the buffer has the form of a URL rather than a file name, the commands use <b>browse-url</b> to view it (see <a href="#Browse_002dURL">Browse-URL</a>).<br><br>This feature is useful for following references in mail or news buffers, README files, MANIFEST files, etc. For more information, view the package commentary by typing <b>C-h P ffap &lt;RET&gt;</b>.<br><br>To enable FFAP, type <b>M-x ffap-bindings</b>. This makes the following key bindings, and also installs hooks for additional FFAP functionality in Rmail, Gnus and VM article buffers.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>C-x C-f</b> <i>filename</i> <b>&lt;RET&gt;</b></td>
<td>Find <i>filename</i>, guessing a default from text around point (<b>find-file-at-point</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-r</b></td>
<td><b>ffap-read-only</b>, analogous to <b>find-file-read-only</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x C-v</b></td>
<td><b>ffap-alternate-file</b>, analogous to <b>find-alternate-file</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x d</b> <i>directory</i> <b>&lt;RET&gt;</b></td>
<td>Start Dired on <i>directory</i>, defaulting to the directory name at point (<b>dired-at-point</b>).</td>
</tr>
<tr class="tcw">
<td><b>C-x C-d</b></td>
<td><b>ffap-list-directory</b>, analogous to <b>list-directory</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 f</b></td>
<td><b>ffap-other-window</b>, analogous to <b>find-file-other-window</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 r</b></td>
<td><b>ffap-read-only-other-window</b>, analogous to <b>find-file-read-only-other-window</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 4 d</b></td>
<td><b>ffap-dired-other-window</b>, like <b>dired-other-window</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 f</b></td>
<td><b>ffap-other-frame</b>, analogous to <b>find-file-other-frame</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 r</b></td>
<td><b>ffap-read-only-other-frame</b>, analogous to <b>find-file-read-only-other-frame</b>.</td>
</tr>
<tr class="tcw">
<td><b>C-x 5 d</b></td>
<td><b>ffap-dired-other-frame</b>, analogous to <b>dired-other-frame</b>.</td>
</tr>
<tr class="tcw">
<td><b>M-x ffap-next</b></td>
<td>Search buffer for next file name or URL, then find that file or URL.</td>
</tr>
<tr class="tcw">
<td><b>S-Mouse-3</b></td>
<td><b>ffap-at-mouse</b> finds the file guessed from text around the position of a mouse click.</td>
</tr>
<tr class="tcw">
<td><b>C-S-Mouse-3</b></td>
<td>Display a menu of files and URLs mentioned in current buffer, then find the one you select (<b>ffap-menu</b>).</td>
</tr>
</table>
<h2 id="Amusements">Other amusements</h2>
<p class="tab">The animate package makes text dance (e.g., <b>M-x animate-birthday-present</b>).<br><br><b>M-x blackbox</b>, <b>M-x mpuz</b> and <b>M-x 5x5</b> are puzzles. <b>blackbox</b> challenges you to determine the location of objects inside a box by tomography. <b>mpuz</b> displays a multiplication puzzle with letters standing for digits in a code that you must guess&mdash;to guess a value, type a letter and then the digit you think it represents. The aim of <b>5x5</b> is to fill in all the squares.<br><br><b>M-x bubbles</b> is a game where the object is to remove as many bubbles as you can in the smallest number of moves.<br><br><b>M-x decipher</b> helps you to cryptanalyze a buffer which is encrypted in a simple monoalphabetic substitution cipher.<br><br><b>M-x dissociated-press</b> scrambles the text in the current Emacs buffer, word by word or character by character, writing its output to a buffer named *Dissociation*. A positive argument tells it to operate character by character, and specifies the number of overlap characters. A negative argument tells it to operate word by word, and specifies the number of overlap words. <b>Dissociated Press</b> produces results fairly like those of a Markov chain, but is however, an independent, ignoriginal invention; it techniquitously copies several consecutive characters from the sample text between random jumps, unlike a Markov chain which would jump randomly after each word or character.<br><br><b>M-x dunnet</b> runs a text-based adventure game.<br><br>If you want a little more personal involvement, try <b>M-x gomoku</b>, which plays the game Go Moku with you.<br><br>If you are a little bit bored, you can try <b>M-x hanoi</b>. If you are considerably bored, give it a numeric argument. If you are very, very bored, try an argument of 9. Sit back and watch.<br><br><b>M-x life</b> runs Conway's "Life" cellular automaton.<br><br><b>M-x landmark</b> runs a relatively non-participatory game where a robot attempts to maneuver towards a tree at the center of the window based on unique olfactory cues from each of the four directions.<br><br><b>M-x morse-region</b> converts the text in the region to Morse code; <b>M-x unmorse-region</b> converts it back. <b>M-x nato-region</b> converts the text in the region to NATO phonetic alphabet; <b>M-x denato-region</b> converts it back.<br><br><b>M-x pong</b>, <b>M-x snake</b> and <b>M-x tetris</b> are implementations of the well-known Pong, Snake and Tetris games.<br><br><b>M-x solitaire</b> plays a game of solitaire where you jump pegs across other pegs.<br><br>The command <b>M-x zone</b> plays games with the display when Emacs is idle.<br><br>Finally, if you find yourself frustrated, try describing your problems to the famous psychotherapist Eliza. Only do <b>M-x doctor</b>. End each input by typing <b>&lt;RET&gt;</b> twice.</p>
<h2 id="Packages">Emacs Lisp packages</h2>
<p class="tab">Emacs includes a facility that lets you easily download and install packages that implement additional features. Each package is a separate Emacs Lisp program, sometimes including other components such as an Info manual.<br><br><b>M-x list-packages</b> brings up a buffer named *Packages* with a list of all packages. You can install or uninstall packages via this buffer. See <a href="#Package-Menu">Package Menu</a>.<br><br>The command <b>C-h P</b> (<b>describe-package</b>) prompts for the name of a package, and displays a help buffer describing the attributes of the package and the features that it implements.<br><br>By default, Emacs downloads packages from a package archive maintained by the Emacs developers and hosted by the GNU project. Optionally, you can also download packages from archives maintained by third parties. See <a href="#Package-Installation">Package Installation</a>.</p>
<ul>
<li><a href="#Package-Menu">Package Menu</a>: Buffer for viewing and managing packages.</li>
<li><a href="#Package-Installation">Package Installation</a>: Options for package installation.</li>
<li><a href="#Package-Files">Package Files</a>: Where packages are installed.</li>
</ul>
<h2 id="Package-Menu">The package menu buffer</h2>
<p class="tab">The command <b>M-x list-packages</b> brings up the package menu. This is a buffer listing all the packages that Emacs knows about, one on each line, with the following information:</p>
<ul>
<li>The package name (e.g., '<b>auctex</b>').</li>
<li>The package's version number (e.g., '<b>11.86</b>').</li>
<li>The package's <b>status&mdash;normally</b> one of '<b>available</b>' (can be downloaded from the package archive), '<b>installed</b>', or '<b>built-in</b>' (included in Emacs by default). The status can also be '<b>new</b>'. This is equivalent to '<b>available</b>', except that it means the package became newly available on the package archive after your last invocation of <b>M-x list-packages</b>. In other instances, a package may have the status '<b>held</b>', '<b>disabled</b>', or '<b>obsolete</b>'. See Package Installation.</li>
<li>A short description of the package.</li>
</ul>
<p class="tab">The <b>list-packages</b> command accesses the network, to retrieve the list of available packages from the package archive server. If the network is unavailable, it falls back on the most recently retrieved list.<br><br>The following commands are available in the package menu:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>h</b></td>
<td>Print a short message summarizing how to use the package menu (<b>package-menu-quick-help</b>).</td>
</tr>
<tr class="tcw">
<td><b>?</b>, <b>&lt;RET&gt;</b></td>
<td>Display a help buffer for the package on the current line (<b>package-menu-describe-package</b>), similar to the help window displayed by the <b>C-h P</b> command (see <a href="#Packages">Packages</a>).</td>
</tr>
<tr class="tcw">
<td><b>i</b></td>
<td>Mark the package on the current line for installation (<b>package-menu-mark-install</b>). If the package status is '<b>available</b>', this adds an '<b>I</b>' character to the start of the line; typing <b>x</b> (see below) downloads and install the package.</td>
</tr>
<tr class="tcw">
<td><b>d</b></td>
<td>Mark the package on the current line for deletion (<b>package-menu-mark-delete</b>). If the package status is '<b>installed</b>', this adds a '<b>D</b>' character to the start of the line; typing <b>x</b> (see below) deletes the package. See <a href="#Package-Files">Package Files</a>, for information about what package deletion entails.</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Remove any installation or deletion mark previously added to the current line by an <b>i</b> or <b>d</b> command.</td>
</tr>
<tr class="tcw">
<td><b>U</b></td>
<td>Mark all package with a newer available version for "upgrading" (<b>package-menu-mark-upgrades</b>). This places an installation mark on the new available versions, and a deletion mark on the old installed versions.</td>
</tr>
<tr class="tcw">
<td><b>x</b></td>
<td>Download and install all packages marked with <b>i</b>, and their dependencies; also, delete all packages marked with <b>d</b> (<b>package-menu-execute</b>). This also removes the marks.</td>
</tr>
<tr class="tcw">
<td><b>r</b></td>
<td>Refresh the package list (<b>package-menu-refresh</b>). This fetches the list of available packages from the package archive again, and recomputes the package list.</td>
</tr>
</table>
<p class="tab">For example, you can install a package by typing <b>i</b> on the line listing that package, followed by <b>x</b>.</p>
<h2 id="Package-Installation">Package installation</h2>
<p class="tab">Packages are most conveniently installed using the package menu (see <a href="#Package-Menu">Package Menu</a>), but you can also use the command <b>M-x package-install</b>. This prompts for the name of a package with the '<b>available</b>' status, then downloads and installs it.<br><br>A package may require certain other packages to be installed, because it relies on functionality provided by them. When Emacs installs such a package, it also automatically downloads and installs any required package that is not already installed. (If a required package is somehow unavailable, Emacs signals an error and stops installation.) A package's requirements list is shown in its help buffer.<br><br>By default, packages are downloaded from a single package archive maintained by the Emacs developers. This is controlled by the variable <b>package-archives</b>, whose value is a list of package archives known to Emacs. Each list element must have the form <b>(id . location)</b>, where id is the name of a package archive and location is the HTTP address or directory name of the package archive. You can alter this list if you want to use third-party package archives&mdash;but do so at your own risk, and use only third parties that you think you can trust.<br><br>Once a package is downloaded and installed, it is loaded into the current Emacs session. Loading a package is not quite the same as loading a Lisp library (see <a href="#Lisp-Libraries">Lisp Libraries</a>); its effect varies from package to package. Most packages only make some new commands available, while others have more wide-ranging effects on the Emacs session. For such information, consult the package's help buffer.<br><br>By default, Emacs also automatically loads all installed packages in subsequent Emacs sessions. This happens at startup, after processing the init file (see <a href="#Init-File">Init File</a>). As an exception, Emacs does not load packages at startup if invoked with the '<b>-q</b>' or '<b>--no-init-file</b>' options (see <a href="#Initial-Options">Options</a>).<br><br>To disable automatic package loading, change the variable <b>package-enable-at-startup</b> to <b>nil</b>.<br><br>The reason automatic package loading occurs after loading the init file is that user options only receive their customized values after loading the init file, including user options which affect the packaging system. In some circumstances, you may want to load packages explicitly in your init file (usually because some other code in your init file depends on a package). In that case, your init file should call the function <b>package-initialize</b>. It is up to you to ensure that relevant user options, such as <b>package-load-list</b> (see below), are set up before the <b>package-initialize</b> call. Also set <b>package-enable-at-startup</b> to <b>nil</b>, to avoid loading the packages again after processing the init file. Alternatively, you may choose to completely inhibit package loading at startup, and invoke the command <b>M-x package-initialize</b> to load your packages manually.<br><br>For finer control over package loading, you can use the variable <b>package-load-list</b>. Its value should be a list. A list element of the form <b>(name version)</b> tells Emacs to load the version of the package named <b>name</b>. Here, version should be a version string (corresponding to a specific version of the package), or <b>t</b> (which means to load any installed version), or <b>nil</b> (which means no version; this "disables" the package, preventing it from being loaded). A list element can also be the symbol <b>all</b>, which means to load the latest installed version of any package not named by the other list elements. The default value is only <b>'(all)</b>.<br><br>For example, if you set <b>package-load-list</b> to <b>'((muse "3.20") all)</b>, then Emacs only loads version 3.20 of the '<b>muse</b>' package, plus any installed version of packages other than '<b>muse</b>'. Any other version of '<b>muse</b>' that happens to be installed is ignored. The '<b>muse</b>' package is listed in the package menu with the '<b>held</b>' status.</p>
<h2 id="Package-Files">Package files and directory layout</h2>
<p class="tab">Each package is downloaded from the package archive in the form of a single package file&mdash;either an Emacs Lisp source file, or a tar file containing multiple Emacs Lisp source and other files. Package files are automatically retrieved, processed, and disposed of by the Emacs commands that install packages. Normally, you do not need to deal directly with them, unless you are making a package. Should you ever need to install a package directly from a package file, use the command <b>M-x package-install-file</b>.<br><br>Once installed, the contents of a package are placed in a subdirectory of <b>~/.emacs.d/elpa/</b> (you can change the name of that directory by changing the variable <b>package-user-dir</b>). The package subdirectory is named <b>name-version</b>, where name is the package name and version is its version string.<br><br>In addition to <b>package-user-dir</b>, Emacs looks for installed packages in the directories listed in <b>package-directory-list</b>. These directories are meant for system administrators to make Emacs packages available system-wide; Emacs itself never installs packages there. The package subdirectories for <b>package-directory-list</b> are laid out in the same way as in <b>package-user-dir</b>.<br><br>Deleting a package (see <a href="#Package-Menu">Package Menu</a>) involves deleting the corresponding package subdirectory. This only works for packages installed in <b>package-user-dir</b>; if told to act on a package in a system-wide package directory, the deletion command signals an error.</p>
<h2 id="Customization">Customization</h2>
<p class="tab">This chapter describes some simple methods to customize the behavior of Emacs.<br><br>Apart from the methods described here, see <a href="#X-Resources">X Resources</a> for information about using X resources to customize Emacs, and see <a href="#Keyboard-Macros">Keyboard Macros</a> for information about recording and replaying keyboard macros. Making more far-reaching and open-ended changes involves writing Emacs Lisp code.</p>
<ul>
<li><a href="#Easy-Customization">Easy Customization</a>: Convenient way to browse and change settings.</li>
<li><a href="#Variables">Variables</a>: Many Emacs commands examine Emacs variables to decide what to do; by setting variables, you can control their functioning.</li>
<li><a href="#Key-Bindings">Key Bindings</a>: The keymaps say what command each key runs. By changing them, you can "redefine keys".</li>
<li><a href="#Init-File">Init File</a>: How to write common customizations in the initialization file.</li>
</ul>
<h2 id="Easy-Customization">Easy customization interface</h2>
<p class="tab">Emacs has many settings which you can change. Most settings are customizable variables (see <a href="#Variables">Variables</a>), which are also called user options. A separate class of settings are the faces, which determine the fonts, colors, and other attributes of text (see <a href="#Faces">Faces</a>).<br><br>To browse and alter settings (both variables and faces), type <b>M-x customize</b>. This creates a customization buffer, which lets you navigate through a logically organized list of settings, edit and set their values, and save them permanently.</p>
<ul>
<li><a href="#Customization-Groups">Customization Groups</a>: How settings are classified.</li>
<li><a href="#Browsing-Custom">Browsing Custom</a>: Browsing and searching for settings.</li>
<li><a href="#Changing-a-Variable">Changing a Variable</a>: How to edit an option's value and set the option.</li>
<li><a href="#Saving-Customizations">Saving Customizations</a>: Saving customizations for future Emacs sessions.</li>
<li><a href="#Face-Customization">Face Customization</a>: How to edit the attributes of a face.</li>
<li><a href="#Specific-Customization">Specific Customization</a>: Customizing specific settings or groups.</li>
<li><a href="#Custom-Themes">Custom Themes</a>: Collections of customization settings.</li>
<li><a href="#Creating-Custom-Themes">Creating Custom Themes</a>: How to create a new custom theme.</li>
</ul>
<h2 id="Customization-Groups">Customization groups</h2>
<p class="tab">Customization settings are organized into customization groups. These groups are collected into bigger groups, up to a master group called Emacs.<br><br><b>M-x customize</b> creates a customization buffer that shows the top-level Emacs group. It looks like this, in part:</p>
<pre class="tab tcy">To apply changes, use the Save or Set buttons.
For details, see [Saving Customizations] in the [Emacs manual].
________________________________________ [ Search ]
 Operate on all settings in this buffer:
 [ Set for current session ] [ Save for future sessions ]
 [ Undo edits ] [ Reset to saved ] [ Erase customizations ] [ Exit ]
Emacs group: Customization of the One True Editor.
      [State]: visible group members are all at standard values.
      See also [Manual].
[Editing] : Basic text editing facilities.
[Convenience] : Convenience features for faster editing.
more second-level groups
</pre>
<p class="tab">The main part of this buffer shows the '<b>Emacs</b>' customization group, which contains other groups ('<b>Editing</b>', '<b>Convenience</b>', etc.). The contents of those groups are not listed here, only one line of documentation each.<br><br>The state of the group indicates whether setting in that group is edited, set or saved. See <a href="#Changing-a-Variable">Changing a Variable</a>.<br><br>Most of the customization buffer is read-only, but it includes some editable fields that you can edit. For example, at the top of the customization buffer is an editable field for searching for settings (see <a href="#Browsing-Custom">Browsing Custom</a>). There are also buttons and links, which you can activate by either clicking with the mouse, or moving point there and typing <b>&lt;RET&gt;</b>. For example, the group names like '<b>[Editing]</b>' are links; activating one of these links brings up the customization buffer for that group.<br><br>In the customizable buffer, you can type <b>&lt;TAB&gt;</b> (<b>widget-forward</b>) to move forward to the next button or editable field. <b>S-&lt;TAB&gt;</b> (<b>widget-backward</b>) moves back to the previous button or editable field.</p>
<h2 id="Browsing-Custom">Browsing and searching for settings</h2>
<p class="tab">From the top-level customization buffer created by <b>M-x customize</b>, you can follow the links to the subgroups of the '<b>Emacs</b>' customization group. These subgroups may contain settings for you to customize; they may also contain further subgroups, dealing with yet more specialized subsystems of Emacs. As you navigate the hierarchy of customization groups, find some settings that you want to customize.<br><br>If you are interested in customizing a particular setting or customization group, you can go straight there with the commands <b>M-x customize-option</b>, <b>M-x customize-face</b>, or <b>M-x customize-group</b>. See <a href="#Specific-Customization">Specific Customization</a>.<br><br>If you don't know exactly what groups or settings you want to customize, you can search for them using the editable search field at the top of each customization buffer. Here, you can type in a search term&mdash;either one or more words separated by spaces, or a regular expression (see <a href="#Regexps">Regexps</a>). Then type <b>&lt;RET&gt;</b> in the field, or activate the '<b>Search</b>' button next to it, to switch to a customization buffer containing groups and settings that match those terms. Note, however, that this feature only finds groups and settings that are loaded in the current Emacs session.<br><br>If you don't want customization buffers to show the search field, change the variable <b>custom-search-field</b> to <b>nil</b>.<br><br>The command <b>M-x customize-apropos</b> is similar to using the search field, except that it reads the search term(s) using the minibuffer. See <a href="#Specific-Customization">Specific Customization</a>. <b>M-x customize-browse</b> is another way to browse the available settings. This command creates a special customization buffer which shows only the names of groups and settings, in a structured layout. You can show the contents of a group, in the same buffer, by invoking the '<b>[+]</b>' button next to the group name. When the group contents are shown, the button changes to '<b>[-]</b>'; invoking that hides the group contents again. Each group or setting in this buffer has a link which says '<b>[Group]</b>', '<b>[Option]</b>' or '<b>[Face]</b>'. Invoking this link creates an ordinary customization buffer showing only that group, option, or face; this is the way to change settings that you find with <b>M-x customize-browse</b>.</p>
<h2 id="Changing-a-Variable">Changing a variable</h2>
<p class="tab">Here is an example of what a variable, or user option, looks like in the customization buffer:</p>
<pre class="tab tcy">[Hide] Kill Ring Max: 60
        [State]: STANDARD.
        Maximum length of kill ring before oldest elements are thrown away.
</pre>
<p class="tab">The first line shows that the variable is named <b>kill-ring-max</b>, formatted as '<b>Kill Ring Max</b>' for easier viewing. Its value is '<b>60</b>'. The button labeled '<b>[Hide]</b>', if activated, hides the variable's value and state; this is useful to avoid cluttering up the customization buffer with very long values (for this reason, variables that have very long values may start out hidden). If you use the '<b>[Hide]</b>' button, it changes to '<b>[Show Value]</b>', which you can activate to reveal the value and state. On a graphical display, the '<b>[Hide]</b>' and '<b>[Show Value]</b>' buttons are replaced with graphical triangles pointing downwards and rightwards respectively.<br><br>The line after the variable name indicates the customization state of the variable: in this example, '<b>STANDARD</b>' means you have not changed the variable, so its value is the default one. The '<b>[State]</b>' button gives a menu of operations for customizing the variable.<br><br>Below the customization state is the documentation for the variable. This is the same documentation that is shown by the <b>C-h v</b> command (see <a href="#Examining">Examining</a>). If the documentation is more than one line long, only one line may be shown. If so, that line ends with a '<b>[More]</b>' button; activate this to see the full documentation.<br><br>To enter a new value for '<b>Kill Ring Max</b>', only move point to the value and edit it. For example, type <b>M-d</b> to delete the '<b>60</b>' and type in another number. As you begin to alter the text, the '<b>[State]</b>' line changes:</p>
<pre class="tab tcy">[State]: EDITED, shown value does not take effect until you set or save it.</pre>
<p class="tab">Editing the value does not make it take effect right away. To do that, you must set the variable by activating the '<b>[State]</b>' button and choosing '<b>Set for Current Session</b>'. Then the variable's state becomes:</p>
<pre class="tab tcy">[State]: SET for current session only.</pre>
<p class="tab">You don't have to worry about specifying a value that is not valid; the '<b>Set for Current Session</b>' operation checks for validity and will not install an unacceptable value.<br><br>While editing certain kinds of values, such as file names, directory names, and Emacs command names, you can perform completion with <b>C-M-i</b> (<b>widget-complete</b>), or the equivalent keys <b>M-&lt;TAB&gt;</b> or <b>&lt;ESC&gt; &lt;TAB&gt;</b>. This behaves much like minibuffer completion (see <a href="#Completion">Completion</a>).<br><br>Typing <b>&lt;RET&gt;</b> on an editable value field moves point forward to the next field or button, like <b>&lt;TAB&gt;</b>. You can thus type <b>&lt;RET&gt;</b> when you are finished editing a field, to move on to the next button or field. To insert a newline within an editable field, use <b>C-o</b> or <b>C-q C-j</b>.<br><br>For some variables, there is only a fixed set of legitimate values, and you are not allowed to edit the value directly. Instead, a '<b>[Value Menu]</b>' button appears before the value; activating this button presents a choice of values. For a boolean "on or off" value, the button says '<b>[Toggle]</b>', and flips the value. After using the '<b>[Value Menu]</b>' or '<b>[Toggle]</b>' button, you must again set the variable to make the chosen value take effect.<br><br>Some variables have values with complex structure. For example, the value of <b>minibuffer-frame-alist</b> is an association list. Here is how it appears in the customization buffer:</p>
<pre class="tab tcy">[Hide] Kill Ring Max: 60
[State]: STANDARD.
Maximum length of kill ring before oldest elements are thrown away.
</pre>
<p class="tab">In this case, each association in the list consists of two items, one labeled '<b>Parameter</b>' and one labeled '<b>Value</b>'; both are editable fields. You can delete an association from the list with the '<b>[DEL]</b>' button next to it. To add an association, use the '<b>[INS]</b>' button at the position where you want to insert it; the very last '<b>[INS]</b>' button inserts at the end of the list.<br><br>When you set a variable, the new value takes effect only in the current Emacs session. To save the value for future sessions, use the '<b>[State]</b>' button and select the '<b>Save for Future Sessions</b>' operation. See <a href="#Saving-Customizations">Saving Customizations</a>.<br><br>You can also restore the variable to its standard value using the '<b>[State]</b>' button and selecting the '<b>Erase Customization</b>' operation. There are actually four reset operations:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px">'<b>Undo Edits</b>'</td>
<td>If you have modified but not yet set the variable, this restores the text in the customization buffer to match the actual value.</td>
</tr>
<tr class="tcw">
<td>'<b>Reset to Saved</b>'</td>
<td>This restores the value of the variable to the last saved value, and updates the text accordingly.</td>
</tr>
<tr class="tcw">
<td>'<b>Erase Customization</b>'</td>
<td>This sets the variable to its standard value. Any saved value that you have is also eliminated.</td>
</tr>
<tr class="tcw">
<td>'<b>Set to Backup Value</b>'</td>
<td>This sets the variable to a previous value that was set in the customization buffer in this session. If you customize a variable and then reset it, which discards the customized value, you can get the discarded value back again with this operation.</td>
</tr>
</table>
<p class="tab">Sometimes it is useful to record a comment about a specific customization. Use the '<b>Add Comment</b>' item from the '<b>[State]</b>' menu to create a field for entering the comment.<br><br>Near the top of the customization buffer are two lines of buttons:</p>
<pre class="tab">[Set for Current Session] [Save for Future Sessions]
[Undo Edits] [Reset to Saved] [Erase Customization]   [Exit]
</pre>
<p class="tab">Each of the first five buttons performs the stated operation&mdash;<b>set</b>, <b>save</b>, <b>reset</b>, etc.&mdash;on all the settings in the buffer that could meaningfully be affected. They do not operate on settings that are hidden, nor on subgroups that are hidden or not visible in the buffer.<br><br>The command <b>C-c C-c</b> (<b>Custom-set</b>) is equivalent using to the '<b>[Set for Current Session]</b>' button. The command <b>C-x C-s</b> (<b>Custom-save</b>) is like using the '<b>[Save for Future Sessions]</b>' button.<br><br>The '<b>[Exit]</b>' button switches out of the customization buffer, and buries the buffer at the bottom of the buffer list. To make it kill the customization buffer instead, change the variable <b>custom-buffer-done-kill</b> to <b>t</b>.</p>
<h2 id="Saving-Customizations">Saving customizations</h2>
<p class="tab">In the customization buffer, you can save a customization setting by choosing the '<b>Save for Future Sessions</b>' choice from its '<b>[State]</b>' button. The <b>C-x C-s</b> (<b>Custom-save</b>) command, or the '<b>[Save for Future Sessions]</b>' button at the top of the customization buffer, saves all applicable settings in the buffer.<br><br>Saving works by writing code to a file, usually your initialization file (see <a href="#Init-File">Init File</a>). Future Emacs sessions automatically read this file at startup, which sets up the customizations again.<br><br>You can choose to save customizations somewhere other than your initialization file. To make this work, you must add a few lines of code to your initialization file, to set the variable custom-file to the name of the desired file, and to load that file. For example:</p>
<pre class="tab tcy">(setq custom-file "~/.emacs-custom.el")
(load custom-file)</pre>
<p class="tab">You can even specify different customization files for different Emacs versions, like this:</p>
<pre class="tab tcy">    (cond ((&lt; emacs-major-version 22)
            ;; Emacs 21 customization.
            (setq custom-file "~/.custom-21.el"))
           ((and (= emacs-major-version 22)
                 (&lt; emacs-minor-version 3))
            ;; Emacs 22 customization, before version 22.3.
            (setq custom-file "~/.custom-22.el"))
           (t
            ;; Emacs version 22.3 or later.
            (setq custom-file "~/.emacs-custom.el")))
     (load custom-file)
</pre>
<p class="tab">If Emacs was invoked with the <b>-q</b> or <b>--no-init-file</b> options (see <a href="#Initial-Options">Options</a>), it will not let you save your customizations in your initialization file. This is because saving customizations from such a session would wipe out all the other customizations you might have on your initialization file.</p>
<h2 id="Face-Customization">Customizing faces</h2>
<p class="tab">You can customize faces (see <a href="#Faces">Faces</a>), which determine how Emacs displays different types of text. Customization groups can contain both variables and faces.<br><br>For example, in programming language modes, source code comments are shown with <b>font-lock-comment-face</b> (see <a href="#Font-Lock">Font Lock</a>). In a customization buffer, that face appears like this:</p>
<pre class="tab">[Hide] Font Lock Comment Face:[sample]
[State] : STANDARD.
Font Lock mode face used to highlight comments.
[ ] Font Family: --
[ ] Font Foundry: --
[ ] Width: --
[ ] Height: --
[ ] Weight: --
[ ] Slant: --
[ ] Underline: --
[ ] Overline: --
[ ] Strike-through: --
[ ] Box around text: --
[ ] Inverse-video: --
[X] Foreground: Firebrick     [Choose]  (sample)
[ ] Background: --
[ ] Stipple: --
[ ] Inherit: --
[Hide Unused Attributes]
</pre>
<p class="tab">The first three lines show the name, '<b>[State]</b>' button, and documentation for the face. Below that is a list of face attributes. In front of each attribute is a checkbox. A filled checkbox, '<b>[X]</b>', indicates the face specifies a value for this attribute; an empty checkbox, '<b>[ ]</b>', indicates the face does not specify any special value for the attribute. You can activate a checkbox to specify or unspecify its attribute.<br><br>A face does not have to specify every single attribute; in fact, most faces only specify a few attributes. In the above example, <b>font-lock-comment-face</b> only specifies the foreground color. Any unspecified attribute is taken from the special face named default, whose attributes are all specified. The default face is the face used to display any text that does not have an explicitly-assigned face; furthermore, its background color attribute serves as the background color of the frame.<br><br>The '<b>Hide Unused Attributes</b>' button, at the end of the attribute list, hides the unspecified attributes of the face. When attributes are being hidden, the button changes to '<b>[Show All Attributes]</b>', which reveals the entire attribute list. The customization buffer may start out with unspecified attributes hidden, to avoid cluttering the interface.<br><br>When an attribute is specified, you can change its value in the usual ways.<br><br>Foreground and background colors can be specified using either color names or RGB triplets (see <a href="#Colors">Colors</a>). You can also use the '<b>[Choose]</b>' button to switch to a list of color names; select a color with <b>&lt;RET&gt;</b> in that buffer to put the color name in the value field.<br><br>Setting, saving and resetting a face work like the same operations for variables (see <a href="#Changing-a-Variable">Changing a Variable</a>).<br><br>A face can specify different appearances for different types of displays. For example, a face can make text red on a color display, but use a bold font on a monochrome display. To specify multiple appearances for a face, select '<b>For All Kinds of Displays</b>' in the menu you get from invoking '<b>[State]</b>'.</p>
<h2 id="Specific-Customization">Customizing specific items</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:240px"><b>M-x customize-option &lt;RET&gt;</b> <i>option</i> <b>&lt;RET&gt;</b>, <b>M-x customize-variable &lt;RET&gt;</b> <i>option</i> <b>&lt;RET&gt;</b></td>
<td>Set up a customization buffer for only one user option, <i>option</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x customize-face &lt;RET&gt;</b> <i>face</i> <b>&lt;RET&gt;</b></td>
<td>Set up a customization buffer for only one face, <i>face</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x customize-group &lt;RET&gt;</b> <i>group</i> <b>&lt;RET&gt;</b></td>
<td>Set up a customization buffer for only one group, <i>group</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x customize-apropos &lt;RET&gt;</b> <i>regexp</i> <b>&lt;RET&gt;</b></td>
<td>Set up a customization buffer for all the settings and groups that match <i>regexp</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x customize-changed &lt;RET&gt;</b> <i>version</i> <b>&lt;RET&gt;</b></td>
<td>Set up a customization buffer with all the settings and groups whose meaning has changed since Emacs version <i>version</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x customize-saved</b></td>
<td>Set up a customization buffer containing all settings that you have saved with customization buffers.</td>
</tr>
<tr class="tcw">
<td><b>M-x customize-unsaved</b></td>
<td>Set up a customization buffer containing all settings that you have set but not saved.</td>
</tr>
</table>
<p class="tab">If you want to customize a particular user option, type <b>M-x customize-option</b>. This reads the variable name, and sets up the customization buffer with only that one user option. When entering the variable name into the minibuffer, completion is available, but only for the names of variables that are loaded into Emacs.<br><br>Likewise, you can customize a specific face using <b>M-x customize-face</b>. You can set up a customization buffer for a specific customization group using <b>M-x customize-group</b>.<br><br><b>M-x customize-apropos</b> prompts for a search term&mdash;either one or more words separated by spaces, or a regular expression&mdash;and sets up a customization buffer for all loaded settings and groups with matching names. This is like using the search field at the top of the customization buffer (see <a href="#Customization-Groups">Customization Groups</a>).<br><br>When you upgrade to a new Emacs version, you might want to consider customizing new settings, and settings whose meanings or default values have changed. To do this, use <b>M-x customize-changed</b> and specify a previous Emacs version number using the minibuffer. It creates a customization buffer which shows all the settings and groups whose definitions were changed since the specified version, loading them if necessary.<br><br>If you change settings and then decide the change was a mistake, you can use two commands to revisit your changes. Use <b>M-x customize-saved</b> to customize settings that you have saved. Use <b>M-x customize-unsaved</b> to customize settings that you have set but not saved.</p>
<h2 id="Custom-Themes">Custom themes</h2>
<p class="tab">Custom themes are collections of settings that are enabled or disabled as a unit. You can use Custom themes to switch easily between various collections of settings, and to transfer such collections from one computer to another.<br><br>A Custom theme is stored as an Emacs Lisp source file. If the name of the Custom theme is <b>name</b>, the theme file is named <b>name-theme.el</b>. See <a href="#Creating-Custom-Themes">Creating Custom Themes</a>, for the format of a theme file and how to make one.<br><br>Type <b>M-x customize-themes</b> to switch to a buffer named *Custom Themes*, which lists the Custom themes that Emacs knows. By default, Emacs looks for theme files in two locations: the directory specified by the variable <b>custom-theme-directory</b> (which defaults to <b>~/.emacs.d/</b>), and a directory named <b>etc/themes</b> in your Emacs installation (see the variable <b>data-directory</b>). The latter contains several Custom themes which are distributed with Emacs, which customize Emacs's faces to fit various color schemes. (Note, however, that Custom themes need not be restricted to this purpose; they can customize variables too).<br><br>If you want Emacs to look for Custom themes in some other directory, add the directory name to the list variable <b>custom-theme-load-path</b>. Its default value is <b>(custom-theme-directory t)</b>; here, the symbol <b>custom-theme-directory</b> has the special meaning of the value of the variable <b>custom-theme-directory</b>, while <b>t</b> stands for the built-in theme directory <b>etc/themes</b>. The themes listed in the *Custom Themes* buffer are those found in the directories specified by <b>custom-theme-load-path</b>.<br><br>In the *Custom Themes* buffer, you can activate the checkbox next to a Custom theme to enable or disable the theme for the current Emacs session. When a Custom theme is enabled, all its settings (variables and faces) take effect in the Emacs session. To apply the choice of theme(s) to future Emacs sessions, type <b>C-x C-s</b> (<b>custom-theme-save</b>) or use the '<b>[Save Theme Settings]</b>' button.<br><br>When you first enable a Custom theme, Emacs displays the contents of the theme file and asks if you want to load it. Because loading a Custom theme can execute arbitrary Lisp code, only say yes if you know the theme is safe; in that case, Emacs offers to remember in the future that the theme is safe (this is done by saving the theme file's SHA-256 hash to the variable custom-safe-themes; if you want to treat all themes as safe, change its value to <b>t</b>). Themes that come with Emacs (in the etc/themes directory) are exempt from this check, and are always considered safe.<br><br>Setting or saving Custom themes actually works by customizing the variable <b>custom-enabled-themes</b>. The value of this variable is a list of Custom theme names (as Lisp symbols, e.g., <b>tango</b>). Instead of using the *Custom Themes* buffer to set <b>custom-enabled-themes</b>, you can customize the variable using the usual customization interface, e.g., with <b>M-x customize-option</b>. Note that Custom themes are not allowed to set custom-enabled-themes themselves.<br><br>Any customizations that you make through the customization buffer take precedence over theme settings. This lets you easily override individual theme settings where you disagree. If settings from two different themes overlap, the theme occurring earlier in <b>custom-enabled-themes</b> takes precedence. In the customization buffer, if a setting is changed from its default by a Custom theme, its '<b>State</b>' display shows '<b>THEMED</b>' instead of '<b>STANDARD</b>'.<br><br>You can enable a specific Custom theme in the current Emacs session by typing <b>M-x load-theme</b>. This prompts for a theme name, loads the theme from the theme file, and enables it. If a theme file was loaded before, you can enable the theme without loading its file by typing <b>M-x enable-theme</b>. To disable a Custom theme, type <b>M-x disable-theme</b>.<br><br>To see a description of a Custom theme, type <b>?</b> on its line in the *Custom Themes* buffer; or type <b>M-x describe-theme</b> anywhere in Emacs and enter the theme name.</p>
<h2 id="Creating-Custom-Themes">Creating custom themes</h2>
<p class="tab">You can define a Custom theme using an interface similar to the customization buffer, by typing <b>M-x customize-create-theme</b>. This switches to a buffer named *Custom Theme*. It also offers to insert some common Emacs faces into the theme (a convenience, as Custom themes are often used to customize faces). If you answer no, the theme initially contains no settings.<br><br>Near the top of the *Custom Theme* buffer are editable fields where you can enter the theme's name and description. The name is anything except '<b>user</b>'. The description is the one that is shown when you invoke <b>M-x describe-theme</b> for the theme. Its first line should be a brief one-sentence summary; in the buffer made by <b>M-x customize-themes</b>, this sentence is displayed next to the theme name.<br><br>To add a new setting to the theme, use the '<b>[Insert Additional Face]</b>' or '<b>[Insert Additional Variable]</b>' buttons. Each button reads a face or variable name using the minibuffer, with completion, and inserts a customization entry for the face or variable. You can edit the variable values or face attributes in the same way as in a normal customization buffer. To remove a face or variable from the theme, uncheck the checkbox next to its name.<br><br>After specifying the Custom theme's faces and variables, type <b>C-x C-s</b> (<b>custom-theme-write</b>) or use the buffer's '<b>[Save Theme]</b>' button. This saves the theme file, named name-theme.el where name is the theme name, in the directory named by <b>custom-theme-directory</b>.<br><br>From the *Custom Theme* buffer, you can view and edit an existing Custom theme by activating the '<b>[Visit Theme]</b>' button and specifying the theme name. You can also add the settings of another theme into the buffer, using the '<b>[Merge Theme]</b>' button. You can import your non-theme settings to a Custom theme using the '<b>[Merge Theme]</b>' button and specifying the special theme named '<b>user</b>'.<br><br>A theme file is an Emacs Lisp source file, and loading the Custom theme works by loading the Lisp file. Therefore, you can edit a theme file directly instead of using the *Custom Theme* buffer. See <a href="#Custom-Themes">Custom Themes</a>, for details.</p>
<h2 id="Variables">Variables</h2>
<p class="tab">A variable is a Lisp symbol which has a value. The symbol's name is also called the variable name. A variable name can contain any characters that appear in a file, but most variable names consist of ordinary words separated by hyphens.<br><br>The name of the variable serves as a compact description of its role. Most variables also have a documentation string, which describes what the variable's purpose is, what kind of value it should have, and how the value is used. You can view this documentation using the help command <b>C-h v</b> (<b>describe-variable</b>). See <a href="#Examining">Examining</a>.<br><br>Emacs uses many Lisp variables for internal record keeping, but the most interesting variables for a non-programmer user are those meant for users to change&mdash;these are called customizable variables or user options (see <a href="#Easy-Customization">Easy Customization</a>). In the following sections, we describe other aspects of Emacs variables, such as how to set them outside Customize.<br><br>Emacs Lisp allows any variable (with a few exceptions) to have any kind of value. However, many variables are meaningful only if assigned values of a certain type. For example, only numbers are meaningful values for <b>kill-ring-max</b>, which specifies the maximum length of the kill ring (see <a href="#Earlier-Kills">Earlier Kills</a>); if you give <b>kill-ring-max</b> a string value, commands such as <b>C-y</b> (<b>yank</b>) signal an error. On the other hand, some variables don't care about type; for instance, if a variable has one effect for nil values and another effect for "non-nil" values, then any value that is not the symbol nil induces the second effect, regardless of its type (by convention, we usually use the value <b>t</b>&mdash;a symbol which stands for "true"&mdash;to specify a non-nil value). If you set a variable using the customization buffer, you need not worry about giving it an invalid type: the customization buffer usually only allows you to enter meaningful values. When in doubt, use <b>C-h v</b> (<b>describe-variable</b>) to check the variable's documentation string to see kind of value it expects (see <a href="#Examining">Examining</a>).</p>
<ul>
<li><a href="#Examining">Examining</a>: Examining or setting one variable's value.</li>
<li><a href="#Hooks">Hooks</a>: Hook variables let you specify programs for parts of Emacs to run on particular occasions.</li>
<li><a href="#Locals">Locals</a>: Per-buffer values of variables.</li>
<li><a href="#File-Variables">File Variables</a>: How files can specify variable values.</li>
<li><a href="#Directory-Variables">Directory Variables</a>: How variable values can be specified by directory.</li>
</ul>
<h2 id="Examining">Examining and setting variables</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>C-h v</b> <i>var</i> <b>&lt;RET&gt;</b></td>
<td>Display the value and documentation of variable <i>var</i> (<b>describe-variable</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x set-variable &lt;RET&gt;</b> <i>var</i> <b>&lt;RET&gt;</b> <i>value</i> <b>&lt;RET&gt;</b></td>
<td>Change the value of variable <i>var</i> to <i>value</i>.</td>
</tr>
</table>
<p class="tab">To examine the value of a variable, use <b>C-h v</b> (<b>describe-variable</b>). This reads a variable name using the minibuffer, with completion, and displays both the value and the documentation of the variable. For example,</p>
<pre class="tab tcy">C-h v fill-column &lt;RET&gt;</pre>
<p class="tab">displays something like this:</p>
<pre class="tab tcy">fill-column is a variable defined in &#96;C source code'.
fill-column's value is 70
Automatically becomes buffer-local when set.
This variable is safe as a file local variable if its value
satisfies the predicate &#96;integerp'.
Documentation:
Column beyond which automatic line-wrapping should happen.
Interactively, you can set the local value with C-x f.
You can customize this variable.
</pre>
<p class="tab">The line that says "You can customize the variable" indicates that this variable is a user option. <b>C-h v</b> is not restricted to user options; it allows non-customizable variables too.<br><br>The most convenient way to set a specific customizable variable is with <b>M-x set-variable</b>. This reads the variable name with the minibuffer (with completion), and then reads a Lisp expression for the new value using the minibuffer a second time (you can insert the old value into the minibuffer for editing via <b>M-n</b>). For example,</p>
<pre class="tab tcy">M-x set-variable fill-column 75</pre>
<p class="tab">Sets <b>fill-column</b> to <b>75</b>.<br><br><b>M-x set-variable</b> is limited to customizable variables, but you can set any variable with a Lisp expression like this:</p>
<pre class="tab tcy">(setq fill-column 75)</pre>
<p class="tab">To execute such an expression, type <b>M-:</b> (<b>eval-expression</b>) and enter the expression in the minibuffer (see <a href="#Lisp-Eval">Lisp Eval</a>). Alternatively, go to the *scratch* buffer, type in the expression, and then type <b>C-j</b> (see <a href="#Lisp-Interaction">Lisp Interaction</a>).<br><br>Setting variables, like all means of customizing Emacs except where otherwise stated, affects only the current Emacs session. The only way to alter the variable in future sessions is to put something in your initialization file (see <a href="#Init-File">Init File</a>).</p>
<h2 id="Hooks">Hooks</h2>
<p class="tab">Hooks are an important mechanism for customizing Emacs. A hook is a Lisp variable which holds a list of functions, to be called on some well-defined occasion. (This is called running the hook.) The individual functions in the list are called the hook functions of the hook. For example, the hook <b>kill-emacs-hook</b> runs only before exiting Emacs (see <a href="#Exiting">Exiting</a>).<br><br>Most hooks are normal hooks. This means that when Emacs runs the hook, it calls each hook function in turn, with no arguments. We have made an effort to keep most hooks normal, so that you can use them in a uniform way. Every variable whose name ends in '<b>-hook</b>' is a normal hook.<br><br>A few hooks are abnormal hooks. Their names end in '<b>-functions</b>', instead of '<b>-hook</b>' (some old code may also use the deprecated suffix '<b>-hooks</b>'). What makes these hooks abnormal is the way its functions are called&mdash;perhaps they are given arguments, or perhaps the values they return are used in some way. For example, <b>find-file-not-found-functions</b> is abnormal because as soon as one hook function returns a non-nil value, the rest are not called at all (see <a href="#Visiting">Visiting</a>). The documentation of each abnormal hook variable explains how its functions are used.<br><br>You can set a hook variable with <b>setq</b> like any other Lisp variable, but the recommended way to add a function to a hook (either normal or abnormal) is to use <b>add-hook</b>, as shown by the following examples.<br><br>Most major modes run one or more mode hooks as the last step of initialization. Mode hooks are a convenient way to customize the behavior of individual modes; they are always normal. For example, here's how to set up a hook to turn on Auto Fill mode in Text mode and other modes based on Text mode:</p>
<pre class="tab tcy">(add-hook 'text-mode-hook 'auto-fill-mode)</pre>
<p class="tab">This works by calling <b>auto-fill-mode</b>, which enables the minor mode when no argument is supplied (see <a href="#Minor-Modes">Minor Modes</a>). Next, suppose you don't want Auto Fill mode turned on in LaTeX mode, which is one of the modes based on Text mode. You can do this with the following additional line:</p>
<pre class="tab tcy">(add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))</pre>
<p class="tab">Here we have used the special macro <b>lambda</b> to construct an anonymous function, which calls <b>auto-fill-mode</b> with an argument of -1 to disable the minor mode. Because LaTeX mode runs <b>latex-mode-hook</b> after running <b>text-mode-hook</b>, the result leaves Auto Fill mode disabled.<br><br>Here is a more complex example, showing how to use a hook to customize the indentation of C code:</p>
<pre class="tab tcy">(setq my-c-style
  '((c-comment-only-line-offset . 4)
    (c-cleanup-list . (scope-operator
                       empty-defun-braces
                       defun-close-semi))))
(add-hook 'c-mode-common-hook
  (lambda () (c-add-style "my-style" my-c-style t)))
</pre>
<p class="tab">Major mode hooks also apply to other major modes derived from the original mode. For instance, HTML mode is derived from Text mode (see <a href="#HTML-Mode">HTML Mode</a>); when HTML mode is enabled, it runs <b>text-mode-hook</b> before running <b>html-mode-hook</b>. This provides a convenient way to use a single hook to affect several related modes. In particular, if you want to apply a hook function to any programming language mode, add it to <b>prog-mode-hook</b>; Prog mode is a major mode that does little else than to let other major modes inherit from it, exactly for this purpose.<br><br>It is best to design your hook functions so that the order they are executed does not matter. Any dependence on the order is asking for trouble. However, the order is predictable: the hook functions are executed in the order they appear in the hook.<br><br>If you play with adding different versions of a hook function by calling <b>add-hook</b> over and over, remember that all the versions you added remain in the hook variable together. You can clear out individual functions by calling <b>remove-hook</b>, or do <b>(setq hook-variable nil)</b> to remove everything.<br><br>If the hook variable is buffer-local, the buffer-local variable is used instead of the global variable. However, if the buffer-local variable contains the element <b>t</b>, the global hook variable is run as well.</p>
<h2 id="Locals">Local variables</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>M-x make-local-variable &lt;RET&gt;</b> <i>var</i> <b>&lt;RET&gt;</b></td>
<td>Make variable <i>var</i> have a local value in the current buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x kill-local-variable &lt;RET&gt;</b> <i>var</i> <b>&lt;RET&gt;</b></td>
<td>Make variable <i>var</i> use its global value in the current buffer.</td>
</tr>
<tr class="tcw">
<td><b>M-x make-variable-buffer-local &lt;RET&gt;</b> <i>var</i> <b>&lt;RET&gt;</b></td>
<td>Mark variable <i>var</i> so that setting it makes it local to the buffer that is current at that time.</td>
</tr>
</table>
<p class="tab">Almost any variable can be made local to a specific Emacs buffer. This means that its value in that buffer is independent of its value in other buffers. A few variables are always local in every buffer. Every other Emacs variable has a global value which is in effect in all buffers that have not made the variable local.<br><br><b>M-x make-local-variable</b> reads the name of a variable and makes it local to the current buffer. Changing its value subsequently in this buffer will not affect others, and changes in its global value will not affect this buffer.<br><br><b>M-x make-variable-buffer-local</b> marks a variable so it becomes local automatically whenever it is set. More precisely, once a variable is marked in this way, the usual ways of setting the variable automatically do <b>make-local-variable</b> first. We call such variables per-buffer variables. Many variables in Emacs are normally per-buffer; the variable's document string tells you when this is so. A per-buffer variable's global value is normally never effective in any buffer, but it still has a meaning: it is the initial value of the variable for each new buffer.<br><br>Major modes (see <a href="#Major-Modes">Major Modes</a>) always make variables local to the buffer before setting the variables. This is why changing major modes in one buffer has no effect on other buffers. Minor modes also work by setting variables&mdash;normally, each minor mode has one controlling variable which is non-nil when the mode is enabled (see <a href="#Minor-Modes">Minor Modes</a>). For many minor modes, the controlling variable is per buffer, and thus always buffer-local. Otherwise, you can make it local in a specific buffer like any other variable.<br><br>A few variables cannot be local to a buffer because they are always local to each display instead (see <a href="#Multiple-Displays">Multiple Displays</a>). If you try to make one of these variables buffer-local, you'll get an error message.<br><br><b>M-x kill-local-variable</b> makes a specified variable cease to be local to the current buffer. The global value of the variable henceforth is in effect in this buffer. Setting the major mode kills all the local variables of the buffer except for a few variables specially marked as permanent locals.<br><br>To set the global value of a variable, regardless of whether the variable has a local value in the current buffer, you can use the Lisp construct <b>setq-default</b>. This construct is used only like <b>setq</b>, but it sets variables' global values instead of their local values (if any). When the current buffer does have a local value, the new global value may not be visible until you switch to another buffer. Here is an example:</p>
<pre class="tab tcy">(setq-default fill-column 75)</pre>
<p class="tab"><b>setq-default</b> is the only way to set the global value of a variable that is marked with <b>make-variable-buffer-local</b>. Lisp programs can use <b>default-value</b> to look at a variable's default value. This function takes a symbol as argument and returns its default value. The argument is evaluated; usually you must quote it explicitly. For example, here's how to obtain the default value of <b>fill-column</b>:</p>
<pre class="tab tcy">(default-value 'fill-column)</pre>
<h2 id="File-Variables">Local variables in files</h2>
<p class="tab">A file can specify local variable values to use when editing the file with Emacs. Visiting the file checks for local variable specifications; it automatically makes these variables local to the buffer, and sets them to the values specified in the file.</p>
<ul>
<li><a href="#Specifying-File-Variables">Specifying File Variables</a>: Specifying file local variables.</li>
<li><a href="#Safe-File-Variables">Safe File Variables</a>: Making sure file local variables are safe.</li>
</ul>
<h2 id="Specifying-File-Variables">Specifying file variables</h2>
<p class="tab">There are two ways to specify file local variable values: in the first line, or with a local variables list. Here's how to specify them in the first line:</p>
<pre class="tab tcy">-*- mode: modename; var: value; ... -*-</pre>
<p class="tab">You can specify any number of variable/value pairs in this way, each pair with a colon and semicolon. The special variable/value pair <b>mode: modename;</b>, if present, specifies a major mode. The values are used literally, and not evaluated.<br><br>You can use <b>M-x add-file-local-variable-prop-line</b> instead of adding entries by hand. This command prompts for a variable and value, and adds them to the first line in the appropriate way. <b>M-x delete-file-local-variable-prop-line</b> prompts for a variable, and deletes its entry from the line. The command <b>M-x copy-dir-locals-to-file-locals-prop-line</b> copies the current directory-local variables to the first line (see <a href="#Directory-Variables">Directory Variables</a>).<br><br>Here is an example first line that specifies Lisp mode and sets two variables with numeric values:</p>
<pre class="tab tcy">;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-</pre>
<p class="tab">Aside from mode, other keywords that have special meanings as file variables are <b>coding</b>, <b>unibyte</b>, and <b>eval</b>. These are described below.<br><br>In shell scripts, the first line is used to identify the script interpreter, so you cannot put any local variables there. To accommodate this, Emacs looks for local variable specifications in the second line if the first line specifies an interpreter. The same is true for man pages which start with the magic string '<b>'\"</b>' to specify a list of troff preprocessors (not all do, however).<br><br>Apart from using a '<b>-*-</b>' line, you can define file local variables using a local variables list near the end of the file. The start of the local variables list should be no more than 3000 characters from the end of the file, and must be on the last page if the file is divided into pages.<br><br>If a file has both a local variables list and a '<b>-*-</b>' line, Emacs processes everything in the '<b>-*-</b>' line first, and everything in the local variables list afterward. The exception to this is a major mode specification. Emacs applies this first, wherever it appears, as most major modes kill all local variables as part of their initialization.<br><br>A local variables list starts with a line containing the string '<b>Local Variables:</b>', and ends with a line containing the string '<b>End:</b>'. Between comes the variable names and values, one set per line, like this:</p>
<pre class="tab tcy">/* Local Variables:  */
/* mode: c           */
/* comment-column: 0 */
/* End:              */
</pre>
<p class="tab">In this example, each line starts with the prefix '<b>/*</b>' and ends with the suffix '<b>*/</b>'. Emacs recognizes the prefix and suffix by finding them surrounding the magic string '<b>Local Variables:</b>', on the first line of the list; it then automatically discards them from the other lines of the list. The usual reason for using a prefix and/or suffix is to embed the local variables list in a comment, so it won't confuse other programs which the file is intended. The example above is for the C programming language, where comments start with '<b>/*</b>' and end with '<b>*/</b>'.<br><br>Instead of typing in the local variables list directly, you can use the command <b>M-x add-file-local-variable</b>. This prompts for a variable and value, and adds them to the list, adding the '<b>Local Variables:</b>' string and start and end markers as necessary. The command <b>M-x delete-file-local-variable</b> deletes a variable from the list. <b>M-x copy-dir-locals-to-file-locals</b> copies directory-local variables to the list (see <a href="#Directory-Variables">Directory Variables</a>).<br><br>As with the '<b>-*-</b>' line, the variables in a local variables list are used literally, and are not evaluated first. If you want to split a long string value across multiple lines of the file, you can use backslash-newline, which is ignored in Lisp string constants; put the prefix and suffix on each line, even lines that start or end in the string, as they are stripped off when processing the list. Here is an example:</p>
<pre class="tab"># Local Variables:
# compile-command: "cc foo.c -Dfoo=bar -Dhack=whatever \
#   -Dmumble=blaah"
# End:
</pre>
<p class="tab">Some "variable names" have special meanings in a local variables list:</p>
<ul>
<li><b>mode</b> enables the specified major mode.</li>
<li><b>eval</b> evaluates the specified Lisp expression (the value returned by that expression is ignored).</li>
<li><b>coding</b> specifies the coding system for character code conversion of this file. See <a href="#Coding-Systems">Coding Systems</a>.</li>
<li><b>unibyte</b> says to load or compile a file of Emacs Lisp in unibyte mode, if the value is <b>t</b>. See <a href="#Disabling-Multibyte">Disabling Multibyte</a>.</li>
</ul>
<p class="tab">These four keywords are not really variables; setting them in any other context has no special meaning.<br><br>Do not use the <b>mode</b> keyword for minor modes. To enable or disable a minor mode in a local variables list, use the <b>eval</b> keyword with a Lisp expression that runs the mode command (see <a href="#Minor-Modes">Minor Modes</a>). For example, the following local variables list enables Eldoc mode (see <a href="#Lisp-Doc">Lisp Doc</a>) by calling <b>eldoc-mode</b> with no argument (calling it with an argument of 1 would do the same), and disables Font Lock mode (see <a href="#Font-Lock">Font Lock</a>) by calling <b>font-lock-mode</b> with an argument of -1.</p>
<pre class="tab tcy">;; Local Variables:
;; eval: (eldoc-mode)
;; eval: (font-lock-mode -1)
;; End:
</pre>
<p class="tab">Note, however, that it is often a mistake to specify minor modes this way. Minor modes represent individual user preferences, and it may be inappropriate to impose your preferences on another user who might edit the file. If you want to automatically enable or disable a minor mode in a situation-dependent way, it is often better to do it in a major mode hook (see <a href="#Hooks">Hooks</a>).<br><br>Use the command <b>M-x normal-mode</b> to reset the local variables and major mode of a buffer according to the file name and contents, including the local variables list if any. See <a href="#Choosing-Modes">Choosing Modes</a>.</p>
<h2 id="Safe-File-Variables">Safety of file variables</h2>
<p class="tab">File-local variables can be dangerous; when you visit someone else's file, there's no telling what its local variables list could do to your Emacs. Improper values of the eval "variable", and other variables such as load-path, could execute Lisp code you didn't intend to run.<br><br>Therefore, whenever Emacs encounters file local variable values that are not known to be safe, it displays the file's entire local variables list, and asks you for confirmation before setting them. You can type <b>y</b> or <b>&lt;SPC&gt;</b> to put the local variables list into effect, or <b>n</b> to ignore it. When Emacs is run in batch mode (see <a href="#Initial-Options">Options</a>), it can't really ask you, so it assumes the answer <b>n</b>.<br><br>Emacs normally recognizes certain variable/value pairs as safe. For instance, it is safe to give <b>comment-column</b> or <b>fill-column</b> any integer value. If a file specifies only known-safe variable/value pairs, Emacs does not ask for confirmation before setting them. Otherwise, you can tell Emacs to record all the variable/value pairs in this file as safe, by typing <b>!</b> at the confirmation prompt. When Emacs encounters these variable/value pairs subsequently, in the same file or others, it will assume they are safe.<br><br>Some variables, such as <b>load-path</b>, are considered particularly risky: there is seldom any reason to specify them as local variables, and changing them can be dangerous. If a file contains only risky local variables, Emacs neither offers nor accepts <b>!</b> as input at the confirmation prompt. If some of the local variables in a file are risky, and some are only potentially unsafe, you can enter <b>!</b> at the prompt. It applies all the variables, but only marks the non-risky ones as safe for the future. If you want to record safe values for risky variables, do it directly by customizing '<b>safe-local-variable-values</b>' (see <a href="#Easy-Customization">Easy Customization</a>).<br><br>The variable <b>enable-local-variables</b> allows you to change the way Emacs processes local variables. Its default value is <b>t</b>, which specifies the behavior described above. If it's <b>nil</b>, Emacs ignores all file local variables. <b>:safe</b> means use only the safe values and ignore the rest. Any other value says to query you about each file with local variables, without trying to determine whether the values are known to be safe.<br><br>The variable <b>enable-local-eval</b> controls whether Emacs processes <b>eval</b> variables. The three possibilities for the variable's value are <b>t</b>, <b>nil</b>, and anything else, only as for <b>enable-local-variables</b>. The default is maybe, which is neither <b>t</b> nor <b>nil</b>, so normally Emacs does ask for confirmation about processing <b>eval</b> variables.<br><br>As an exception, Emacs never asks for confirmation to evaluate any <b>eval</b> form if that form occurs in the variable <b>safe-local-eval-forms</b>.</p>
<h2 id="Directory-Variables">Per-directory local variables</h2>
<p class="tab">Sometimes, you may want to define the same set of local variables to all the files in a certain directory and its subdirectories, such as the directory tree of a large software project. This is accomplished with directory-local variables.<br><br>The usual way to define directory-local variables is to put a file named <b>.dir-locals.el17</b> in a directory. Whenever Emacs visits any file in that directory or any of its subdirectories, it will apply the directory-local variables specified in <b>.dir-locals.el</b>, as though they had been defined as file-local variables for that file (see <a href="#File-Variables">File Variables</a>). Emacs searches for <b>.dir-locals.el</b> starting in the directory of the visited file, and moving up the directory tree. To avoid slowdown, this search is skipped for remote files. If needed, the search can be extended for remote files by setting the variable <b>enable-remote-dir-locals</b> to <b>t</b>.<br><br>The <b>.dir-locals.el</b> file should hold a specially-constructed list, which maps major mode names (symbols) to alists. Each <b>alist</b> entry consists of a variable name and the directory-local value to assign to that variable, when the specified major mode is enabled. Instead of a mode name, you can specify '<b>nil</b>', which indicates the alist applies to any mode; or you can specify a subdirectory name (a string), where the <b>alist</b> applies to all files in that subdirectory.<br><br>Here's an example of a <b>.dir-locals.el</b> file:</p>
<pre class="tab tcy">((nil . ((indent-tabs-mode . t)
         (fill-column . 80)))
 (c-mode . ((c-file-style . "BSD")
            (subdirs . nil)))
 ("src/imported"
  . ((nil . ((change-log-default-name
              . "ChangeLog.local"))))))
</pre>
<p class="tab">This sets '<b>indent-tabs-mode</b>' and fill-column for any file in the directory tree, and the indentation style for any C source file. The special subdirs element is not a variable, but a special keyword which indicates that the C mode settings are only to be applied in the current directory, not in any subdirectories. Finally, it specifies a different ChangeLog file name for any file in the src/imported subdirectory.<br><br>Instead of editing the <b>.dir-locals.el</b> file by hand, you can use the command <b>M-x add-dir-local-variable</b>. This prompts for a mode or subdirectory name, and for variable and value, and adds the entry defining the <b>directory-local</b> variable. <b>M-x delete-dir-local-variable</b> deletes an entry. <b>M-x copy-file-locals-to-dir-locals</b> copies the file-local variables in the current file into <b>.dir-locals.el</b>.<br><br>Another method of specifying directory-local variables is to define a group of variables/value pairs in a directory class, using the <b>dir-locals-set-class-variables</b> function; then, tell Emacs which directories correspond to the class using the <b>dir-locals-set-directory-class</b> function. These function calls normally go in your initialization file (see <a href="#Init-File">Init File</a>). This method is useful when you can't put <b>.dir-locals.el</b> in a directory for some reason. For example, you could apply settings to an unwritable directory this way:</p>
<pre class="tab tcy">(dir-locals-set-class-variables 'unwritable-directory
      '((nil . ((some-useful-setting . value)))))
   (dir-locals-set-directory-class
      "/usr/include/" 'unwritable-directory)
</pre>
<p class="tab">If a variable has both a directory-local and file-local value specified, the file-local value takes effect. Unsafe directory-local variables are handled in the same way as unsafe file-local variables (see <a href="#Safe-File-Variables">Safe File Variables</a>).<br><br>Directory-local variables also take effect in certain buffers that do not visit a file directly but perform work within a directory, such as Dired buffers (see <a href="#Dired">Dired</a>).</p>
<h2 id="Key-Bindings">Customizing key bindings</h2>
<p class="tab">This section describes key bindings, which map keys to commands, and keymaps, which record key bindings. It also explains how to customize key bindings, which is done by editing your init file (see <a href="#Init-Rebinding">Init Rebinding</a>).</p>
<ul>
<li><a href="#Keymaps">Keymaps</a>: Generalities. The global keymap.</li>
<li><a href="#Prefix-Keymaps">Prefix Keymaps</a>: Keymaps for prefix keys.</li>
<li><a href="#Local-Keymaps">Local Keymaps</a>: Major and minor modes have keymaps.</li>
<li><a href="#Minibuffer-Maps">Minibuffer Maps</a>: The minibuffer uses local keymaps.</li>
<li><a href="#Rebinding">Rebinding</a>: How to redefine one key's meaning conveniently.</li>
<li><a href="#Init-Rebinding">Init Rebinding</a>: Rebinding keys with your initialization file.</li>
<li><a href="#Modifier-Keys">Modifier Keys</a>: Using modifier keys in key bindings.</li>
<li><a href="#Function-Keys">Function Keys</a>: Rebinding terminal function keys.</li>
<li><a href="#Named-ASCII-Chars">Named ASCII Chars</a>: Distinguishing &lt;TAB&gt; from C-i, etc.</li>
<li><a href="#Mouse-Buttons">Mouse Buttons</a>: Rebinding mouse buttons in Emacs.</li>
<li><a href="#Disabling">Disabling</a>: Disabling a command means confirmation is required before it can be executed. This is done to protect beginners from surprises.</li>
</ul>
<h2 id="Keymaps">Keymaps</h2>
<p class="tab">As described in Commands, each Emacs command is a Lisp function whose definition provides for interactive use. Like every Lisp function, a command has a function name, which usually consists of lower-case letters and hyphens.<br><br>A key sequence (<b>key</b>, for short) is a sequence of input events with a meaning as a unit. Input events include characters, function keys and mouse buttons&mdash;all the inputs that you can send to the computer. A key sequence gets its meaning from its binding, which says what command it runs.<br><br>The bindings between key sequences and command functions are recorded in data structures called keymaps. Emacs has many of these, each used on particular occasions.<br><br>The global keymap is the most important keymap because it is always in effect. The global keymap defines keys for Fundamental mode (see <a href="#Major-Modes">Major Modes</a>); most of these definitions are common to most or all major modes. Each major or minor mode can have its own keymap which overrides the global definitions of some keys.<br><br>For example, a self-inserting character such as <b>g</b> is self-inserting because the global keymap binds it to the command <b>self-insert-command</b>. The standard Emacs editing characters such as <b>C-a</b> also get their standard meanings from the global keymap. Commands to rebind keys, such as <b>M-x global-set-key</b>, work by storing the new binding in the proper place in the global map (see <a href="#Rebinding">Rebinding</a>).<br><br>Most modern keyboards have function keys and character keys. Function keys send input events only as character keys do, and keymaps can have bindings for them. Key sequences can mix function keys and characters. For example, if your keyboard has a <b>&lt;Home&gt;</b> function key, Emacs can recognize key sequences like <b>C-x &lt;Home&gt;</b>. You can even mix mouse events with keyboard events, such as <b>S-down-mouse-1</b>.<br><br>On text terminals, typing a function key actually sends the computer a sequence of characters; the precise details of the sequence depends on the function key and on the terminal type. (Often the sequence starts with <b>&lt;ESC&gt; [</b>.) If Emacs understands your terminal type properly, it automatically handles such sequences as single input events.</p>
<h2 id="Prefix-Keymaps">Prefix keymaps</h2>
<p class="tab">Internally, Emacs records only single events in each keymap. Interpreting a key sequence of multiple events involves a chain of keymaps: the first keymap gives a definition for the first event, which is another keymap, which is used to look up the second event in the sequence, etc. Thus, a prefix key such as <b>C-x</b> or <b>&lt;ESC&gt;</b> has its own keymap, which holds the definition for the event that immediately follows that prefix.<br><br>The definition of a prefix key is usually the keymap to use for looking up the following event. The definition can also be a Lisp symbol whose function definition is the following keymap; the effect is the same, but it provides a command name for the prefix key that is used as a description of the prefix key's use. Thus, the binding of <b>C-x</b> is the symbol <b>Control-X-prefix</b>, whose function definition is the keymap for <b>C-x</b> commands. The definitions of <b>C-c</b>, <b>C-x</b>, <b>C-h</b> and <b>&lt;ESC&gt;</b> as prefix keys appear in the global map, so these prefix keys are always available.<br><br>Aside from ordinary prefix keys, there is a fictitious "prefix key" which represents the menu bar. Mouse button events that invoke pop-up menus are also prefix keys.<br><br>Some prefix keymaps are stored in variables with names:</p>
<ul>
<li><b>ctl-x-map</b> is the variable name for the map used for characters that follow <b>C-x</b>.</li>
<li><b>help-map</b> is for characters that follow <b>C-h</b>.</li>
<li><b>esc-map</b> is for characters that follow <b>&lt;ESC&gt;</b>. Thus, all Meta characters are actually defined by this map.</li>
<li><b>ctl-x-4-map</b> is for characters that follow <b>C-x 4</b>.</li>
<li><b>mode-specific-map</b> is for characters that follow <b>C-c</b>.</li>
</ul>
<h2 id="Local-Keymaps">Local keymaps</h2>
<p class="tab">So far, we have explained the ins and outs of the global map. Major modes customize Emacs by providing their key bindings in local keymaps. For example, C mode overrides <b>&lt;TAB&gt;</b> to make it indent the current line for C code. Minor modes can also have local keymaps; whenever a minor mode is in effect, the definitions in its keymap override both the major mode's local keymap and the global keymap. Also, portions of text in the buffer can specify their keymaps, which override all other keymaps.<br><br>A local keymap can redefine a key as a prefix key by defining it as a prefix keymap. If the key is also defined globally as a prefix, its local and global definitions (both keymaps) effectively combine: both definitions are used to look up the event that follows the prefix key. For example, if a local keymap defines <b>C-c</b> as a prefix keymap, and that keymap defines <b>C-z</b> as a command, this provides a local meaning for <b>C-c C-z</b>. This does not affect other sequences that start with <b>C-c</b>; if those sequences don't have local bindings, their global bindings remain in effect.<br><br>Another way to think of this is that Emacs handles a multi-event key sequence by looking in several keymaps, one by one, for a binding of the whole key sequence. First it checks the minor mode keymaps for minor modes that are enabled, then it checks the major mode's keymap, and then it checks the global keymap. This is not precisely how key look up works, but it's good enough for understanding the results in ordinary circumstances.</p>
<h2 id="Minibuffer-Maps">Minibuffer keymaps</h2>
<p class="tab">The minibuffer has its own set of local keymaps; they contain various completion and exit commands.</p>
<ul>
<li><b>minibuffer-local-map</b> is used for ordinary input (no completion).</li>
<li><b>minibuffer-local-ns-map</b> is similar, except that <b>&lt;SPC&gt;</b> exits only like <b>&lt;RET&gt;</b>.</li>
<li><b>minibuffer-local-completion-map</b> is for permissive completion.</li>
<li><b>minibuffer-local-must-match-map</b> is for strict completion and for cautious completion.</li>
<li><b>minibuffer-local-filename-completion-map</b> and <b>minibuffer-local-filename-must-match-map</b> are like the two previous ones, but they are specifically for file name completion. They do not bind <b>&lt;SPC&gt;</b>.</li>
</ul>
<h2 id="Rebinding">Changing key bindings interactively</h2>
<p class="tab">The way to redefine an Emacs key is to change its entry in a keymap. You can change the global keymap, where the change is effective in all major modes (except those that have overriding local bindings for the same key). Or you can change a local keymap, which affects all buffers using the same major mode.<br><br>In this section, we describe how to rebind keys for the present Emacs session. See <a href="#Init-Rebinding">Init Rebinding</a>, for a description of how to make key rebindings affect future Emacs sessions.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>M-x global-set-key &lt;RET&gt;</b> <i>key cmd</i> <b>&lt;RET&gt;</b></td>
<td>Define <i>key</i> globally to run <i>cmd</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x local-set-key &lt;RET&gt;</b> <i>key cmd</i> <b>&lt;RET&gt;</b></td>
<td>Define <i>key</i> locally (in the major mode now in effect) to run <i>cmd</i>.</td>
</tr>
<tr class="tcw">
<td><b>M-x global-unset-key &lt;RET&gt;</b> <i>key</i></td>
<td>Make <i>key</i> undefined in the global map.</td>
</tr>
<tr class="tcw">
<td><b>M-x local-unset-key &lt;RET&gt;</b> <i>key</i></td>
<td>Make key undefined locally (in the major mode now in effect).</td>
</tr>
</table>
<p class="tab">For example, the following binds <b>C-z</b> to the shell command (see <a href="#Interactive-Shell">Interactive Shell</a>), replacing the normal global definition of <b>C-z</b>:</p>
<pre class="tab tcy">M-x global-set-key &lt;RET&gt; C-z shell &lt;RET&gt;</pre>
<p class="tab">The <b>global-set-key</b> command reads the command name after the key. After you press the key, a message like this appears so that you can confirm that you are binding the key you want:</p>
<pre class="tab tcy">Set key C-z to command:</pre>
<p class="tab">You can redefine function keys and mouse events in the same way; only type the function key or click the mouse when it's time to specify the key to rebind.<br><br>You can rebind a key containing more than one event in the same way. Emacs keeps reading the key to rebind until it is a complete key (that is, not a prefix key). Thus, if you type <b>C-f</b> for key, that's the end; it enters the minibuffer immediately to read cmd. But if you type <b>C-x</b>, because that's a prefix, it reads another character; if that is <b>4</b>, another prefix character, it reads one more character, etc. For example,</p>
<pre class="tab tcy">M-x global-set-key &lt;RET&gt; C-x 4 $ spell-other-window &lt;RET&gt;</pre>
<p class="tab">Redefines <b>C-x 4 $</b> to run the (fictitious) command <b>spell-other-window</b>.<br><br>You can remove the global definition of a key with <b>global-unset-key</b>. This makes the key undefined; if you type it, Emacs will only beep. Similarly, <b>local-unset-key</b> makes a key undefined in the current major mode keymap, which makes the global definition (or lack of one) come back into effect in that major mode.<br><br>If you have redefined (or undefined) a key and you subsequently want to retract the change, undefining the key will not do the job&mdash;you need to redefine the key with its standard definition. To find the name of the standard definition of a key, go to a Fundamental mode buffer in a fresh Emacs and use <b>C-h c</b>. The documentation of keys in this manual also lists their command names.<br><br>If you want to prevent yourself from invoking a command by mistake, it is better to disable the command than to undefine the key. A disabled command is less work to invoke when you want to. See <a href="#Disabling">Disabling</a>.</p>
<h2 id="Init-Rebinding">Rebinding keys in your init file</h2>
<p class="tab">If you have a set of key bindings that you like to use all the time, you can specify them in your initialization file by writing Lisp code. See <a href="#Init-File">Init File</a>, for a description of the initialization file.<br><br>There's several ways to write a key binding using Lisp. The simplest is to use the <b>kbd</b> function, which converts a textual representation of a key sequence&mdash;similar to how we have written key sequences in this manual&mdash;into a form that is passed as an argument to <b>global-set-key</b>. For example, here's how to bind <b>C-z</b> to the shell command (see <a href="#Interactive-Shell">Interactive Shell</a>):</p>
<pre class="tab tcy">(global-set-key (kbd "C-z") 'shell)</pre>
<p class="tab">The single-quote before the command name, <b>shell</b>, marks it as a constant symbol rather than a variable. If you omit the quote, Emacs would try to evaluate shell as a variable. This probably causes an error; it certainly isn't what you want.<br><br>Here are some additional examples, including binding function keys and mouse events:</p>
<pre class="tab tcy">(global-set-key (kbd "C-c y") 'clipboard-yank)
(global-set-key (kbd "C-M-q") 'query-replace)
(global-set-key (kbd "&lt;f5&gt;") 'flyspell-mode)
(global-set-key (kbd "C-&lt;f5&gt;") 'linum-mode)
(global-set-key (kbd "C-&lt;right&gt;") 'forward-sentence)
(global-set-key (kbd "&lt;mouse-2&gt;") 'mouse-save-then-kill)
</pre>
<p class="tab">Instead of using <b>kbd</b>, you can use a Lisp string or vector to specify the key sequence. Using a string is simpler, but only works for ASCII characters and Meta-modified ASCII characters. For example, here's how to bind <b>C-x M-l</b> to <b>make-symbolic-link</b> (see <a href="#Misc-File-Ops">Misc File Ops</a>):</p>
<pre class="tab tcy">(global-set-key "\C-x\M-l" 'make-symbolic-link)</pre>
<p class="tab">To put <b>&lt;TAB&gt;</b>, <b>&lt;RET&gt;</b>, <b>&lt;ESC&gt;</b>, or <b>&lt;DEL&gt;</b> in the string, use the Emacs Lisp escape sequences '<b>\t</b>', '<b>\r</b>', '<b>\e</b>', and '<b>\d</b>' respectively. Here is an example which binds <b>C-x &lt;TAB&gt;</b> to indent-rigidly (see <a href="#Indentation">Indentation</a>):</p>
<pre class="tab tcy">(global-set-key "\C-x\t" 'indent-rigidly)</pre>
<p class="tab">When the key sequence includes function keys or mouse button events, or non-ASCII characters such as <b>C-=</b> or <b>H-a</b>, you can use a vector to specify the key sequence. Each element in the vector stands for an input event; the elements are separated by spaces and surrounded by a pair of square brackets. If a vector element is a character, write it as a Lisp character constant: '<b>?</b>' followed by the character as it would appear in a string. Function keys are represented by symbols (see <a href="#Function-Keys">Function Keys</a>); write the symbol's name, with no other delimiters or punctuation. Here are examples:</p>
<pre class="tab tcy">(global-set-key [?\C-=] 'make-symbolic-link)
(global-set-key [?\M-\C-=] 'make-symbolic-link)
(global-set-key [?\H-a] 'make-symbolic-link)
(global-set-key [f7] 'make-symbolic-link)
(global-set-key [C-mouse-1] 'make-symbolic-link)
</pre>
<p class="tab">You can use a vector for the simple cases too:</p>
<pre class="tab tcy">(global-set-key [?\C-z ?\M-l] 'make-symbolic-link)</pre>
<p class="tab">Language and coding systems may cause problems with key bindings for non-ASCII characters. See <a href="#Init-Non_002dASCII">Init Non-ASCII</a>.<br><br>As described in <a href="#Local-Keymaps">Local Keymaps</a>, major modes and minor modes can define local keymaps. These keymaps are constructed when the mode is used for the first time in a session. If you want to change one of these keymaps, you must use the mode hook (see <a href="#Hooks">Hooks</a>).<br><br>For example, Texinfo mode runs the hook <b>texinfo-mode-hook</b>. Here's how you can use the hook to add local bindings for <b>C-c n</b> and <b>C-c p</b> in Texinfo mode:</p>
<pre class="tab">(add-hook 'texinfo-mode-hook
          (lambda ()
            (define-key texinfo-mode-map "\C-cp"
                        'backward-paragraph)
            (define-key texinfo-mode-map "\C-cn"
                        'forward-paragraph)))
</pre>
<h2 id="Modifier-Keys">Modifier keys</h2>
<p class="tab">The default key bindings in Emacs are set up so that modified alphabetical characters are case-insensitive. In other words, <b>C-A</b> does the same thing as <b>C-a</b>, and <b>M-A</b> does the same thing as <b>M-a</b>. This concerns only alphabetical characters, and does not apply to "shifted" versions of other keys; for instance, <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="91d2bcd1">[email&#160;protected]</a></b> is not the same as <b>C-2</b>.<br><br>A <b>&lt;Control&gt;</b>-modified alphabetical character is always considered case-insensitive: Emacs always treats <b>C-A</b> as <b>C-a</b>, <b>C-B</b> as <b>C-b</b>, and so forth. The reason for this is historical.<br><br>For all other modifiers, you can make the modified alphabetical characters case-sensitive when you customize Emacs. For instance, you could make <b>M-a</b> and <b>M-A</b> run different commands.<br><br>Although only the <b>&lt;Control&gt;</b> and <b>&lt;Meta&gt;</b> modifier keys are commonly used, Emacs supports three other modifier keys. These are called <b>&lt;Super&gt;</b>, <b>&lt;Hyper&gt;</b> and <b>&lt;Alt&gt;</b>. Few terminals provide ways to use these modifiers; the key labeled <b>&lt;Alt&gt;</b> on most keyboards usually issues the <b>&lt;Meta&gt;</b> modifier, not <b>&lt;Alt&gt;</b>. The standard key bindings in Emacs do not include any characters with these modifiers. However, you can customize Emacs to assign meanings to them. The modifier bits are labeled as '<b>s-</b>', '<b>H-</b>' and '<b>A-</b>' respectively.<br><br>Even if your keyboard lacks these additional modifier keys, you can enter it using <b>C-x @: C-x @ h</b> adds the "hyper" flag to the next character, <b>C-x @ s</b> adds the "super" flag, and <b>C-x @ a</b> adds the "alt" flag. For instance, <b>C-x @ h C-a</b> is a way to enter <b>Hyper-Control-a</b>. (Unfortunately, there is no way to add two modifiers using <b>C-x @</b> twice for the same character, because the first one goes to work on the <b>C-x</b>.)</p>
<h2 id="Function-Keys">Rebinding function keys</h2>
<p class="tab">Key sequences can contain function keys and ordinary characters. As Lisp characters (actually integers) represent keyboard characters, Lisp symbols represent function keys. If the function key has a word as its label, then that word is also the name of the corresponding Lisp symbol. Here are the conventional Lisp names for common function keys:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>left</b>, <b>up</b>, <b>right</b>, <b>down</b></td>
<td>Cursor arrow keys.</td>
</tr>
<tr class="tcw">
<td><b>begin</b>, <b>end</b>, <b>home</b>, <b>next</b>, <b>prior</b></td>
<td>Other cursor repositioning keys.</td>
</tr>
<tr class="tcw">
<td><b>select</b>, <b>print</b>, <b>execute</b>, <b>backtab</b>, <b>insert</b>, <b>undo</b>, <b>redo</b>, <b>clearline</b>, <b>insertline</b>, <b>deleteline</b>, <b>insertchar</b>, <b>deletechar</b></td>
<td>Miscellaneous function keys.</td>
</tr>
<tr class="tcw">
<td><b>f1</b>, <b>f2</b>, ... <b>f35</b></td>
<td>Numbered function keys (across the top of the keyboard).</td>
</tr>
<tr class="tcw">
<td><b>kp-add</b>, <b>kp-subtract</b>, <b>kp-multiply</b>, <b>kp-divide</b>, <b>kp-backtab</b>, <b>kp-space</b>, <b>kp-tab</b>, <b>kp-enter</b>, <b>kp-separator</b>, <b>kp-decimal</b>, <b>kp-equal</b></td>
<td>Keypad keys (to the right of the regular keyboard), with names or punctuation.</td>
</tr>
<tr class="tcw">
<td><b>kp-0</b>, <b>kp-1</b>, ... <b>kp-9</b></td>
<td>Keypad keys with digits.</td>
</tr>
<tr class="tcw">
<td><b>kp-f1</b>, <b>kp-f2</b>, <b>kp-f3</b>, <b>kp-f4</b></td>
<td>Keypad PF keys.</td>
</tr>
</table>
<p class="tab">These names are conventional, but some systems (especially when using X) may use different names. To make certain what symbol is used for a given function key on your terminal, type <b>C-h c</b> followed by that key.<br><br>See <a href="#Init-Rebinding">Init Rebinding</a>, for examples of binding function keys.<br><br>Many keyboards have a "numeric keypad" on the right side. The numeric keys in the keypad double up as cursor motion keys, toggled by a key labeled '<b>Num Lock</b>'. By default, Emacs translates these keys to the corresponding keys in the main keyboard. For example, when '<b>Num Lock</b>' is on, the key labeled '<b>8</b>' on the numeric keypad produces <b>kp-8</b>, which is translated to <b>8</b>; when '<b>Num Lock</b>' is off, the same key produces <b>kp-up</b>, which is translated to <b>&lt;UP&gt;</b>. If you rebind a key such as <b>8</b> or <b>&lt;UP&gt;</b>, it affects the equivalent keypad key too. However, if you rebind a '<b>kp-</b>' key directly, that won't affect its non-keypad equivalent. Note that the modified keys are not translated: for instance, if you hold down the <b>&lt;META&gt;</b> key while pressing the '<b>8</b>' key on the numeric keypad, that generates <b>M-&lt;kp-8&gt;</b>.<br><br>Emacs provides a convenient method for binding the numeric keypad keys, using the variables <b>keypad-setup</b>, <b>keypad-numlock-setup</b>, <b>keypad-shifted-setup</b>, and <b>keypad-numlock-shifted-setup</b>. These are in the '<b>keyboard</b>' customization group (see <a href="#Easy-Customization">Easy Customization</a>). You can rebind the keys to perform other tasks, such as issuing numeric prefix arguments.</p>
<h2 id="Named-ASCII-Chars">Named ASCII control characters</h2>
<p class="tab"><b>&lt;TAB&gt;</b>, <b>&lt;RET&gt;</b>, <b>&lt;BS&gt;</b>, <b>&lt;LFD&gt;</b>, <b>&lt;ESC&gt;</b> and <b>&lt;DEL&gt;</b> started out as names for certain ASCII control characters, used so often that they have special keys. For instance, <b>&lt;TAB&gt;</b> was another name for <b>C-i</b>. Later, users found it convenient to distinguish in Emacs between these keys and the "same" control characters typed with the <b>&lt;Ctrl&gt;</b> key. Therefore, on most modern terminals, they are no longer the same: <b>&lt;TAB&gt;</b> is different from <b>C-i</b>.<br><br>Emacs can distinguish these two kinds of input if the keyboard does. It treats the "special" keys as function keys named <b>tab</b>, <b>return</b>, <b>backspace</b>, <b>linefeed</b>, <b>escape</b>, and <b>delete</b>. These function keys translate automatically into the corresponding ASCII characters if they have no bindings. As a result, neither users nor Lisp programs need to pay attention to the distinction unless desired.<br><br>If you do not want to distinguish between (for example) <b>&lt;TAB&gt;</b> and <b>C-i</b>, make only one binding, for the ASCII character <b>&lt;TAB&gt;</b> (<a href="/jargon/o/octal.htm">octal</a> code 011). If you do want to distinguish, make one binding for this ASCII character, and another for the "function key" tab.<br><br>With an ordinary ASCII terminal, there is no way to distinguish between <b>&lt;TAB&gt;</b> and <b>C-i</b> (and likewise for other such pairs), because the terminal sends the same character in both cases.</p>
<h2 id="Mouse-Buttons">Rebinding mouse buttons</h2>
<p class="tab">Emacs uses Lisp symbols to designate mouse buttons, too. The ordinary mouse events in Emacs are click events; these happen when you press a button and release it without moving the mouse. You can also get drag events, when you move the mouse while holding the button down. Drag events happen when you finally let go of the button.<br><br>The symbols for basic click events are <b>mouse-1</b> for the leftmost button, <b>mouse-2</b> for the next, etc. Here is how you can redefine the second mouse button to split the current window:</p>
<pre class="tab tcy">(global-set-key [mouse-2] 'split-window-below)</pre>
<p class="tab">The symbols for drag events are similar, but have the prefix '<b>drag-</b>' before the word '<b>mouse</b>'. For example, dragging the first button generates a <b>drag-mouse-1</b> event.<br><br>You can also define bindings for events that occur when a mouse button is pressed down. These events start with '<b>down-</b>' instead of '<b>drag-</b>'. Such events are generated only if they have key bindings. When you get a button-down event, a corresponding click or drag event always follows.<br><br>If you want, you can distinguish single, double, and triple clicks. A double click means clicking a mouse button twice in approximately the same place. The first click generates an ordinary click event. The second click, if it comes soon enough, generates a double-click event instead. The event type for a double-click event starts with '<b>double-</b>': for example, <b>double-mouse-3</b>.<br><br>This means that you can give a special meaning to the second click at the same place, but it must act on the assumption that the ordinary single click definition has run when the first click was received.<br><br>This constrains what you can do with double clicks, but user interface designers say that this constraint ought to be followed in any case. A double click should do something similar to the single click, only "more so". The command for the double-click event should perform the extra work for the double click.<br><br>If a double-click event has no binding, it changes to the corresponding single-click event. Thus, if you don't define a particular double click specially, it executes the single-click command twice.<br><br>Emacs also supports triple-click events whose names start with '<b>triple-</b>'. Emacs does not distinguish quadruple clicks as event types; clicks beyond the third generate additional triple-click events. However, the full number of clicks is recorded in the event list, so if you know Emacs Lisp you can distinguish if you want to. We don't recommend distinct meanings for more than three clicks, but sometimes it is useful for subsequent clicks to cycle through the same set of three meanings, so that four clicks are equivalent to one click, five are equivalent to two, and six are equivalent to three.<br><br>Emacs also records multiple presses in drag and button-down events. For example, when you press a button twice, then move the mouse while holding the button, Emacs gets a '<b>double-drag-</b>' event. And at the moment when you press it down for the second time, Emacs gets a '<b>double-down-</b>' event (which is ignored, like all button-down events, if it has no binding).<br><br>The variable <b>double-click-time</b> specifies how much time can elapse between clicks and still allow them to be grouped as a multiple click. Its value is in units of milliseconds. If the value is <b>nil</b>, double clicks are not detected at all. If the value is <b>t</b>, then there is no time limit. The default is 500.<br><br>The variable <b>double-click-fuzz</b> specifies how much the mouse can move between clicks and still allow them to be grouped as a multiple click. Its value is in units of pixels on windowed displays and in units of 1/8 of a character cell on text-mode terminals; the default is 3.<br><br>The symbols for mouse events also indicate the status of the modifier keys, with the usual prefixes '<b>C-</b>', '<b>M-</b>', '<b>H-</b>', '<b>s-</b>', '<b>A-</b>' and '<b>S-</b>'. These always precede '<b>double-</b>' or '<b>triple-</b>', which always precede '<b>drag-</b>' or '<b>down-</b>'.<br><br>A frame includes areas that don't show text from the buffer, such as the mode line and the scroll bar. You can tell whether a mouse button comes from a special area of the screen by means of dummy "prefix keys". For example, if you click the mouse in the mode line, you get the prefix key mode-line before the ordinary mouse-button symbol. Thus, here is how to define the command for clicking the first button in a mode line to run <b>scroll-up-command</b>:</p>
<pre class="tab tcy">(global-set-key [mode-line mouse-1] 'scroll-up-command)</pre>
<p class="tab">Here is the complete list of these dummy prefix keys and their meanings:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>mode-line</b></td>
<td>The mouse was in the mode line of a window.</td>
</tr>
<tr class="tcw">
<td><b>vertical-line</b></td>
<td>The mouse was in the vertical line separating side-by-side windows. (If you use scroll bars, they appear in place of these vertical lines.)</td>
</tr>
<tr class="tcw">
<td><b>vertical-scroll-bar</b></td>
<td>The mouse was in a vertical scroll bar. (This is the only kind of scroll bar Emacs currently supports.)</td>
</tr>
<tr class="tcw">
<td><b>menu-bar</b></td>
<td>The mouse was in the menu bar.</td>
</tr>
<tr class="tcw">
<td><b>header-line</b></td>
<td>The mouse was in a header line.</td>
</tr>
</table>
<p class="tab">You can put more than one mouse button in a key sequence, but it isn't usual to do so.</p>
<h2 id="Disabling">Disabling commands</h2>
<p class="tab">Disabling a command means that invoking it interactively asks for confirmation from the user. The purpose of disabling a command is to prevent users from executing it by accident; we do this for commands that might be confusing to the uninitiated.<br><br>Attempting to invoke a disabled command interactively in Emacs displays a window containing the command's name, its documentation, and some instructions on what to do immediately; then Emacs asks for input saying whether to execute the command as requested, enable it and execute it, or cancel. If you decide to enable the command, you must then answer another question&mdash;whether to do this permanently, or only for the current session. (Enabling permanently works by automatically editing your initialization file.) You can also type <b>!</b> to enable all commands, for the current session only.<br><br>The direct mechanism for disabling a command is to put a non-nil disabled property on the Lisp symbol for the command. Here is the Lisp program to do this:</p>
<pre class="tab tcy">(put 'delete-region 'disabled t)</pre>
<p class="tab">If the value of the disabled property is a string, that string is included in the message displayed when the command is used:</p>
<pre class="tab tcy">(put 'delete-region 'disabled "It's better to use &#96;kill-region' instead.\n")</pre>
<p class="tab">You can make a command disabled either by editing the initialization file directly, or with the command <b>M-x disable-command</b>, which edits the initialization file for you. Likewise, <b>M-x enable-command</b> edits the initialization file to enable a command permanently. See <a href="#Init-File">Init File</a>.<br><br>If Emacs was invoked with the <b>-q</b> or <b>--no-init-file</b> options (see <a href="#Initial-Options">Options</a>), it will not edit your initialization file. Doing so could lose information because Emacs has not read your initialization file.<br><br>Whether a command is disabled is independent of what key is used to invoke it; disabling also applies if the command is invoked using <b>M-x</b>. However, disabling a command has no effect on calling it as a function from Lisp programs.</p>
<h2 id="Init-File">The Emacs initialization file</h2>
<p class="tab">When Emacs is started, it normally tries to load a Lisp program from an initialization file, or init file for short. This file, if it exists, specifies how to initialize Emacs for you. Emacs looks for your init file using the file names <b>~/.emacs</b>, <b>~/.emacs.el</b>, or <b>~/.emacs.d/init.el</b>; you can choose to use any one of these three names (see <a href="#Find-Init">Find Init</a>). Here, <b>~/</b> stands for your home directory.<br><br>You can use the command line switch '<b>-q</b>' to prevent loading your init file, and '<b>-u</b>' (or '<b>--user</b>') to specify a different user's init file (see <a href="#Initial-Options">Options</a>).<br><br>There can also be a default init file, which is the library named <b>default.el</b>, found via the standard search path for libraries. The Emacs distribution contains no such library; your site may create one for local customizations. If this library exists, it is loaded whenever you start Emacs (except when you specify '<b>-q</b>'). But your init file, if any, is loaded first; if it sets <b>inhibit-default-init</b> non-nil, then default is not loaded.<br><br>Your site may also have a site startup file; this is named <b>site-start.el</b>, if it exists. Like <b>default.el</b>, Emacs finds this file via the standard search path for Lisp libraries. Emacs loads this library before it loads your init file. To inhibit loading of this library, use the option '<b>--no-site-file</b>'. See <a href="#Initial-Options">Options</a>. We recommend against using <b>site-start.el</b> for changes that some users may be against. It is better to put them in <b>default.el</b>, so that users can more easily override them.<br><br>You can place <b>default.el</b> and <b>site-start.el</b> in any of the directories which Emacs searches for Lisp libraries. The variable <b>load-path</b> (see <a href="#Lisp-Libraries">Lisp Libraries</a>) specifies these directories. Many sites put these files in a subdirectory named <b>site-lisp</b> in the Emacs installation directory, such as <b>/usr/local/share/emacs/site-lisp</b>.<br><br>Byte-compiling your init file is not recommended. It generally does not speed up startup very much, and often leads to problems when you forget to recompile the file. A better solution is to use the Emacs server to reduce the number of times you have to start Emacs (see <a href="#Emacs-Server">Emacs Server</a>). If your init file defines many functions, consider moving them to a separate (<b>byte-compiled</b>) file that you load in your init file.<br><br>If you are going to write actual Emacs Lisp programs that go beyond minor customization, read the Emacs Lisp Reference Manual.</p>
<ul>
<li><a href="#Init-Syntax">Syntax</a>: Syntax of constants in Emacs Lisp.</li>
<li><a href="#Init-Examples">Examples</a>: How to do some things with an init file.</li>
<li><a href="#Terminal-Init">Terminal Init</a>: Each terminal type can have an init file.</li>
<li><a href="#Find-Init">Find Init</a>: How Emacs finds the init file.</li>
<li><a href="#Init-Non_002dASCII">Init Non-ASCII</a>: Using non-ASCII characters in an init file.</li>
</ul>
<h2 id="Init-Syntax">Syntax</h2>
<p class="tab">The init file contains one or more Lisp expressions. Each of these consists of a function name followed by arguments, all surrounded by parentheses. For example, <b>(setq fill-column 60)</b> calls the function setq to set the variable fill-column (see <a href="#Filling">Filling</a>) to 60.<br><br>You can set any Lisp variable with <b>setq</b>, but with certain variables <b>setq</b> won't do what you probably want in the <b>.emacs</b> file. Some variables automatically become buffer-local when set with <b>setq</b>; what you want in <b>.emacs</b> is to set the default value, using <b>setq-default</b>. Some customizable minor mode variables do special things to enable the mode when you set them with Customize, but ordinary setq won't do that; to enable the mode in your <b>.emacs</b> file, call the minor mode command. The following section has examples of both of these methods.<br><br>The second argument to <b>setq</b> is an expression for the new value of the variable. This is a constant, a variable, or a function call expression. In <b>.emacs</b>, constants are used most of the time. They can be:</p>
<ul>
<li><b>Numbers:</b> Numbers are written in decimal, with an optional initial minus sign.</li>
<li><b>Strings:</b> Lisp string syntax is the same as C string syntax with a few extra features. Use a double-quote character to begin and end a string constant.<br><br>In a string, you can include newlines and special characters literally. But often it is cleaner to use backslash sequences for them: '<b>\n</b>' for newline, '<b>\b</b>' for backspace, '<b>\r</b>' for carriage return, '<b>\t</b>' for tab, '<b>\f</b>' for formfeed (control-L), '<b>\e</b>' for escape, '<b>\\</b>' for a backslash, '<b>\"</b>' for a double-quote, or '<b>\ooo</b>' for the character whose octal code is <b>ooo</b>. Backslash and double-quote are the only characters for which backslash sequences are mandatory.<br><br>'<b>\C-</b>' can be used as a prefix for a control character, as in '<b>\C-s</b>' for ASCII control-S, and '<b>\M-</b>' can be used as a prefix for a Meta character, as in '<b>\M-a</b>' for Meta-A or '<b>\M-\C-a</b>' for Control-Meta-A.<br><br>See <a href="#Init-Non_002dASCII">Init Non-ASCII</a>, for information about including non-ASCII in your init file.</li>
<li><b>Characters:</b> Lisp character constant syntax consists of a '<b>?</b>' followed by either a character or an escape sequence starting with '<b>\</b>'. Examples: ?x, ?\n, ?\", ?\). Note that strings and characters are not interchangeable in Lisp; some contexts require one and some contexts require the other.<br><br>See <a href="#Init-Non_002dASCII">Init Non-ASCII</a>, for information about binding commands to keys which send non-ASCII characters.</li>
<li><b>True:</b> <b>t</b> stands for &#96;true'.</li>
<li><b>False:</b> <b>nil</b> stands for &#96;false'.</li>
<li><b>Other Lisp objects:</b> Write a single-quote (') followed by the Lisp object you want.</li>
</ul>
<h2 id="Init-Examples">Examples</h2>
<p class="tab">Here are examples of doing certain commonly desired things with Lisp expressions:</p>
<ul>
<li>Add a directory to the variable load-path. You can then put Lisp libraries that are not included with Emacs in this directory, and load them with <b>M-x load-library</b>. See <a href="#Lisp-Libraries">Lisp Libraries</a>.<br><br><pre class="tcy">(add-to-list 'load-path "/path/to/lisp/libraries")</pre></li>
<li>Make <b>&lt;TAB&gt;</b> in C mode only insert a tab if point is in the middle of a line.<br><br><pre class="tcy">(setq c-tab-always-indent nil)</pre> Here we have a variable whose value is normally <b>t</b> for &#96;<b>true</b>' and the alternative is <b>nil</b> for &#96;<b>false</b>'.</li>
<li>Make searches case sensitive by default (in all buffers that do not override this).<br><br><pre class="tcy">(setq-default case-fold-search nil)</pre> This sets the default value, which is effective in all buffers that do not have local values for the variable (see <a href="#Locals">Locals</a>). Setting <b>case-fold-search</b> with <b>setq</b> affects only the current buffer's local value, which is probably not what you want to do in an init file.</li>
<li>Specify your e-mail address, if Emacs can't figure it out correctly.<br><br><pre class="tcy">(setq user-mail-address "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e08388858e8599a0948f9294959285ce878f96">[email&#160;protected]</a>")</pre> Various Emacs packages, such as Message mode, consult <b>user-mail-address</b> when they need to know your e-mail address. See <a href="#Mail-Headers">Mail Headers</a>.</li>
<li>Make Text mode the default mode for new buffers.<br><br><pre class="tcy">(setq-default major-mode 'text-mode)</pre> Note that <b>text-mode</b> is used because it is the command for entering Text mode. The single-quote before it makes the symbol a constant; otherwise, <b>text-mode</b> would be treated as a variable name.</li>
<li>Set up defaults for the Latin-1 character set which supports most of the languages of Western Europe.<br><br><pre class="tcy">(set-language-environment "Latin-1")</pre></li>
<li>Turn off Line Number mode, a global minor mode.<br><br><pre class="tcy">(line-number-mode 0)</pre></li>
<li>Turn on Auto Fill mode automatically in Text mode and related modes (see <a href="#Hooks">Hooks</a>).<br><br><pre class="tcy">(add-hook 'text-mode-hook 'auto-fill-mode)</pre></li>
<li>Load the installed Lisp library named foo (actually a file <b>foo.elc</b> or <b>foo.el</b> in a standard Emacs directory).<br><br><pre class="tcy">(load "foo")</pre></li>
<li>When the argument to load is a relative file name, not starting with '<b>/</b>' or '<b>~</b>', load searches the directories in load-path (see <a href="#Lisp-Libraries">Lisp Libraries</a>).</li>
<li>Load the compiled Lisp file <b>foo.elc</b> from your home directory.<br><br><pre class="tcy">(load "~/foo.elc")</pre> Here a full file name is used, so no searching is done.</li>
<li>Tell Emacs to find the definition for the function <b>myfunction</b> by loading a Lisp library named <b>mypackage</b> (i.e., a file <b>mypackage.elc</b> or <b>mypackage.el</b>):<br><br><pre class="tcy">(autoload 'myfunction "mypackage" "Do what I say" t)</pre> Here the string "Do what I say" is the function's documentation string. You specify it in the autoload definition so it is available for help commands even when the package is not loaded. The last argument, <b>t</b>, indicates that this function is interactive; that is, it can be invoked interactively by typing <b>M-x myfunction &lt;RET&gt;</b> or by binding it to a key. If the function is not interactive, omit the <b>t</b> or use <b>nil</b>.</li>
<li>Rebind the key <b>C-x l</b> to run the function <b>make-symbolic-link</b> (see <a href="#Init-Rebinding">Init Rebinding</a>).<br><br><pre class="tcy">(global-set-key "\C-xl" 'make-symbolic-link)</pre> or<br><br><pre class="tcy">(define-key global-map "\C-xl" 'make-symbolic-link)</pre> Note once again the single-quote used to refer to the symbol <b>make-symbolic-link</b> instead of its value as a variable.</li>
<li>Do the same thing for Lisp mode only.<br><br><pre class="tcy">(define-key lisp-mode-map "\C-xl" 'make-symbolic-link)</pre></li>
<li>Redefine all keys which now run next-line in Fundamental mode so that they run <b>forward-line</b> instead.<br><br><pre class="tcy">(substitute-key-definition 'next-line 'forward-line global-map)</pre></li>
<li>Make C-x C-v undefined.<br><br><pre class="tcy">(global-unset-key "\C-x\C-v")</pre> One reason to undefine a key is so that you can make it a prefix. Defining <b>C-x C-v anything</b> makes <b>C-x C-v a</b> prefix, but <b>C-x C-v</b> must first be freed of its usual non-prefix definition.</li>
<li>Make '<b>$</b>' have the syntax of punctuation in Text mode. Note the use of a character constant for '<b>$</b>'.<br><br><pre class="tcy">(modify-syntax-entry ?\$ "." text-mode-syntax-table)</pre></li>
<li>Enable the use of the command <b>narrow-to-region</b> without confirmation.<br><br><pre class="tcy">(put 'narrow-to-region 'disabled nil)</pre></li>
<li>Adonlying the configuration to various platforms and Emacs versions. Users often want Emacs to behave the same on all systems, so the same init file is right for all platforms. However, sometimes it happens that a function you use for customizing Emacs is not available on some platforms or in older Emacs versions. To deal with that situation, put the customization inside a conditional that tests whether the function or facility is available, like this:<br><br><pre class="tcy">(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))(if (boundp 'coding-category-utf-8) (set-coding-priority '(coding-category-utf-8)))</pre> You can also disregard the errors that occur if the function is not defined.<br><br><pre class="tcy">(condition case () (set-face-background 'region "grey75") (error nil))</pre> A <b>setq</b> on a variable which does not exist is generally harmless, so those do not need a conditional.</li>
</ul>
<h2 id="Terminal-Init">Terminal-specific initialization</h2>
<p class="tab">Each terminal type can have a Lisp library to be loaded into Emacs when it is run on that type of terminal. For a terminal type named termtype, the library is called term/termtype and it is found by searching the directories load-path as usual and trying the suffixes '<b>.elc</b>' and '<b>.el</b>'. Normally it appears in the subdirectory term of the directory where most Emacs libraries are kept.<br><br>The usual purpose of the <b>terminal-specific</b> library is to map the escape sequences used by the terminal's function keys onto more meaningful names, using <b>input-decode-map</b> (or <b>function-key-map</b> before it). See the file <b>term/lk201.el</b> for an example of how this is done. Many function keys are mapped automatically according to the information in the Termcap data base; the terminal-specific library needs to map only the function keys that Termcap does not specify.<br><br>When the terminal type contains a hyphen, only the part of the name before the first hyphen is significant in choosing the library name. Thus, terminal types '<b>aaa-48</b>' and '<b>aaa-30-rv</b>' both use the library <b>term/aaa</b>. The code in the library can use (getenv "TERM") to find the full terminal type name.<br><br>The library's name is constructed by concatenating the value of the variable <b>term-file-prefix</b> and the terminal type. Your <b>.emacs</b> file can prevent the loading of the terminal-specific library by setting <b>term-file-prefix</b> to <b>nil</b>.</p>
<p class="tab">Emacs runs the hook <b>term-setup-hook</b> at the end of initialization, after both your <b>.emacs</b> file and any terminal-specific library are read in. Add hook functions to this hook if you want to override part of any of the terminal-specific libraries and to define initializations for terminals that do not have a library. See <a href="#Hooks">Hooks</a>.</p>
<h2 id="Find-Init">How Emacs finds your init file</h2>
<p class="tab">Normally Emacs uses the environment variable HOME (see HOME) to find <b>.emacs</b>; that's what '<b>~</b>' means in a file name. If <b>.emacs</b> is not found inside <b>~/</b> (nor <b>.emacs.el</b>), Emacs looks for <b>~/.emacs.d/init.el</b> (which, like <b>~/.emacs.el</b>, can be byte-compiled).</p>
<p class="tab">However, if you run Emacs from a shell started by <a href="/unix/usu.htm">su</a>, Emacs tries to find your <b>.emacs</b>, not that of the user you are currently pretending to be. The idea is to get your editor customizations even if you are running as the superuser.</p>
<p class="tab">More precisely, Emacs first determines which user's init file to use. It gets your username from the environment variables LOGNAME and USER; if neither of those exists, it uses effective user-ID. If that username matches the real user-ID, then Emacs uses HOME; otherwise, it looks up the home directory corresponding to that username in the system's data base of users.</p>
<h2 id="Init-Non_002dASCII">Non-ASCII characters in init files</h2>
<p class="tab">Language and coding systems may cause problems if your init file contains non-ASCII characters, such as accented letters, in strings or key bindings.<br><br>If you want to use non-ASCII characters in your init file, put a '<b>-*-coding: coding-system-*-</b>' tag on the first line of the init file, and specify a coding system that supports the character(s) in question. See <a href="#Recognize-Coding">Recognize Coding</a>. This is because the defaults for decoding non-ASCII text might not yet be set up by the time Emacs reads those parts of your init file which use such strings, possibly leading Emacs to decode those strings incorrectly. Then avoid adding Emacs Lisp code that modifies the coding system in other ways, such as calls to <b>set-language-environment</b>.<br><br>To bind non-ASCII keys, you must use a vector (see <a href="#Init-Rebinding">Init Rebinding</a>). The string syntax cannot be used, as the non-ASCII characters are interpreted as meta keys. For instance:</p>
<pre class="tab tcy">(global-set-key [?char] 'some-function)</pre>
<p class="tab">Type <b>C-q</b>, followed by the key you want to bind, to insert <i>char</i>.<br><br>Warning: if you change the keyboard encoding, or change between multibyte and unibyte mode, or anything that would alter which code <b>C-q</b> would insert for that character, this key binding may stop working. It is therefore advisable to use one and only one coding system, for your init file and the files you edit. For example, don't mix the '<b>latin-1</b>' and '<b>latin-9</b>' coding systems.</p>
<h2 id="Quitting">Quitting and aborting</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>C-g</b>, <b>C-&lt;BREAK&gt;</b></td>
<td>(MS-DOS only) Quit: cancel running or partially typed command.</td>
</tr>
<tr class="tcw">
<td><b>C-]</b></td>
<td>Abort innermost recursive editing level and cancel the command which invoked it (<b>abort-recursive-edit</b>).</td>
</tr>
<tr class="tcw">
<td><b>&lt;ESC&gt; &lt;ESC&gt; &lt;ESC&gt;</b></td>
<td>Either quit or abort, whichever makes sense (<b>keyboard-escape-quit</b>).</td>
</tr>
<tr class="tcw">
<td><b>M-x top-level</b></td>
<td>Abort all recursive editing levels that are currently executing.</td>
</tr>
<tr class="tcw">
<td><b>C-/</b>, <b>C-x u</b>, <b>C-_</b></td>
<td>Cancel a previously made change in the buffer contents (<b>undo</b>).</td>
</tr>
</table>
<p class="tab">There are two ways of canceling a command before it has finished: quitting with <b>C-g</b>, and aborting with <b>C-]</b> or <b>M-x top-level</b>. Quitting cancels a partially typed command, or one which is still running. Aborting exits a recursive editing level and cancels the command that invoked the recursive edit (see <a href="#Recursive-Edit">Recursive Edit</a>).<br><br>Quitting with <b>C-g</b> is the way to get rid of a partially typed command, or a numeric argument that you don't want. Furthermore, if you are in the middle of a command that is running, <b>C-g</b> stops the command in a relatively safe way. For example, if you quit out of a kill command that is taking a long time, either your text is still in the buffer, or it's in the kill ring, or maybe both. If the region is active, <b>C-g</b> deactivates the mark, unless Transient Mark mode is off (see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>). If you are in the middle of an incremental search, <b>C-g</b> behaves specially; it may take two successive <b>C-g</b> characters to get out of a search. See <a href="#Incremental-Search">Incremental Search</a>, for details.<br><br>On MS-DOS, the character <b>C-&lt;BREAK&gt;</b> serves as a quit character like <b>C-g</b>. The reason is that it is not feasible, on MS-DOS, to recognize <b>C-g</b> while a command is running, between interactions with the user. By contrast, it is feasible to recognize <b>C-&lt;BREAK&gt;</b> at all times.<br><br><b>C-g</b> works by setting the variable <b>quit-flag</b> to <b>t</b> the instant <b>C-g</b> is typed; Emacs Lisp checks this variable frequently, and quits if it's non-nil. <b>C-g</b> is only actually executed as a command if you type it while Emacs is waiting for input. In that case, the command it runs is <b>keyboard-quit</b>.<br><br>On a text terminal, if you quit with <b>C-g</b> a second time before the first <b>C-g</b> is recognized, you activate the "emergency escape" feature and return to the shell. See <a href="#Emergency-Escape">Emergency Escape</a>.<br><br>There are some situations where you cannot quit. When Emacs is waiting for the operating system to do something, quitting is impossible unless special pains are taken for the particular system call within Emacs where the waiting occurs. We have done this for the system calls that users are likely to want to quit from, but it's possible you encounter a case not handled. In one very common case&mdash;waiting for file input or output using NFS&mdash;Emacs itself knows how to quit, but many NFS implementations do not allow user programs to stop waiting for NFS when the NFS server is hung.<br><br>Aborting with <b>C-]</b> (<b>abort-recursive-edit</b>) is used to get out of a recursive editing level and cancel the command which invoked it. Quitting with <b>C-g</b> does not do this, and could not do this, because it is used to cancel a partially typed command in the recursive editing level. Both operations are useful. For example, if you are in a recursive edit and type <b>C-u 8</b> to enter a numeric argument, you can cancel that argument with <b>C-g</b> and remain in the recursive edit.<br><br>The sequence <b>&lt;ESC&gt; &lt;ESC&gt; &lt;ESC&gt;</b> (<b>keyboard-escape-quit</b>) can either quit or abort. (We defined it this way because <b>&lt;ESC&gt;</b> means "get out" in many PC programs.) It can cancel a prefix argument, clear a selected region, or get out of a Query Replace, like <b>C-g</b>. It can get out of the minibuffer or a recursive edit, like <b>C-]</b>. It can also get out of splitting the frame into multiple windows, as with <b>C-x 1</b>. One thing it cannot do, however, is stop a command that is running. That's because it executes as an ordinary command, and Emacs doesn't notice it until it is ready for the next command.<br><br>The command <b>M-x top-level</b> is equivalent to "enough" <b>C-]</b> commands to get you out of all the levels of recursive edits that you are in; it also exits the minibuffer if it's active. <b>C-]</b> gets you out one level at a time, but <b>M-x top-level</b> goes out all levels at once. Both <b>C-]</b> and <b>M-x top-level</b> are like all other commands, and unlike <b>C-g</b>, in that they take effect only when Emacs is ready for a command. <b>C-]</b> is an ordinary key and has its meaning only because of its binding in the keymap. See <a href="#Recursive-Edit">Recursive Edit</a>.<br><br><b>C-/</b> (<b>undo</b>) is not strictly speaking a way of canceling a command, but you can think of it as canceling a command that already finished executing. See <a href="#Undo">Undo</a>, for more information about the undo facility.</p>
<h2 id="Lossage">Dealing with Emacs trouble</h2>
<p class="tab">This section describes how to recognize and deal with situations where Emacs does not work as you expect, such as keyboard code mixups, garbled displays, running out of memory, and crashes and hangs.</p>
<ul>
<li><a href="#DEL-Does-Not-Delete">DEL Does Not Delete</a>: What to do if &lt;DEL&gt; doesn't delete.</li>
<li><a href="#Stuck-Recursive">Stuck Recursive</a>: &#96;[...]' in mode line around the parentheses.</li>
<li><a href="#Screen-Garbled">Screen Garbled</a>: Garbage on the screen.</li>
<li><a href="#Text-Garbled">Text Garbled</a>: Garbage in the text.</li>
<li><a href="#Memory-Full">Memory Full</a>: How to cope when you run out of memory.</li>
<li><a href="#Crashing">Crashing</a>: What Emacs does when it crashes.</li>
<li><a href="#After-a-Crash">After a Crash</a>: Recovering editing in an Emacs session that crashed.</li>
<li><a href="#Emergency-Escape">Emergency Escape</a>: What to do if Emacs stops responding.</li>
</ul>
<h2 id="DEL-Does-Not-Delete">If &lt;DEL&gt; fails to delete</h2>
<p class="tab">Every keyboard has a large key, usually labeled <b>&lt;Backspace&gt;</b>, which is ordinarily used to erase the last character that you typed. In Emacs, this key is supposed to be equivalent to <b>&lt;DEL&gt;</b>.<br><br>When Emacs starts up on a graphical display, it determines automatically which key should be <b>&lt;DEL&gt;</b>. In some unusual cases, Emacs gets the wrong information from the system, and <b>&lt;Backspace&gt;</b> ends up deleting forwards instead of backwards.<br><br>Some keyboards also have a <b>&lt;Delete&gt;</b> key, which is ordinarily used to delete forwards. If this key deletes backward in Emacs, that too suggests Emacs got the wrong information&mdash;but in the opposite sense.<br><br>On a text terminal, if you find that <b>&lt;Backspace&gt;</b> prompts for a Help command, like <b>Control-h</b>, instead of deleting a character, it means that key is actually sending the <b>&lt;BS&gt;</b> character. Emacs ought to be treating <b>&lt;BS&gt;</b> as <b>&lt;DEL&gt;</b>, but it isn't.<br><br>In all those cases, the immediate remedy is the same: use the command <b>M-x normal-erase-is-backspace-mode</b>. This toggles between the two modes that Emacs supports for handling <b>&lt;DEL&gt;</b>, so if Emacs starts in the wrong mode, this should switch to the right mode. On a text terminal, if you want to ask for help when <b>&lt;BS&gt;</b> is treated as <b>&lt;DEL&gt;</b>, use <b>&lt;F1&gt;</b>; <b>C-?</b> may also work, if it sends character code 127.<br><br>To fix the problem in every Emacs session, put one of the following lines into your initialization file (see <a href="#Init-File">Init File</a>). For the first case above, where <b>&lt;Backspace&gt;</b> deletes forwards instead of backwards, use this line to make <b>&lt;Backspace&gt;</b> act as <b>&lt;DEL&gt;</b>:</p>
<pre class="tab tcy">(normal-erase-is-backspace-mode 0)</pre>
<p class="tab">For the other two cases, use this line:</p>
<pre class="tab tcy">(normal-erase-is-backspace-mode 1)</pre>
<p class="tab">Another way to fix the problem for every Emacs session is to customize the variable <b>normal-erase-is-backspace</b>: the value <b>t</b> specifies the mode where <b>&lt;BS&gt;</b> or <b>&lt;BACKSPACE&gt;</b> is <b>&lt;DEL&gt;</b>, and <b>nil</b> specifies the other mode. See <a href="#Easy-Customization">Easy Customization</a>.</p>
<h2 id="Stuck-Recursive">Recursive editing levels</h2>
<p class="tab">Recursive editing levels are important and useful features of Emacs, but they can seem like malfunctions if you do not understand them.<br><br>If the mode line has square brackets '<b>[...]</b>' around the parentheses that contain the names of the major and minor modes, you have entered a recursive editing level. If you did not do this on purpose, or if you don't understand what that means, only get out of the recursive editing level. To do so, type <b>M-x top-level</b>. See <a href="#Recursive-Edit">Recursive Edit</a>.</p>
<h2 id="Screen-Garbled">Garbage on the screen</h2>
<p class="tab">If the text on a text terminal looks wrong, the first thing to do is see whether it is wrong in the buffer. Type <b>C-l</b> to redisplay the entire screen. If the screen appears correct after this, the problem was entirely in the previous screen update. (Otherwise, see the following section.)<br><br>Display updating problems often result from an incorrect terminfo entry for the terminal you are using. The file <b>etc/TERMS</b> in the Emacs distribution gives the fixes for known problems of this sort. INSTALL contains general advice for these problems in one of its sections. If you seem to be using the right terminfo entry, there may be a bug in the terminfo entry, or a bug in Emacs that appears for certain terminal types.</p>
<h2 id="Text-Garbled">Garbage in the text</h2>
<p class="tab">If <b>C-l</b> shows that the text is wrong, first type <b>C-h l</b> to see what commands you typed to produce the observed results. Then try undoing the changes step by step using <b>C-x u</b>, until it gets back to a state you consider correct.<br><br>If a large portion of text appears to be missing at the beginning or end of the buffer, check for the word '<b>Narrow</b>' in the mode line. If it appears, the text you don't see is probably still present, but temporarily off-limits. To make it accessible again, type <b>C-x n w</b>. See <a href="#Narrowing">Narrowing</a>.</p>
<h2 id="Memory-Full">Running out of memory</h2>
<p class="tab">If you get the error message '<b>Virtual memory exceeded</b>', save your modified buffers with <b>C-x s</b>. This method of saving them has the smallest need for additional memory. Emacs keeps a reserve of memory which it makes available when this error happens; that should be enough to enable <b>C-x s</b> to complete its work. When the reserve is used, '<b>!MEM FULL!</b>' appears at the beginning of the mode line, indicating there is no more reserve.<br><br>Once you have saved your modified buffers, you can exit this Emacs session and start another, or you can use <b>M-x kill-some-buffers</b> to free space in the current Emacs job. If this frees up sufficient space, Emacs will refill its memory reserve, and '<b>!MEM FULL!</b>' will disappear from the mode line. That means you can safely go on editing in the same Emacs session.<br><br>Do not use <b>M-x buffer-menu</b> to save or kill buffers when you run out of memory, because the Buffer Menu needs a fair amount of memory itself, and the reserve supply may not be enough.</p>
<h2 id="Crashing">When Emacs crashes</h2>
<p class="tab">Emacs is not supposed to crash, but if it does, it produces a crash report before exiting. The crash report is printed to the standard error stream. If Emacs was started from a graphical desktop, the standard error stream is commonly redirected to a file such as <b>~/.xsession-errors</b>, so you can look for the crash report there.<br><br>The format of the crash report depends on the platform. On some platforms, such as those using the GNU C Library, the crash report includes a backtrace describing the execution state before crashing, which can help debug the crash. Here is an example:</p>
<pre class="tab tcy">Fatal error 11: Segmentation fault
Backtrace:
emacs[0x5094e4]
emacs[0x4ed3e6]
emacs[0x4ed504]
/lib64/libpthread.so.0[0x375220efe0]
/lib64/libpthread.so.0(read+0xe)[0x375220e08e]
emacs[0x509af6]
emacs[0x5acc26]
...
</pre>
<p class="tab">The number '<b>11</b>' is the system signal number corresponding to the crash&mdash;in this case a segmentation fault. The hexadecimal numbers are program addresses, which is associated with source code lines using a debugging tool. For example, the GDB command '<b>list *0x509af6</b>' prints the source-code lines corresponding to the '<b>emacs[0x509af6]</b>' entry. If your system has the addr2line utility, the following shell command outputs a backtrace with source-code line numbers:</p>
<pre class="tab">sed -n 's/.*\[\(.*\)]$/\1/p' backtrace |
  addr2line -C -f -i -e bindir/emacs
</pre>
<p class="tab">Here, <b>backtrace</b> is the name of a text file containing a copy of the backtrace, and <b>bindir</b> is the name of the directory containing the Emacs executable.<br><br>Optionally, Emacs can generate a core dump when it crashes. A core dump is a file containing voluminous data about the state of the program before the crash, usually examined by loading it into a debugger such as GDB. On many platforms, core dumps are disabled by default, and you must explicitly enable them by running the shell command '<b>ulimit -c unlimited</b>' (e.g., in your shell startup script).</p>
<h2 id="After-a-Crash">Recovering after a crash</h2>
<p class="tab">If Emacs or the computer crashes, you can recover the files you were editing at the time of the crash from their auto-save files. To do this, start Emacs again and type the command <b>M-x recover-session</b>.<br><br>This command initially displays a buffer which lists interrupted session files, each with its date. You must choose which session to recover. Typically the one you want is the most recent one. Move point to the one you choose, and type <b>C-c C-c</b>.<br><br>Then <b>recover-session</b> considers each of the files that you were editing during that session; for each such file, it asks whether to recover that file. If you answer <b>y</b> for a file, it shows the dates of that file and its auto-save file, then asks once again whether to recover that file. For the second question, you must confirm with <b>yes</b>. If you do, Emacs visits the file but gets the text from the auto-save file.<br><br>When <b>recover-session</b> is done, the files you've chosen to recover are present in Emacs buffers. Then save them. Only this&mdash;saving them&mdash;updates the files themselves.<br><br>As a last resort, if you had buffers with content which were not associated with any files, or if the autosave was not recent enough to have recorded important changes, you can use the <b>etc/emacs-buffer.gdb</b> script with GDB (the GNU Debugger) to retrieve them from a core dump&ndash;provided that a core dump was saved, and that the Emacs executable was not stripped of its debugging symbols.<br><br>As soon as you get the core dump, rename it to another name such as <b>core.emacs</b>, so that another crash won't overwrite it.<br><br>To use this script, run gdb with the file name of your Emacs executable and the file name of the core dump, e.g., '<b>gdb /usr/bin/emacs core.emacs</b>'. At the (gdb) prompt, load the recovery script: '<b>source /usr/src/emacs/etc/emacs-buffer.gdb</b>'. Then type the command <b>ybuffer-list</b> to see which buffers are available. For each buffer, it lists a buffer number. To save a buffer, use <b>ysave-buffer</b>; you specify the buffer number, and the file name to write that buffer into. Use a file name which does not already exist; if the file does exist, the script does not make a backup of its old contents.</p>
<h2 id="Emergency-Escape">Emergency escape</h2>
<p class="tab">On text terminals, the emergency escape feature suspends Emacs immediately if you type <b>C-g</b> a second time before Emacs can actually respond to the first one by quitting. This is so you can always get out of GNU Emacs no matter how badly it might be hung. When things are working properly, Emacs recognizes and handles the first <b>C-g</b> so fast that the second one won't trigger emergency escape. However, if some problem prevents Emacs from handling the first <b>C-g</b> properly, then the second one gets you back to the shell.<br><br>When you resume Emacs after a suspension caused by emergency escape, it asks two questions before going back to what it had been doing:</p>
<pre class="tab tcy">Auto-save? (y or n)
Abort (and dump core)? (y or n)</pre>
<p class="tab">Answer each one with <b>y</b> or <b>n</b> followed by <b>&lt;RET&gt;</b>.<br><br>Saying <b>y</b> to '<b>Auto-save?</b>' causes immediate auto-saving of all modified buffers where auto-saving is enabled. Saying <b>n</b> skips this.<br><br>Saying <b>y</b> to '<b>Abort (and dump core)?</b>' causes Emacs to crash, dumping core. This is to enable a wizard to figure out why Emacs was failing to quit in the first place. Execution does not continue after a core dump.<br><br>If you answer this question <b>n</b>, Emacs execution resumes. With luck, Emacs ultimately does the requested quit. If not, each subsequent <b>C-g</b> invokes emergency escape again.<br><br>If Emacs is not really hung, only slow, you may invoke the double <b>C-g</b> feature by accident. Then only resume and answer <b>n</b> to both questions, and you get back to the former state. The quit you requested happens by and by.<br><br>Emergency escape is active only for text terminals. On graphical displays, you can use the mouse to kill Emacs or switch to another program.<br><br>On MS-DOS, you must type <b>C-&lt;BREAK&gt;</b> (twice) to cause emergency escape&mdash;but there are cases where it won't work, when system call hangs or when Emacs is stuck in a tight loop in C code.</p>
<h2 id="Emacs-Invocation">Command line arguments for Emacs invocation</h2>
<p class="tab">Emacs supports <a href="/jargon/c/commandi.htm">command line</a> <a href="/jargon/a/argument.htm">arguments</a> to request various actions when invoking Emacs. These are for compatibility with other editors and for sophisticated activities. We don't recommend using them for ordinary editing (See <a href="#Emacs-Server">Emacs Server</a>, for a way to access an existing Emacs job from the command line).<br><br>Arguments starting with '<b>-</b>' are options, and so is '<b>+linenum</b>'. All other arguments specify files to visit. Emacs visits the specified files while it starts up. The last file specified on the command line becomes the current buffer; the other files are also visited in other buffers. As with most programs, the special argument '<b>--</b>' says that all subsequent arguments are file names, not options, even if they start with '<b>-</b>'.<br><br>Emacs command options can specify many things, such as the size and position of the X window Emacs uses, its colors, etc. A few options support advanced usage, such as running Lisp functions on files in batch mode. The sections of this chapter describe the available options, arranged according to their purpose.<br><br>There are two ways of writing options: the short forms that start with a single '<b>-</b>', and the long forms that start with '<b>--</b>'. For example, '<b>-d</b>' is a short form and '<b>--display</b>' is the corresponding long form.<br><br>The long forms with '<b>--</b>' are easier to remember, but longer to type. However, you don't have to spell out the whole option name; any unambiguous abbreviation is enough. When a long option takes an argument, you can use either a space or an equal sign to separate the option name and the argument. Thus, you can write either '<b>--display sugar-bombs:0.0</b>' or '<b>--display=sugar-bombs:0.0</b>'. We recommend an equal sign because it makes the relationship clearer, and the tables below always show an equal sign.<br><br>Most options specify how to initialize Emacs, or set parameters for the Emacs session. We call them initial options. A few options specify things to do, such as loading libraries or calling Lisp functions. These are called action options. These and file names together are called action arguments. The action arguments are stored as a list of strings in the variable <b>command-line-args</b>. (Actually, when Emacs starts up, <b>command-line-args</b> contains all the arguments passed from the command line; during initialization, the initial arguments are removed from this list when they are processed, leaving only the action arguments.)</p>
<ul>
<li><a href="#Action-Arguments">Action Arguments</a>:Arguments to visit files, load libraries, and call functions.</li>
<li><a href="#Initial-Options">Options</a>:Arguments that take effect while starting Emacs.</li>
<li><a href="#Command-Example">Command Example</a>:Examples of using command line arguments.</li>
<li><a href="#Environment">Environment</a>:Environment variables that Emacs uses.</li>
<li><a href="#Display-X">Display X</a>:Changing the default display and using remote login.</li>
<li><a href="#Font-X">Font X</a>:Choosing a font for text, under X.</li>
<li><a href="#Colors-X">Colors X</a>:Choosing display colors.</li>
<li><a href="#Window-Size-X">Window Size X</a>:Start-up window size, under X.</li>
<li><a href="#Borders-X">Borders X</a>:Internal and external borders, under X.</li>
<li><a href="#Title-X">Title X</a>:Specifying the initial frame's title.</li>
<li><a href="#Icons-X">Icons X</a>:Choosing what sort of icon to use, under X.</li>
<li><a href="#Misc-X">Misc X</a>:Other display options.</li>
</ul>
<h2 id="Action-Arguments">Action-arguments</h2>
<p class="tab">Here is a table of action arguments:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px"><i>file</i>, <b>--file=</b><i>file</i>, <b>--find-file=</b><i>file</i>, <b>--visit=</b><i>file</i></td>
<td>Visit <i>file</i> using <b>find-file</b>. See <a href="#Visiting">Visiting</a>.<br><br>When Emacs starts up, it displays the startup buffer in one window, and the buffer visiting file in another window (see <a href="#Windows">Windows</a>). If you supply more than one file argument, the displayed file is the last one specified on the command line; the other files are visited but their buffers are not shown.<br><br>If the startup buffer is disabled (see <a href="#Entering-Emacs">Entering Emacs</a>), then file is visited in a single window if one file argument was supplied; with two file arguments, Emacs displays the files in two different windows; with more than two file argument, Emacs displays the last file specified in one window, plus a Buffer Menu in a different window (see <a href="#Several-Buffers">Several Buffers</a>). To inhibit using the Buffer Menu for this, change the variable <b>inhibit-startup-buffer-menu</b> to <b>t</b>.</td>
</tr>
<tr class="tcw">
<td><b>+</b><i>linenum file</i></td>
<td>Visit file using <b>find-file</b>, then go to line number <i>linenum</i> in it.</td>
</tr>
<tr class="tcw">
<td><b>+</b><i>linenum</i><b>:</b><i>columnnum file</i></td>
<td>Visit <i>file</i> using <b>find-file</b>, then go to line number <i>linenum</i> and put point at column number <i>columnnum</i>.</td>
</tr>
<tr class="tcw">
<td><b>-l</b> <i>file</i>, <b>--load=</b><i>file</i></td>
<td>Load a Lisp library named <i>file</i> with the function <b>load</b>. If <i>file</i> is not an absolute file name, Emacs first looks for it in the current directory, then in the directories listed in <b>load-path</b> (see <a href="#Lisp-Libraries">Lisp Libraries</a>).<br><br>Warning: If previous command-line arguments have visited files, the current directory is the directory of the last file visited.</td>
</tr>
<tr class="tcw">
<td><b>-L</b> <i>dir</i>, <b>--directory=</b><i>dir</i></td>
<td>Add directory <i>dir</i> to the variable <b>load-path</b>.</td>
</tr>
<tr class="tcw">
<td><b>-f</b> <i>function</i>, <b>--funcall=</b><i>function</i></td>
<td>Call Lisp function <i>function</i>. If it's an interactive function (a command), it reads the arguments interactively only as if you had called the same function with a key sequence. Otherwise, it calls the function with no arguments.</td>
</tr>
<tr class="tcw">
<td><b>--eval=</b><i>expression</i>,<br><b>--execute=</b><i>expression</i></td>
<td>Evaluate Lisp expression <i>expression</i>.</td>
</tr>
<tr class="tcw">
<td><b>--insert=</b><i>file</i></td>
<td>Insert the contents of <i>file</i> into the *scratch* buffer (see <a href="#Lisp-Interaction">Lisp Interaction</a>). This is like what <b>M-x insert-file</b> does (see <a href="#Misc-File-Ops">Misc File Ops</a>).</td>
</tr>
<tr class="tcw">
<td><b>--kill</b></td>
<td>Exit from Emacs without asking for confirmation.</td>
</tr>
<tr class="tcw">
<td><b>--help</b></td>
<td>Print a usage message listing all available options, then exit successfully.</td>
</tr>
<tr class="tcw">
<td><b>--version</b></td>
<td>Print Emacs version, then exit successfully.</td>
</tr>
</table>
<h2 id="Initial-Options">Options</h2>
<p class="tab">The initial options specify parameters for the Emacs session. This section describes the more general initial options; some other options specifically related to the X Window System appear in the following sections.<br><br>Some initial options affect the loading of the initialization file. Normally, Emacs first loads <b>site-start.el</b> if it exists, then your initialization file if it exists, and finally the default initialization file <b>default.el</b> if it exists (see <a href="#Init-File">Init File</a>). Certain options prevent loading of some of these files or substitute other files for them.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>-chdir</b> <i>directory</i>,<br><b>--chdir=</b><i>directory</i></td>
<td>Change to <i>directory</i> before doing anything else. This is mainly used by session management in X so that Emacs starts in the same directory as it stopped. This makes desktop saving and restoring easier.</td>
</tr>
<tr class="tcw">
<td><b>-t</b> <i>device</i>,<br><b>--terminal=</b><i>device</i></td>
<td>Use <i>device</i> as the device for terminal input and output. This option implies '<b>--no-window-system</b>'.</td>
</tr>
<tr class="tcw">
<td><b>-d</b> <i>display</i>,<br><b>--display=</b><i>display</i></td>
<td>Use the X Window System and use the display named <i>display</i> to open the initial Emacs frame. See <a href="#Display-X">Display X</a>, for more details.</td>
</tr>
<tr class="tcw">
<td><b>-nw</b>,<br><b>--no-window-system</b></td>
<td>Don't communicate directly with the window system, disregarding the DISPLAY environment variable even if it's set. This means that Emacs uses the terminal from which it was launched for all its display and input.</td>
</tr>
<tr class="tcw">
<td><b>-batch</b>, <b>--batch</b></td>
<td>Run Emacs in batch mode. Batch mode is used for running programs written in Emacs Lisp from shell scripts, makefiles, etc. To invoke a Lisp program, use the '<b>-batch</b>' option in conjunction with one or more of '<b>-l</b>', '<b>-f</b>' or '<b>--eval</b>' (see <a href="#Action-Arguments">Action Arguments</a>). See <a href="#Command-Example">Command Example</a>, for an example.<br><br>In batch mode, Emacs does not display the text being edited, and the standard terminal interrupt characters such as <b>C-z</b> and <b>C-c</b> have their usual effect. Emacs functions that normally print a message in the echo area print to either the standard output stream (<b>stdout</b>) or the standard error stream (<b>stderr</b>) instead. (To be precise, functions like <b>prin1</b>, <b>princ</b> and <b>print</b> print to <b>stdout</b>, while <b>message</b> and <b>error</b> print to <b>stderr</b>.) Functions that normally read keyboard input from the minibuffer take their input from the terminal's standard input stream (<a href="/jargon/s/stdin.htm">stdin</a>) instead.<br><br>'<b>--batch</b>' implies '<b>-q</b>' (do not load an initialization file), but <b>site-start.el</b> is loaded nonetheless. It also causes Emacs to exit after processing all the command options. Also, it disables auto-saving except in buffers for which auto-saving is explicitly requested.</td>
</tr>
<tr class="tcw">
<td><b>--script</b> <i>file</i></td>
<td>Run Emacs in batch mode, like '<b>--batch</b>', and then read and execute the Lisp code in <i>file</i>.<br><br>The normal use of this option is in executable script files that run Emacs. They can start with this text on the first line<br><br><pre class="tcy">#!/usr/bin/emacs --script</pre> which invokes Emacs with '<b>--script</b>' and supply the name of the script file as file. Emacs Lisp then treats the '<b>#!</b>' on this first line as a comment delimiter.</td>
</tr>
<tr class="tcw">
<td><b>-q</b>, <b>--no-init-file</b></td>
<td>Do not load any initialization file (see <a href="#Init-File">Init File</a>). When Emacs is invoked with this option, the Customize facility does not allow options to be saved (see <a href="#Easy-Customization">Easy Customization</a>). This option does not disable loading <b>site-start.el</b>.</td>
</tr>
<tr class="tcw">
<td><b>--no-site-file</b></td>
<td>Do not load <b>site-start.el</b> (see <a href="#Init-File">Init File</a>). The '<b>-Q</b>' option does this too, but other options like '<b>-q</b>' do not.</td>
</tr>
<tr class="tcw">
<td><b>--no-site-lisp</b></td>
<td>Do not include the <b>site-lisp</b> directories in <b>load-path</b> (see <a href="#Init-File">Init File</a>). The '<b>-Q</b>' option does this too.</td>
</tr>
<tr class="tcw">
<td><b>--no-splash</b></td>
<td>Do not display a startup screen. You can also achieve this effect by setting the variable <b>inhibit-startup-screen</b> to non-nil in your initialization file (see <a href="#Entering-Emacs">Entering Emacs</a>).</td>
</tr>
<tr class="tcw">
<td><b>-Q</b>, <b>--quick</b></td>
<td>Start emacs with minimum customizations. This is similar to using '<b>-q</b>', '<b>--no-site-file</b>', '<b>--no-site-lisp</b>', and '<b>--no-splash</b>' together. This also stops Emacs from processing X resources by setting <b>inhibit-x-resources</b> to <b>t</b> (see <a href="#Resources">Resources</a>).</td>
</tr>
<tr class="tcw">
<td><b>-daemon</b>, <b>--daemon</b></td>
<td>Start Emacs as a <a href="/jargon/d/daemon.htm">daemon</a>&mdash;after Emacs starts up, it starts the Emacs server and disconnects from the terminal without opening any frames. You can then use the <b>emacsclient</b> command to connect to Emacs for editing. See <a href="#Emacs-Server">Emacs Server</a>, for information about using Emacs as a daemon.</td>
</tr>
<tr class="tcw">
<td><b>-daemon=</b>SERVER-NAME</td>
<td>Start emacs in background as a daemon, and use SERVER-NAME as the server name.</td>
</tr>
<tr class="tcw">
<td><b>--no-desktop</b></td>
<td>Do not reload any saved desktop. See <a href="#Saving-Emacs-Sessions">Saving Emacs Sessions</a>.</td>
</tr>
<tr class="tcw">
<td><b>-u</b> <i>user</i>, <b>--user=</b><i>user</i></td>
<td>Load <i>user</i>'s initialization file instead of your initialization file.</td>
</tr>
<tr class="tcw">
<td><b>--debug-init</b></td>
<td>Enable the Emacs Lisp debugger for errors in the init file.</td>
</tr>
</table>
<h2 id="Command-Example">Command argument example</h2>
<p class="tab">Here is an example of using Emacs with arguments and options. It assumes you have a Lisp program file called <b>hack-c.el</b> which, when loaded, performs some useful operation on the current buffer, expected to be a C program.</p>
<p class=" tab tcy">emacs --batch foo.c -l hack-c -f save-buffer &gt;&amp; log</p>
<p class="tab">This says to visit <b>foo.c</b>, load <b>hack-c.el</b> (which makes changes in the visited file), save <b>foo.c</b> (note that <b>save-buffer</b> is the function that <b>C-x C-s</b> is bound to), and then exit back to the shell (because of '<b>--batch</b>'). '<b>--batch</b>' also guarantees there are no problems redirecting output to log, because Emacs does not assume it has a display terminal where it can work.</p>
<h2 id="Environment">Environment variables</h2>
<p class="tab">The environment is a feature of the operating system; it consists of a collection of variables with names and values. Each variable is called an environment variable; environment variable names are case-sensitive, and it is conventional to use uppercase letters only. The values are all text strings.<br><br>What makes the environment useful is that subprocesses inherit the environment automatically from their parent process. This means you can set up an environment variable in your login shell, and all the programs you run (including Emacs) automatically see it. Subprocesses of Emacs (such as shells, compilers, and version control programs) inherit the environment from Emacs, too.<br><br>Inside Emacs, the command <b>M-x getenv</b> reads the name of an environment variable, and prints its value in the echo area. <b>M-x setenv</b> sets a variable in the Emacs environment, and <b>C-u M-x</b> setenv removes a variable. (Environment variable substitutions with '<b>$</b>' work in the value only as in file names; see <a href="#File-Names">File Names</a> with <b>$</b>.) The variable <b>initial-environment</b> stores the initial environment inherited by Emacs.<br><br>The way to set environment variables outside of Emacs depends on the operating system, and especially the shell that you are using. For example, here's how to set the environment variable ORGANIZATION to '<b>not very much</b>' using <a href="/unix/ubash.htm">Bash</a>:</p>
<p class="tab tcy">export ORGANIZATION="not very much"</p>
<p class="tab">and here's how to do it in <a href="/unix/ucsh.htm">csh</a> or <b>tcsh</b>:</p>
<p class="tab tcy">setenv ORGANIZATION "not very much"</p>
<p class="tab">When Emacs uses the X Window System, various environment variables that control X work for Emacs as well. See the X documentation for more information.</p>
<ul>
<li><a href="#General-Variables">General Variables</a>: Environment variables that all versions of Emacs use.</li>
<li><a href="#Misc-Variables">Misc Variables</a>: Certain system-specific variables.</li>
<li><a href="#MS_002dWindows-Registry">MS-Windows Registry</a>: An alternative to the environment on Microsoft Windows.</li>
</ul>
<h2 id="General-Variables">General variables</h2>
<p class="tab">Here is an alphabetical list of environment variables that have special meanings in Emacs. Most of these variables are also used by some other programs. Emacs does not require any of these environment variables to be set, but it uses their values if they are set.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>CDPATH</b></td>
<td>Used by the <a href="/unix/ucd.htm">cd</a> command to search for the directory you specify, when you specify a relative directory name.</td>
</tr>
<tr class="tcw">
<td><b>DBUS_SESSION_BUS_ADDRESS</b></td>
<td>Used by D-Bus when Emacs is compiled with it. Usually, there is no need to change it. Setting it to a dummy address, like '<b>unix:path=/tmp/foo</b>', suppresses connections to the D-Bus session bus.</td>
</tr>
<tr class="tcw">
<td><b>EMACSDATA</b></td>
<td>Directory for the architecture-independent files that come with Emacs. This is used to initialize the variable <b>data-directory</b>.</td>
</tr>
<tr class="tcw">
<td><b>EMACSDOC</b></td>
<td>Directory for the documentation string file, which is used to initialize the Lisp variable <b>doc-directory</b>.</td>
</tr>
<tr class="tcw">
<td><b>EMACSLOADPATH</b></td>
<td>A colon-separated list of directories to search for Emacs Lisp files. If set, it overrides the usual initial value of the <b>load-path</b> variable (see <a href="#Lisp-Libraries">Lisp Libraries</a>).</td>
</tr>
<tr class="tcw">
<td><b>EMACSPATH</b></td>
<td>A colon-separated list of directories to search for executable files. If set, Emacs uses this in addition to PATH (see below) when initializing the variable <b>exec-path</b> (see <a href="#Shell">Shell</a>).</td>
</tr>
<tr class="tcw">
<td><b>EMAIL</b></td>
<td>Your e-mail address; used to initialize the Lisp variable <b>user-mail-address</b>, which the Emacs mail interface puts into the '<b>From</b>' header of outgoing messages (see <a href="#Mail-Headers">Mail Headers</a>).</td>
</tr>
<tr class="tcw">
<td><b>ESHELL</b></td>
<td>Used for <b>shell-mode</b> to override the SHELL environment variable (see <a href="#Interactive-Shell">Interactive Shell</a>).</td>
</tr>
<tr class="tcw">
<td><b>HISTFILE</b></td>
<td>The name of the file that shell commands are saved between logins. This variable defaults to <b>~/.bash_history</b> if you use Bash, to <b>~/.sh_history</b> if you use ksh, and to <b>~/.history</b> otherwise.</td>
</tr>
<tr class="tcw">
<td><b>HOME</b></td>
<td>The location of your files in the directory tree; used for expansion of file names starting with a tilde (~). On MS-DOS, it defaults to the directory from which Emacs was started, with '<b>/bin</b>' removed from the end if it was present. On Windows, the default value of HOME is the Application Data subdirectory of the user profile directory (normally, this is <b>C:/Documents and Settings/username/Application Data</b>, where <b>username</b> is your username), though for backward compatibility, <b>C:/</b> is used instead if a <b>.emacs</b> file is found there.</td>
</tr>
<tr class="tcw">
<td><b>HOSTNAME</b></td>
<td>The name of the machine where Emacs is running.</td>
</tr>
<tr class="tcw">
<td><b>INCPATH</b></td>
<td>A colon-separated list of directories. Used by the complete package to search for files.</td>
</tr>
<tr class="tcw">
<td><b>INFOPATH</b></td>
<td>A colon-separated list of directories where to search for Info files.</td>
</tr>
<tr class="tcw">
<td><b>LC_ALL</b>, <b>LC_COLLATE</b>, <b>LC_CTYPE</b>, <b>LC_MESSAGES</b>, <b>LC_MONETARY</b>, <b>LC_NUMERIC</b>, <b>LC_TIME</b>, <b>LANG</b></td>
<td>The user's preferred locale. The locale has six categories, specified by the environment variables LC_COLLATE for sorting, LC_CTYPE for character encoding, LC_MESSAGES for system messages, LC_MONETARY for monetary formats, LC_NUMERIC for numbers, and LC_TIME for dates and times. If one of these variables is not set, the category defaults to the value of the LANG environment variable, or to the default '<b>C</b>' locale if LANG is not set. But if LC_ALL is specified, it overrides the settings of all the other locale environment variables.<br><br>On Microsoft Windows, if LANG is not already set in the environment when Emacs starts, Emacs sets it based on the system-wide default language, which you can set in the '<b>Regional Settings</b>' Control Panel on some versions of Microsoft Windows.<br><br>The value of the LC_CTYPE category is matched against entries in <b>locale-language-names</b>, <b>locale-charset-language-names</b>, and <b>locale-preferred-coding-systems</b>, to select a default language environment and coding system. See <a href="#Language-Environments">Language Environments</a>.</td>
</tr>
<tr class="tcw">
<td><b>LOGNAME</b></td>
<td>The user's login name. See also USER.</td>
</tr>
<tr class="tcw">
<td><b>MAIL</b></td>
<td>The name of your system mail inbox.</td>
</tr>
<tr class="tcw">
<td><b>MH</b></td>
<td>Name of setup file for the mh system. See MH-E.</td>
</tr>
<tr class="tcw">
<td><b>NAME</b></td>
<td>Your real-world name. This is used to initialize the variable <b>user-full-name</b> (see <a href="#Mail-Headers">Mail Headers</a>).</td>
</tr>
<tr class="tcw">
<td><b>NNTPSERVER</b></td>
<td>The name of the news server. Used by the mh and Gnus packages.</td>
</tr>
<tr class="tcw">
<td><b>ORGANIZATION</b></td>
<td>The name of the organization that you belong. Used for setting the &#96;Organization:' header in your posts from the Gnus package.</td>
</tr>
<tr class="tcw">
<td><b>PATH</b></td>
<td>A colon-separated list of directories containing executable files. This is used to initialize the variable <b>exec-path</b> (see <a href="#Shell">Shell</a>).</td>
</tr>
<tr class="tcw">
<td><b>PWD</b></td>
<td>If set, this should be the default directory when Emacs was started.</td>
</tr>
<tr class="tcw">
<td><b>REPLYTO</b></td>
<td>If set, this specifies an initial value for the variable <b>mail-default-reply-to</b> (see <a href="#Mail-Headers">Mail Headers</a>).</td>
</tr>
<tr class="tcw">
<td><b>SAVEDIR</b></td>
<td>The name of a directory where news articles are saved by default. Used by the Gnus package.</td>
</tr>
<tr class="tcw">
<td><b>SHELL</b></td>
<td>The name of an interpreter used to parse and execute programs run from inside Emacs.</td>
</tr>
<tr class="tcw">
<td><b>SMTPSERVER</b></td>
<td>The name of the outgoing mail server. This is used to initialize the variable <b>smtpmail-smtp-server</b> (see <a href="#Mail-Sending">Mail Sending</a>).</td>
</tr>
<tr class="tcw">
<td><b>TERM</b></td>
<td>The type of the terminal that Emacs uses. This variable must be set unless Emacs is run in batch mode. On MS-DOS, it defaults to '<b>internal</b>', which specifies a built-in terminal emulation that handles the machine's own display.</td>
</tr>
<tr class="tcw">
<td><b>TERMCAP</b></td>
<td>The name of the termcap library file describing how to program the terminal specified by TERM. This defaults to <b>/etc/termcap</b>.</td>
</tr>
<tr class="tcw">
<td><b>TMPDIR</b>, <b>TMP</b>, <b>TEMP</b></td>
<td>These environment variables are used to initialize the variable <b>temporary-file-directory</b>, which specifies a directory to put temporary files (see <a href="#Backup">Backup</a>). Emacs tries to use TMPDIR first; if that is unset, it tries TMP, then TEMP, and finally <b>/tmp</b>. But on Microsoft Windows and MS-DOS, Emacs tries TEMP, then TMPDIR, then TMP, and finally <b>c:/temp</b>.</td>
</tr>
<tr class="tcw">
<td><b>TZ</b></td>
<td>This specifies the current time zone and possibly also daylight saving time information. On MS-DOS, if TZ is not set in the environment when Emacs starts, Emacs defines a default value as appropriate for the country code returned by DOS. On Microsoft Windows, Emacs does not use TZ at all.</td>
</tr>
<tr class="tcw">
<td><b>USER</b></td>
<td>The user's login name. See also LOGNAME. On MS-DOS, this defaults to '<b>root</b>'.</td>
</tr>
<tr class="tcw">
<td><b>VERSION_CONTROL</b></td>
<td>Used to initialize the <b>version-control</b> variable (see <a href="#Backup-Names">Backup Names</a>).</td>
</tr>
</table>
<h2 id="Misc-Variables">Miscellaneous variables</h2>
<p class="tab">These variables are used only on particular configurations:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:100px"><b>COMSPEC</b></td>
<td>On MS-DOS and Microsoft Windows, the name of the command interpreter to use when invoking batch files and commands internal to the shell. On MS-DOS this is also used to make a default value for the SHELL environment variable.</td>
</tr>
<tr class="tcw">
<td style="width:210px"><b>NAME</b></td>
<td>On MS-DOS, this variable defaults to the value of the USER variable.</td>
</tr>
<tr class="tcw">
<td><b>EMACSTEST</b></td>
<td>On MS-DOS, this specifies a file to use to log the operation of the internal terminal emulator. This feature is useful for submitting bug reports.</td>
</tr>
<tr class="tcw">
<td><b>EMACSCOLORS</b></td>
<td>On MS-DOS, this specifies the screen colors. It is useful to set them this way; otherwise Emacs would display the default colors momentarily when it starts up.<br><br>The value of this variable should be the two-character encoding of the foreground (the first character) and the background (the second character) colors of the default face. Each character should be the hexadecimal code for the desired color on a standard PC text-mode display. For example, to get blue text on a light gray background, specify '<b>EMACSCOLORS=17</b>', as 1 is the code of the blue color and 7 is the code of the light gray color.<br><br>The PC display usually supports only eight background colors. However, Emacs switches the DOS display to a mode where all 16 colors can be used for the background, so all four bits of the background color are actually used.</td>
</tr>
<tr class="tcw">
<td><b>PRELOAD_WINSOCK</b></td>
<td>On Microsoft Windows, if you set this variable, Emacs loads and initializes the network library at startup, instead of waiting until the first time it is required.</td>
</tr>
<tr class="tcw">
<td><b>emacs_dir</b></td>
<td>On Microsoft Windows, emacs_dir is a special environment variable, which indicates the full path of the directory where Emacs is installed. If Emacs is installed in the standard directory structure, it calculates this value automatically. It is not much use setting this variable yourself unless your installation is non-standard, as unlike other environment variables, it is overridden by Emacs at startup. When setting other environment variables, such as EMACSLOADPATH, you may find it useful to use emacs_dir rather than hard-coding an absolute path. This allows multiple versions of Emacs to share the same environment variable settings, and it allows you to move the Emacs installation directory, without changing any environment or Registry settings.</td>
</tr>
</table>
<h2 id="MS_002dWindows-Registry">The Microsoft Windows registry</h2>
<p class="tab">On Microsoft Windows, the installation program <b>addpm.exe</b> adds values for <b>emacs_dir</b>, EMACSLOADPATH, EMACSDATA, EMACSPATH, EMACSDOC, SHELL and TERM to the HKEY_LOCAL_MACHINE section of the system Registry, under <b>/Software/GNU/Emacs</b>. It does this because there is no standard place to set environment variables across different versions of Windows. Running <b>addpm.exe</b> is no longer strictly necessary in recent versions of Emacs, but if you are upgrading from an older version, running addpm.exe ensures that you do not have older Registry entries from a previous installation, which may not be compatible with the latest version of Emacs.<br><br>When Emacs starts and checks the environment, it also checks the System Registry for those variables and for HOME, LANG and PRELOAD_WINSOCK.<br><br>To determine the value of those variables, Emacs goes through the following procedure. First, the environment is checked. If the variable is not found there, Emacs looks for Registry keys by that name under <b>/Software/GNU/Emacs</b>; first in the HKEY_CURRENT_USER section of the Registry, and if not found there, in the HKEY_LOCAL_MACHINE section. Finally, if Emacs still cannot determine the values, compiled-in defaults are used.<br><br>In addition to the environment variables above, you can also add many of the settings which on X belong in the <b>.Xdefaults</b> file (see <a href="#X-Resources">X Resources</a>) to the <b>/Software/GNU/Emacs</b> Registry key.</p>
<h2 id="Display-X">Specifying the display name</h2>
<p class="tab">The environment variable DISPLAY tells all X clients, including Emacs, where to display their windows. Its value is set by default in ordinary circumstances, when you start an X server and run jobs locally. You can specify the display yourself; one reason to do this is if you want to log into another system and run Emacs there, and have the window displayed at your local terminal.<br><br>DISPLAY has the syntax '<b>host:display.screen</b>', where <b>host</b> is the hostname of the X Window System server machine, <b>display</b> is an arbitrarily-assigned number that distinguishes your server (X terminal) from other servers on the same machine, and <b>screen</b> is a field that allows an X server to control multiple terminal screens. The period and the screen field are optional. If included, screen is usually zero.<br><br>For example, if your host is named '<b>glasperle</b>' and your server is the first (or perhaps the only) server listed in the configuration, your DISPLAY is '<b>glasperle:0.0</b>'.<br><br>You can specify the display name explicitly when you run Emacs, either by changing the DISPLAY variable, or with the option '<b>-d display</b>' or '<b>--display=display</b>'. Here is an example:</p>
<p class="tab tcy">emacs --display=glasperle:0 &amp;</p>
<p class="tab">You can inhibit the use of the X Window System with the '<b>-nw</b>' option. Then Emacs uses its controlling text terminal for display. See <a href="#Initial-Options">Options</a>. Sometimes, security arrangements prevent a program on a remote system from displaying on your local system. In this case, trying to run Emacs produces messages like this:</p>
<pre class="tab tcy">Xlib: connection to "glasperle:0.0" refused by server</pre>
<p class="tab">You might be able to overcome this problem using the <a href="/unix/xhost.htm">xhost command</a> on the local system to give permission for access from your remote machine.</p>
<h2 id="Font-X">Options</h2>
<p class="tab">You can use the command line option '<b>-fn font</b>' (or '<b>--font</b>', which is an alias for '<b>-fn</b>') to specify a default font:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px">'<b>-fn font</b>', '<b>--font=font</b>'</td>
<td>Use font as the default font.</td>
</tr>
</table>
<p class="tab">When passing a font name to Emacs on the command line, you may need to "quote" it, by enclosing it in quotation marks, if it contains characters that the shell treats specially (e.g., spaces). For example:</p>
<pre class="tab tcy">emacs -fn "DejaVu Sans Mono-12"</pre>
<p class="tab">See <a href="#Fonts">Fonts</a>, for details about font names and other ways to specify the default font.</p>
<h2 id="Colors-X">Options</h2>
<p class="tab">You can use the following command-line options to specify the colors to use for various parts of the Emacs display. Colors may be specified using either color names or RGB triplets (see <a href="#Colors">Colors</a>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>-fg</b> <i>color</i>,<br><b>--foreground-color=</b><i>color</i></td>
<td>Specify the foreground color <i>color</i>, overriding the color specified by the default face (see <a href="#Faces">Faces</a>).</td>
</tr>
<tr class="tcw">
<td><b>-bg</b> <i>color</i>,<br><b>--background-color=</b><i>color</i></td>
<td>Specify the background color <i>color</i>, overriding the color specified by the default face.</td>
</tr>
<tr class="tcw">
<td><b>-bd</b> <i>color</i>,<br><b>--border-color=</b><i>color</i></td>
<td>Specify the color of the border of the X window. This has no effect if Emacs is compiled with GTK+ support.</td>
</tr>
<tr class="tcw">
<td><b>-cr</b> <i>color</i>,<br><b>--cursor-color=</b><i>color</i></td>
<td>Specify the color of the Emacs cursor which indicates where point is.</td>
</tr>
<tr class="tcw">
<td><b>-ms</b> <i>color</i>,<br><b>--mouse-color=</b><i>color</i></td>
<td>Specify the color for the mouse cursor when the mouse is in the Emacs window.</td>
</tr>
<tr class="tcw">
<td><b>-r</b>, <b>-rv</b>, <b>--reverse-video</b></td>
<td>Reverse video&mdash;swap the foreground and background colors.</td>
</tr>
<tr class="tcw">
<td><b>--color=</b><i>mode</i></td>
<td>Set the color support mode when Emacs is run on a text terminal. This option overrides the number of supported colors that the character terminal advertises in its termcap or terminfo database. The parameter mode can be one of the following:<br><br>
<table class="mtable3">
<tr class="tcw">
<td style="width:90px"><b>never</b>, <b>no</b></td>
<td>Don't use colors even if the terminal's capabilities specify color support.</td>
</tr>
<tr class="tcw">
<td><b>default</b>, <b>auto</b></td>
<td>Same as when <b>--color</b> is not used at all: Emacs detects at startup whether the terminal supports colors, and if it does, turns on colored display.</td>
</tr>
<tr class="tcw">
<td><b>always</b>, <b>yes</b>, <b>ansi8</b></td>
<td>Turn on the color support unconditionally, and use color commands specified by the ANSI escape sequences for the 8 standard colors.</td>
</tr>
<tr class="tcw">
<td><b>num</b></td>
<td>Use color mode for num colors. If num is -1, turn off color support (equivalent to '<b>never</b>'); if it's 0, use the default color support for this terminal (equivalent to '<b>auto</b>'); otherwise use an appropriate standard mode for num colors. Depending on your terminal's capabilities, Emacs might be able to turn on a color mode for 8, 16, 88, or 256 as the value of num. If there is no mode that supports num colors, Emacs acts as if num were 0, i.e., it uses the terminal's default color support mode.</td>
</tr>
</table>
<br>
If mode is omitted, it defaults to <b>ansi8</b>.</td>
</tr>
</table>
<p class="tab">For example, to use a coral mouse cursor and a slate blue text cursor, enter:</p>
<p class="tab tcy">emacs -ms coral -cr 'slate blue' &amp;</p>
<p class="tab">You can reverse the foreground and background colors through the '<b>-rv</b>' option or with the X resource '<b>reverseVideo</b>'.<br><br>The '<b>-fg</b>', '<b>-bg</b>', and '<b>-rv</b>' options function on text terminals and on graphical displays.</p>
<h2 id="Window-Size-X">Options for window size and position</h2>
<p class="tab">Here is a list of the command-line options for specifying size and position of the initial Emacs frame:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:400px"><b>-g widthxheight</b>[{<b>+-</b>}<i>xoffset</i>{<b>+-</b>}<i>yoffset</i>]],<br><b>--geometry=widthxheight</b>[{<b>+-</b>}<i>xoffset</i>{<b>+-</b>}<i>yoffset</i>]]</td>
<td>Specify the size width and height (measured in character columns and lines), and positions <i>xoffset</i> and <i>yoffset</i> (measured in pixels). The width and height parameters apply to all frames, whereas <i>xoffset</i> and <i>yoffset</i> only to the initial frame.</td>
</tr>
<tr class="tcw">
<td><b>-fs</b>, <b>--fullscreen</b></td>
<td>Specify that width and height shall be the size of the screen. Normally no window manager decorations are shown.</td>
</tr>
<tr class="tcw">
<td><b>-mm</b>, <b>--maximized</b></td>
<td>Specify that the Emacs frame shall be maximized. This normally indicates the frame has window manager decorations.</td>
</tr>
<tr class="tcw">
<td><b>-fh</b>, <b>--fullheight</b></td>
<td>Specify that the height shall be the height of the screen.</td>
</tr>
<tr class="tcw">
<td><b>-fw</b>, <b>--fullwidth</b></td>
<td>Specify that the width shall be the width of the screen.</td>
</tr>
</table>
<p class="tab">In the '<b>--geometry</b>' option, {+-} means either a plus sign or a minus sign. A plus sign before <b>xoffset</b> means it is the distance from the left side of the screen; a minus sign means it counts from the right side. A plus sign before <b>yoffset</b> means it is the distance from the top of the screen, and a minus sign there indicates the distance from the bottom. The values <b>xoffset</b> and <b>yoffset</b> may themselves be positive or negative, but that doesn't change their meaning, only their direction.<br><br>Emacs uses the same units as xterm does to interpret the geometry. The width and height are measured in characters, so a large font creates a larger frame than a small font. (If you specify a proportional font, Emacs uses its maximum bounds width as the width unit.) The <b>xoffset</b> and <b>yoffset</b> are measured in pixels.<br><br>You do not have to specify all the fields in the geometry specification. If you omit both <b>xoffset</b> and <b>yoffset</b>, the window manager decides where to put the Emacs frame, possibly by letting you place it with the mouse. For example, '<b>164x55</b>' specifies a window 164 columns wide, enough for two ordinary width windows side by side, and 55 lines tall.<br><br>The default frame width is 80 characters and the default height is 40 lines. You can omit either the width or the height or both. If you start the geometry with an integer, Emacs interprets it as the width. If you start with an '<b>x</b>' followed by an integer, Emacs interprets it as the height. Thus, '<b>81</b>' specifies only the width; '<b>x45</b>' specifies only the height.<br><br>If you start with '<b>+</b>' or '<b>-</b>', that introduces an offset, which means both sizes are omitted. Thus, '<b>-3</b>' specifies the <b>xoffset</b> only. (If you give only one offset, it is always <b>xoffset</b>.) '<b>+3-3</b>' specifies both the <b>xoffset</b> and the <b>yoffset</b>, placing the frame near the bottom left of the screen.<br><br>You can specify a default for any or all the fields in your X resource file (see <a href="#Resources">Resources</a>), and then override selected fields with a '<b>--geometry</b>' option.<br><br>Since the mode line and the echo area occupy the last 2 lines of the frame, the height of the initial text window is 2 less than the height specified in your geometry. In non-X-toolkit versions of Emacs, the menu bar also takes one line of the specified number. But in the X toolkit version, the menu bar is additional and does not count against the specified height. The tool bar, if present, is also additional.<br><br>Enabling or disabling the menu bar or tool bar alters the amount of space available for ordinary text. Therefore, if Emacs starts up with a tool bar (which is the default), and handles the geometry specification assuming there is a tool bar, and then your initialization file disables the tool bar, you end up with a frame geometry different from what you requested. To get the intended size with no tool bar, use an X resource to specify "no tool bar" (see <a href="#Table-of-Resources">Table of Resources</a>); then Emacs will already know there's no tool bar when it processes the specified geometry.<br><br>When using one of '<b>--fullscreen</b>', '<b>--maximized</b>', '<b>--fullwidth</b>' or '<b>--fullheight</b>' there may be some space around the frame. That is because Emacs rounds the sizes so they are an even number of character heights and widths.<br><br>Some window managers have options that make them ignore both program-specified and user-specified positions. If these are set, Emacs fails to position the window correctly.</p>
<h2 id="Borders-X">Internal and external borders</h2>
<p class="tab">An Emacs frame has an internal border and an external border. The internal border is an extra strip of the background color around the text portion of the frame. Emacs itself draws the internal border. The external border is added by the window manager outside the frame; depending on the window manager you use, it may contain various boxes you can click to move or iconify the window.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>-ib</b> <i>width</i>,<br><b>--internal-border=</b><i>width</i></td>
<td>Specify <i>width</i> as the width of the internal border (between the text and the main border), in pixels.</td>
</tr>
<tr class="tcw">
<td><b>-bw</b> <i>width</i>,<br><b>--border-width=</b><i>width</i></td>
<td>Specify <i>width</i> as the width of the main border, in pixels.</td>
</tr>
</table>
<p class="tab">When you specify the size of the frame, that does not count the borders. The frame's position is measured from the outside edge of the external border.<br><br>Use the '<b>-ib n</b>' option to specify an internal border <b>n</b> pixels wide. The default is 1. Use '<b>-bw n</b>' to specify the width of the external border (though the window manager may not pay attention to what you specify). The default width of the external border is 2.</p>
<h2 id="Title-X">Frame titles</h2>
<p class="tab">An Emacs frame may or may not have a specified title. The frame title, if specified, appears in window decorations and icons as the name of the frame. If an Emacs frame has no specified title, the default title has the form '<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="95fcfbe3faf6f4e1fcfafbb8fbf4f8f0d5f8f4f6fdfcfbf0">[email&#160;protected]</a></b>' (if there is only one frame) or the selected window's buffer name (if there is more than one frame).<br><br>You can specify a title for the initial Emacs frame with a command line option:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:200px"><b>-T</b> <i>title</i>, <b>--title=</b><i>title</i></td>
<td>Specify <i>title</i> as the title for the initial Emacs frame.</td>
</tr>
</table>
<p class="tab">The '<b>--name</b>' option (see <a href="#Resources">Resources</a>) also specifies the title for the initial Emacs frame.</p>
<h2 id="Icons-X">Icons</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>-iconic</b>, <b>--iconic</b></td>
<td>Start Emacs in an iconified ("minimized") state.</td>
</tr>
<tr class="tcw">
<td><b>-nbi</b>, <b>--no-bitmap-icon</b></td>
<td>Disable the use of the Emacs icon.</td>
</tr>
</table>
<p class="tab">Most window managers allow you to "iconify" (or "minimize") an Emacs frame, hiding it from sight. Some window managers replace iconified windows with tiny "icons", while others remove them entirely from sight. The '<b>-iconic</b>' option tells Emacs to begin running in an iconified state, rather than showing a frame right away. The text frame doesn't appear until you deiconify (or "un-minimize") it.<br><br>By default, Emacs uses an icon containing the Emacs logo. On desktop environments such as Gnome, this icon is also displayed in other contexts, e.g., when switching into an Emacs frame. The '<b>-nbi</b>' or '<b>--no-bitmap-icon</b>' option tells Emacs to let the window manager choose what sort of icon to use&mdash;usually only a small rectangle containing the frame's title.</p>
<h2 id="Misc-X">Options</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>--parent-id</b> ID</td>
<td>Open Emacs as a client X window via the XEmbed protocol, with ID as the parent X window id. Currently, this option is mainly useful for developers.</td>
</tr>
<tr class="tcw">
<td><b>-vb</b>,<br><b>--vertical-scroll-bars</b></td>
<td>Enable vertical scroll bars.</td>
</tr>
<tr class="tcw">
<td><b>-lsp</b> <i>pixels</i>,<br><b>--line-spacing=</b><i>pixels</i></td>
<td>Specify pixels as additional space to put between lines, in pixels.</td>
</tr>
<tr class="tcw">
<td><b>-nbc</b>,<br><b>--no-blinking-cursor</b></td>
<td>Disable the blinking cursor on graphical displays.</td>
</tr>
<tr class="tcw">
<td><b>-D</b>, <b>--basic-display</b></td>
<td>Disable the menu-bar, the tool-bar, the scroll-bars, and tool tips, and turn off the blinking cursor. This can be useful for making a test case that simplifies debugging of display problems.</td>
</tr>
</table>
<p class="tab">The '<b>--xrm</b>' option (see <a href="#Resources">Resources</a>) specifies additional X resource values.</p>
<h2 id="X-Resources">X options and resources</h2>
<p class="tab">You can customize some X-related aspects of Emacs behavior using X resources, as is usual for programs that use X.<br><br>When Emacs is compiled with GTK+ support, the appearance of various graphical widgets, such as the menu-bar, scroll-bar, and dialog boxes, is determined by "GTK resources", which we also describe. When Emacs is built without GTK+ support, the appearance of these widgets is determined by additional X resources.<br><br>On Microsoft Windows, you can customize some of the same aspects using the system Registry (see <a href="#MS_002dWindows-Registry">MS-Windows Registry</a>).</p>
<ul>
<li><a href="#Resources">Resources</a>: Using X resources with Emacs (in general).</li>
<li><a href="#Table-of-Resources">Table of Resources</a>: Table of specific X resources that affect Emacs.</li>
<li><a href="#Lucid-Resources">Lucid Resources</a>: X resources for Lucid menus.</li>
<li><a href="#LessTif-Resources">LessTif Resources</a>: X resources for LessTif and Motif menus.</li>
<li><a href="#GTK-resources">GTK resources</a>: Resources for GTK widgets.</li>
</ul>
<h2 id="Resources">X resources</h2>
<p class="tab">Programs running under the X Window System organize their user options under a hierarchy of classes and resources. You can specify default values for these options in your X resource file, usually named <b>~/.Xdefaults</b> or <b>~/.Xresources</b>. Changes in this file do not take effect immediately, because the X server stores its own list of resources; to update it, use the command <b>xrdb</b>&mdash;for instance, '<b>xrdb ~/.Xdefaults</b>'.<br><br>(Microsoft Windows systems do not support X resource files; on such systems, Emacs looks for X resources in the Windows Registry, first under the key '<b>HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs</b>', which affects only the current user and override the system-wide settings, and then under the key '<b>HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs</b>', which affects all users of the system. The menu and scroll bars are native widgets on Microsoft Windows, so they are only customizable via the system-wide settings in the Display Control Panel. You can also set resources using the '<b>-xrm</b>' command line option, as explained below.)<br><br>Each line in the X resource file specifies a value for one option or for a collection of related options. The order that the lines appear in the file does not matter. Each resource specification consists of a program name and a resource name. Case distinctions are significant in each of these names. Here is an example:</p>
<pre class="tab tcy">emacs.cursorColor: dark green</pre>
<p class="tab">The program name is the name of the executable file that the resource applies. For Emacs, this is normally '<b>emacs</b>'. To specify a definition that applies to all instances of Emacs, regardless of the name of the Emacs executable, use '<b>Emacs</b>'.<br><br>The resource name is the name of a program setting. For instance, Emacs recognizes a '<b>cursorColor</b>' resource that controls the color of the text cursor.<br><br>Resources are grouped into named classes. For instance, the '<b>Foreground</b>' class contains the '<b>cursorColor</b>', '<b>foreground</b>' and '<b>pointerColor</b>' resources (see <a href="#Table-of-Resources">Table of Resources</a>). Instead of using a resource name, you can use a class name to specify the default value for all resources in that class, like this:</p>
<pre class="tab tcy">emacs.Foreground: dark green</pre>
<p class="tab">Emacs does not process X resources at all if you set the variable inhibit-x-resources to a non-nil value. If you invoke Emacs with the '<b>-Q</b>' (or '<b>--quick</b>') command-line option, <b>inhibit-x-resources</b> is automatically set to <b>t</b> (see <a href="#Initial-Options">Options</a>).<br><br>Also, you can use the following command-line options to override the X resources file:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>-name</b> <i>name</i>,<br><b>--name=</b><i>name</i></td>
<td>This option sets the program name of the initial Emacs frame to <i>name</i>. It also sets the title of the initial frame to name. This option does not affect subsequent frames.<br><br>If you don't specify this option, the default is to use the Emacs executable's name as the program name.<br><br>For consistency, '<b>-name</b>' also specifies the name to use for other resource values that do not belong to any particular frame.<br><br>The resources that name Emacs invocations also belong to a class, named '<b>Emacs</b>'. If you write '<b>Emacs</b>' instead of '<b>emacs</b>', the resource applies to all frames in all Emacs jobs, regardless of frame titles and regardless of the name of the executable file.</td>
</tr>
<tr class="tcw">
<td><b>-xrm</b> <i>resource-values</i>,<br><b>--xrm=</b><i>resource-values</i></td>
<td>This option specifies X resource values for the present Emacs job.<br><br><b>resource-values</b> should have the same format that you would use inside a file of X resources. To include multiple resource specifications in <b>resource-values</b>, put a newline between them, only as you would in a file. You can also use '<b>#include "filename"</b>' to include a file full of resource specifications. Resource values specified with '<b>-xrm</b>' take precedence over all other resource specifications.</td>
</tr>
</table>
<h2 id="Table-of-Resources">Table of resources</h2>
<p class="tab">This table lists the X resource names that Emacs recognizes, excluding those that control the appearance of graphical widgets like the menu bar:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>background</b></td>
<td style="width:220px">(class Background)</td>
<td>Background color (see <a href="#Colors">Colors</a>).</td>
</tr>
<tr class="tcw">
<td><b>bitmapIcon</b></td>
<td>(class BitmapIcon)</td>
<td>Tell the window manager to display the Emacs icon if '<b>on</b>'; don't do so if '<b>off</b>'. See <a href="#Icons-X">Icons X</a>, for a description of the icon.</td>
</tr>
<tr class="tcw">
<td><b>borderColor</b></td>
<td>(class BorderColor)</td>
<td>Color of the frame's external border. This has no effect if Emacs is compiled with GTK+ support.</td>
</tr>
<tr class="tcw">
<td><b>borderWidth</b></td>
<td>(class BorderWidth)</td>
<td>Width of the frame's external border, in pixels. This has no effect if Emacs is compiled with GTK+ support.</td>
</tr>
<tr class="tcw">
<td><b>cursorColor</b></td>
<td>(class Foreground)</td>
<td>Text cursor color. If this resource is specified when Emacs starts up, Emacs sets its value as the background color of the cursor face (see <a href="#Faces">Faces</a>).</td>
</tr>
<tr class="tcw">
<td><b>cursorBlink</b></td>
<td>(class CursorBlink)</td>
<td>If the value of this resource is '<b>off</b>' or '<b>false</b>' or '<b>0</b>' at startup, Emacs disables Blink Cursor mode (see <a href="#Cursor-Display">Cursor Display</a>).</td>
</tr>
<tr class="tcw">
<td><b>font</b></td>
<td>(class Font)</td>
<td>Font name for the default face (see <a href="#Fonts">Fonts</a>). You can also specify a fontset name (see <a href="#Fontsets">Fontsets</a>).</td>
</tr>
<tr class="tcw">
<td><b>fontBackend</b></td>
<td>(class FontBackend)</td>
<td>Comma-delimited list of backend(s) to use for drawing fonts, in order of precedence. For instance, the value '<b>x,xft</b>' tells Emacs to draw fonts using the X core font driver, falling back on the Xft font driver if that fails. Normally, leave this resource unset, where Emacs tries using all available font backends.</td>
</tr>
<tr class="tcw">
<td><b>foreground</b></td>
<td>(class Foreground)</td>
<td>Default foreground color for text.</td>
</tr>
<tr class="tcw">
<td><b>geometry</b></td>
<td>(class Geometry)</td>
<td>Window size and position. The value should be a size and position specification, of the same form as in the '<b>-g</b>' or '<b>--geometry</b>' command-line option (see <a href="#Window-Size-X">Window Size X</a>).<br><br>The size applies to all frames in the Emacs session, but the position applies only to the initial Emacs frame (or, in the case of a resource for a specific frame name, only that frame).<br><br>Be careful not to specify this resource as '<b>emacs*geometry</b>', as that may affect individual menus and the main Emacs frame.</td>
</tr>
<tr class="tcw">
<td><b>fullscreen</b></td>
<td>(class Fullscreen)</td>
<td>The desired fullscreen size. The value can be one of <b>fullboth</b>, <b>maximized</b>, <b>fullwidth</b> or <b>fullheight</b>, which correspond to the command-line options '<b>-fs</b>', '<b>-mm</b>', '<b>-fw</b>', and '<b>-fh</b>' (see <a href="#Window-Size-X">Window Size X</a>). Note that this applies to the initial frame only.</td>
</tr>
<tr class="tcw">
<td><b>iconName</b></td>
<td>(class Title)</td>
<td>Name to display in the icon.</td>
</tr>
<tr class="tcw">
<td><b>internalBorder</b></td>
<td>(class BorderWidth)</td>
<td>Width of the internal frame border, in pixels.</td>
</tr>
<tr class="tcw">
<td><b>lineSpacing</b></td>
<td>(class LineSpacing)</td>
<td>Additional space between lines, in pixels.</td>
</tr>
<tr class="tcw">
<td><b>menuBar</b></td>
<td>(class MenuBar)</td>
<td>If the value of this resource is '<b>off</b>' or '<b>false</b>' or '<b>0</b>', Emacs disables Menu Bar mode at startup (see <a href="#Menu-Bars">Menu Bars</a>).</td>
</tr>
<tr class="tcw">
<td><b>minibuffer</b></td>
<td>(class Minibuffer)</td>
<td>If '<b>none</b>', Emacs does not make a minibuffer in this frame; it uses a separate minibuffer frame instead.</td>
</tr>
<tr class="tcw">
<td><b>paneFont</b></td>
<td>(class Font)</td>
<td>Font name for menu pane titles, in non-toolkit versions of Emacs.</td>
</tr>
<tr class="tcw">
<td><b>pointerColor</b></td>
<td>(class Foreground)</td>
<td>Color of the mouse cursor. This has no effect in many graphical desktop environments, as they do not let Emacs change the mouse cursor this way.</td>
</tr>
<tr class="tcw">
<td><b>privateColormap</b></td>
<td>(class PrivateColormap)</td>
<td>If '<b>on</b>', use a private color map, in the case where the "default visual" of class PseudoColor and Emacs uses it.</td>
</tr>
<tr class="tcw">
<td><b>reverseVideo</b></td>
<td>(class ReverseVideo)</td>
<td>Switch foreground and background default colors if '<b>on</b>', use colors as specified if '<b>off</b>'.</td>
</tr>
<tr class="tcw">
<td><b>screenGamma</b></td>
<td>(class ScreenGamma)</td>
<td>Gamma correction for colors, equivalent to the frame parameter <b>screen-gamma</b>.</td>
</tr>
<tr class="tcw">
<td><b>scrollBarWidth</b></td>
<td>(class ScrollBarWidth)</td>
<td>The scroll bar width in pixels, equivalent to the frame parameter <b>scroll-bar-width</b>. Do not set this resource if Emacs is compiled with GTK+ support.</td>
</tr>
<tr class="tcw">
<td><b>selectionFont</b></td>
<td>(class SelectionFont)</td>
<td>Font name for pop-up menu items, in non-toolkit versions of Emacs. (For toolkit versions, see <a href="#Lucid-Resources">Lucid Resources</a>, also see <a href="#LessTif-Resources">LessTif Resources</a>.)</td>
</tr>
<tr class="tcw">
<td><b>selectionTimeout</b></td>
<td>(class SelectionTimeout)</td>
<td>Number of milliseconds to wait for a selection reply. If the selection owner doesn't reply in this time, we give up. A value of 0 means wait as long as necessary.</td>
</tr>
<tr class="tcw">
<td><b>synchronous</b></td>
<td>(class Synchronous)</td>
<td>Run Emacs in synchronous mode if '<b>on</b>'. Synchronous mode is useful for debugging X problems.</td>
</tr>
<tr class="tcw">
<td><b>title</b></td>
<td>(class Title)</td>
<td>Name to display in the title bar of the initial Emacs frame.</td>
</tr>
<tr class="tcw">
<td><b>toolBar</b></td>
<td>(class ToolBar)</td>
<td>If the value of this resource is '<b>off</b>' or '<b>false</b>' or '<b>0</b>', Emacs disables Tool Bar mode at startup (see <a href="#Tool-Bars">Tool Bars</a>).</td>
</tr>
<tr class="tcw">
<td><b>useXIM</b></td>
<td>(class UseXIM)</td>
<td>Disable use of XIM (X input methods) if '<b>false</b>' or '<b>off</b>'. This is only relevant if your Emacs is built with XIM support. It might be useful to turn off XIM on slow X client/server links.</td>
</tr>
<tr class="tcw">
<td><b>verticalScrollBars</b></td>
<td>(class ScrollBars)</td>
<td>Give frames scroll bars if '<b>on</b>'; don't have scroll bars if '<b>off</b>'.</td>
</tr>
<tr class="tcw">
<td><b>visualClass</b></td>
<td>(class VisualClass)</td>
<td>The visual class for X color display. If specified, the value should start with one of '<b>TrueColor</b>', '<b>PseudoColor</b>', '<b>DirectColor</b>', '<b>StaticColor</b>', '<b>GrayScale</b>', and '<b>StaticGray</b>', followed by '<b>-depth</b>', where depth is the number of color planes.</td>
</tr>
</table>
<p class="tab">You can also use X resources to customize individual Emacs faces (see <a href="#Faces">Faces</a>). For example, setting the resource '<b>face.attributeForeground</b>' is equivalent to customizing the '<b>foreground</b>' attribute of the face face. However, we recommend customizing faces from within Emacs, instead of using X resources. See <a href="#Face-Customization">Face Customization</a>.</p>
<h2 id="Lucid-Resources">Lucid menu and dialog X resources</h2>
<p class="tab">If Emacs is compiled with the X toolkit support using Lucid widgets, you can use X resources to customize the appearance of the menu bar, pop-up menus, and dialog boxes. The resources for the menu bar fall in the '<b>pane.menubar</b>' class (following, as always, either the name of the Emacs executable or '<b>Emacs</b>' for all Emacs invocations). The resources for the pop-up menu are in the '<b>menu*</b>' class. The resources for dialog boxes are in the '<b>dialog*</b>' class.<br><br>For example, to display menu bar entries with the '<b>Courier-12</b>' font (see <a href="#Fonts">Fonts</a>), write this:</p>
<pre class="tab tcy">Emacs.pane.menubar.font: Courier-12</pre>
<p class="tab">Lucid widgets can display multilingual text in your locale. To enable this, specify a fontSet resource instead of a font resource. See <a href="#Fontsets">Fontsets</a>. If both font and fontSet resources are specified, the fontSet resource is used.<br><br>Here is a list of resources for menu bars, pop-up menus, and dialogs:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:190px"><b>font</b></td>
<td>Font for menu item text.</td>
</tr>
<tr class="tcw">
<td><b>fontSet</b></td>
<td>Fontset for menu item text.</td>
</tr>
<tr class="tcw">
<td><b>foreground</b></td>
<td>Foreground color.</td>
</tr>
<tr class="tcw">
<td><b>background</b></td>
<td>Background color.</td>
</tr>
<tr class="tcw">
<td><b>buttonForeground</b></td>
<td>Foreground color for a selected item.</td>
</tr>
<tr class="tcw">
<td><b>horizontalSpacing</b></td>
<td>Horizontal spacing in pixels between items. Default is 3.</td>
</tr>
<tr class="tcw">
<td><b>verticalSpacing</b></td>
<td>Vertical spacing in pixels between items. Default is 2.</td>
</tr>
<tr class="tcw">
<td><b>arrowSpacing</b></td>
<td>Horizontal spacing between the arrow (which indicates a submenu) and the associated text. Default is 10.</td>
</tr>
<tr class="tcw">
<td><b>shadowThickness</b></td>
<td>Thickness of shadow lines for 3D buttons, arrows, and other graphical elements. Default is 1.</td>
</tr>
<tr class="tcw">
<td><b>margin</b></td>
<td>Margin of the menu bar, in characters. Default is 1.</td>
</tr>
</table>
<h2 id="LessTif-Resources">LessTif menu X resources</h2>
<p class="tab">If Emacs is compiled with the X toolkit support using LessTif or Motif widgets, you can use X resources to customize the appearance of the menu bar, pop-up menus, and dialog boxes. However, the resources are organized differently from Lucid widgets.<br><br>The resource names for the menu bar are in the '<b>pane.menubar</b>' class, and they must be specified in this form:</p>
<pre class="tab tcy">Emacs.pane.menubar.subwidget.resource: value</pre>
<p class="tab">For pop-up menus, the resources are in the '<b>menu*</b>' class, instead of '<b>pane.menubar</b>'. For dialog boxes, they are in '<b>dialog</b>'. In each case, each menu string is a subwidget; the subwidget's name is the same as the menu item string. For example, the '<b>File</b>' menu in the menu bar is a subwidget named '<b>emacs.pane.menubar.File</b>'.<br><br>Typically, you want to specify the same resources for the whole menu bar. To do this, use '<b>*</b>' instead of a specific subwidget name. For example, to specify the font '<b>8x16</b>' for all menu bar items, including submenus, write this:</p>
<pre class="tab tcy">Emacs.pane.menubar.*.fontList: 8x16</pre>
<p class="tab">Each item in a submenu also has its own name for X resources; for example, the '<b>File</b>' submenu has an item named '<b>Save (current buffer)</b>'. A resource specification for a submenu item looks like this:</p>
<pre class="tab tcy">emacs.pane.menubar.popup_*.menu.item.resource: value</pre>
<p class="tab">For example, here's how to specify the font for the '<b>Save (current buffer)</b>' item:</p>
<pre class="tab tcy">Emacs.pane.menubar.popup_*.File.Save (current buffer).fontList: 8x16</pre>
<p class="tab">For an item in a second-level submenu, such as '<b>Complete Word</b>' under '<b>Spell Checking</b>' under '<b>Tools</b>', the resource fits this template:</p>
<pre class="tab tcy">Emacs.pane.menubar.popup_*.popup_*.menu.resource: value</pre>
<p class="tab">For example,</p>
<pre class="tab tcy">Emacs.pane.menubar.popup_*.popup_*.Spell Checking.Complete Word: value</pre>
<p class="tab">(This should be one long line.)<br><br>If you want the submenu items to look different from the menu bar itself, you must first specify the resource for all of them, then override the value for submenus alone. Here is an example:</p>
<pre class="tab tcy">Emacs.pane.menubar.*.fontList: 8x16 Emacs.pane.menubar.popup_*.fontList: 8x16</pre>
<p class="tab">To specify resources for the LessTif file-selection box, use '<b>fsb*</b>', like this:</p>
<pre class="tab tcy">Emacs.fsb*.fontList: 8x16</pre>
<p class="tab">Here is a list of resources for LessTif menu bars and pop-up menus:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>armColor</b></td>
<td>The color to show in an armed button.</td>
</tr>
<tr class="tcw">
<td><b>fontList</b></td>
<td>The font to use.</td>
</tr>
<tr class="tcw">
<td><b>marginBottom</b>, <b>marginHeight</b>, <b>marginLeft</b>, <b>marginRight</b>, <b>marginTop</b>, <b>marginWidth</b></td>
<td>Amount of space to leave around the item, in the border.</td>
</tr>
<tr class="tcw">
<td><b>borderWidth</b></td>
<td>The width of the border around the menu item, on all sides.</td>
</tr>
<tr class="tcw">
<td><b>shadowThickness</b></td>
<td>The width of the border shadow.</td>
</tr>
<tr class="tcw">
<td><b>bottomShadowColor</b></td>
<td>The color for the border shadow, on the bottom and the right.</td>
</tr>
<tr class="tcw">
<td><b>topShadowColor</b></td>
<td>The color for the border shadow, on the top and the left.</td>
</tr>
</table>
<h2 id="GTK-resources">GTK resources</h2>
<p class="tab">If Emacs is compiled with GTK+ toolkit support, the simplest way to customize its GTK+ widgets (e.g., menus, dialogs, tool bars and scroll bars) is to choose an appropriate GTK+ theme, for example with the GNOME theme selector.<br><br>In GTK+ version 2, you can also use GTK+ resources to customize the appearance of GTK+ widgets used by Emacs. These resources are specified in either the file <b>~/.emacs.d/gtkrc</b> (for Emacs-specific GTK+ resources), or <b>~/.gtkrc-2.0</b> (for general GTK+ resources). We recommend using <b>~/.emacs.d/gtkrc</b>, as GTK+ seems to ignore <b>~/.gtkrc-2.0</b> when running GConf with GNOME. Note, however, that some GTK themes may override customizations in <b>~/.emacs.d/gtkrc</b>; there is nothing we can do about this. GTK+ resources do not affect aspects of Emacs unrelated to GTK+ widgets, such as fonts and colors in the main Emacs window; those are governed by normal X resources (see <a href="#Resources">Resources</a>).<br><br>The following sections describe how to customize GTK+ resources for Emacs. For details about GTK+ resources, see the GTK+ API document at <a href="https://developer.gnome.org/gtk2/stable/gtk2-Resource-Files.html" class="external">developer.gnome.org</a>.<br><br>In GTK+ version 3, GTK+ resources are replaced by a completely different system. The appearance of GTK+ widgets is now determined by <a href="/jargon/c/css.htm">CSS</a>-like style files: <b>gtk-3.0/gtk.css</b> in the GTK+ installation directory, and <b>~/.themes/theme/gtk-3.0/gtk.css</b> for local style settings (where theme is the name of the current GTK+ theme). Therefore, the description of GTK+ resources in this section does not apply to GTK+ 3. For details about the GTK+ 3 styling system, see <a href="https://developer.gnome.org/gtk3/3.0/GtkCssProvider.html" class="external">developer.gnome.org</a>.</p>
<ul>
<li><a href="#GTK-Resource-Basics">GTK Resource Basics</a>: Basic usage of GTK+ resources.</li>
<li><a href="#GTK-Widget-Names">GTK Widget Names</a>: How GTK+ widgets are named.</li>
<li><a href="#GTK-Names-in-Emacs">GTK Names in Emacs</a>: GTK widgets used by Emacs.</li>
<li><a href="#GTK-styles">GTK styles</a>: What can be customized in a GTK widget</li>
</ul>
<h2 id="GTK-Resource-Basics">GTK resources basics</h2>
<p class="tab">In a GTK+ 2 resource file (usually <b>~/.emacs.d/gtkrc</b>), the simplest kinds of resource settings assign a value to a variable. For example, putting the following line in the resource file changes the font on all GTK+ widgets to '<b>courier-12</b>':</p>
<pre class="tab tcy">gtk-font-name = "courier 12"</pre>
<p class="tab">Note that in this case the font name must be supplied as a GTK font pattern (also called a Pango font name), not as a Fontconfig-style font name or XLFD. See <a href="#Fonts">Fonts</a>.<br><br>To customize widgets you first define a style, and then apply the style to the widgets. Here is an example that sets the font for menus ('<b>#</b>' characters indicate <a href="/jargon/c/comment.htm">comments</a>):</p>
<pre class="tab tcy"># Define the style 'my_style'.
style "my_style"
{
  font_name = "helvetica bold 14"
}
# Specify that widget type '*emacs-menuitem*' uses 'my_style'.
widget "*emacs-menuitem*" style "my_style"
</pre>
<p class="tab">The widget name in this example contains wildcards, so the style is applied to all widgets matching '<b>*emacs-menuitem*</b>'. The widgets are named by the way they are contained, from the outer widget to the inner widget. Here is another example that applies '<b>my_style</b>' specifically to the Emacs menu bar:</p>
<pre class="tab">widget "Emacs.pane.menubar.*" style "my_style"</pre>
<p class="tab">Here is a more elaborate example, showing how to change the parts of the scroll bar:</p>
<pre class="tab">style "scroll"
{
  fg[NORMAL] = "red"     # Arrow color.
  bg[NORMAL] = "yellow"  # Thumb and background around arrow.
  bg[ACTIVE] = "blue"    # Trough color.
  bg[PRELIGHT] = "white" # Thumb color when the mouse is over it.
}
widget "*verticalScrollBar*" style "scroll"
</pre>
<h2 id="GTK-Widget-Names">GTK widget names</h2>
<p class="tab">A GTK+ widget is specified by a widget name and a widget class. The widget name refers to a specific widget (e.g., '<b>emacs-menuitem</b>'), while the widget class refers to a collection of similar widgets (e.g., '<b>GtkMenuItem</b>'). A widget always has a class, but need not have a name.<br><br>Absolute names are sequences of widget names or widget classes, corresponding to hierarchies of widgets embedded within other widgets. For example, if a GtkWindow named top contains a GtkVBox named box, which in turn contains a GtkMenuBar called menubar, the absolute class name of the menu-bar widget is <b>GtkWindow.GtkVBox.GtkMenuBar</b>, and its absolute widget name is <b>top.box.menubar</b>.<br><br>GTK+ resource files can contain two types of commands for specifying widget appearances:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:140px"><b>widget</b></td>
<td>Specifies a style for widgets based on the class name, or only the class.</td>
</tr>
<tr class="tcw">
<td><b>widget_class</b></td>
<td>Specifies a style for widgets based on the class name.</td>
</tr>
</table>
<p class="tab">See the previous subsection for examples of using the widget command; the <b>widget_class</b> command is used similarly. Note that the widget name/class and the style must be enclosed in double-quotes, and these commands must be at the top level in the GTK+ resource file.<br><br>As previously noted, you may specify a widget name or class with shell wildcard syntax: '<b>*</b>' matches zero or more characters and '<b>?</b>' matches one character. This example assigns a style to all widgets:</p>
<pre class="tab tcy">widget "*" style "my_style"</pre>
<h2 id="GTK-Names-in-Emacs">GTK widget names in Emacs</h2>
<p class="tab">The GTK+ widgets used by an Emacs frame are listed below:</p>
<pre class="tab tcy">Emacs (class GtkWindow)
    pane (class GtkVBox)
	menubar (class GtkMenuBar)
	    [menu item widgets]
[unnamed widget] (class GtkHandleBox)
    emacs-toolbar (class GtkToolbar)
	[tool bar item widgets]
emacs (class GtkFixed)
    verticalScrollBar (class GtkVScrollbar)</pre>
<p class="tab">The contents of Emacs windows are drawn in the emacs widget. Note that even if there are multiple Emacs windows, each scroll bar widget is named <b>verticalScrollBar</b>.<br><br>For example, here are two different ways to set the menu bar style:</p>
<pre class="tab tcy">widget "Emacs.pane.menubar.*" style "my_style"
widget_class "GtkWindow.GtkVBox.GtkMenuBar.*" style "my_style"</pre>
<p class="tab">For GTK+ dialogs, Emacs uses a widget named <b>emacs-dialog</b>, of class <b>GtkDialog</b>. For file selection, Emacs uses a widget named <b>emacs-filedialog</b>, of class <b>GtkFileSelection</b>.<br><br>Because the widgets for pop-up menus and dialogs are free-standing windows and not "contained" in the Emacs widget, their GTK+ absolute names do not start with '<b>Emacs</b>'. To customize these widgets, use wildcards like this:</p>
<pre class="tab tcy">widget "*emacs-dialog*" style "my_dialog_style"
widget "*emacs-filedialog* style "my_file_style"
widget "*emacs-menuitem* style "my_menu_style"</pre>
<p class="tab">If you want to apply a style to all menus in Emacs, use this:</p>
<pre class="tab tcy">widget_class "*Menu*" style "my_menu_style"</pre>
<h2 id="GTK-styles">GTK styles</h2>
<p class="tab">Here is an example of two GTK+ style declarations:</p>
<pre class="tab tcy">pixmap_path "/usr/share/pixmaps:/usr/include/X11/pixmaps"
style "default"
{
  font_name = "helvetica 12"
  bg[NORMAL] = { 0.83, 0.80, 0.73 }
  bg[SELECTED] = { 0.0, 0.55, 0.55 }
  bg[INSENSITIVE] = { 0.77, 0.77, 0.66 }
  bg[ACTIVE] = { 0.0, 0.55, 0.55 }
  bg[PRELIGHT] = { 0.0, 0.55, 0.55 }
  fg[NORMAL] = "black"
  fg[SELECTED] = { 0.9, 0.9, 0.9 }
  fg[ACTIVE] = "black"
  fg[PRELIGHT] = { 0.9, 0.9, 0.9 }
  base[INSENSITIVE] = "#777766"
  text[INSENSITIVE] = { 0.60, 0.65, 0.57 }
  bg_pixmap[NORMAL] = "background.xpm"
  bg_pixmap[INSENSITIVE] = "background.xpm"
  bg_pixmap[ACTIVE] = "background.xpm"
  bg_pixmap[PRELIGHT] = "&lt;none&gt;"
}
style "ruler" = "default"
{
  font_name = "helvetica 8"
}
</pre>
<p class="tab">The style '<b>ruler</b>' inherits from '<b>default</b>'. This way you can build on existing styles. The syntax for fonts and colors is described below.<br><br>As this example shows, it is possible to specify several values for foreground and background depending on the widget's state. The possible states are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>NORMAL</b></td>
<td>This is the default state for widgets.</td>
</tr>
<tr class="tcw">
<td style="width:140px"><b>ACTIVE</b></td>
<td>This is the state for a widget that is ready to do something. It is also for the trough of a scroll bar, i.e., bg[ACTIVE] = "red" sets the scroll bar trough to red. Buttons that are pressed but not released yet ("armed") are in this state.</td>
</tr>
<tr class="tcw">
<td><b>PRELIGHT</b></td>
<td>This is the state for a widget that is manipulated, when the mouse pointer is over it&mdash;for example when the mouse is over the thumb in the scroll bar or over a menu item. When the mouse is over a button that is not pressed, the button is in this state.</td>
</tr>
<tr class="tcw">
<td><b>SELECTED</b></td>
<td>This is the state for data that is selected by the user. It can be selected text or items selected in a list. This state is not used in Emacs.</td>
</tr>
<tr class="tcw">
<td><b>INSENSITIVE</b></td>
<td>This is the state for widgets that are visible, but they are not manipulated in the usual way&mdash;for example, buttons that are not pressed, and disabled menu items. To display disabled menu items in yellow, use fg[INSENSITIVE] = "yellow".</td>
</tr>
</table>
<p class="tab">Here are the things that go in a style declaration:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>bg[state] =</b> <i>color</i></td>
<td>This specifies the background color for the widget. Note that editable text doesn't use bg; it uses base instead.</td>
</tr>
<tr class="tcw">
<td><b>base[state] =</b> <i>color</i></td>
<td>This specifies the background color for editable text. In Emacs, this color is used for the background of the text fields in the file dialog.</td>
</tr>
<tr class="tcw">
<td><b>bg_pixmap[state] =</b> <i>"pixmap"</i></td>
<td>This specifies an image background (instead of a background color). pixmap should be the image file name. GTK can use many image file formats, including XPM, XBM, GIF, JPEG and PNG. If you want a widget to use the same image as its parent, use '<b>&lt;parent&gt;</b>'. If you don't want any image, use '<b>&lt;none&gt;</b>'. '<b>&lt;none&gt;</b>' is the way to cancel a background image inherited from a parent style.<br><br>You can't specify the file by its absolute file name. GTK looks for the pixmap file in directories specified in pixmap_path. pixmap_path is a colon-separated list of directories within double quotes, specified at the top level in a gtkrc file (i.e., not inside a style definition; see example above):<br><br><pre class="tcy">pixmap_path "/usr/share/pixmaps:/usr/include/X11/pixmaps"</pre></td>
</tr>
<tr class="tcw">
<td><b>fg[state] =</b> <i>color</i></td>
<td>This specifies the foreground color for widgets to use. It is the color of text in menus and buttons, and the color for the arrows in the scroll bar. For editable text, use text.</td>
</tr>
<tr class="tcw">
<td><b>text[state] =</b> <i>color</i></td>
<td>This is the color for editable text. In Emacs, this color is used for the text fields in the file dialog.</td>
</tr>
<tr class="tcw">
<td><b>font_name =</b> <i>"font"</i></td>
<td>This specifies the font for text in the widget. Font is a GTK-style (or Pango) font name, like '<b>Sans Italic 10</b>'. See Fonts. The names are case insensitive.</td>
</tr>
</table>
<p class="tab">There are three ways to specify a color: a color name, an RGB triplet, or a GTK-style RGB triplet. <a href="#Colors">See Colors</a>, for a description of color names and RGB triplets. Color names should be enclosed with double quotes, e.g., '<b>"red"</b>'. RGB triplets should be written without double quotes, e.g., '<b>#ff0000</b>'. GTK-style RGB triplets have the form { r, g, b }, where r, g and b are either integers in the range 0&ndash;65535 or floats in the range 0.0&ndash;1.0.</p>
<h2 id="Microsoft-Windows">Emacs and Microsoft Windows/MS-DOS</h2>
<p class="tab">This section describes peculiarities of using Emacs on Microsoft Windows. Some of these peculiarities are also relevant to Microsoft's older MS-DOS. However, Emacs features that are relevant only to MS-DOS are described in a separate section.<br><br>The behavior of Emacs on Microsoft Windows is reasonably similar to what is documented in the rest of the manual, including support for long file names, multiple frames, scroll bars, mouse menus, and subprocesses. However, a few special considerations apply, and they are described here.</p>
<ul>
<li><a href="#Windows-Startup">Windows Startup</a>: How to start Emacs on Windows.</li>
<li><a href="#Text-and-Binary">Text and Binary</a>: Text files use CRLF to terminate lines.</li>
<li><a href="#Windows-Files">Windows Files</a>: File-name conventions on Windows.</li>
<li><a href="#ls-in-Lisp">ls in Lisp</a>: Emulation of ls for Dired.</li>
<li><a href="#Windows-HOME">Windows HOME</a>: Where Emacs looks for your .emacs and where it starts up.</li>
<li><a href="#Windows-Keyboard">Windows Keyboard</a>: Windows-specific keyboard features.</li>
<li><a href="#Windows-Mouse">Windows Mouse</a>: Windows-specific mouse features.</li>
<li><a href="#Windows-Processes">Windows Processes</a>: Running subprocesses on Windows.</li>
<li><a href="#Windows-Printing">Windows Printing</a>: How to specify the printer on Microsoft Windows.</li>
<li><a href="#Windows-Fonts">Windows Fonts</a>: Specifying fonts on Microsoft Windows.</li>
<li><a href="#Windows-Misc">Windows Misc</a>: Miscellaneous Windows features.</li>
</ul>
<h2 id="Windows-Startup">How to start Emacs on Microsoft Windows</h2>
<p class="tab">There's several ways of starting Emacs on Microsoft Windows:</p>
<ol>
<li>From the desktop shortcut icon: either double-click the left mouse button on the icon, or click once, then press <b>&lt;RET&gt;</b>. The desktop shortcut should specify as its "Target" (in the "Properties" of the shortcut) the full absolute file name of <b>runemacs.exe</b>, not of <b>emacs.exe</b>. This is because <b>runemacs.exe</b> hides the console window that would be created if the target of the shortcut were <b>emacs.exe</b> (which is a console program, as far as Windows is concerned). If you use this method, Emacs starts in the directory specified by the shortcut. To control where that is, right-click the shortcut, select "Properties", and in the "Shortcut" tab modify the "Start in" field to your liking.</li>
<li>From the Command Prompt window, by typing <b>emacs &lt;RET&gt;</b> at the prompt. The Command Prompt window where you did that does not be available for invoking other commands until Emacs exits. In this case, Emacs starts in the current directory of the Windows shell.</li>
<li>From the Command Prompt window, by typing <b>runemacs &lt;RET&gt;</b> at the prompt. The Command Prompt window where you did that is immediately available for invoking other commands. In this case, Emacs starts in the current directory of the Windows shell.</li>
<li>Via <b>emacsclient.exe</b> or <b>emacsclientw.exe</b>, which allow you to invoke Emacs from other programs, and to reuse a running Emacs process for serving editing jobs required by other programs. See <a href="#Emacs-Server">Emacs Server</a>. The difference between <b>emacsclient.exe</b> and <b>emacsclientw.exe</b> is that the former is a console program, while the latter is a Windows GUI program. Both programs wait for Emacs to signal that the editing job is finished, before they exit and return control to the program that invoked them. Which one of them to use in each case depends on the expectations of the program that needs editing services. If that program is itself a console (text-mode) program, use <b>emacsclient.exe</b>, so that any of its messages and prompts appear in the same command window as those of the invoking program. By contrast, if the invoking program is a GUI program, you are better off using <b>emacsclientw.exe</b>, because <b>emacsclient.exe</b> pops up a command window if it's invoked from a GUI program. A notable situation where you would want <b>emacsclientw.exe</b> is when you right-click a file in the Windows Explorer and select "Open With" from the pop-up menu. Use the '<b>--alternate-editor=</b>' or '<b>-a</b>' options if Emacs is not running (or not running as a server) when <b>emacsclient</b> is invoked&mdash;that always give you an editor. When invoked via <b>emacsclient</b>, Emacs starts in the current directory of the program that invoked <b>emacsclient</b>.</li>
</ol>
<p class="tab">Note that, due to limitations of Microsoft Windows, Emacs cannot have both GUI and text-mode frames in the same session. It also cannot open text-mode frames on more than a single Command Prompt window, because each Windows program can have only one console at any given time. For these reasons, if you invoke <b>emacsclient</b> with the <b>-c</b> option, and the Emacs server runs in a text-mode session, Emacs always creates a new text-mode frame in the same Command Prompt window where it was started; a GUI frame is created only if the server runs in a GUI session. Similarly, if you invoke <b>emacsclient</b> with the <b>-t</b> option, Emacs creates a GUI frame if the server runs in a GUI session, or a text-mode frame when the session runs in text mode in a Command Prompt window. See <a href="#emacsclient-Options">Options</a>.</p>
<h2 id="Text-and-Binary">Text files and binary files</h2>
<p class="tab">GNU Emacs uses newline characters to separate text lines. This is the convention used on GNU, Unix, and other <a href="/jargon/p/posix.htm">POSIX</a>-compliant systems.<br><br>By contrast, MS-DOS and MS-Windows normally use <a href="/jargon/c/cr.htm">carriage-return</a> <a href="/jargon/l/lf.htm">linefeed</a>, a two-character sequence, to separate text lines. (Linefeed is the same character as newline.) Therefore, convenient editing of typical files with Emacs requires conversion of these <a href="/jargon/e/eol.htm">end-of-line</a> (EOL) sequences. And that is what Emacs normally does: it converts carriage-return linefeed into newline when reading files, and converts newline into carriage-return linefeed when writing files. The same mechanism that handles conversion of international character codes does this conversion also (see <a href="#Coding-Systems">Coding Systems</a>).<br><br>One consequence of this special format-conversion of most files is that character positions as reported by Emacs (see <a href="#Position-Info">Position Info</a>) do not agree with the file size information known to the operating system.<br><br>Also, if Emacs recognizes from a file's contents that it uses newline rather than carriage-return linefeed as its line separator, it does not perform EOL conversion when reading or writing that file. Thus, you can read and edit files from GNU and Unix systems on MS-DOS with no special effort, and they will retain their Unix-style end-of-line convention after you edit them.<br><br>The mode line indicates whether end-of-line translation was used for the current buffer. If MS-DOS end-of-line translation is in use for the buffer, the MS-Windows build of Emacs displays a backslash '<b>\</b>' after the coding system mnemonic near the beginning of the mode line (see <a href="#Mode-Line">Mode Line</a>). If no EOL translation was performed, the string '<b>(Unix)</b>' is displayed instead of the backslash, to alert you that the file's EOL format is not the usual carriage-return linefeed.<br><br>To visit a file and specify whether it uses DOS-style or Unix-style end-of-line, specify a coding system (see <a href="#Text-Coding">Text Coding</a>). For example, <b>C-x &lt;RET&gt; c unix &lt;RET&gt; C-x C-f foobar.txt</b> visits the file <b>foobar.txt</b> without converting the EOLs; if some line ends with a carriage-return linefeed pair, Emacs displays '<b>^M</b>' at the end of that line. Similarly, you can direct Emacs to save a buffer in a specified EOL format with the <b>C-x &lt;RET&gt; f</b> command. For example, to save a buffer with Unix EOL format, type <b>C-x &lt;RET&gt; f unix &lt;RET&gt; C-x C-s</b>. If you visit a file with DOS EOL conversion, then save it with Unix EOL format, that effectively converts the file to Unix EOL style, like the <a href="/unix/dos2unix.htm">dos2unix</a> program.<br><br>When you use <a href="/jargon/n/nfs.htm">NFS</a>, <a href="/jargon/s/samba.htm">Samba</a>, or some other similar method to access file systems that reside on computers using GNU or Unix systems, Emacs should not perform end-of-line translation on any files in these file systems&mdash;not even when you create a new file. To request this, designate these file systems as untranslated file systems by calling the function <b>add-untranslated-filesystem</b>. It takes one argument: the file system name, including a drive letter and optionally a directory. For example,</p>
<pre class="tab tcy">(add-untranslated-filesystem "Z:")</pre>
<p class="tab">Designates drive Z as an untranslated file system, and</p>
<pre class="tab tcy">(add-untranslated-filesystem "Z:\\foo")</pre>
<p class="tab">Designates directory <b>\foo</b> on drive Z as an untranslated file system.<br><br>Most often you would use <b>add-untranslated-filesystem</b> in your <b>.emacs</b> file, or in <b>site-start.el</b> so that all the users at your site get the benefit of it.<br><br>To countermand the effect of <b>add-untranslated-filesystem</b>, use the function <b>remove-untranslated-filesystem</b>. This function takes one argument, which should be a string only like the one that was used previously with <b>add-untranslated-filesystem</b>.<br><br>Designating a file system as untranslated does not affect character set conversion, only end-of-line conversion. Essentially, it directs Emacs to create new files with the Unix-style convention of using newline at the end of a line. See <a href="#Coding-Systems">Coding Systems</a>.<br><br>Some kinds of files should not be converted at all, because their contents are not really text. Therefore, Emacs on MS-Windows distinguishes certain files as binary files. (This distinction is not part of MS-Windows; it is made by Emacs only.) Binary files include executable programs, compressed archives, etc. Emacs uses the file name to decide whether to treat a file as binary: the variable <b>file-name-buffer-file-type-alist</b> defines the file-name patterns that indicate binary files. If a file name matches one of the patterns for binary files (those whose associations are of the type <b>(pattern . t)</b>), Emacs reads and writes that file using the <b>no-conversion</b> coding system (see <a href="#Coding-Systems">Coding Systems</a>) which turns off all coding-system conversions, not only the EOL conversion. <b>file-name-buffer-file-type-alist</b> includes file-name patterns for files that are known to be Windows-style text files with carriage-return linefeed EOL format, such as CONFIG.SYS; Emacs always writes those files with Windows-style EOLs.<br><br>If a file that belongs to an untranslated file system matches one of the file-name patterns in <b>file-name-buffer-file-type-alist</b>, the EOL conversion is determined by <b>file-name-buffer-file-type-alist</b>.</p>
<h2 id="Windows-Files">File names on Microsoft Windows</h2>
<p class="tab">MS-Windows and MS-DOS normally use a backslash, '<b>\</b>', to separate name units within a file name, instead of the slash used on other systems. Emacs on MS-DOS/MS-Windows permits use of either slash or backslash, and also knows about drive letters in file names.<br><br>On MS-DOS/MS-Windows, file names are case-insensitive, so Emacs by default ignores letter-case in file names during completion.<br><br>The variable <b>w32-get-true-file-attributes</b> controls whether Emacs should issue additional system calls to determine more accurately file attributes in primitives like <b>file-attributes</b> and <b>directory-files-and-attributes</b>. These additional calls are needed to report correct file ownership, link counts and file types for special files such as <a href="/jargon/p/pipe.htm">pipes</a>. Without these system calls, file ownership is attributed to the current user, link counts are always reported as 1, and special files are reported as regular files.<br><br>If the value of this variable is <b>local</b> (the default), Emacs issues these additional system calls only for files on local fixed drives. Any other non-nil value means do this even for removable and remote volumes, where this could potentially slow down Dired and other related features. The value of <b>nil</b> means never issue those system calls. Non-nil values are more useful on NTFS volumes, which support hard links and file security, than on <a href="/jargon/f/fat.htm">FAT, FAT32, and XFAT</a> volumes.</p>
<h2 id="ls-in-Lisp">Emulation of ls on Microsoft Windows</h2>
<p class="tab">Dired normally uses the external program <a href="/jargon/l/ls.htm">ls</a> to produce the directory listing displayed in Dired buffers (see <a href="#Dired">Dired</a>). However, MS-Windows and MS-DOS systems don't come with such a program, although several ports of gnu ls are available. Therefore, Emacs on those systems emulates ls in Lisp, using the <b>ls-lisp.el</b> package. While <b>ls-lisp.el</b> provides a reasonably full emulation of ls, there are some options and features peculiar to that emulation; they are described in this section.<br><br>The ls emulation supports many of the ls switches, but it doesn't support all of them. Here's the list of the switches it does support: <b>-A</b>, <b>-a</b>, <b>-B</b>, <b>-C</b>, <b>-c</b>, <b>-G</b>, <b>-g</b>, <b>-h</b>, <b>-i</b>, <b>-n</b>, <b>-R</b>, <b>-r</b>, <b>-S</b>, <b>-s</b>, <b>-t</b>, <b>-U</b>, <b>-u</b>, and <b>-X</b>. The <b>-F</b> switch is partially supported (it appends the character that classifies the file, but does not prevent <a href="/jargon/s/symblink.htm">symlink</a> following).<br><br>On MS-Windows and MS-DOS, <b>ls-lisp.el</b> is preloaded when Emacs is built, so the Lisp emulation of ls is always used on those platforms. If you have a ported ls, setting <b>ls-lisp-use-insert-directory-program</b> to a non-nil value reverts to using an external program named by the variable <b>insert-directory-program</b>.<br><br>By default, <b>ls-lisp.el</b> uses a case-sensitive sort order for the directory listing it produces; this is so the listing looks the same as on other platforms. If you want that the files be sorted in case-insensitive order, set the variable <b>ls-lisp-ignore-case</b> to a non-nil value.<br><br>By default, files and subdirectories are sorted together, to emulate the behavior of ls. However, native Microsoft Windows and MS-DOS file managers list the directories before the files; if you want that behavior, customize the option <b>ls-lisp-dirs-first</b> to a non-nil value.<br><br>The variable <b>ls-lisp-verbosity</b> controls the file attributes that <b>ls-lisp.el</b> displays. The value should be a list containing one or more of the symbols links, uid, and gid. The links means display the count of different file names that are associated with (a.k.a. links to) the file's data; this is only useful on NTFS volumes. The uid means display the numerical identifier of the user who owns the file. The gid means display the numerical identifier of the file owner's group. The default value is (links uid gid) i.e., all the 3 optional attributes are displayed.<br><br>The variable <b>ls-lisp-emulation</b> controls the flavor of the ls emulation by setting the defaults for the 3 options described above: <b>ls-lisp-ignore-case</b>, <b>ls-lisp-dirs-first</b>, and <b>ls-lisp-verbosity</b>. The value of this option can be one of the following symbols:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>GNU</b>, <b>nil</b></td>
<td>Emulate gnu systems; this is the default. This sets <b>ls-lisp-ignore-case</b> and <b>ls-lisp-dirs-first</b> to <b>nil</b>, and <b>ls-lisp-verbosity</b> to (links uid gid).</td>
</tr>
<tr class="tcw">
<td><b>UNIX</b></td>
<td>Emulate Unix systems. Like <b>GNU</b>, but sets <b>ls-lisp-verbosity</b> to <b>(links uid)</b>.</td>
</tr>
<tr class="tcw">
<td><b>MacOS</b></td>
<td>Emulate MacOS. Sets <b>ls-lisp-ignore-case</b> to <b>t</b>, and <b>ls-lisp-dirs-first</b> and <b>ls-lisp-verbosity</b> to <b>nil</b>.</td>
</tr>
<tr class="tcw">
<td><b>MS-Windows</b></td>
<td>Emulate MS-Windows. Sets <b>ls-lisp-ignore-case</b> and <b>ls-lisp-dirs-first</b> to <b>t</b>, and <b>ls-lisp-verbosity</b> to (links) on Windows NT/2K/XP/2K3 and to <b>nil</b> on Windows 9X. Note that the default emulation is not MS-Windows, even on Windows, as many users of Emacs on those platforms prefer the gnu defaults.</td>
</tr>
</table>
<p class="tab">Any other value of <b>ls-lisp-emulation</b> means the same as GNU. Customizing this option calls the function <b>ls-lisp-set-options</b> to update the 3 dependent options as needed. If you change the value of this variable without using customize after <b>ls-lisp.el</b> is loaded (note that it is preloaded on MS-Windows and MS-DOS), you can call that function manually for the same result.<br><br>The variable <b>ls-lisp-support-shell-wildcards</b> controls how file-name patterns are supported: if it's non-nil (the default), they are treated as shell-style wildcards; otherwise they are treated as Emacs regular expressions.<br><br>The variable <b>ls-lisp-format-time-list</b> defines how to format the date and time of files. The value of this variable is ignored, unless Emacs cannot determine the current locale. (However, if the value of <b>ls-lisp-use-localized-time-format</b> is non-nil, Emacs obeys <b>ls-lisp-format-time-list</b> even if the current locale is available; see below.)<br><br>The value of <b>ls-lisp-format-time-list</b> is a list of 2 strings. The first string is used if the file was modified in the current year, while the second string is used for older files. In each of these two strings you can use '<b>%</b>'-sequences to substitute parts of the time. For example:</p>
<pre class="tab tcy">("%b %e %H:%M" "%b %e %Y")</pre>
<p class="tab">Note that the strings substituted for these '<b>%</b>'-sequences depend on the current locale.<br><br>Normally, Emacs formats the file timestamps in either traditional or ISO-style time format. However, if the value of the variable <b>ls-lisp-use-localized-time-format</b> is non-nil, Emacs formats file timestamps according to what <b>ls-lisp-format-time-list</b> specifies. The '<b>%</b>'-sequences in <b>ls-lisp-format-time-list</b> produce locale-dependent month and day names, which might cause misalignment of columns in Dired display.</p>
<h2 id="Windows-HOME">HOME and startup directories in Windows</h2>
<p class="tab">The Windows equivalent of HOME is the user-specific application data directory. The actual location depends on the Windows version; typical values are <b>C:\Documents and Settings\username\Application Data on Windows 2000/XP/2K3</b>, <b>C:\Users\username\AppData\Roaming</b> on Windows Vista/7/2008, and either <b>C:\WINDOWS\Application Data</b> or <b>C:\WINDOWS\Profiles\username\Application Data</b> on Windows 9X/ME. If this directory does not exist or cannot be accessed, Emacs falls back to <b>C:\</b> as the default value of HOME.<br><br>You can override this default value of HOME by explicitly setting the environment variable HOME to point to any directory on your system. HOME can be set either from the command shell prompt or from '<b>Properties</b>' dialog of '<b>My Computer</b>'. HOME can also be set in the <a href="/jargon/r/registry.htm">system Registry</a>, see <a href="#MS_002dWindows-Registry">MS-Windows Registry</a>.<br><br>For compatibility with older versions of Emacs21, if there is a file named <b>.emacs</b> in <b>C:\</b>, the root directory of drive <b>C:</b>, and HOME is set neither in the environment nor in the Registry, Emacs treats <b>C:\</b> as the default HOME location, and does not look in the application data directory, even if it exists. Note that only <b>.emacs</b> is looked for in <b>C:\</b>; the older name <b>_emacs</b> (see below) is not. This use of <b>C:\.emacs</b> to define HOME is deprecated.<br><br>Whatever the final place is, Emacs sets the internal value of the HOME environment variable to point to it, and it uses that location for other files and directories it normally looks for or creates in your home directory.<br><br>You can always find out what Emacs thinks is your home directory's location by typing <b>C-x d ~/ &lt;RET&gt;</b>. This should present the list of files in the home directory, and show its full name on the first line. Likewise, to visit your init file, type <b>C-x C-f ~/.emacs &lt;RET&gt;</b> (assuming the file's name is <b>.emacs</b>).<br><br>The home directory is where your init file is stored. It can have any name mentioned in <a href="#Init-File">Init File</a>.<br><br>Because MS-DOS does not allow file names with leading dots, and older Windows systems made it hard to create files with such names, the Windows port of Emacs supports an init file name <b>_emacs</b>, if such a file exists in the home directory and .emacs does not. This name is considered obsolete.</p>
<h2 id="Windows-Keyboard">Keyboard usage on Microsoft Windows</h2>
<p class="tab">This section describes the Windows-specific features related to keyboard input in Emacs.<br><br>Many key combinations (known as "keyboard shortcuts") that have conventional uses in MS-Windows programs conflict with traditional Emacs key bindings. (These Emacs key bindings were established years before Microsoft was founded.) Examples of conflicts include <b>C-c</b>, <b>C-x</b>, <b>C-z</b>, <b>C-a</b>, and <b>W-&lt;SPC&gt;</b>. You can redefine some of them with meanings more like the MS-Windows meanings by enabling CUA Mode (see <a href="#CUA-Bindings">CUA Bindings</a>).<br><br>The <b>&lt;F10&gt;</b> key on Windows activates the menu bar in a way that makes it possible to use the menus without a mouse. In this mode, the arrow keys traverse the menus, <b>&lt;RET&gt;</b> selects a highlighted menu item, and <b>&lt;ESC&gt;</b> closes the menu.<br><br>By default, the key labeled <b>&lt;Alt&gt;</b> is mapped as the <b>&lt;META&gt;</b> key. If you want it to produce the Alt modifier instead, set the variable <b>w32-alt-is-meta</b> to a <b>nil</b> value.<br><br>MS-Windows reserves certain key combinations, such as <b>Alt-&lt;TAB&gt;</b>, for its own use. These key combinations are intercepted by the system before Emacs can see them. You can use the <b>w32-register-hot-key</b> function to allow a key sequence to be seen by Emacs instead of being grabbed by Windows. This functions registers a key sequence as a hot key, overriding the special meaning of that key sequence for Windows. (MS-Windows is told that the key sequence is a hot key only when one of the Emacs windows has focus, so that the special keys still have their usual meaning for other Windows applications.)<br><br>The argument to <b>w32-register-hot-key</b> must be a single key, with or without modifiers, in vector form that would be acceptable to <b>define-key</b>. The meta modifier is interpreted as the <b>&lt;Alt&gt;</b> key if <b>w32-alt-is-meta</b> is <b>t</b> (the default), and the hyper modifier is always interpreted as the Windows key (usually labeled with <b>&lt;start&gt;</b> and the Windows logo). If the function succeeds in registering the key sequence, it returns the hotkey ID, a number; otherwise it returns <b>nil</b>. For example, <b>(w32-register-hot-key [M-tab])</b> lets you use <b>M-TAB</b> normally in Emacs; for instance, to complete the word or symbol at point at top level, or to complete the current search string against previously sought strings during incremental search.<br><br>The function <b>w32-unregister-hot-key</b> reverses the effect of <b>w32-register-hot-key</b> for its argument key sequence.<br><br>By default, the <b>&lt;CapsLock&gt;</b> key only affects normal character keys (it converts lower-case characters to their upper-case variants). However, if you set the variable <b>w32-capslock-is-shiftlock</b> to a non-nil value, the <b>&lt;CapsLock&gt;</b> key affects non-character keys as well, as if you pressed the <b>&lt;Shift&gt;</b> key while typing the non-character key.<br><br>If the variable <b>w32-enable-caps-lock</b> is set to a <b>nil</b> value, the <b>&lt;CapsLock&gt;</b> key produces the symbol <b>capslock</b> instead of the shifted version of they keys. The default value is <b>t</b>.<br><br>Similarly, if <b>w32-enable-num-lock</b> is <b>nil</b>, the <b>&lt;NumLock&gt;</b> key produces the symbol <b>kp-numlock</b>. The default is <b>t</b>, which causes <b>&lt;NumLock&gt;</b> to work as expected: toggle the meaning of the keys on the numeric keypad.<br><br>The variable w32-apps-modifier controls the effect of the &lt;Apps&gt; key (usually located between the right &lt;Alt&gt; and the right &lt;Ctrl&gt; keys). Its value can be one of the symbols hyper, super, meta, alt, control, or shift for the respective modifier, or nil to appear as the key apps. The default is nil. The variable <b>w32-lwindow-modifier</b> determines the effect of the left Windows key (usually labeled with <b>&lt;start&gt;</b> and the Windows logo). If its value is <b>nil</b> (the default), the key produces the symbol lwindow. Setting it to one of the symbols <b>hyper</b>, <b>super</b>, <b>meta</b>, <b>alt</b>, <b>control</b>, or <b>shift</b> produces the respective modifier. A similar variable <b>w32-rwindow-modifier</b> controls the effect of the right Windows key, and <b>w32-scroll-lock-modifier</b> does the same for the <b>&lt;ScrLock&gt;</b> key. If these variables are set to <b>nil</b>, the right Windows key produces the symbol <b>rwindow</b> and <b>&lt;ScrLock&gt;</b> produces the symbol <b>scroll</b>.<br><br>Emacs compiled as a native Windows application normally turns off the Windows feature that tapping the <b>&lt;Alt&gt;</b> key invokes the Windows menu. The reason is that the <b>&lt;Alt&gt;</b> serves as <b>&lt;META&gt;</b> in Emacs. When using Emacs, users often press the <b>&lt;META&gt;</b> key temporarily and then change their minds; if this has the effect of bringing up the Windows menu, it alters the meaning of subsequent commands. Many users find this frustrating.<br><br>You can re-enable Windows's default handling of tapping the <b>&lt;Alt&gt;</b> key by setting <b>w32-pass-alt-to-system</b> to a non-nil value.<br><br>The variables <b>w32-pass-lwindow-to-system</b> and <b>w32-pass-rwindow-to-system</b> determine whether the respective keys are passed to Windows or swallowed by Emacs. If the value is <b>nil</b>, the respective key is silently swallowed by Emacs, otherwise it is passed to Windows. The default is <b>t</b> for both of these variables. Passing each of these keys to Windows produces its normal effect: for example, <b>&lt;Lwindow&gt;</b> opens the Start menu, etc.<br><br>The variable <b>w32-recognize-altgr</b> controls whether the <b>&lt;AltGr&gt;</b> key (if it exists on your keyboard), or its equivalent, the combination of the right <b>&lt;Alt&gt;</b> and left <b>&lt;Ctrl&gt;</b> keys pressed together, is recognized as the <b>&lt;AltGr&gt;</b> key. The default is <b>t</b>, which means these keys produce <b>AltGr</b>; setting it to <b>nil</b> causes <b>&lt;AltGr&gt;</b> or the equivalent key combination to be interpreted as the combination of <b>&lt;Ctrl&gt;</b> and <b>&lt;META&gt;</b> modifiers.</p>
<h2 id="Windows-Mouse">Mouse usage on Microsoft Windows</h2>
<p class="tab">This section describes the Windows-specific variables related to the mouse.<br><br>The variable <b>w32-mouse-button-tolerance</b> specifies the time interval, in milliseconds, for faking middle mouse button press on 2-button mice. If both mouse buttons are depressed in this time interval, Emacs generates a middle mouse button click event instead of a double-click event on one of the buttons.<br><br>If the variable <b>w32-pass-extra-mouse-buttons-to-system</b> is non-nil, Emacs passes the fourth and fifth mouse buttons to Windows.<br><br>The variable <b>w32-swap-mouse-buttons</b> controls which of the 3 mouse buttons generates the <b>mouse-2</b> events. When it is <b>nil</b> (the default), the middle button generates <b>mouse-2</b> and the right button generates <b>mouse-3</b> events. If this variable is non-nil, the roles of these two buttons are reversed.</p>
<h2 id="Windows-Processes">Subprocesses on Windows 9X/ME and Windows NT/2K/XP</h2>
<p class="tab">Emacs compiled as a native Windows application (as opposed to the DOS version) includes full support for asynchronous subprocesses. In the Windows version, synchronous and asynchronous subprocesses work fine on both Windows 9X/ME and Windows NT/2K/XP as long as you run only 32-bit Windows applications. However, when you run a DOS application in a subprocess, you may encounter problems or be unable to run the application at all; and if you run two DOS applications at the same time in two subprocesses, you may have to reboot your system.<br><br>If you run only one DOS application subprocess, the subprocess should work as expected as long as it is "well-behaved" and does not perform direct screen access or other unusual actions. If you have a CPU monitor application, your machine appears to be 100% busy even when the DOS application is idle, but this is only an artifact of the way CPU monitors measure processor load.<br><br>You must terminate the DOS application before you start any other DOS application in a different subprocess. Emacs cannot interrupt or terminate a DOS subprocess. The only way you can terminate such a subprocess is by giving it a command that tells its program to exit.<br><br>If you attempt to run two DOS applications at the same time in separate subprocesses, the second one that is started is suspended until the first one finishes, even if either or both of them are asynchronous.<br><br>If you can go to the first subprocess, and tell it to exit, the second subprocess should continue normally. However, if the second subprocess is synchronous, Emacs itself is hung until the first subprocess finishes. If it does not finish without user input, then you have no choice but to reboot if you are running on Windows 9X. If you are running on Windows NT/2K/XP, you can use a process viewer application to kill the appropriate instance of NTVDM instead (this terminates both DOS subprocesses).<br><br>If you have to reboot Windows 9X in this situation, do not use the Shutdown command on the Start menu; that usually hangs the system. Instead, type <b>Ctrl-Alt-Del</b> and then choose Shutdown.<br><br>The variable <b>w32-quote-process-args</b> controls how Emacs quotes the process arguments. Non-nil means quote with the <b>"</b> character. If the value is a character, Emacs uses that character to escape any quote characters that appear; otherwise it chooses a suitable escape character based on the type of the program.<br><br>The function <b>w32-shell-execute</b> can be useful for writing customized commands that run MS-Windows applications registered to handle a certain standard Windows operation for a specific type of document or file. This function is a wrapper around the Windows ShellExecute API. See the MS-Windows API documentation for more details.</p>
<h2 id="Windows-Printing">Printing and Microsoft Windows</h2>
<p class="tab">Printing commands, such as <b>lpr-buffer</b> (see <a href="#Printing">Printing</a>) and <b>ps-print-buffer</b> (see <a href="#PostScript">PostScript</a>) work in MS-DOS and MS-Windows by sending the output to one of the printer ports, if a POSIX-style lpr program is unavailable. The same Emacs variables control printing on all systems, but in some cases they have different default values on MS-DOS and MS-Windows.<br><br>Emacs on Microsoft Windows attempts to determine your default printer automatically (using the function <b>default-printer-name</b>). But in some rare cases this can fail, or you may want to use a different printer from within Emacs. The rest of this section explains how to tell Emacs which printer to use.<br><br>If you want to use your local printer, then set the Lisp variable <b>lpr-command</b> to <b>""</b> (its default value on Windows) and <b>printer-name</b> to the name of the printer port&mdash;for example, "PRN", the usual local printer port, or "LPT2", or "COM1" for a serial printer. You can also set <b>printer-name</b> to a file name, where "printed" output is actually appended to that file. If you set printer-name to "NUL", printed output is silently discarded (sent to the system null device).<br><br>You can also use a printer shared by another machine by setting <b>printer-name</b> to the UNC share name for that printer&mdash;for example, "//joes_pc/hp4si". (It doesn't matter whether you use forward slashes or backslashes here.) To find out the names of shared printers, run the command '<b>net view</b>' from the command prompt to obtain a list of servers, and '<b>net view server-name</b>' to see the names of printers (and directories) shared by that server. Alternatively, click the '<b>Network Neighborhood</b>' icon on your desktop, and look for machines that share their printers via the network.<br><br>If the printer doesn't appear in the output of '<b>net view</b>', or if setting printer-name to the UNC share name doesn't produce a hardcopy on that printer, you can use the '<b>net use</b>' command to connect a local print port such as "LPT2" to the networked printer. For example, typing net use LPT2: \\joes_pc\hp4si23 causes Windows to capture the LPT2 port and redirect the printed material to the printer connected to the machine joes_pc. After this command, setting printer-name to "LPT2" should produce the hardcopy on the networked printer.<br><br>With some varieties of Windows network software, you can instruct Windows to capture a specific printer port such as "LPT2", and redirect it to a networked printer via the <b>Control Panel-&gt;Printers</b> applet instead of '<b>net use</b>'.<br><br>If you set <b>printer-name</b> to a file name, it's best to use an absolute file name. Emacs changes the working directory according to the default directory of the current buffer, so if the file name in printer-name is relative, you end up with several such files, each one in the directory of the buffer from which the printing was done.<br><br>If the value of <b>printer-name</b> is correct, but printing does not produce the hardcopy on your printer, your printer may not support printing plain text (some cheap printers omit this functionality). In that case, try the PostScript print commands, described below.<br><br>The commands <b>print-buffer</b> and <b>print-region</b> call the pr program, or use special switches to the lpr program, to produce headers on each printed page. MS-DOS and MS-Windows don't normally have these programs, so by default, the variable <b>lpr-headers-switches</b> is set so that the requests to print page headers are silently ignored. Thus, <b>print-buffer</b> and <b>print-region</b> produce the same output as <b>lpr-buffer</b> and <b>lpr-region</b>, respectively. If you do have a suitable <b>pr</b> program (for example, from GNU Coreutils), set <b>lpr-headers-switches</b> to <b>nil</b>; Emacs then calls pr to produce the page headers, and print the resulting output as specified by <b>printer-name</b>.<br><br>Finally, if you do have a lpr work-alike, you can set the variable <b>lpr-command</b> to "lpr". Then Emacs uses lpr for printing, as on other systems. (If the name of the program isn't lpr, set <b>lpr-command</b> to the appropriate value.) The variable <b>lpr-switches</b> has its standard meaning when <b>lpr-command</b> is not <b>""</b>. If the variable <b>printer-name</b> has a string value, it is used as the value for the <b>-P</b> option to lpr, as on Unix.<br><br>A parallel set of variables, <b>ps-lpr-command</b>, <b>ps-lpr-switches</b>, and <b>ps-printer-name</b> (see <a href="#PostScript-Variables">PostScript Variables</a>), defines how PostScript files should be printed. These variables are used in the same way as the corresponding variables described above for non-PostScript printing. Thus, the value of <b>ps-printer-name</b> is used as the name of the device (or file) where PostScript output is sent, only as <b>printer-name</b> is used for non-PostScript printing. (There are two distinct sets of variables in case you have two printers attached to two different ports, and only one of them is a PostScript printer.)<br><br>The default value of the variable <b>ps-lpr-command</b> is <b>""</b>, which causes PostScript output to be sent to the printer port specified by <b>ps-printer-name</b>; but <b>ps-lpr-command</b> can also be set to the name of a program that accepts PostScript files. Thus, if you have a non-PostScript printer, you can set this variable to the name of a PostScript interpreter program (such as Ghostscript). Any switches that need to be passed to the interpreter program are specified using <b>ps-lpr-switches</b>. (If the value of <b>ps-printer-name</b> is a string, it is added to the list of switches as the value for the <b>-P</b> option. This is probably only useful if you are using lpr, so when using an interpreter, you would set <b>ps-printer-name</b> to something other than a string so it is ignored.)<br><br>For example, to use Ghostscript for printing on the system's default printer, put this in your <b>.emacs</b> file:</p>
<pre class="tab tcy">(setq ps-printer-name t)
(setq ps-lpr-command "D:/gs6.01/bin/gswin32c.exe")
(setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH"
                        "-sDEVICE=mswinpr2"
                        "-sPAPERSIZE=a4"))
</pre>
<p class="tab">(This assumes that Ghostscript is installed in the <b>D:/gs6.01</b> directory.)</p>
<h2 id="Windows-Fonts">Specifying fonts on Microsoft Windows</h2>
<p class="tab">Starting with Emacs 23, fonts are specified by their name, size and optional properties. The format for specifying fonts comes from the <b>fontconfig</b> library used in modern Free desktops:</p>
<pre class="tab tcy">[Family[-PointSize]][:Option1=Value1[:Option2=Value2[...]]]</pre>
<p class="tab">The old XLFD based format is also supported for backward compatibility.<br><br>Emacs 23 and later supports multiple font backends. Currently, the gdi and uniscribe backends are supported on Windows. The gdi font backend is available on all versions of Windows, and supports all fonts that are natively supported by Windows. The uniscribe font backend is available on Windows 2000 and later, and supports TrueType and OpenType fonts. Some languages requiring complex layout can only be properly supported by the Uniscribe backend. By default, both backends are enabled if supported, with uniscribe taking priority over gdi. To override that and use the GDI backend even if Uniscribe is available, invoke Emacs with the <b>-xrm Emacs.fontBackend:gdi</b> command-line argument, or add a <b>Emacs.fontBackend</b> resource with the value <b>gdi</b> in the Registry under either the '<b>HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs</b>' or the '<b>HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs</b>' key (see <a href="#Resources">Resources</a>).<br><br>Optional properties common to all font backends on MS-Windows are:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>weight</b></td>
<td>Specifies the weight of the font. Special values <b>light</b>, <b>medium</b>, <b>demibold</b>, <b>bold</b>, and <b>black</b> can be specified without <b>weight=</b> (e.g., <b>Courier New-12:bold</b>). Otherwise, the weight should be a numeric value between 100 and 900, or one of the named weights in <b>font-weight-table</b>. If unspecified, a regular font is assumed.</td>
</tr>
<tr class="tcw">
<td><b>slant</b></td>
<td>Specifies whether the font is italic. Special values <b>roman</b>, <b>italic</b> and <b>oblique</b> can be specified without <b>slant=</b> (e.g., <b>Courier New-12:italic</b>). Otherwise, the slant should be a numeric value, or one of the named slants in <b>font-slant-table</b>. On Windows, any slant above 150 is treated as <b>italics</b>, and anything below as <b>roman</b>.</td>
</tr>
<tr class="tcw">
<td><b>family</b></td>
<td>Specifies the font family, but normally this is specified at the start of the font name.</td>
</tr>
<tr class="tcw">
<td><b>pixelsize</b></td>
<td>Specifies the font size in pixels. This can be used instead of the point size specified after the family name.</td>
</tr>
<tr class="tcw">
<td><b>adstyle</b></td>
<td>Specifies additional style information for the font. On Microsoft Windows, the values <b>mono</b>, <b>sans</b>, <b>serif</b>, <b>script</b> and <b>decorative</b> are recognized. These are most useful as a fallback with the font family left unspecified.</td>
</tr>
<tr class="tcw">
<td><b>registry</b></td>
<td>Specifies the character set Registry that the font is expected to cover. Most TrueType and OpenType fonts are Unicode fonts that cover several national character sets, but you can narrow the selection of fonts to those that support a particular character set using a specific Registry from <b>w32-charset-info-alist</b> here.</td>
</tr>
<tr class="tcw">
<td><b>spacing</b></td>
<td>Specifies how the font is spaced. The <b>p</b> spacing specifies a proportional font, and <b>m</b> or <b>c</b> specify a monospaced font.</td>
</tr>
<tr class="tcw">
<td><b>foundry</b></td>
<td>Not used on Windows, but for informational purposes and to prevent problems with code that expects it to be set, is set internally to raster for bitmapped fonts, outline for scalable fonts, or unknown if the type cannot be determined as one of those.</td>
</tr>
</table>
<p class="tab">Options specific to GDI fonts:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:100px"><b>script</b></td>
<td>Specifies a Unicode subrange the font should support.<br><br>The following scripts are recognized on Windows: <b>latin</b>, <b>greek</b>, <b>coptic</b>, <b>cyrillic</b>, <b>armenian</b>, <b>hebrew</b>, <b>arabic</b>, <b>syriac</b>, <b>nko</b>, <b>thaana</b>, <b>devanagari</b>, <b>bengali</b>, <b>gurmukhi</b>, <b>gujarati</b>, <b>oriya</b>, <b>tamil</b>, <b>telugu</b>, <b>kannada</b>, <b>malayam</b>, <b>sinhala</b>, <b>thai</b>, <b>lao</b>, <b>tibetan</b>, <b>myanmar</b>, <b>georgian</b>, <b>hangul</b>, <b>ethiopic</b>, <b>cherokee</b>, <b>canadian-aboriginal</b>, <b>ogham</b>, <b>runic</b>, <b>khmer</b>, <b>mongolian</b>, <b>symbol</b>, <b>braille</b>, <b>han</b>, <b>ideographic-description</b>, <b>cjk-misc</b>, <b>kana</b>, <b>bopomofo</b>, <b>kanbun</b>, <b>yi</b>, <b>byzantine-musical-symbol</b>, <b>musical-symbol</b>, and <b>mathematical</b>.</td>
</tr>
<tr class="tcw">
<td><b>antialias</b></td>
<td>Specifies the antialiasing method. The value <b>none</b> means no antialiasing, <b>standard</b> means use standard antialiasing, <b>subpixel</b> means use subpixel antialiasing (known as ClearType on Windows), and <b>natural</b> means use subpixel antialiasing with adonlyed spacing between letters. If unspecified, the font uses the system default antialiasing.</td>
</tr>
</table>
<h2 id="Windows-Misc">Miscellaneous Windows-specific features</h2>
<p class="tab">This section describes miscellaneous Windows-specific features.<br><br>The variable <b>w32-use-visible-system-caret</b> is a flag that determines whether to make the system caret visible. The default when no screen reader software is in use is <b>nil</b>, which means Emacs draws its own cursor to indicate the position of point. A non-nil value means Emacs indicates point location with the system caret; this facilitates use of screen reader software, and is the default when such software is detected when running Emacs. When this variable is non-nil, other variables affecting the cursor display have no effect.<br><br>The variable <b>w32-grab-focus-on-raise</b>, if set to a non-nil value causes a frame to grab focus when it is raised. The default is <b>t</b>, which fits well with the Windows default click-to-focus policy.</p>
<h2 id="examples">Examples</h2>
<p class="tab tcy">emacs myfile.txt</p>
<p class="tab">Launches <b>emacs</b> and opens the file <b>myfile.txt</b> for editing.</p>
<p class="tab">To get help inside emacs, type <b>Ctrl-h</b>.</p>
<p class="tab">To quit emacs, type <b>Ctrl-x</b>, <b>Ctrl-c</b>.</p>
<h2 id="related">Related commands</h2>
<p class="tab"><a href="/unix/uxlsfont.htm"><b>xlsfonts</b></a> &mdash; Display <a href="/unix/ux.htm">X</a> font lists.<br><a href="/unix/uxterm.htm"><b>xterm</b></a> &mdash; A terminal emulator for X.<br><a href="/unix/uxrdb.htm"><b>xrdb</b></a> &mdash; An X server resource database utility.</p>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a82dcdbf084e0',m:'rjSuhj3DjE1DNwAxSInjMRufJNIL65sa1YhD1_rBlPE-1661495346-0-AZ3YyuhTFYHnhi2eMw7IkUtagR3q5vZmBB6Bg9DhG6v1kEPwyaarWutjftBI5QWwYRLwo4BWVdTLVtWP/rWer834MfQrXqRigeHvKDa6E3bRrH98mvL4GRpsns1eNSnVyg==',s:[0xff524c51ec,0xc1ca3bb2c8],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>