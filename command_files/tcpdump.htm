<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Linux tcpdump command</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-11-06">11/06/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/tcpdump.gif" width="300" height="300" alt="tcpdump command" class="floatRight"><p class="intro">On <a href="/jargon/u/unix-like.htm">Unix-like</a> operating systems, the <b>tcpdump</b> collects a raw dump of network traffic.</p>
<p>This page covers the <a href="/jargon/l/linux.htm">Linux</a> version of <b>tcpdump</b>.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#desc">Description</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#related">Related commands</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="desc">Description</h2>
<p class="tab"><b>Tcpdump</b> prints out a description of the contents of <a href="/jargon/p/packet.htm">packets</a> on a <a href="/jargon/n/nic.htm">network interface</a> that match the <a href="/jargon/b/boolean.htm">boolean</a> expression specified on the <a href="/jargon/c/commandi.htm">command line</a>. It can also run with the <b>-w</b> flag, which causes it to save the packet data to a file for later analysis, or with the <b>-r</b> flag, which causes it to read from a saved packet file rather than to read packets from a network interface.</p>
<p class="tab"><b>Tcpdump</b> will, if not run with the <b>-c</b> flag, continue capturing packets until it is interrupted by a <b>SIGINT</b> <a href="/unix/signals.htm">signal</a> (for example, when the user types the <a href="/jargon/i/interrup.htm">interrupt</a> <a href="/jargon/c/charact.htm">character</a>, often <b>control-C</b>) or a <b>SIGTERM</b> signal (often generated with the <a href="/jargon/k/kill.htm">kill</a> command); if run with the <b>-c</b> flag, it captures packets until it is interrupted by a <b>SIGINT</b> or <b>SIGTERM</b> signal or the specified number of packets are processed.</p>
<p class="tab">When <b>tcpdump</b> finishes capturing packets, it will report counts of the following:</p>
<ul>
<li>packets "captured" (the number of packets that <b>tcpdump</b> has received and processed);</li>
<li>packets "received by filter" (the meaning of this depends on the <a href="/jargon/o/os.htm">OS</a> on which you're running <b>tcpdump</b>, and possibly on the way the OS was configured; if a filter was specified on the <a href="/jargon/c/commandi.htm">command line</a>, on some OSes it counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether <b>tcpdump</b> has read and processed them yet; on other operating systems it counts only packets that were matched by the filter expression regardless of whether <b>tcpdump</b> has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression and were processed by <b>tcpdump</b>);</li>
<li>packets "dropped by <a href="/jargon/k/kernel.htm">kernel</a>" (this is the number of packets that were dropped, due to a lack of <a href="/jargon/b/buffer.htm">buffer</a> space, by the packet capture mechanism in the OS on which <b>tcpdump</b> is running, if the OS reports that information to applications; if not, it will be reported as <b>0</b>).</li>
</ul>
<p class="tab">On platforms that support the <b>SIGINFO</b> signal, such as most <a href="/jargon/b/bsd.htm">BSD</a> operating systems (including <a href="/jargon/m/macosx.htm">macOS X</a>) and <a href="/jargon/d/dec.htm">Digital</a>/<a href="/jargon/t/tru64.htm">Tru64</a> <a href="/jargon/u/unix.htm">UNIX</a>, it will report those counts when it receives a <b>SIGINFO</b> signal (generated (for example) by typing the "status" character, often <b>control-T</b>; although on some platforms, such as macOS X, the "status" character is not set by default, so you must set it with <a href="/unix/ustty.htm">stty</a> to use it) and continues capturing packets.</p>
<p class="tab">Reading packets from a network interface may require you have special <a href="/jargon/p/permissi.htm">privileges</a>; see the <b>pcap</b> (3PCAP) manual for details. Reading a saved packet file doesn't require special privileges.</p>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">tcpdump [ -AbdDefhHIJKlLnNOpqRStuUvxX ] [ -B <i>buffer_size</i> ] [ -c <i>count</i> ] 
        [ -C <i>file_size</i> ] [ -G <i>rotate_seconds</i> ] [ -F <i>file</i> ] [ -i <i>interface</i> ] 
        [ -j <i>tstamp_type</i> ] [ -m <i>module</i> ] [ -M <i>secret</i> ] [ -r <i>file</i> ] 
        [ -s <i>snaplen</i> ] [ -T <i>type</i> ] [ -w <i>file</i> ] [ -W <i>filecount</i> ] 
        [ -E <i>spi</i>@<i>ipaddr</i> <i>algo</i>:<i>secret</i>,... ] [ -y <i>datalinktype</i> ] 
        [ -z <i>postrotate-command</i> ] [ -Z <i>user</i> ] [ <i>expression</i> ]</pre>
<h3 class="tab">Options</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>-A</b></td>
<td>Print each packet (minus its link-level <a href="/jargon/h/header.htm">header</a>) in <a href="/jargon/a/ascii.htm">ASCII</a>. Handy for capturing <a href="/jargon/w/webpage.htm">web pages</a>.</td>
</tr>
<tr class="tcw">
<td><b>-b</b></td>
<td>Print the <b>AS</b> number in <b>BGP</b> packets in <b>ASDOT</b> notation rather than <b>ASPLAIN</b> notation.</td>
</tr>
<tr class="tcw">
<td><b>-B</b> <i>buffer_size</i></td>
<td>Set the operating system capture buffer size to <i>buffer_size</i>, in units of <a href="/jargon/k/kilobit.htm">KiB</a> (1024 <a href="/jargon/b/byte.htm">bytes</a>).</td>
</tr>
<tr class="tcw">
<td><b>-c</b> <i>count</i></td>
<td>Exit after receiving <i>count</i> packets.</td>
</tr>
<tr class="tcw">
<td><b>-C</b> <i>file_size</i></td>
<td>Before writing a raw packet to a savefile, check whether the file is currently larger than <i>file_size</i> and, if so, close the current savefile and open a new one. Savefiles after the first savefile have the name specified with the <b>-w</b> flag, with a number after it, starting at 1 and continuing upward. The units of <i>file_size</i> are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).</td>
</tr>
<tr class="tcw">
<td><b>-d</b></td>
<td>Dump the compiled packet-matching code in a human readable form to standard output and stop.</td>
</tr>
<tr class="tcw">
<td><b>-dd</b></td>
<td>Dump packet-matching code as a <a href="/jargon/c/c.htm">C</a> program fragment.</td>
</tr>
<tr class="tcw">
<td><b>-ddd</b></td>
<td>Dump packet-matching code as <a href="/jargon/d/decimal.htm">decimal</a> numbers (preceded with a count).</td>
</tr>
<tr class="tcw">
<td><b>-D</b></td>
<td>Print the list of the network interfaces available on the system and on which <b>tcpdump</b> can capture packets. For each network interface, a number and an interface name, possibly followed by a text description of the interface, is printed. The interface name or the number can be supplied to the <b>-i</b> flag to specify an interface on which to capture.<br><br> This option can be useful on systems that don't have a command to list them (e.g., <a href="/jargon/w/windows.htm">Windows</a> systems, or UNIX systems lacking <a href="/unix/uifconfi.htm">ifconfig -a</a>); the number can be useful on <a href="/jargon/w/win2000.htm">Windows 2000</a> and later systems, where the interface name is a somewhat complex <a href="/jargon/s/string.htm">string</a>.<br><br> The <b>-D</b> flag isn't supported if <b>tcpdump</b> was built with an older version of <a href="https://sourceforge.net/projects/libpcap/" class="external">libpcap</a> that lacks the <b>pcap_findalldevs</b>() function.</td>
</tr>
<tr class="tcw">
<td><b>-e</b></td>
<td>Print the link-level header on each dump line.</td>
</tr>
<tr class="tcw">
<td><b>-E</b></td>
<td>Use <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="94e7e4fdd4fde4f5f0f0e6">[email&#160;protected]</a> algo:secret</b> for <a href="/jargon/d/decrypti.htm">decrypting</a> <a href="/jargon/i/ipsec.htm">IPsec</a> <b>ESP</b> packets that are addressed to <b>addr</b> and contain Security Parameter Index value <b>spi</b>. This combination may be repeated with comma or <a href="/jargon/n/newline.htm">newline</a> separation.<br><br> Note that setting the secret for <a href="/jargon/i/ipv4.htm">IPv4</a> <b>ESP</b> packets is supported at this time.<br><br><a href="/jargon/a/algorith.htm">Algorithms</a> may be <b><a href="/jargon/d/des.htm">des</a>-cbc</b>, <b>3des-cbc</b>, <b>blowfish-cbc</b>, <b>rc3-cbc</b>, <b>cast128-cbc</b>, or <b>none</b>. The default is <b>des-cbc</b>. The ability to decrypt packets is only present if <b>tcpdump</b> was <a href="/jargon/c/compile.htm">compiled</a> with <a href="/jargon/c/cryptogr.htm">cryptography</a> enabled.<br><br><b>secret</b> is the <a href="/jargon/a/ascii.htm">ASCII</a> text for <b>ESP</b> secret key. If preceded by <b>0x</b>, then a <a href="/jargon/h/hex.htm">hex</a> value will be read.<br><br> The option assumes <a href="/jargon/r/rfc.htm">RFC</a> 2406 <b>ESP</b>, not RFC 1827 <b>ESP</b>. The option is only for <a href="/jargon/d/debug.htm">debugging</a> purposes, and the use of this option with a true 'secret' key is discouraged. By presenting IPsec secret key onto <a href="/jargon/c/commandi.htm">command line</a> you make it visible to others, via <a href="/unix/ups.htm">ps</a>(1) and other occasions.<br><br> In addition to the above <a href="/jargon/s/syntax.htm">syntax</a>, the syntax file name may be used to have <b>tcpdump</b> use the data in the file. The file is opened upon receiving the first <b>ESP</b> packet, so any special permissions that <b>tcpdump</b> are given were given up.</td>
</tr>
<tr class="tcw">
<td><b>-f</b></td>
<td>Print 'foreign' IPv4 addresses numerically rather than symbolically (this option is intended to get around a problem with Sun's NIS server &mdash; usually it hangs forever translating non-local Internet numbers).<br><br> The test for 'foreign' IPv4 addresses is done using the IPv4 address and <a href="/jargon/n/netmask.htm">netmask</a> of the interface on which capturing is being done. If that address or netmask are not available, either because the interface on which capture is being done has no address or netmask or because the capture is being done on the Linux "<b>any</b>" interface, which can capture on more than one interface, this option will not work correctly.</td>
</tr>
<tr class="tcw">
<td><b>-F</b> <i>file</i></td>
<td>Use <i>file</i> as input for the filter expression. An additional expression given on the command line is ignored.</td>
</tr>
<tr class="tcw">
<td><b>-G</b> <i>rotate_seconds</i></td>
<td>If specified, rotates the dump file specified with the <b>-w</b> option every <i>rotate_seconds</i> seconds. Savefiles have the name specified by <b>-w</b> which should include a time format as defined by <a href="/unix/strftime.htm">strftime</a>. If no time format is specified, each new file will overwrite the previous.<br><br> If used in conjunction with the <b>-C</b> option, file names take the form of '<b>file&lt;count&gt;</b>'.</td>
</tr>
<tr class="tcw">
<td><b>-h</b></td>
<td>Print the <b>tcpdump</b> and <b>libpcap</b> version strings, print a usage message, and exit.</td>
</tr>
<tr class="tcw">
<td><b>-H</b></td>
<td>Attempt to detect 802.11s draft mesh headers.</td>
</tr>
<tr class="tcw">
<td><b>-i</b> <i>interface</i></td>
<td>Listen on <i>interface</i>. If unspecified, <b>tcpdump</b> searches the system interface list for the lowest numbered, configured up interface (excluding loopback). Ties are broken by choosing the earliest match.<br><br> On Linux systems with version 2.2 or later kernels, an interface argument of "<b>any</b>" can capture packets from all interfaces. Note that captures on the "<b>any</b>" device isn't done in promiscuous mode. If the <b>-D</b> flag is supported, an interface number as printed by that flag can be used as the interface argument.</td>
</tr>
<tr class="tcw">
<td><b>-I</b></td>
<td>Put the interface in "monitor mode"; this is supported only on <a href="/jargon/num/80211.htm">IEEE 802.11</a> <a href="/jargon/w/wifi.htm">Wi-Fi</a> interfaces, and supported only on some operating systems.<br><br> Note that in monitor mode the adapter might disassociate from the network with which it's associated, so you aren't able to use any wireless networks with that adapter. This could prevent accessing files on a network server, or resolving <a href="/jargon/h/hostname.htm">hostnames</a> or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.<br><br> This flag affects the output of the <b>-L</b> flag. If <b>-I</b> isn't specified, only those link-layer types available when not in monitor mode is shown; if <b>-I</b> is specified, only those link-layer types available when in monitor mode is shown.</td>
</tr>
<tr class="tcw">
<td><b>-j</b> <i>tstamp_type</i></td>
<td>Set the timestamp type for the capture to <i>tstamp_type</i>. The names to use for the timestamp types are given in <b>pcap-tstamp-type</b>(7); not all the types listed there will necessarily be valid for any given interface.</td>
</tr>
<tr class="tcw">
<td><b>-J</b></td>
<td>List the supported timestamp types for the interface and exit. If the timestamp type cannot be set for the interface, no timestamp types are listed.</td>
</tr>
<tr class="tcw">
<td><b>-K</b></td>
<td>List the supported timestamp types for the interface and exit. If the timestamp type cannot be set for the interface, no timestamp types are listed.</td>
</tr>
<tr class="tcw">
<td><b>-l</b></td>
<td>Make <b>stdout</b> line buffered. Useful if you want to see the data while capturing it. For example,<br><br><pre class="tcy">tcpdump -l | <a href="/unix/utee.htm">tee</a> dat</pre> or<br><br><pre class="tcy">tcpdump -l &gt; dat &amp; <a href="/unix/utail.htm">tail</a> -f dat</pre> Note that on Windows,"line buffered" means "unbuffered", so that WinDump writes each character individually if <b>-l</b> is specified.<br><br><b>-U</b> is similar to <b>-l</b> in its behavior, but it causes output to be "packet-buffered", so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on all platforms, including Windows.</td>
</tr>
<tr class="tcw">
<td><b>-L</b></td>
<td>List the known data link types for the interface, in the specified mode, and exit. The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface might support one set of data link types when not in monitor mode (for example, it might support only fake <a href="/jargon/e/ethernet.htm">Ethernet</a> headers, or might support 802.11 headers but not support 802.11 headers with radio information) and another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).</td>
</tr>
<tr class="tcw">
<td><b>-m</b> <i>module</i></td>
<td>Load SMI MIB module definitions from file <i>module</i>. This option can be used several times to load several MIB modules into <b>tcpdump</b>.</td>
</tr>
<tr class="tcw">
<td><b>-M</b> <i>secret</i></td>
<td>Use <i>secret</i> as a shared secret for validating the digests found in <a href="/jargon/t/tcpip.htm">TCP</a> segments with the TCP-<a href="/jargon/h/hashing.htm">MD5</a> option (RFC 2385), if present.</td>
</tr>
<tr class="tcw">
<td><b>-n</b></td>
<td>Don't convert addresses (i.e., host addresses, port numbers, etc.) to names.</td>
</tr>
<tr class="tcw">
<td><b>-N</b></td>
<td>Don't print domain name qualification of hostnames. E.g., if you give this flag then tcpdump prints "nic" instead of "nic.ddn.mil".</td>
</tr>
<tr class="tcw">
<td><b>-O</b></td>
<td>Do not run the packet-matching code optimizer. This option is useful only if you suspect a bug in the optimizer.</td>
</tr>
<tr class="tcw">
<td><b>-p</b></td>
<td>Don't put the interface into promiscuous mode. Note that the interface might be in promiscuous mode for some other reason; hence, '<b>-p</b>' cannot be used as an abbreviation for 'ether host {local-hw-addr} or ether broadcast.'</td>
</tr>
<tr class="tcw">
<td><b>-q</b></td>
<td>Quick/quiet output. Print less protocol information so output lines are shorter.</td>
</tr>
<tr class="tcw">
<td><b>-R</b></td>
<td>Assume <b>ESP</b>/<b>AH</b> packets to be based on old specification (RFC1825 to RFC1829). If specified, <b>tcpdump</b> will not print replay prevention field. Since there is no protocol version field in <b>ESP</b>/<b>AH</b> specification, <b>tcpdump</b> cannot deduce the version of <b>ESP</b>/<b>AH</b> protocol.</td>
</tr>
<tr class="tcw">
<td><b>-r</b> <i>file</i></td>
<td>Read packets from <i>file</i> (which was created with the <b>-w</b> option). Standard input is used if <i>file</i> is "<b>-</b>".</td>
</tr>
<tr class="tcw">
<td><b>-S</b></td>
<td>Print absolute, rather than relative, TCP sequence numbers.</td>
</tr>
<tr class="tcw">
<td><b>-s</b> <i>snaplen</i></td>
<td>Snarf <i>snaplen</i> bytes of data from each packet rather than the default of 65535 bytes. Packets <a href="/jargon/t/truncate.htm">truncated</a> because of a limited snapshot are indicated in the output with "<b>[|proto]</b>", where <b>proto</b> is the name of the <a href="/jargon/p/protocol.htm">protocol</a> level at which the truncation has occurred. Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering. This may cause packets to be lost. Limit snaplen to the smallest number that captures the protocol information that interests you. Setting <i>snaplen</i> to <b>0</b> sets it to the default of <b>65535</b>, for <a href="/jargon/b/backcomp.htm">backward compatibility</a> with recent older versions of <b>tcpdump</b>.</td>
</tr>
<tr class="tcw">
<td><b>-T</b> <i>type</i></td>
<td>Force packets selected by "expression" to be interpreted the specified <i>type</i>. Currently known <i>types</i> are <b>aodv</b> (Ad-hoc On-demand Distance Vector protocol), <b>cnfp</b> (Cisco NetFlow protocol), <b>rpc</b> (Remote Procedure Call), <b>rtp</b> (Real-Time Applications protocol), <b>rtcp</b> (Real-Time Applications control protocol), <b>snmp</b> (Simple Network Management Protocol), <b>tftp</b> (Trivial File Transfer Protocol), <b>vat</b> (Visual Audio Tool), and <b>wb</b> (distributed White Board).</td>
</tr>
<tr class="tcw">
<td><b>-t</b></td>
<td>Don't print a timestamp on each dump line.</td>
</tr>
<tr class="tcw">
<td><b>-tt</b></td>
<td>Do print an unformatted timestamp on each dump line.</td>
</tr>
<tr class="tcw">
<td><b>-ttt</b></td>
 <td>Print a delta (micro-second resolution) between current and previous line on each dump line.</td>
</tr>
<tr class="tcw">
<td><b>-tttt</b></td>
<td>Print a timestamp in default format proceeded by date on each dump line.</td>
</tr>
<tr class="tcw">
<td><b>-ttttt</b></td>
<td>Print a delta (micro-second resolution) between current and the first line on each dump line.</td>
</tr>
<tr class="tcw">
<td><b>-u</b></td>
<td>Print undecoded <a href="/jargon/n/nfs.htm">NFS</a> handles.</td>
</tr>
<tr class="tcw">
<td><b>-U</b></td>
<td>If the <b>-w</b> option is not specified, make the printed packet output "packet-buffered"; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than, when not writing to a terminal, being written only when the output buffer fills.<br><br> If the <b>-w</b> option is specified, make the saved raw packet output "packet-buffered"; i.e., as each packet is saved, it will be written to the output file, rather than being written only when the output buffer fills. The <b>-U</b> flag isn't supported if <b>tcpdump</b> was built with an older version of libpcap that lacks the <b>pcap_dump_flush</b>() function.</td>
</tr>
<tr class="tcw">
<td><b>-v</b></td>
<td>When parsing and printing, produce (slightly more) verbose output. For example, the time to live, identification, total length and options in an IP packet are printed. Also, enables additional packet integrity checks such as verifying the IP and ICMP header checksum.<br><br> When writing to a file with the <b>-w</b> option, report, every 10 seconds, the number of packets captured.</td>
</tr>
<tr class="tcw">
<td><b>-vv</b></td>
<td>Even more verbose output. For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.</td>
</tr>
<tr class="tcw">
<td><b>-vvv</b></td>
<td>Even more verbose output. For example, <b>telnet SB</b> ... <b>SE</b> options are printed in full. With <b>-X</b> <a href="/jargon/t/telnet.htm">Telnet</a> options are printed in hex as well.</td>
</tr>
<tr class="tcw">
<td><b>-w</b></td>
<td>Write the raw packets to file rather than parsing and printing them out. They can later be printed with the <b>-r</b> option. Standard output is used if <i>file</i> is "<b>-</b>".<br><br> This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received. Use the <b>-U</b> flag to cause packets to be written as soon as they are received.<br><br> See <b>pcap-savefile</b>(5) for a description of the file format.</td>
</tr>
<tr class="tcw">
<td><b>-W</b></td>
<td>Used in conjunction with the <b>-C</b> option, this limits the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a 'rotating' buffer. Also, it will name the files with enough leading <b>0</b>s to support the maximum number of files, allowing them to sort correctly.<br><br> Used in conjunction with the <b>-G</b> option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with <b>-C</b> as well, the behavior results in cyclical files per timeslice.</td>
</tr>
<tr class="tcw">
<td><b>-x</b></td>
<td>When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex. The smaller of the entire packet or snaplen bytes will be printed. Note that this is the entire link-layer packet, so for link layers that pad (e.g., Ethernet), the padding bytes also prints when the higher layer packet is shorter than the required padding.</td>
</tr>
<tr class="tcw">
<td><b>-xx</b></td>
<td>When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.</td>
</tr>
<tr class="tcw">
<td><b>-X</b></td>
<td>When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and <a href="/jargon/a/ascii.htm">ASCII</a>. This option is very handy for analysing new protocols.</td>
</tr>
<tr class="tcw">
<td><b>-XX</b></td>
<td>When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.</td>
</tr>
<tr class="tcw">
<td><b>-y</b> <i>datalinktype</i></td>
<td>Set the data link type to use while capturing packets to <i>datalinktype</i>.</td>
</tr>
<tr class="tcw">
<td><b>-z</b> <i>postrotate-command</i></td>
<td>Used in conjunction with the <b>-C</b> or <b>-G</b> options, this makes tcpdump run " <b>command file</b> " where file is the savefile being closed after each rotation. For example, specifying <b>-z gzip</b> or <b>-z bzip2</b> will compress each savefile using <a href="/jargon/g/gzip.htm">gzip</a> or <b>bzip2</b>.<br><br> Note that <b>tcpdump</b> runs the command in parallel to the capture, using the lowest priority so that this doesn't disturb the capture process.<br><br> And in case you would like to use a command that itself takes flags or different arguments, you can always write a <a href="/jargon/s/shell.htm">shell</a> script that take the savefile name as the only argument, make the flags &amp; <a href="/jargon/a/argument.htm">arguments</a> arrangements and execute the command you want.</td>
</tr>
<tr class="tcw">
<td><b>-Z</b> <i>user</i></td>
<td>If <b>tcpdump</b> is running as <a href="/jargon/r/root.htm">root</a>, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.<br><br> This behavior can also be enabled by default at compile time.</td>
</tr>
<tr class="tcw">
<td><i>expression</i></td>
<td>Selects which packets will be dumped. If no <i>expression</i> is given, all packets on the net will be dumped. Otherwise, only packets for which <i>expression</i> is '<b>true</b>' will be dumped.<br><br> For the expression syntax, see <b>pcap-filter</b>(7).<br><br><i>Expression</i> arguments can be passed to <b>tcpdump</b> as either a single argument or as multiple arguments, whichever is more convenient. Generally, if the expression contains Shell metacharacters, it is easier to pass it as a single, quoted argument. Multiple arguments are concatenated with spaces before being parsed.</td>
</tr>
</table>
<h2>Output format</h2>
<p class="tab">The output of <b>tcpdump</b> is protocol-dependent. The following gives a brief description and examples of most of the formats.</p>
<h3 class="tab">Link Level Headers</h3>
<p class="tab">If the '<b>-e</b>' option is given, the link level header is printed out. On Ethernets, the source and destination addresses, protocol, and packet length are printed.</p>
<p class="tab">On <a href="/jargon/f/fddi.htm">FDDI</a> networks, the '<b>-e</b>' option causes tcpdump to print the '<b>frame control</b>' field, the source and destination addresses, and the packet length. (The 'frame control' field governs the interpretation of the rest of the packet. Normal packets (such as those containing IP datagrams) are '<b>async</b>' packets, with a priority value between <b>0</b> and <b>7</b>; for example, '<b>async4</b>'. Such packets are assumed to contain an 802.2 Logical Link Control (<b>LLC</b>) packet; the LLC header is printed if it's not an ISO datagram or a so-called <a href="/jargon/s/snap.htm">Snap</a> packet.</p>
<p class="tab">On <a href="/jargon/t/tokering.htm">Token Ring</a> networks, the '<b>-e</b>' option causes <b>tcpdump</b> to print the '<b>access control</b>' and '<b>frame control</b>' fields, the source and destination addresses, and the packet length. As on FDDI networks, packets are assumed to contain an LLC packet. Regardless of whether the '<b>-e</b>' option is specified or not, the source routing information is printed for source-routed packets.</p>
<p class="tab">On 802.11 networks, the '<b>-e</b>' option causes <b>tcpdump</b> to print the '<b>frame control</b>' fields, all of the addresses in the 802.11 header, and the packet length. As on FDDI networks, packets are assumed to contain an LLC packet.</p>
<p class="tab">Note: The following description assumes familiarity with the <a href="/jargon/s/slip.htm">SLIP</a> <a href="/jargon/c/compress.htm">compression</a> algorithm described in RFC-1144.</p>
<p class="tab">On SLIP links, a direction indicator ("<b>I</b>" for inbound, "<b>O</b>" for outbound), packet type, and compression information are printed out. The packet type is printed first. The three types are <b>ip</b>, <b>utcp</b>, and <b>ctcp</b>. No further link information is printed for IP packets. For TCP packets, the connection identifier is printed following the type. If the packet is compressed, its encoded header is printed out. The special cases are printed out as <b>*S+n</b> and <b>*SA+n</b>, where <b>n</b> is the amount by which the sequence number (or sequence number and <b>ack</b>) has changed. If it's not a special case, zero or more changes are printed. A change is indicated by <b>U</b> (urgent pointer), <b>W</b> (window), <b>A</b> (ack), <b>S</b> (sequence number), and <b>I</b> (packet ID), followed by a delta (<b>+n</b> or <b>-n</b>), or a new value (<b>=n</b>). Finally, the amount of data in the packet and compressed header length are printed.</p>
<p class="tab">For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by <b>6</b>, the sequence number by <b>49</b>, and the packet ID by <b>6</b>; there are <b>3</b> bytes of data and <b>6</b> bytes of compressed header:</p>
<pre class="tab tcy">O ctcp * A+6 S+49 I+6 3 (6)</pre>
<h3 class="tab">ARP/RARP packets</h3>
<p class="tab"><b>Arp/Rarp output</b> shows the type of request and its arguments. The format is intended to be self explanatory. Here is a short sample taken from the start of an '<a href="/unix/urlogin.htm"><b>rlogin</b></a>' from host <b>rtsg</b> to host <b>csam</b>:</p>
<pre class="tab tcy">arp who-has csam tell rtsg arp reply csam is-at CSAM</pre>
<p class="tab">The first line says that <b>rtsg</b> sent an <b>arp</b> packet asking for the Ethernet address of Internet host <b>csam</b>. <b>Csam</b> replies with its Ethernet address (in this example, Ethernet addresses are in caps and Internet addresses in lower case).</p>
<p class="tab">This would look less redundant if we had done <b>tcpdump -n</b>:</p>
<pre class="tab tcy">arp who-has 128.3.254.6 tell 128.3.254.68 
arp reply 128.3.254.6 is-at 02:07:01:00:01:c4</pre>
<p class="tab">If we had done <b>tcpdump -e</b>, the fact that the first packet is broadcast and the second is point-to-point would be visible:</p>
<pre class="tab tcy">RTSG Broadcast 0806 64: arp who-has csam tell rtsg 
CSAM RTSG 0806 64: arp reply csam is-at CSAM</pre>
<p class="tab">For the first packet this says the Ethernet source address is <b>RTSG</b>, the destination is the Ethernet broadcast address, the type field contained hex <b>0806</b> (type ETHER_ARP) and the total length was <b>64</b> bytes.</p>
<h3 class="tab">TCP packets</h3>
<p class="tab">Note: The following description assumes familiarity with the TCP protocol described in RFC-793. If you are not familiar with the protocol, neither this description nor <b>tcpdump</b> will be of much use to you.</p>
<p class="tab">The general format of a tcp protocol line is:</p>
<pre class="tab tcy">src &gt; dst: flags data-seqno ack window urgent options</pre>
<p class="tab"><b>Src</b> and <b>dst</b> are the source and destination IP addresses and ports. Flags are some combination of <b>S</b> (SYN), <b>F</b> (FIN), <b>P</b> (PUSH), <b>R</b> (RST), <b>U</b> (URG), <b>W</b> (ECN CWR), <b>E</b> (ECN-Echo) or '<b>.</b>' (ACK), or '<b>none</b>' if no flags are set. <b>data-seqno</b> describes the portion of sequence space covered by the data in this packet (see example below). <b>ack</b> is sequence number of the next data expected the other direction on this connection. <b>window</b> is the number of bytes of receive buffer space available the other direction on this connection. <b>urg</b> indicates there is 'urgent' data in the packet. Options are tcp options enclosed in angle brackets (e.g., <b>&lt;mss 1024&gt;</b>).</p>
<p class="tab"><b>Src</b>, <b>dst</b> and <b>flags</b> are always present. The other fields depend on the contents of the packet's tcp protocol header and are output only if appropriate.</p>
<p class="tab">Here is the opening portion of an <b>rlogin</b> from host <b>rtsg</b> to host <b>csam</b>.</p>
<pre class="tab">rtsg.1023 &gt; csam.login: S 768512:768512(0) win 4096 &lt;mss 1024&gt;
csam.login &gt; rtsg.1023: S 947648:947648(0) ack 768513 win 4096 &lt;mss 1024&gt;
rtsg.1023 &gt; csam.login: . ack 1 win 4096
rtsg.1023 &gt; csam.login: P 1:2(1) ack 1 win 4096
csam.login &gt; rtsg.1023: . ack 2 win 4096
rtsg.1023 &gt; csam.login: P 2:21(19) ack 1 win 4096
csam.login &gt; rtsg.1023: P 1:2(1) ack 21 win 4077
csam.login &gt; rtsg.1023: P 2:3(1) ack 21 win 4077 urg 1
csam.login &gt; rtsg.1023: P 3:4(1) ack 21 win 4077 urg 1
</pre>
<p class="tab">The first line says that tcp port <b>1023</b> on <b>rtsg</b> sent a packet to port <b>login</b> on <b>csam</b>. The <b>S</b> indicates that the SYN flag was set. The packet sequence number was <b>768512</b> and it contained no data. The notation is '<b>first:last(nbytes)</b>' which means 'sequence numbers first up to but not including last that is nbytes bytes of user data'. There was no piggy-backed <b>ack</b>, the available receive window was <b>4096</b> bytes and there was a <b>max-segment-size</b> option requesting an mss of <b>1024</b> bytes.</p>
<p class="tab"><b>Csam</b> replies with a similar packet except it includes a piggy-backed <b>ack</b> for <b>rtsg</b>'s SYN. <b>Rtsg</b> then acks <b>csam</b>'s SYN. The '<b>.</b>' means the ACK flag was set. The packet contained no data so there is no data sequence number. Note that the ack sequence number is a small <a href="/jargon/i/integer.htm">integer</a>. The first time <b>tcpdump</b> sees a tcp 'conversation', it prints the sequence number from the packet. On subsequent packets of the conversation, the difference between the current packet's sequence number and this initial sequence number is printed. This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation's data stream (with the first data byte each direction being '<b>1</b>'). The '<b>-S</b>' overrides this feature, causing the original sequence numbers to be output.</p>
<p class="tab">On the 6th line, <b>rtsg</b> sends <b>csam 19</b> bytes of data (bytes <b>2</b> through <b>20</b> in the <b>rtsg &rarr; csam</b> side of the conversation). The PUSH flag is set in the packet. On the 7th line, csam says it's received data sent by <b>rtsg</b> up to but not including byte 21. Most of this data is apparently sitting in the socket buffer since <b>csam</b>'s receive window has gotten 19 bytes smaller. <b>Csam</b> also sends one byte of data to <b>rtsg</b> in this packet. On the 8th and 9th lines, <b>csam</b> sends two bytes of urgent, pushed data to <b>rtsg</b>.</p>
<p class="tab">If the snapshot was small enough that <b>tcpdump</b> didn't capture the full TCP header, it interprets as much of the header as it can and then reports "<b>[|tcp]</b>" to indicate the remainder could not be interpreted. If the header contains a bogus option (one with a length that's either too small or beyond the end of the header), <b>tcpdump</b> reports it as "<b>[bad opt]</b>" and does not interpret any further options (since it's impossible to tell where they start). If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, <b>tcpdump</b> reports it as "<b>[bad hdr length]</b>".</p>
<p class="tab">Capturing TCP packets with particular flag combinations (<b>SYN-ACK</b>, <b>URG-ACK</b>, etc.)</p>
<p class="tab">There are 8 bits in the control bits section of the TCP header:</p>
<p class="tabb">CWR | ECE | URG | ACK | PSH | RST | SYN | FIN</p>
<p class="tab">Let's assume that we want to watch packets used in establishing a TCP connection. Recall that TCP uses a 3-way <a href="/jargon/h/handshak.htm">handshake</a> protocol when it initializes a new connection; the connection sequence with regard to the TCP control bits is</p>
<ol>
<li>Caller sends SYN</li>
<li>Recipient responds with SYN, ACK</li>
<li>Caller sends ACK</li>
</ol>
<p class="tab">Now we're interested in capturing packets that have only the SYN bit set (Step 1). Note that we don't want packets from step 2 (SYN-ACK), a plain initial SYN. What we need is a correct filter expression for tcpdump.</p>
<p class="tab">Recall the structure of a TCP header without options:</p>
<pre class="tab">       0                              15                              31
       -----------------------------------------------------------------
       |          source port          |       destination port        |
       -----------------------------------------------------------------
       |                        sequence number                        |
       -----------------------------------------------------------------
       |                     acknowledgment number                     |
       -----------------------------------------------------------------
       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |
       -----------------------------------------------------------------
       |         TCP checksum          |       urgent pointer          |
       -----------------------------------------------------------------
</pre>
<p class="tab">A TCP header usually holds 20 <a href="/jargon/o/octet.htm">octets</a> of data, unless options are present. The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.</p>
<p class="tab">Starting to count with 0, the relevant TCP control bits are contained in octet 13:</p>
<pre class="tab">        0             7|             15|             23|             31
       ----------------|---------------|---------------|----------------
       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |
       ----------------|---------------|---------------|----------------
       |               |  13th octet   |               |               |
</pre>
<p class="tab">Let's have a closer look at octet no. 13:</p>
<pre class="tab">                       |               |
                       |---------------|
                       |C|E|U|A|P|R|S|F|
                       |---------------|
                       |7   5   3     0|
</pre>
<p class="tab">These are the TCP control bits that are of interest. We have numbered the bits in this octet from <b>0</b> to <b>7</b>, right to left, so the PSH bit is bit number <b>3</b>, while the <b>URG</b> bit is number <b>5</b>.</p>
<p class="tab">Recall that we want to capture packets with only SYN set. Let's see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:</p>
<pre class="tab">                       |C|E|U|A|P|R|S|F|
                       |---------------|
                       |0 0 0 0 0 0 1 0|
                       |---------------|
                       |7 6 5 4 3 2 1 0|
</pre>
<p class="tab">Looking at the control bits section we see that only bit number 1 (SYN) is set.</p>
<p class="tab">Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is</p>
<p class="tabb">00000010</p>
<p class="tab">and its decimal representation is</p>
<pre class="tab">         ^7    ^6    ^5    ^4    ^3    ^2    ^1    ^0
       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2
</pre>
<p class="tab">We're almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as an 8-bit unsigned integer in network byte order, must be exactly 2.</p>
<p class="tab">This relationship can be expressed as:</p>
<p class="tabb">tcp[13] == 2</p>
<p class="tab">We can use this expression as the filter for <b>tcpdump</b> to watch packets which have only SYN set:</p>
<p class="tabb">tcpdump -i xl0 tcp[13] == 2</p>
<p class="tab">The expression says "let the 13th octet of a TCP datagram have the decimal value 2", which is exactly what we want.</p>
<p class="tab">Now, let's assume that we need to capture SYN packets, but we don't care if ACK or any other TCP control bit is set at the same time. Let's see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:</p>
<pre class="tab">            |C|E|U|A|P|R|S|F|
            |---------------|
            |0 0 0 1 0 0 1 0|
            |---------------|
            |7 6 5 4 3 2 1 0|
</pre>
<p class="tab">Now bits 1 and 4 are set in the 13th octet. The binary value of octet 13 is</p>
<p class="tabb">00010010</p>
<p class="tab">which translates to decimal <b>18</b>:</p>
<pre class="tab">         ^7    ^6    ^5    ^4    ^3    ^2    ^1    ^0
       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18
</pre>
<p class="tab">Now we can't use '<b>tcp[13] == 18</b>' in the <b>tcpdump</b> filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set. Remember that we don't care if ACK or any other control bit is set as long as SYN is set.</p>
<p class="tab">To achieve our goal, we need to logically <a href="/jargon/b/boolean.htm">AND</a> the binary value of octet 13 with some other value to preserve the SYN bit. We know that we want SYN to be set in any case, so we'll logically AND the value in the 13th octet with the binary value of a SYN:</p>
<pre class="tab">                 00010010 SYN-ACK              00000010 SYN
            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)
                 --------                      --------
            =    00000010                 =    00000010
</pre>
<p class="tab">We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set. The decimal representation of the AND value and the result of this operation is 2 (binary 00000010), so we know that for packets with SYN set the following relation must hold true:</p>
<p class="tab">( ( <b>value of octet 13</b> ) <b>AND</b> ( <b>2</b> ) ) == ( <b>2</b> )</p>
<p class="tab">This points us to the <b>tcpdump</b> filter expression</p>
<pre class="tab tcy">tcpdump -i xl0 'tcp &amp; 2 == 2'</pre>
<p class="tab">Some offsets and field values may be expressed as names rather than as numeric values. For example, tcp] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: <b>tcp-fin</b>, <b>tcp-syn</b>, <b>tcp-rst</b>, <b>tcp-push</b>, <b>tcp-act</b>, <b>tcp-urg</b>.</p>
<p class="tab">This can be demonstrated as:</p>
<pre class="tab tcy">tcpdump -i xl0 'tcp[tcpflags] &amp; tcp-push != 0'</pre>
<p class="tab">Note, use single quotes or a backslash in the expression to protect the <b>AND</b> ('<b>&amp;</b>') special character from the shell.</p>
<h3 class="tab">UDP packets</h3>
<p class="tab"><a href="/jargon/u/udp.htm">UDP</a> format is illustrated by this <b>rwho</b> packet:</p>
<pre class="tab tcy">actinide.who &gt; broadcast.who: udp 84</pre>
<p class="tab">This says that port <b>who</b> on host <b>actinide</b> sent a udp datagram to port <b>who</b> on host <b>broadcast</b>, the Internet broadcast address. The packet contained 84 bytes of user data.</p>
<p class="tab">Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed. In particular, Domain Name service requests (RFC-1034/1035) and Sun RPC calls (RFC-1050) to NFS.</p>
<h3 class="tab">UDP name server requests</h3>
<p class="tab">Note: The following description assumes familiarity with the Domain Service protocol described in RFC-1035. If you are not familiar with the protocol, the following description appears to be written in a strange foreign language that is neither musical nor charming.</p>
<p class="tab">Name server requests are formatted as</p>
<pre class="tab tcy">src &gt; dst: id op? flags qtype qclass name (len)
h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)
</pre>
<p class="tab">Host <b>h2opolo</b> asked the domain server on <b>helios</b> for an address record (<b>qtype=A</b>) associated with the name <b>ucbvax.berkeley.edu</b>. The query id was '<b>3</b>'. The '<b>+</b>' indicates the recursion desired flag was set. The query length was <b>37</b> bytes, not including the UDP and IP protocol headers. The query operation was the normal one, Query, so the <b>op</b> field was omitted. If the <b>op</b> was anything else, it would was printed between the '<b>3</b>' and the '<b>+</b>'. Similarly, the qclass was the normal one, <b>C_IN</b>, and omitted. Any other <b>qclass</b> prints immediately after the '<b>A</b>'.</p>
<p class="tab">A few anomalies are checked and may result in extra fields enclosed in square brackets: If a query contains an answer, authority records or additional records <b>section</b>, <b>ancount</b>, <b>nscount</b>, or <b>arcount</b> are printed as '<b>[na]</b>', '<b>[nn]</b>' or '<b>[nau]</b>' where <b>n</b> is the appropriate count. If any of the response bits are set (<b>AA</b>, <b>RA</b> or <b>rcode</b>) or any of the 'must be zero' bits are set in bytes two and three, '<b>[b2&amp;3=x]</b>' is printed, where <b>x</b> is the hex value of header bytes two and three.</p>
<h3 class="tab">UDP name server responses</h3>
<p class="tab">Name server responses are formatted as</p>
<pre class="tab tcy">src &gt; dst: id op rcode flags a/n/au type class data (len)
helios.domain &gt; h2opolo.1538: 3 3/3/7 A 128.32.137.3 (273)
helios.domain &gt; h2opolo.1537: 2 NXDomain* 0/1/0 (97)
</pre>
<p class="tab">In the first example, <b>helios</b> responds to query id 3 from <b>h2opolo</b> with <b>3</b> answer records, <b>3</b> name server records and <b>7</b> additional records. The first answer record is type <b>A</b> (address) and its data is Internet address <b>128.32.137.3</b>. The total size of the response was <b>273</b> bytes, excluding UDP and IP headers. The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.</p>
<p class="tab">In the second example, <b>helios</b> responds to query <b>2</b> with a response code of non-existent domain (<b>NXDomain</b>) with no answers, one name server and no authority records. The '<b>*</b>' indicates that the authoritative answer bit was set. Since there were no answers, no type, class or data were printed.</p>
<p class="tab">Other flag characters that might appear are '<b>-</b>' (recursion available, <b>RA</b>, not set) and '<b>|</b>' (truncated message, <b>TC</b>, set). If the 'question' section doesn't contain exactly one entry, '<b>[nq]</b>' is printed.</p>
<h3 class="tab">SMB/CIFS decoding</h3>
<p class="tab"><b>tcpdump</b> now includes fairly extensive <b>SMB</b>/<b>CIFS</b>/<b>NBT</b> decoding for data on UDP/137, UDP/138 and TCP/139. Some primitive decoding of <a href="/jargon/i/ipxspx.htm">IPX</a> and <a href="/jargon/n/netbeui.htm">NetBEUI</a> <a href="/jargon/s/smb.htm">SMB</a> data is also done.</p>
<p class="tab">By default, a fairly minimal decode is done, with a much more detailed decode done if <b>-v</b> is used. Be warned that with <b>-v</b> a single SMB packet may take up a page or more, so only use <b>-v</b> if you want all the gory details.</p>
<h3 class="tab">NFS requests and replies</h3>
<p class="tab">Sun NFS (Network File System) requests and replies are printed as:</p>
<pre class="tab tcy">src.xid &gt; dst.nfs: len op args
src.nfs &gt; dst.xid: reply stat len op results
sushi.6709 &gt; wrl.nfs: 112 readlink fh 21,24/10.73165
wrl.nfs &gt; sushi.6709: reply ok 40 readlink "../var"
sushi.201b &gt; wrl.nfs:
144 lookup fh 9,74/4096.6878 "xcolors"
wrl.nfs &gt; sushi.201b:
reply ok 128 lookup fh 9,74/4134.3150
</pre>
<p class="tab">In the first line, host <b>sushi</b> sends a transaction with id <b>6709</b> to <b>wrl</b> (note that the number following the src host is a transaction id, not the source port). The request was <b>112</b> bytes, excluding the UDP and IP headers. The operation was a <b>readlink</b> (read symbolic link) on file handle (<b>fh</b>) <b>21,24/10.73165</b>. If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the <a href="/jargon/i/inode.htm">inode</a> number and generation number. <b>Wrl</b> replies '<b>ok</b>' with the contents of the link.</p>
<p class="tab">In the third line, <b>sushi</b> asks <b>wrl</b> to lookup the name '<b>xcolors</b>' in the directory file <b>9,74/4096.6878</b>. Note that the data printed depends on the operation type. The format is intended to be self explanatory if read in conjunction with an <a href="/jargon/n/nfs.htm">NFS</a> protocol spec.</p>
<p class="tab">If the <b>-v</b> (verbose) flag is given, additional information is printed. For example:</p>
<pre class="tab tcy">sushi.1372a &gt; wrl.nfs:
148 read fh 21,11/12.195 8192 bytes @ 24576
wrl.nfs &gt; sushi.1372a:
reply ok 1472 read REG 100664 ids 417/0 sz 29388
</pre>
<p class="tab"><b>-v</b> also prints the IP header <b>TTL</b>, <b>ID</b>, <b>length</b>, and <b>fragmentation fields</b>, which were omitted from this example. In the first line, <b>sushi</b> asks <b>wrl</b> to read <b>8192</b> bytes from file <b>21,11/12.195</b>, at byte offset <b>24576</b>. <b>Wrl</b> replies '<b>ok</b>'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes follow in subsequent fragments, but these fragments do not have NFS or even UDP headers and so might not be printed, depending on the filter expression used). Because the <b>-v</b> flag is given, some of the file attributes (which are returned in addition to the file data) are printed: the file type ("<b>REG</b>", for regular file), the <b>file mode</b> (in <a href="/jargon/o/octal.htm">octal</a>), the <b>uid</b> and <b>gid</b>, and the <b>file size</b>. If the <b>-v</b> flag is given more than once, even more details are printed.</p>
<p class="tab">Note that NFS requests are very large and much of the detail won't be printed unless snaplen is increased. Try using '<b>-s 192</b>' to watch NFS traffic.</p>
<p class="tab">NFS reply packets do not explicitly identify the RPC operation. Instead, <b>tcpdump</b> keeps track of "recent" requests, and matches them to the replies using the transaction ID. If a reply does not closely follow the corresponding request, it might not be parsable.</p>
<h3 class="tab">AFS requests and replies</h3>
<p class="tab">Transarc AFS (Andrew File System) requests and replies are printed as:</p>
<pre class="tab tcy">src.sport &gt; dst.dport: rx packet-type
src.sport &gt; dst.dport: rx packet-type service call call-name args
src.sport &gt; dst.dport: rx packet-type service reply call-name args
elvis.7001 &gt; pike.afsfs:
rx data fs call rename old fid 536876964/1/1 ".newsrc.new"
new fid 536876964/1/1 ".newsrc"
pike.afsfs &gt; elvis.7001: rx data fs reply rename
</pre>
<p class="tab">In the first line, host elvis sends an RX packet to pike. This was an RX data packet to the fs (fileserver) service, and is the start of an RPC call. The RPC call was a rename, with the old directory file id of 536876964/1/1 and an old file name of '.newsrc.new', and a new directory file id of 536876964/1/1 and a new file name of '.newsrc'. The host pike responds with an RPC reply to the rename call (which was successful, because it was a data packet and not an abort packet).</p>
<p class="tab">In general, all AFS RPCs are decoded at least by RPC call name. Most AFS RPCs have at least some of the arguments decoded (generally only the 'interesting' arguments, for some definition of interesting).</p>
<p class="tab">The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.</p>
<p class="tab">If the <b>-v</b> (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.</p>
<p class="tab">If the <b>-v</b> flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags. The MTU negotiation information is also printed from RX ack packets.</p>
<p class="tab">If the <b>-v</b> flag is given three times, the security index and service id are printed.</p>
<p class="tab">Error codes are printed for abort packets, except for Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).</p>
<p class="tab">Note that AFS requests are very large and many of the arguments won't be printed unless snaplen is increased. Try using '<b>-s 256</b>' to watch AFS traffic.</p>
<p class="tab"><b>AFS</b> reply packets do not explicitly identify the RPC operation. Instead, tcpdump keeps track of "recent" requests, and matches them to the replies using the call number and service ID. If a reply does not closely follow the corresponding request, it might not be parsable.</p>
<h3 class="tab">KIP AppleTalk (DDP in UDP)</h3>
<p class="tab"><a href="/jargon/a/appltalk.htm">AppleTalk</a> <a href="/jargon/d/ddp.htm">DDP</a> packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded). The file <b>/etc/atalk.names</b> is used to translate AppleTalk net and node numbers to names. Lines in this file have the form</p>
<pre class="tab tcy">number    name
1.254     ether
16.1      icsd-net
1.254.110 ace
</pre>
<p class="tab">The first two lines give the names of AppleTalk networks. The third line gives the name of a particular host a host is distinguished from a net by the 3rd octet in the number, a net number must have two octets and a host number must have three octets. The number and name should be separated by whitespace (blanks or tabs). The <b>/etc/atalk.names</b> file may contain blank lines or comment lines (lines starting with a '<b>#</b>').</p>
<p class="tab">AppleTalk addresses are printed in the form:</p>
<pre class="tab tcy">net.host.port
144.1.209.2 &gt; icsd-net.112.220
office.2 &gt; icsd-net.112.220
jssmag.149.235 &gt; icsd-net.2
</pre>
<p class="tab">If the <b>/etc/atalk.names</b> doesn't exist or doesn't contain an entry for some AppleTalk host/net number, addresses are printed in numeric form. In the first example, NBP (DDP port <b>2</b>) on net <b>144.1</b> node <b>209</b> is sending to whatever is listening on port <b>220</b> of net icsd node <b>112</b>. The second line is the same except the full name of the source node is known ('<b>office</b>'). The third line is a send from port <b>235</b> on net <b>jssmag</b> node <b>149</b> to broadcast on the <b>icsd-net</b> NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it's a good idea to keep node names and net names distinct in <b>/etc/atalk.names</b>).</p>
<p class="tab">NBP (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted. Other protocols dump the protocol name (or number if no name is registered for the protocol) and packet size.</p>
<p class="tab">NBP packets are formatted like the following examples:</p>
<pre class="tab tcy">icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: "=:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b3ffd2c0d6c1e4c1dac7d6c1f3">[email&#160;protected]</a>*"
jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: "RM1140:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ace0cddfc9defbdec5d8c9deec">[email&#160;protected]</a>*" 250
techpit.2 &gt; icsd-net.112.220: nbp-reply 190: "techpit:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="430f2230263114312a37263103">[email&#160;protected]</a>*" 186
</pre>
<p class="tab">The first line is a name lookup request for laserwriters sent by net icsd host <b>112</b> and broadcast on net jssmag. The nbp id for the lookup is 190. The second line shows a reply for this request (note that it has the same id) from host <b>jssmag.209</b> saying that it has a laserwriter resource named "<b>RM1140</b>" registered on port <b>250</b>. The third line is another reply to the same request saying host techpit has laserwriter "<b>techpit</b>" registered on port <b>186</b>.</p>
<p class="tab">ATP packet formatting is demonstrated by the following example:</p>
<pre class="tab tcy">jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt;    0xae030001
helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000
jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt;    0xae030001
helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt;    0xae030001
jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt;    0xae030002
</pre>
<p class="tab"><b>Jssmag.209</b> initiates transaction id <b>12266</b> with host <b>helios</b> by requesting up to 8 packets (the '<b>&lt;0-7&gt;</b>'). The hex number at the end of the line is the value of the 'userdata' field in the request. <b>Helios</b> responds with 8 <b>512</b>-byte packets. The '<b>:</b>[digit]' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data in the packet, excluding the atp header. The '<b>*</b>' on packet <b>7</b> indicates that the <a href="/jargon/e/eom.htm">EOM</a> bit was set.</p>
<p class="tab"><b>jssmag.209</b> then requests that packets <b>3</b> &amp; <b>5</b> be retransmitted. <b>Helios</b> resends them then <b>jssmag.209</b> releases the transaction. Finally, <b>jssmag.209</b> initiates the next request. The '<b>*</b>' on the request indicates that <b>XO</b> ('exactly once') was not set.</p>
<h3 class="tab">IP fragmentation</h3>
<p class="tab">Fragmented Internet datagrams are printed as:</p>
<pre class="tab tcy">(frag id:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5f2c36253a1f3039392c3a2b">[email&#160;protected]</a>+)
(frag id:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0b7862716e4b646d6d786e7f">[email&#160;protected]</a>)
</pre>
<p class="tab">The first form indicates there are more fragments. The second indicates this is the last fragment.</p>
<p class="tab"><b>Id</b> is the fragment id. Size is the fragment size (in bytes) excluding the IP header. Offset is this fragment's offset (in bytes) in the original datagram.</p>
<p class="tab">The fragment information is output for each fragment. The first fragment contains the higher level protocol header and the frag info is printed after the protocol info. Fragments after the first contain no higher level protocol header and the frag info is printed after the source and destination addresses. For example, here is part of an ftp from <b>arizona.edu</b> to <b>lbl-rtsg.arpa</b> over a <b>CSNET</b> connection that doesn't appear to handle 576 byte datagrams:</p>
<pre class="tab tcy">arizona.ftp-data &gt; rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0e3d3c364e3e">[email&#160;protected]</a>+)
arizona &gt; rtsg: (frag 595a:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="86b4b6b2c6b5b4be">[email&#160;protected]</a>)
rtsg.1170 &gt; arizona.ftp-data: . ack 1536 win 2560</pre>
<p class="tab">There are a few things to note here: First, addresses in the 2nd line don't include port numbers. Because the TCP protocol information is all in the first fragment and we have no idea what the port or sequence numbers are when we print the later fragments. Second, the tcp sequence information in the first line is printed as if there were 308 bytes of user data when, in fact, there are 512 bytes (308 in the first frag and 204 in the second). If you are looking for holes in the sequence space or trying to match up acks with packets, this can fool you.</p>
<p class="tab">A packet with the IP don't fragment flag is marked with a trailing (DF).</p>
<h3 class="tab">Timestamps</h3>
<p class="tab">By default, all output lines are preceded by a <a href="/jargon/t/timestam.htm">timestamp</a>. The timestamp is the current clock time in the form <b>hh:mm:ss.frac</b> and is as accurate as the kernel's clock. The timestamp reflects the time the kernel first saw the packet. No attempt is made to account for the time lag between when the Ethernet interface removed the packet from the wire and when the kernel serviced the 'new packet' interrupt.</p>
<h2 id="examples">Examples</h2>
<pre class="tcy tab">tcpdump host sundown</pre>
<p class="tab">Prints all packets arriving at or departing from host <b>sundown</b>.</p>
<pre class="tcy tab">tcpdump host helios and \( hot or ace \)</pre>
<p class="tab">Prints traffic between host <b>helios</b> and either <b>hot</b> or <b>ace</b>.</p>
<pre class="tcy tab">tcpdump ip host ace and not helios</pre>
<p class="tab">Prints all IP packets between <b>ace</b> and any host except <b>helios</b>.</p>
<pre class="tcy tab">tcpdump 'gateway snup and (port ftp or ftp-data)'</pre>
<p class="tab">Prints all <a href="/jargon/f/ftp.htm">ftp</a> traffic through Internet <a href="/jargon/g/gateway.htm">gateway</a> <b>snup.</b> Note that the expression is quoted to prevent the shell from interpreting the parentheses.</p>
<pre class="tcy tab">tcpdump ip and not net localnet</pre>
<p class="tab">Prints traffic neither sourced from nor destined for local hosts. If you gateway to another network, this stuff should never make it onto your local network.</p>
<pre class="tcy tab">tcpdump 'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet'</pre>
<p class="tab">Prints the start and end packets (the <b>SYN</b> and <b>FIN</b> packets) of each TCP conversation that involves a non-local host.</p>
<pre class="tcy tab">tcpdump 'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'</pre>
<p class="tab">Prints all IPv4 <a href="/jargon/h/http.htm">HTTP</a> packets to and from port 80. <b>tcpdump</b> prints only packets that contain data; not, for example, <b>SYN</b> and <b>FIN</b> packets and <b>ACK</b>-only packets.</p>
<pre class="tcy tab">tcpdump 'gateway snup and ip[2:2] &gt; 576'</pre>
<p class="tab">Prints IP packets longer than <b>576</b> bytes sent through gateway <b>snup</b>.</p>
<pre class="tcy tab">tcpdump 'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224'</pre>
<p class="tab">Prints IP broadcast or <a href="/jargon/m/multicast.htm">multicast</a> packets that were not sent via Ethernet broadcast or multicast.</p>
<pre class="tcy tab">tcpdump 'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply'</pre>
<p class="tab">Prints all <a href="/jargon/i/icmp.htm">ICMP</a> packets that are not <a href="/jargon/e/echo.htm">echo</a> requests/replies (i.e., not <a href="/jargon/p/ping.htm">ping</a> packets).</p>
<h2 id="related">Related commands</h2>
<p class="tab"><a href="/jargon/i/ip.htm"><b>ip</b></a> &mdash; Display and manipulate information about routing, devices, policy routing and tunnels.<br><a href="/unix/ustty.htm"><b>stty</b></a> &mdash; Set options for your terminal display.</p>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a83600ef4c3d9',m:'uilJCv_cS5iSR07pVGXbREuh6hVxOK4J7K3MU26bHGs-1661495367-0-AR7fj4/PrktJ1ceqvx9VkVDBN4pUVivlj9mDqzPUvPL1oLjyKNzHYLFRPziEjuot11dh8OtoxY2Ptcc+c4MNuWAswJxoyMRC4U3NMEkE4ef6Ay/E7CCZP6FdHsxs1pGUDn9f/GQtCXRmBsKZTaB8gKk=',s:[0x0d3d652cba,0xb2534c1f15],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>