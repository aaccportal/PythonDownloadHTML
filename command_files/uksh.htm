<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Linux ksh command</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-11-06">11/06/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/ksh.gif" width="300" height="300" alt="ksh command" class="floatRight">
<p class="intro">On <a href="/jargon/u/unix-like.htm">Unix-like</a> operating systems, <b>ksh</b> is the <a href="/jargon/e/execfile.htm">executable</a> of the Korn shell, a <a href="/jargon/c/command.htm">command</a> <a href="/jargon/s/shell.htm">shell</a> and <a href="/jargon/p/programming-language.htm">programming language</a>.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#desc">Description</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#related">Related commands</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="desc">Description</h2>
<p class="tab"><b>ksh</b> is a command and programming language that executes commands read from a <a href="/jargon/t/terminal.htm">terminal</a> or a <a href="/jargon/f/file.htm">file</a>. <b>rksh</b> is a restricted version of the command interpreter <b>ksh</b>; it is used to set up <a href="/jargon/l/login.htm">login</a> names and execution <a href="/jargon/e/environm.htm">environments</a> whose capabilities are more controlled than those of the standard shell. See <a href="#Invocation">invocation</a> below for the meaning of <a href="/jargon/a/argument.htm">arguments</a> to the shell.</p>
<h2 id="Definitions">Definitions</h2>
<p class="tab">In <b>ksh</b>, a <a href="/jargon/m/metachar.htm">metacharacter</a> is one of the following <a href="/jargon/c/charact.htm">characters</a>:</p>
<ul>
<li>;</li>
<li>&amp;</li>
<li>(</li>
<li>)</li>
<li>&lt;</li>
<li>&gt;</li>
<li><a href="/jargon/n/newline.htm">newline</a></li>
<li>space</li>
<li><a href="/jargon/t/tab.htm">tab</a></li>
</ul>
<p class="tab">A <i>blank</i> is a tab or a space. An <i>identifier</i> is a sequence of letters, <a href="/jargon/d/digit.htm">digits</a>, or underscores starting with a letter or underscore. <i>Identifiers</i> are used as components of <a href="/jargon/v/variable.htm">variable</a> names. A <i>vname</i> is a sequence of one or more identifiers separated by a dot ("<b>.</b>") and optionally preceded by a set of two dots ("<b>..</b>"). <i>Vnames</i> are used as <a href="/jargon/f/function.htm">function</a> and variable names. A <i>word</i> is a sequence of characters from the character set defined by the current locale, excluding non-quoted metacharacters.</p>
<p class="tab">A <i>command</i> is a sequence of characters in the syntax of the shell language. The shell reads each command and carries out the desired action either directly or by invoking separate <a href="/jargon/u/utility.htm">utilities</a>. A <i>built-in command</i> is a command that is carried out by the shell itself without creating a separate process. Some commands are built-in purely for convenience and are not documented here. Built-ins that cause side effects in the shell environment and built-ins that are found before performing a <a href="/jargon/p/path.htm">path</a> search (see <a href="#Execution">execution</a> below) are documented here. For historical reasons, some of these built-ins behave differently than other built-ins and are called <i>special built-ins</i>.</p>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">ksh [  &plusmn;abcefhikmnoprstuvxBCDP ] [ -R <i>file</i> ] [  &plusmn;o <i>option</i> ] ... [ - ] [ <i>arg</i> ... ]</pre>
<pre class="tcy tab">rksh [  &plusmn;abcefhikmnoprstuvxBCD ] [ -R <i>file</i> ] [  &plusmn;o <i>option</i> ] ... [ - ] [ <i>arg</i> ... ]</pre>
<h2 id="commands">Commands</h2>
<p class="tab">A <i>simple-command</i> is a list of variable assignments (see <a href="#Variable-Assignments">variable assignments</a> below) or a sequence of blank-separated words which may be preceded by a list of variable assignments (see <a href="#Environment">environment</a> below). The first word specifies the name of the command to be executed. Except as specified below, the remaining words are passed as arguments to the invoked command. The command name is passed as argument 0 (see <a href="/jargon/e/exec.htm">exec</a>). The value of a simple-command is its exit status; <b>0-255</b> if it terminates normally; <b>256+</b><a href="/unix/signals.htm">signum</a> if it terminates abnormally (the name of the signal corresponding to the exit status can be obtained via the <b>-l</b> option of the <a href="/jargon/k/kill.htm">kill</a> built-in utility).</p>
<p class="tab">A <a href="/jargon/p/pipe.htm">pipeline</a> is a sequence of one or more commands separated by a vertical bar ("<b>|</b>"). The standard output of each command but the last connects by a pipe to the <a href="/jargon/s/stdin.htm">standard input</a> of the next command. Each command, except possibly the last, is run as a separate <a href="/jargon/p/process.htm">process</a>; the shell waits for the last command to terminate. The exit status of a pipeline is the exit status of the last command unless the <b>pipefail</b> option is enabled. Each pipeline can be preceded by the reserved character "<b>!</b>" which causes the exit status of the pipeline to become 0 if the exit status of the last command is non-zero, and be 1 if the exit status of the last command is 0.</p>
<p class="tab">A <b>list</b> is a sequence of one or more pipelines separated by <b>;</b>, <b>&amp;</b>, <b>|&amp;</b>, <b>&amp;&amp;</b>, or <b>||</b>, and optionally terminated by <b>;</b>, <b>&amp;</b>, or <b>|&amp;</b>. Of these five symbols, <b>;</b>, <b>&amp;</b>, and <b>|&amp;</b> have equal precedence, which is lower than that of <b>&amp;&amp;</b> and <b>||</b>. The symbols <b>&amp;&amp;</b> and <b>||</b> also have equal precedence. A semicolon (<b>;</b>) causes sequential execution of the preceding pipeline; an ampersand (<b>&amp;</b>) causes <a href="/jargon/a/asynchro.htm">asynchronous</a> execution of the preceding pipeline (i.e., the shell does not wait for that pipeline to finish). The symbol <b>|&amp;</b> causes asynchronous execution of the preceding pipeline with a two-way pipe established to the <a href="/jargon/p/parechil.htm">parent</a> shell; the standard input and output of the spawned pipeline can be written to and read from by the parent shell by applying the redirection operators <b>&lt;&amp;</b> and <b>&gt;&amp;</b> with arg <b>p</b> to commands and using <b>-p</b> option of the built-in commands <b>read</b> and <b>print</b> described later. The symbol <b>&amp;&amp;</b> (<b>||</b>) causes the list following it to be executed only if the preceding pipeline returns a zero (non-zero) value. One or more new lines may appear in a list instead of a semicolon, to <a href="/jargon/d/delimite.htm">delimit</a> a command. The first item of the first pipeline of a list that is a simple command not beginning with a redirection, and not occurring within a <b>while</b>, <b>until</b>, or <b>if</b> list, can be preceded by a semicolon. This semicolon is ignored unless the <b>showme</b> option is enabled as described with the <b>set</b> built-in below.</p>
<p class="tab">A <i>command</i> is either a simple-command or one of the following. Unless otherwise stated, the value returned by a command is that of the last simple-command executed in the command.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:280px"><b>for</b> <i>vname</i> [ <b>in</b> <i>word</i> ... ] ;<b>do</b> <i>list</i> ;<b>done</b></td>
<td>Each time a <b>for</b> command is executed, <i>vname</i> is set to the next word taken from the in <i>word</i> list. If "<b>in</b> <i>word</i> ..." is omitted, then the <b>for</b> command executes the <b>do</b> list once for each positional parameter that is set starting from 1 (see <a href="#Parameter-Expansion">parameter expansion</a> below). Execution ends when there are no more words in the list.</td>
</tr>
<tr class="tcw">
<td><b>for ((</b> [<i>expr1</i>] <b>;</b> [<i>expr2</i>] <b>;</b> [<i>expr3</i>] <b>)) ;do</b> <i>list</i> <b>;done</b></td>
<td>The arithmetic <a href="/jargon/e/expressi.htm">expression</a> <i>expr1</i> is evaluated first (see <a href="#Arithmetic-Evaluation">arithmetic evaluation</a> below). The arithmetic expression <i>expr2</i> is repeatedly evaluated until it evaluates to zero and when non-zero, <i>list</i> is executed and the arithmetic expression <i>expr3</i> evaluated. If any expression is omitted, then it behaves as if it evaluated to 1.</td>
</tr>
<tr class="tcw">
<td><b>select</b> <i>vname</i> <b>[ in</b> <i>word</i> ... <b>] ;do</b> <i>list</i> <b>;done</b></td>
<td>A <b>select</b> command prints on standard error (file descriptor 2) the set of <i>word</i>s, each preceded by a number. If "<b>in</b> <i>word</i> ..." is omitted, then the positional parameters starting from 1 are used instead (see <a href="#Parameter-Expansion">parameter expansion</a> below). The <a href="#PS3">PS3</a> prompt is printed and a line is read from the standard input. If this line consists of the number of one of the listed <i>word</i>s, then the value of the variable <i>vname</i> is set to the word corresponding to this number. If this line is empty, the selection <i>list</i> is printed again. Otherwise, the value of the variable <i>vname</i> is set to <a href="/jargon/n/null.htm">null</a>. The contents of the line read from standard input is saved in the variable REPLY. The <i>list</i> is executed for each selection until a <a href="/jargon/b/break.htm">break</a> or <a href="/jargon/e/eof.htm">end-of-file</a> is encountered. If the REPLY variable is set to <b>null</b> by the execution of <i>list</i>, then the selection list is printed before displaying the <a href="#PS3">PS3</a> prompt for the next selection.</td>
</tr>
<tr class="tcw">
<td><b>case</b> <i>word</i> <b>in</b> [ [<b>(</b>]<i>pattern</i> [ <b>?</b> <i>pattern</i> ] ... ) <i>list</i> <b>;;</b> ] ... <b>esac</b></td>
<td>A <b>case</b> command executes the <i>list</i> associated with the first pattern that matches <i>word</i>. The form of the patterns is the same as that used for file-name generation (see <a href="#File-Name-Generation">file name generation</a> below). The <b>;;</b> operator causes execution of <b>case</b> to <a href="/jargon/t/terminat.htm">terminate</a>. If <b>;&amp;</b> is used in place of <b>;;</b> the next subsequent list, if any, is executed.</td>
</tr>
<tr class="tcw">
<td><b>if</b> <i>list</i> <b>;then</b> <i>list</i> [ <b>;elif</b> <i>list</i> <b>;then</b> <i>list</i> ] ... [ <b>;else</b> <i>list</i> ] <b>;fi</b></td>
<td>The <i>list</i> following <b>if</b> is executed and, if it returns a zero exit status, the <i>list</i> following the first <b>then</b> is executed. Otherwise, the <i>list</i> following <b>elif</b> is executed and, if its value is zero, the <i>list</i> following the <b>next</b> then is executed. Failing each successive <b>elif</b> <i>list</i>, the <b>else</b> <i>list</i> is executed. If the <b>if</b> <i>list</i> has non-zero exit status and there is no <b>else</b> <i>list</i>, then the <b>if</b> command returns a zero exit status.</td>
</tr>
<tr class="tcw">
<td><b>while</b> <i>list</i> <b>;do</b> <i>list</i> <b>;done</b><br><br><b>until</b> <i>list</i> <b>;do</b> <i>list</i> <b>;done</b></td>
<td>A <b>while</b> command repeatedly executes the <b>while</b> <i>list</i> and, if the exit status of the last command in the <i>list</i> is zero, executes the <b>do</b> <i>list</i>; otherwise the loop terminates. If no commands in the <b>do</b> <i>list</i> are executed, then the <b>while</b> command returns a zero exit status; <b>until</b> may be used in place of <b>while</b> to negate the loop termination test.</td>
</tr>
<tr class="tcw">
<td><b>((</b><i>expression</i><b>))</b></td>
<td>The <i>expression</i> is evaluated using the rules for arithmetic evaluation described below. If the value of the arithmetic expression is non-zero, the exit status is 0, otherwise the exit status is 1.</td>
</tr>
<tr class="tcw">
<td><b>(</b><i>list</i><b>)</b></td>
<td>Execute <i>list</i> in a separate environment. Note, that if two adjacent open parentheses are needed for nesting, a space must be inserted to avoid evaluation as an arithmetic command as described above.</td>
</tr>
<tr class="tcw">
<td><b>{</b> <i>list</i><b>;}</b></td>
<td><i>list</i> is executed. Note that unlike the metacharacters <b>(</b> and <b>)</b>, <b>{</b> and <b>}</b> are reserved words and must occur at the beginning of a line or after a <b>;</b> to be recognized.</td>
</tr>
<tr class="tcw">
<td><b>[[</b> <i>expression</i> <b>]]</b></td>
<td>Evaluates <i>expression</i> and returns a zero exit status when <i>expression</i> is true. See <a href="#Conditional-Expressions">conditional expressions</a> below for a description of <i>expression</i>.</td>
</tr>
<tr class="tcw">
<td><b>function</b> <i>varname</i> <b>{</b> <i>list</i> <b>;}</b><br><br><i>varname</i> <b>() {</b> <i>list</i> <b>;}</b></td>
<td>Define a function that is referenced by <i>varname</i>. A function whose <i>varname</i> contains a <b>.</b> is called a discipline function and the portion of the <i>varname</i> preceding the last <b>.</b> must refer to an existing variable. The body of the function is the list of commands between <b>{</b> and <b>}</b>. A function defined with the "<b>function</b> <i>varname</i>" syntax can also be used as an argument to the <b>.</b> special built-in command to get the equivalent behavior as if the <i>varname</i><b>()</b> syntax was used to define it. See <a href="#Functions">functions</a> below.</td>
</tr>
<tr class="tcw">
<td><b>namespace</b> <i>identifier</i> <b>{</b> <i>list</i> <b>;}</b></td>
<td>Defines or uses the name space identifier and runs the commands in <i>list</i> in this name space. See <a href="#Name-Spaces">name spaces</a> below.</td>
</tr>
<tr class="tcw">
<td><b>&amp;</b> [ <i>name</i> [ <i>arg</i>... ] ]</td>
<td>Causes subsequent <i>list</i> commands terminated by <b>&amp;</b> to be placed in the background job pool name. If <i>name</i> is omitted a default unnamed pool is used. Commands in a named background pool may be executed remotely.</td>
</tr>
<tr class="tcw">
<td><b>time</b> [ <i>pipeline</i> ]</td>
<td>If <i>pipeline</i> is omitted, the user and system time for the current shell and completed <a href="/jargon/p/parechil.htm">child</a> processes is printed on standard error. Otherwise, <i>pipeline</i> is executed and the elapsed time and the user and system time are printed on standard error. The <b>TIMEFORMAT</b> variable may be set to a format string that specifies how the timing information should be displayed. See <a href="#Shell-Variables">shell variables</a> below for a description of the <b>TIMEFORMAT</b> variable.</td>
</tr>
</table>
<p class="tab">The following reserved words are recognized as reserved only when they are the first word of a command and are not quoted:</p>
<ul>
<li><b>if</b></li>
<li><b>then</b></li>
<li><b>else</b></li>
<li><b>elif</b></li>
<li><b>fi</b></li>
<li><b>case</b></li>
<li><b>esac</b></li>
<li><b>for</b></li>
<li><b>while</b></li>
<li><b>until</b></li>
<li><b>do</b></li>
<li><b>done</b></li>
<li><b>{</b></li>
<li><b>}</b></li>
<li><b>function</b></li>
<li><b>select</b></li>
<li><b>time</b></li>
<li><b>[[</b></li>
<li><b>]]</b></li>
<li><b>!</b></li>
</ul>
<h2 id="Variable-Assignments">Variable assignments</h2>
<p class="tab">One or more variable assignments can start a simple command or can be arguments to the <b>typeset</b>, <b>enum</b>, <b>export</b>, or <b>read-only</b> special built-in commands and to other declaration commands created as types. The syntax for an assignment is of the form:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><i>varname</i><b>=</b><i>word</i><br><br><i>varname</i>[<i>word</i>]<b>=</b><i>word</i></td>
<td>No space is permitted between <i>varname</i> and the <b>=</b> or between <b>=</b> and <i>word</i>.</td>
</tr>
<tr class="tcw">
<td><i>varname</i><b>=(</b><i>assign_list</i><b>)</b></td>
<td>No space is permitted between <i>varname</i> and the <b>=</b>. The variable <i>varname</i> is unset before the assignment. An <i>assign_list</i> can be one of the following:<br>
<table>
<tr class="tcw">
<td style="width:150px"><i>word</i> ...</td>
<td>Indexed <a href="/jargon/a/array.htm">array</a> assignment.</td>
</tr>
<tr class="tcw">
<td>[<i>word</i>]<b>=</b><i>word</i> ...</td>
<td>Associative array assignment. If preceded by <b>typeset -a</b>, this creates an indexed array instead.</td>
</tr>
<tr class="tcw">
<td><i>assignment</i> ...</td>
<td>Compound variable assignment. This creates a compound variable <i>varname</i> with sub-variables of the form <i>varname.name</i>, where <i>name</i> is the <i>name</i> portion of assignment. The value of <i>varname</i> contains all the assignment elements. Additional assignments made to sub-variables of <i>varname</i> also displays as part of the value of <i>varname</i>. If no assignments are specified, <i>varname</i> will be a compound variable allowing subsequence child elements to be defined.</td>
</tr>
<tr class="tcw">
<td><b>typeset</b> [<i>options</i>] <i>assignment</i> ...</td>
<td>Nested variable assignment. Multiple assignments can be specified by separating each of them with a <b>;</b>. The previous value is unset before the assignment. Other declaration commands such as <b>readonly</b>, <b>enum</b>, and other declaration commands can be used in place of <b>typeset</b>.</td>
</tr>
<tr class="tcw">
<td><b>.</b> <i>file name</i></td>
<td>Include the assignment commands contained in <i>file name</i>.</td>
</tr>
</table>
</td>
</tr>
</table>
<p class="tab">Also, a <b>+=</b> can be used in place of the <b>=</b> to signify adding to or appending to the previous value. When <b>+=</b> is applied to an arithmetic type, <i>word</i> is evaluated as an arithmetic expression and added to the current value. When applied to a <a href="/jargon/s/string.htm">string</a> variable, the value defined by word is appended to the value. For compound assignments, the previous value is not unset and the new values are appended to the current ones provided that the types are compatible.</p>
<p class="tab">The right side of a variable assignment undergoes all the expansion listed below except word splitting, brace expansion, and file name generation. When the left side is an assignment is a compound variable and the right side is the name of a compound variable, the compound variable on the right is copied or appended to the compound variable on the left.</p>
<h2>Comments</h2>
<p class="tab">A word beginning with <b>#</b> is considered the beginning of a <a href="/jargon/c/comment.htm">comment</a>, causing that word and all the following characters up to a <a href="/jargon/n/newline.htm">newline</a> to be ignored.</p>
<h2>Aliasing</h2>
<p class="tab">The first word of each command is replaced by the text of an alias if an alias for this word was defined. An alias name consists of any number of characters excluding metacharacters, quoting characters, file expansion characters, parameter expansion and command substitution characters, the characters <b>/</b> and <b>=</b>. The replacement string can contain any valid shell script including the metacharacters listed above. The first word of each command in the replaced text, other than any that are being replaced, will be tested for aliases. If the last character of the alias value is a blank then the word following the alias also checks for alias substitution. Aliases can redefine built-in commands but cannot be used to redefine the reserved words listed above. Aliases can be created and listed with the <b>alias</b> command and can be removed with the <b>unalias</b> command. Aliasing is performed when scripts are read, not while they are executed. Therefore, for an alias to take effect, the <b>alias</b> definition command has to be executed before the command which references the alias is read.</p>
<p class="tab">The following aliases are compiled into the shell but can be unset or redefined:</p>
<ul>
<li><b>autoload='typeset -fu'</b></li>
<li><b>command='command '</b></li>
<li><b>compound='typeset -C'</b></li>
<li><b>fc=hist</b></li>
<li><b>float='typeset -lE'</b></li>
<li><b>functions='typeset -f'</b></li>
<li><b>hash='alias -t --'</b></li>
<li><b>history='hist -l'</b></li>
<li><b>integer='typeset -li'</b></li>
<li><b>nameref='typeset -n'</b></li>
<li><b>nohup='nohup '</b></li>
<li><b>r='hist -s'</b></li>
<li><b>redirect='command exec'</b></li>
<li><b>source='command .'</b></li>
<li><b>stop='kill -s STOP'</b></li>
<li><b>suspend='kill -s STOP $$'</b></li>
<li><b>times='{ { time;} 2&lt;&amp;1;}'</b></li>
<li><b>type='whence -v'</b></li>
</ul>
<h2>Tilde substitution</h2>
<p class="tab">After alias substitution is performed, each word is checked to see if it begins with an unquoted "<b>~</b>". For tilde substitution, <i>word</i> also refers to the word portion of parameter expansion (see <a href="#Parameter-Expansion">parameter expansion</a> below). If it does, then the word up to a <b>/</b> is checked to see if it matches a username in the password database. If a match is found, the <b>~</b> and the matched login name are replaced by the login directory of the matched user. If no match is found, the original text is left unchanged. A <b>~</b> by itself, or in front of a <b>/</b>, is replaced by <b>$HOME</b>. A <b>~</b> followed by a <b>+</b> or <b>-</b> is replaced by the value of <b>$PWD</b> and <b>$OLDPWD</b> respectively.</p>
<p class="tab">Also, when expanding a variable assignment, tilde substitution is attempted when the value of the assignment begins with a <b>~</b>, and when a <b>~</b> appears after a <b>:</b>. The <b>:</b> also terminates a <b>~</b> login name.</p>
<h2>Command substitution</h2>
<p class="tab">The standard output from a command list enclosed in parentheses preceded by a dollar sign ("<b>$(</b><i>list</i><b>)</b>"), or in a brace group preceded by a dollar sign ("<b>${</b> <i>list</i><b>;}</b>"), or in a pair of grave accents (<b>"</b>) may be used as part or all of a word; trailing newlines are removed. In the second case, the <b>{</b> and <b>}</b> are treated as a reserved words so that <b>{</b> must be followed by a blank and <b>}</b> must appear at the beginning of the line or follow a <b>;</b>. In the third (obsolete) form, the string between the quotes is processed for special quoting characters before the command is executed (see <a href="#Quoting">quoting</a> below). The command substitution "<b>$(cat</b> <i>file</i><b>)</b>" can be replaced by the equivalent but faster "<b>$(&lt;</b><i>file</i><b>)</b>". The command substitution <b>$(</b><i>n</i><b>&lt;#)</b> expands to the current byte offset for file descriptor <i>n</i>. Except for the second form, the command list is run in a subshell so that no side effects are possible. For the second form, the final <b>}</b> will be recognized as a reserved word after any <a href="/jargon/t/token.htm">token</a>.</p>
<h2>Arithmetic substitution</h2>
<p class="tab">An arithmetic expression enclosed in double parentheses preceded by a dollar sign ("<b>$(())</b>") is replaced by the value of the arithmetic expression in double parentheses.</p>
<h2>Process substitution</h2>
<p class="tab">Each command argument of the form <b>&lt;(</b><i>list</i><b>)</b> or <b>&gt;(</b><i>list</i><b>)</b> runs process <i>list</i> asynchronously connected to some file in <b>/dev/fd</b> if this directory exists, or else a <a href="/jargon/f/fifo.htm">fifo</a> a <a href="/jargon/t/tempdir.htm">temporary directory</a>. The name of this file becomes the argument to the command. If the form with <b>&gt;</b> is selected, then writing on this file provides input for <i>list</i>. If <b>&lt;</b> is used, then the file passed as an argument contains the output of the <i>list</i> process. For example,</p>
<pre class="tab tcy">paste &lt;(cut -f1 <i>file1</i>) &lt;(cut -f3 <i>file2</i>) | tee &gt;(<i>process1</i>) &gt;(<i>process2</i>)</pre>
<p class="tab">cuts fields <b>1</b> and <b>3</b> from the files <b>file1</b> and <b>file2</b> respectively, pastes the results together, and sends it to the processes <b>process1</b> and <b>process2</b>, and putting it onto the standard output. Note that the file, which is passed as an argument to the command, is a UNIX pipe so programs that expect to <b>lseek</b> on the file will not work.</p>
<p class="tab">Process substitution of the form <b>&lt;(</b><i>list</i><b>)</b> can also be used with the <b>&lt;</b> redirection operator which causes the output of list to be standard input or the input for whatever file descriptor is specified.</p>
<h2 id="Parameter-Expansion">Parameter expansion</h2>
<p class="tab">A <a href="/jargon/p/paramete.htm">parameter</a> is a variable, one or more digits, or any of the characters <b>*</b>, <b>@</b>, <b>#</b>, <b>?</b>, <b>-</b>, <b>$</b>, and <b>!</b>. A variable is denoted by a <i>vname</i>. To create a variable whose <i>vname</i> contains a <b>.</b>, a variable whose <i>vname</i> consists of everything before the last <b>.</b> must already exist. A variable has a <i>value</i> and zero or more attributes. Variables can be assigned values and attributes using the <b>typeset</b> special built-in command. The attributes supported by the shell are described later with the <b>typeset</b> special built-in command. Exported variables pass values and attributes to the environment.</p>
<p class="tab">The shell supports both indexed and associative arrays. An element of an array variable is referenced by a subscript. A subscript for an indexed array is denoted by an arithmetic expression (see <a href="#Arithmetic-Evaluation">arithmetic evaluation</a> below) between a <b>[</b> and a <b>]</b>. To assign values to an indexed array, use &quot;<i>vname</i><b>=(</b><i>value</i> ...<b>)</b>&quot; or &quot;<b>set -A</b> <i>vname value</i> ...&quot; . The value of all non-negative subscripts must be in the range of 0 through 4,194,303. A negative subscript is treated as an offset from the maximum current index <b>+1</b> so that <b>-1</b> refers to the last element. Indexed arrays can be declared with the <b>-a</b> option to <b>typeset</b>. Indexed arrays need not be declared. Any reference to a variable with a valid subscript is legal and an array is created, if necessary.</p>
<p class="tab">An associative array is created with the <b>-A</b> option to <b>typeset</b>. A subscript for an associative array is denoted by a string enclosed between <b>[</b> and <b>]</b>.</p>
<p class="tab">Referencing any array without a subscript is equivalent to referencing the array with subscript 0.</p>
<p class="tab">The value of a variable may be assigned by writing:</p>
<pre class="tab tcy"><i>vname</i>=<i>value</i> [ <i>vname</i>=<i>value</i> ] ...</pre>
<p class="tab">or</p>
<p class="tab tcy"><i>vname</i>[<i>subscript</i>]=<i>value</i> [ <i>vname</i>[<i>subscript</i>]=<i>value</i> ] ...</p>
<p class="tab">Note that no space is allowed before or after the <b>=</b>.</p>
<p class="tab">Attributes assigned by the <b>typeset</b> special built-in command apply to all elements of the array. An array element can be a simple variable, a compound variable or an array variable. An element of an indexed array can be either an indexed array or an associative array. An element of an associative array can also be either. To refer to an array element that is part of an array element, concatenate the subscript in brackets. For example, to refer to the <b>foobar</b> element of an associative array that is defined as the third element of the indexed array, use <b>${</b><i>vname</i><b>[3][foobar]}</b>.</p>
<p class="tab">A <b>nameref</b> is a variable that is a reference to another variable. A <b>nameref</b> is created with the <b>-n</b> attribute of <b>typeset</b>. The value of the variable at the time of the <b>typeset</b> command becomes the variable that will be referenced whenever the <b>nameref</b> variable is used. The name of a <b>nameref</b> cannot contain a "<b>.</b>". When a variable or function name contains a "<b>.</b>", and the portion of the name up to the first "<b>.</b>" matches the name of a <b>nameref</b>, the variable referred to is obtained by replacing the <b>nameref</b> portion with the name of the variable referenced by the <b>nameref</b>. If a <b>nameref</b> is used as the index of a <b>for</b> loop, a name reference is established for each item in the list. A <b>nameref</b> provides a convenient way to refer to the variable inside a function whose name is passed as an argument to a function. For example, if the name of a variable is passed as the first argument to a function, the command:</p>
<pre class="tab tcy">typeset -n <i>var</i>=$1</pre>
<p class="tab">inside the function causes references and assignments to <i>var</i> to be references and assignments to the variable whose name was passed to the function.</p>
<p class="tab">If any of the floating point attributes, <b>-E</b>, <b>-F</b>, or <b>-X</b>, or the <a href="/jargon/i/integer.htm">integer</a> attribute, <b>-i</b>, is set for <i>vname</i>, then the <i>value</i> is subject to arithmetic evaluation as described below.</p>
<p class="tab">Positional parameters (parameters denoted by a number) may be assigned values with the <b>set</b> special built-in command.</p>
<p class="tab">Parameter <b>$0</b> is set from argument zero when the shell is invoked.</p>
<p class="tab">The character <b>$</b> is used to introduce substitutable <i>parameters</i>.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:300px"><b>${</b><i>parameter</i><b>}</b></td>
<td>The shell reads all the characters from <b>${</b> to the matching <b>}</b> as part of the same word even if it contains braces or metacharacters. The value, if any, of the <i>parameter</i> is substituted. The braces are required when <i>parameter</i> is followed by a letter, digit, or underscore that is not to be interpreted as part of its name, when the variable name contains a "<b>.</b>". The braces are also required when a variable is subscripted unless it is part of an arithmetic expression or a conditional expression. If <i>parameter</i> is one or more digits then it is a positional parameter. A positional parameter of more than one digit must be enclosed in braces. If parameter is <b>*</b> or <b>@</b>, then all the positional parameters, starting with <b>$1</b>, are substituted (separated by a field separator character). If an array <i>vname</i> with last subscript <b>* @</b>, or for index arrays of the form <i>sub1 .. sub2</i>. is used, then the value for each of the elements between <i>sub1</i> and <i>sub2</i> inclusive (or all elements for <b>*</b> and <b>@</b>) is substituted, separated by the first character of the value of <a href="#IFS">IFS</a>.</td>
</tr>
<tr class="tcw">
<td><b>${#</b><i>parameter</i><b>}</b></td>
<td>If parameter is <b>*</b> or <b>@</b>, the number of positional parameters is substituted. Otherwise, the length of the value of the parameter is substituted.</td>
</tr>
<tr class="tcw">
<td><b>${#</b><i>vname</i>[<b>*</b>]<b>}</b><br><br><b>${#</b><i>vname</i>[<b>@</b>]<b>}</b></td>
<td>The number of elements in the array <i>vname</i> is substituted.</td>
</tr>
<tr class="tcw">
<td><b>${@</b><i>vname</i><b>}</b></td>
<td>Expands to the type name (See <a href="#Type-Variables">type variables</a> below) or attributes of the variable referred to by <i>vname</i>.</td>
</tr>
<tr class="tcw">
<td><b>${!</b><i>vname</i><b>}</b></td>
<td>Expands to the name of the variable referred to by <i>vname</i>. This will be <i>vname</i> except when <i>vname</i> is a name reference.</td>
</tr>
<tr class="tcw">
<td><b>${!</b><i>vname</i>[<i>subscript</i>]<b>}</b></td>
<td>Expands to <i>name</i> of the <i>subscript</i> unless <i>subscript</i> is <b>*</b>, <b>@</b> or of the form <b>sub1 .. sub2</b>. When <i>subscript</i> is <b>*</b>, the list of array subscripts for <i>vname</i> is generated. For a variable that is not an array, the value is 0 if the variable is set. Otherwise, it is null. When <i>subscript</i> is <b>@</b>, same as above; except that when used in double quotes, each array subscript yields a separate argument. When <i>subscript</i> is of the form <i>sub1 .. sub2</i> it expands to the list of subscripts between <i>sub1</i> and <i>sub2</i>, inclusive, using the same quoting rules as <b>@</b>.</td>
</tr>
<tr class="tcw">
<td><b>${!</b><i>prefix</i><b>*}</b></td>
<td>Expands to the names of the variables whose names begin with <i>prefix</i>.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:-</b><i>word</i><b>}</b></td>
<td>If <i>parameter</i> is set and is non-null then substitute its value; otherwise substitute <i>word</i>.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:=</b><i>word</i><b>}</b></td>
<td>If <i>parameter</i> is not set or is null then set it to <i>word</i>; the value of the parameter is then substituted. Positional parameters may not be assigned to in this way.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:?</b><i>word</i><b>}</b></td>
<td>If <i>parameter</i> is set and is non-null then substitute its value; otherwise, print <i>word</i> and exit from the shell (if not interactive). If <i>word</i> is omitted then a standard message is printed.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:+</b><i>word</i><b>}</b></td>
<td>If <i>parameter</i> is set and is non-null then substitute <i>word</i>; otherwise substitute nothing.<br><br> In the above, <i>word</i> is not evaluated unless it is to be used as the substituted string, so that, in the following example, <b>pwd</b> is executed only if <b>d</b> is not set or is null:<br><br><pre class="tcy">print ${d:-$(pwd)}</pre> If the colon ("<b>:</b>") is omitted from the above expressions, then the shell only checks whether <i>parameter</i> is set or not.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>:</b><i>offset</i><b>:</b><i>length</i><b>}</b><br><br><b>${</b><i>parameter</i><b>:</b><i>offset</i><b>}</b></td>
<td>Expands to the portion of the value of <i>parameter</i> starting at the character (counting from 0) determined by expanding offset as an arithmetic expression and consisting of the number of characters determined by the arithmetic expression defined by <i>length</i>. In the second form, the remainder of the value is used. A negative offset counts backwards from the end of <i>parameter</i>. Note that one or more blanks is required in front of a minus sign to prevent the shell from interpreting the operator as <b>:-</b>. If <i>parameter</i> is <b>*</b> or <b>@</b>, or is an array name indexed by <b>*</b> or <b>@</b>, then offset and length refer to the array index and number of elements respectively. A negative offset is taken relative to one greater than the highest subscript for indexed arrays. The order for associate arrays is unspecified.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>#</b><i>pattern</i><b>}</b><br><br><b>${</b><i>parameter</i><b>##</b><i>pattern</i><b>}</b></td>
<td>If the shell <i>pattern</i> matches the beginning of the value of <i>parameter</i>, then the value of this expansion is the value of the parameter with the matched portion deleted; otherwise the value of this <i>parameter</i> is substituted. In the first form, the smallest matching pattern is deleted and in the second form the largest matching pattern is deleted. When <i>parameter</i> is <b>@</b>, <b>*</b>, or an array variable with subscript <b>@</b> or <b>*</b>, the substring operation is applied to each element in turn.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>%</b><i>pattern</i><b>}</b><br><br><b>${</b><i>parameter</i><b>%%</b><i>pattern</i><b>}</b></td>
<td>If the shell pattern matches the end of the value of <i>parameter</i>, then the value of this expansion is the value of the parameter with the matched part deleted; otherwise substitute the value of <i>parameter</i>. In the first form, the smallest matching pattern is deleted and in the second form the largest matching pattern is deleted. When <i>parameter</i> is <b>@</b>, <b>*</b>, or an array variable with subscript <b>@</b> or <b>*</b>, the substring operation is applied to each element in turn.</td>
</tr>
<tr class="tcw">
<td><b>${</b><i>parameter</i><b>/</b><i>pattern</i><b>/</b><i>string</i><b>}</b><br><br><b>${</b><i>parameter</i><b>//</b><i>pattern</i><b>/</b><i>string</i><b>}</b><br><br><b>${</b><i>parameter</i><b>/#</b><i>pattern</i><b>/</b><i>string</i><b>}</b><br><br><b>${</b><i>parameter</i><b>/%</b><i>pattern</i><b>/</b><i>string</i><b>}</b></td>
<td>Expands <i>parameter</i> and replaces the longest match of pattern with the given <i>string</i>. Each occurrence of <b>\n</b> in <i>string</i> is replaced by the portion of parameter that matches the <i>n</i>-th sub-pattern. In the first form, only the first occurrence of pattern is replaced. In the second form, each match for pattern is replaced by the given <i>string</i>. The third form restricts the pattern match to the beginning of the <i>string</i> while the fourth form restricts the pattern match to the end of the string. When <i>string</i> is null, the pattern will be deleted and the <b>/</b> in front of <i>string</i> may be omitted. When <i>parameter</i> is <b>@</b>, <b>*</b>, or an array variable with subscript <b>@</b> or <b>*</b>, the substitution operation is applied to each element in turn. In this case, the <i>string</i> portion of <i>word</i> will be re-evaluated for each element.</td>
</tr>
</table>
<p class="tab">The following parameters are automatically set by the shell:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:170px"><b>#</b></td>
<td>The number of positional parameters in decimal.</td>
</tr>
<tr class="tcw">
<td><b>-</b></td>
<td>Options supplied to the shell on invocation or by the <b>set</b> command.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>The decimal value returned by the last executed command.</td>
</tr>
<tr class="tcw">
<td><b>$</b></td>
<td>The process number of this shell.</td>
</tr>
<tr class="tcw">
<td><b>_</b></td>
<td>Initially, the value of <b>_</b> (an underscore) is an <a href="/jargon/a/absopath.htm">absolute pathname</a> of the shell or script being executed as passed in the environment. Subsequently it is assigned the last argument of the previous command. This parameter is not set for commands that are asynchronous. This parameter is also used to hold the name of the matching <i>MAIL</i> file when checking for mail. While defining a compound variable or a type, <b>_</b> is initialized as a reference to the compound variable or type. When a discipline function is invoked, <b>_</b> is initialized as a reference to the variable associated with the call to this function. Finally, when <b>_</b> is used as the name of the first variable of a type definition, the new type is derived from the type of the first variable See <a href="#Type-Variables">type variables</a> below.</td>
</tr>
<tr class="tcw">
<td><b>!</b></td>
<td>The process id or the pool name and job number of the last background command invoked or the most recent job put in the background with the bg built-in command. Background jobs started in a named pool will be in the form <i>pool</i>.<i>number</i> where <i>pool</i> is the pool name and <i>number</i> is the job number within that pool.</td>
</tr>
<tr class="tcw">
<td><b>.sh.command</b></td>
<td>When processing a DEBUG trap, this variable contains the current command line that is about to run.</td>
</tr>
<tr class="tcw">
<td><b>.sh.edchar</b></td>
<td>This variable contains the value of the keyboard character (or sequence of characters if the first character is an <b>ESC</b>, ASCII code 033) that was entered when processing a KEYBD trap (see <a href="#Key-Bindings">key bindings</a> below). If the value is changed as part of the trap action, then the new value replaces the key (or key sequence) that caused the trap.</td>
</tr>
<tr class="tcw">
<td><b>.sh.edcol</b></td>
<td>The character position of the cursor at the time of the most recent KEYBD trap.</td>
</tr>
<tr class="tcw">
<td><b>.sh.edmode</b></td>
<td>The value is set to <b>ESC</b> when processing a KEYBD trap while in <a href="/unix/uvi.htm">vi</a> insert mode. See <a href="#Vi-Editing-Mode">vi editing mode</a> below. Otherwise, <b>.sh.edmode</b> is null when processing a KEYBD trap.</td>
</tr>
<tr class="tcw">
<td><b>.sh.edtext</b></td>
<td>The characters in the input buffer at the time of the most recent KEYBD trap. The value is null when not processing a KEYBD trap.</td>
</tr>
<tr class="tcw">
<td><b>.sh.file</b></td>
<td>The pathname of the file containing the current command.</td>
</tr>
<tr class="tcw">
<td><b>.sh.fun</b></td>
<td>The name of the current function that is being executed.</td>
</tr>
<tr class="tcw">
<td><b>.sh.level</b></td>
<td>Set to the current function depth. This can be changed inside a DEBUG trap and set the context to the specified level.</td>
</tr>
<tr class="tcw">
<td><b>.sh.lineno</b></td>
<td>Set during a DEBUG trap to the line number for the caller of each function.</td>
</tr>
<tr class="tcw">
<td><b>.sh.match</b></td>
<td>An indexed array which stores the most recent match and sub-pattern matches after conditional pattern matches that match and after variables expansions using the operators <b>#</b>, <b>%</b>, or <b>/</b>. The 0-th element stores the complete match and the <i>i</i>-th element stores the <i>i</i>-th submatch. The <b>.sh.match</b> variable becomes unset when the expanded variable is assigned a new value.</td>
</tr>
<tr class="tcw">
<td><b>.sh.math</b></td>
<td>Used for defining arithmetic functions (see <a href="#Arithmetic-Evaluation">arithmetic evaluation</a> below). and stores the list of user defined arithmetic functions.</td>
</tr>
<tr class="tcw">
<td><b>.sh.name</b></td>
<td>Set to the name of the variable at the time that a discipline function is invoked.</td>
</tr>
<tr class="tcw">
<td><b>.sh.subscript</b></td>
<td>Set to the name subscript of the variable at the time that a discipline function is invoked.</td>
</tr>
<tr class="tcw">
<td><b>.sh.subshell</b></td>
<td>The current depth for subshells and command substitution.</td>
</tr>
<tr class="tcw">
<td><b>.sh.value</b></td>
<td>Set to the value of the variable at the time that the <b>set</b> or <b>append</b> discipline function is invoked. When a user defined arithmetic function is invoked, the value of <b>.sh.value</b> is saved and <b>.sh.value</b> is set to long double precision floating point <b>.sh.value</b> is restored when the function returns.</td>
</tr>
<tr class="tcw">
<td><b>.sh.version</b></td>
<td>Set to a value that identifies the version of this shell.</td>
</tr>
<tr class="tcw">
<td><b>KSH_VERSION</b></td>
<td>A name reference to <b>.sh.version</b>.</td>
</tr>
<tr class="tcw">
<td><b>LINENO</b></td>
<td>The current line number in the script or function being executed.</td>
</tr>
<tr class="tcw">
<td><b>OLDPWD</b></td>
<td>The previous working directory set by the <a href="/unix/ucd.htm">cd</a> command.</td>
</tr>
<tr class="tcw">
<td><b>OPTARG</b></td>
<td>The value of the last option argument processed by the <b>getopts</b> built-in command.</td>
</tr>
<tr class="tcw">
<td><b>OPTIND</b></td>
<td>The index of the last option argument processed by the <b>getopts</b> built-in command.</td>
</tr>
<tr class="tcw">
<td><b>PPID</b></td>
<td>The process number of the parent of the shell.</td>
</tr>
<tr class="tcw">
<td><b>PWD</b></td>
<td>The present working directory set by the <b>cd</b> command.</td>
</tr>
<tr class="tcw">
<td><b>RANDOM</b></td>
<td>Each time this variable is referenced, a random integer, uniformly distributed between 0 and 32767, is generated. The sequence of random numbers can be initialized by assigning a numeric value to <b>RANDOM</b>.</td>
</tr>
<tr class="tcw">
<td><b>REPLY</b></td>
<td>This variable is set by the <b>select</b> statement and by the <b>read</b> built-in command when no arguments are supplied.</td>
</tr>
<tr class="tcw">
<td><b>SECONDS</b></td>
<td>Each time this variable is referenced, the number of seconds since shell invocation is returned. If this variable is assigned a value, then the value returned upon reference will be the value that was assigned plus the number of seconds since the assignment.</td>
</tr>
<tr class="tcw">
<td><b>SHLVL</b></td>
<td>An integer variable that is incremented each time the shell is invoked and is exported. If <b>SHLVL</b> is not in the environment when the shell is invoked, it is set to 1.</td>
</tr>
</table>
<p class="tab" id="Shell-Variables">The following variables are used by the shell:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:170px"><b>CDPATH</b></td>
<td>The search path for the <b>cd</b> command.</td>
</tr>
<tr class="tcw">
<td><b>COLUMNS</b></td>
<td>If this variable is set, the value is used to define the width of the edit window for the shell edit modes and for printing select lists.</td>
</tr>
<tr class="tcw">
<td><b>EDITOR</b></td>
<td>If the <b>VISUAL</b> variable is not set, the value of this variable will be checked for the patterns as described with <b>VISUAL</b> below and the corresponding editing option will be turned on.</td>
</tr>
<tr class="tcw">
<td><b>ENV</b></td>
<td>If this variable is set, then parameter expansion, command substitution, and arithmetic substitution are performed on the value to generate the pathname of the script that will be executed when the shell is invoked interactively (see <a href="#Invocation">invocation</a> below). This file is often used for <b>alias</b> and <b>function</b> definitions. The default value is <b>$HOME/.kshrc</b>. On systems that support a system wide <b>/etc/ksh.kshrc</b> initialization file, if the file name generated by the expansion of <b>ENV</b> begins with <b>/./</b> or <b>././</b> the system wide initialization file isn't executed.</td>
</tr>
<tr class="tcw">
<td><b>FCEDIT</b></td>
<td>Obsolete name for the default editor name for the <b>hist</b> command. <b>FCEDIT</b> is not used when <b>HISTEDIT</b> is set.</td>
</tr>
<tr class="tcw">
<td><b>FIGNORE</b></td>
<td>A pattern that defines the set of file names that are ignored when performing file name matching.</td>
</tr>
<tr class="tcw">
<td><b>FPATH</b></td>
<td>The search path for function definitions. The directories in this path are searched for a file with the same name as the function or command when a function with the <b>-u</b> attribute is referenced and when a command is not found. If an executable file with the name of that command is found, then it is read and executed in the current environment. Unlike <b>PATH</b>, the current directory must be represented explicitly by "<b>.</b>" rather than by adjacent "<b>:</b>" characters or a beginning or ending "<b>:</b>".</td>
</tr>
<tr class="tcw">
<td><b>HISTCMD</b></td>
<td>Number of the current command in the history file.</td>
</tr>
<tr class="tcw">
<td><b>HISTEDIT</b></td>
<td>Name for the default editor name for the <b>hist</b> command.</td>
</tr>
<tr class="tcw">
<td><b>HISTFILE</b></td>
<td>If this variable is set when the shell is invoked, then the value is the pathname of the file that will be used to store the command history (see <a href="#Command-Re-Entry">command re-entry</a> below).</td>
</tr>
<tr class="tcw">
<td><b>HISTSIZE</b></td>
<td>If this variable is set when the shell is invoked, then the number of previously entered commands that are accessible by this shell will be greater than or equal to this number. The default is 512.</td>
</tr>
<tr class="tcw">
<td><b>HOME</b></td>
<td>The default argument (<a href="/jargon/h/homedir.htm">home directory</a>) for the <a href="/jargon/c/cd.htm">cd</a> command.</td>
</tr>
<tr class="tcw">
<td id="IFS"><b>IFS</b></td>
<td>Internal field separators (normally space, tab, and newline) used to separate the results of command substitution or parameter expansion and to separate fields with the built-in command read. The first character of the <b>IFS</b> variable is used to separate arguments for the "<b>$*</b>" substitution (see <a href="#Quoting">quoting</a> below). Each single occurrence of an <b>IFS</b> character in the string to be split, that is not in the <b>isspace</b> character class, and any adjacent characters in <b>IFS</b> that are in the <b>isspace</b> character class, <a href="/jargon/d/delimite.htm">delimit</a> a field. One or more characters in <b>IFS</b> that belong to the <b>isspace</b> character class, delimit a field. Also, if the same <b>isspace</b> character appears consecutively inside <b>IFS</b>, this character is treated as if it were not in the <b>isspace</b> class, so that if <b>IFS</b> consists of two tab characters, then two adjacent tab characters delimit a null field.</td>
</tr>
<tr class="tcw">
<td><b>JOBMAX</b></td>
<td>This variable defines the maximum number running background jobs that can run at a time. When this limit is reached, the shell will wait for a job to complete before staring a new job.</td>
</tr>
<tr class="tcw">
<td><b>LANG</b></td>
<td>This variable determines the locale category for any category not specifically selected with a variable starting with <b>LC_</b> or <b>LANG</b>.</td>
</tr>
<tr class="tcw">
<td><b>LC_ALL</b></td>
<td>This variable overrides the value of the <b>LANG</b> variable and any other <b>LC_</b> variable.</td>
</tr>
<tr class="tcw">
<td><b>LC_COLLATE</b></td>
<td>This variable determines the locale category for character collation information.</td>
</tr>
<tr class="tcw">
<td><b>LC_CTYPE</b></td>
<td>This variable determines the locale category for character handling functions. It determines the character classes for pattern matching (see <a href="#File-Name-Generation">file name generation</a> below).</td>
</tr>
<tr class="tcw">
<td><b>LC_NUMERIC</b></td>
<td>This variable determines the locale category for the decimal point character.</td>
</tr>
<tr class="tcw">
<td><b>LINES</b></td>
<td>If this variable is set, the value is used to determine the column length for printing select lists. Select lists prints vertically until about two-thirds of <b>LINES</b> lines are filled.</td>
</tr>
<tr class="tcw">
<td><b>MAIL</b></td>
<td>If this variable is set to the name of a mail file and the <b>MAILPATH</b> variable is not set, then the shell informs the user of arrival of mail in the specified file.</td>
</tr>
<tr class="tcw">
<td><b>MAILCHECK</b></td>
<td>This variable specifies how often (in seconds), the shell checks for changes in the modification time of any of the files specified by the <b>MAILPATH</b> or <b>MAIL</b> variables. The default value is 600 seconds. When the time has elapsed, the shell checks before issuing the next prompt.</td>
</tr>
<tr class="tcw">
<td><b>MAILPATH</b></td>
<td>A colon ("<b>:</b>") separated list of file names. If this variable is set, then the shell informs the user of any modifications to the specified files that have occurred in the last <b>MAILCHECK</b> seconds. Each file name can be followed by a <b>?</b> and a message that will be printed. The message will undergo parameter expansion, command substitution, and arithmetic substitution with the variable <b>$_</b> defined as the name of the file changed. The default message is "<b>you have mail in $_.</b>".</td>
</tr>
<tr class="tcw">
<td><b>PATH</b></td>
<td>The search path for commands (see <a href="#Execution">execution</a> below). The user may not change <b>PATH</b> if executing under <b>rksh</b> (except in <b>.profile</b>).</td>
</tr>
<tr class="tcw">
<td id="PS1"><b>PS1</b></td>
<td>The value of this variable is expanded for parameter expansion, command substitution, and arithmetic substitution to define the primary prompt string which by default is "<b>$</b>". The character <b>!</b> in the primary prompt string is replaced by the command number (see <a href="#Command-Re-Entry">command re-entry</a> below). Two successive occurrences of <b>!</b> produces a single <b>!</b> when the prompt string is printed.</td>
</tr>
<tr class="tcw">
<td id="PS2"><b>PS2</b></td>
<td>Secondary prompt string, by default "<b>&gt;</b> ".</td>
</tr>
<tr class="tcw">
<td id="PS3"><b>PS3</b></td>
<td>Selection prompt string used within a select loop, by default "<b>#?</b> ".</td>
</tr>
<tr class="tcw">
<td><b>PS4</b></td>
<td>The value of this variable is expanded for parameter evaluation, command substitution, and arithmetic substitution and precedes each line of an execution trace. By default, <b>PS4</b> is "<b>+</b>". In addition when <b>PS4</b> is unset, the execution trace prompt is also "<b>+</b>".</td>
</tr>
<tr class="tcw">
<td><b>SHELL</b></td>
<td>The pathname of the shell is kept in the environment. At invocation, if the basename of this variable is <b>rsh</b>, <b>rksh</b>, or <b>krsh</b>, then the shell becomes restricted. If it's <b>pfsh</b> or <b>pfksh</b>, then the shell becomes a profile shell.</td>
</tr>
<tr class="tcw">
<td><b>TIMEFORMAT</b></td>
<td>The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed with the time reserved word should be displayed. The <b>%</b> character introduces a format sequence that is expanded to a time value or other information. The format sequences and their meanings are as follows.<br><br>
<table>
<tr class="tcw">
<td style="width:100px"><b>%%</b></td>
<td>A literal <b>%</b>.</td>
</tr>
<tr class="tcw">
<td><b>%</b>[<i>p</i>][<i>l</i>]<b>R</b></td>
<td>The elapsed time in seconds.</td>
</tr>
<tr class="tcw">
<td><b>%</b>[<i>p</i>][<i>l</i>]<b>U</b></td>
<td>The number of <a href="/jargon/c/cpu.htm">CPU</a> seconds spent in user mode.</td>
</tr>
<tr class="tcw">
<td><b>%</b>[<i>p</i>][<i>l</i>]<b>S</b></td>
<td>The number of CPU seconds spent in system mode.</td>
</tr>
<tr class="tcw">
<td><b>%P</b></td>
<td>The CPU percentage, computed as (<b>U</b> + <b>S</b>) / <b>R</b>.</td>
</tr>
</table>
<br>
The brackets denote optional portions. The optional <i>p</i> is a digit specifying the precision, the number of fractional digits after a decimal point. A value of 0 causes no decimal point or fraction to be output. At most three places after the decimal point can be displayed; values of <i>p</i> greater than 3 are treated as 3. If <i>p</i> is not specified, the value 3 is used.<br>
<br>
The optional <i>l</i> specifies a longer format, including hours if greater than zero, minutes, and seconds of the form <b>HHhMMmSS.FFs</b>. The value of <i>p</i> determines whether or not the fraction is included.<br>
<br>
All other characters are output without change and a trailing newline is added. If unset, the default value, <b>$'\nreal\t%2lR\nuser\t%2lU\nsys%2lS</b>', is used. If the value is null, no timing information is displayed.</td>
</tr>
<tr class="tcw">
<td><b>TMOUT</b></td>
<td>If set to a value greater than zero, <b>TMOUT</b> will be the default timeout value for the <b>read</b> built-in command. The select compound command terminates after <b>TMOUT</b> seconds when input is from a terminal. Otherwise, the shell will terminate if a line is not entered in the prescribed number of seconds while reading from a terminal. Note that the shell can be compiled with a maximum bound for this value which cannot be exceeded.</td>
</tr>
<tr class="tcw">
<td><b>VISUAL</b></td>
<td>If the value of this variable matches the pattern "<b>*</b>[<b>Vv</b>][<b>Ii</b>]<b>*</b>", then the <b>vi</b> option is turned on. If the value matches the pattern <b>*gmacs*</b>, the <b>gmacs</b> option is turned on. If the value matches the pattern <b>*macs*</b>, then the emacs option will be turned on. The value of <b>VISUAL</b> overrides the value of <b>EDITOR</b>.</td>
</tr>
</table>
<p class="tab">The shell gives default values to <b>PATH</b>, <b>PS1</b>, <b>PS2</b>, <b>PS3</b>, <b>PS4</b>, <b>MAILCHECK</b>, <b>FCEDIT</b>, <b>TMOUT</b> and <b>IFS</b>, while <b>HOME</b>, <b>SHELL</b>, <b>ENV</b>, and <b>MAIL</b> are not set at all by the shell (although <b>HOME</b> is set by <a href="/unix/ulogin.htm">login</a>). On some systems, <b>MAIL</b> and <b>SHELL</b> are also set by <b>login</b>.</p>
<h2>Field splitting</h2>
<p class="tab">After parameter expansion and command substitution, the results of substitutions are scanned for the field separator characters (those found in <a href="#IFS">IFS</a>) and split into distinct fields where such characters are found. Explicit null fields (<b>""</b> or <b>''</b>) are retained. Implicit null fields (those resulting from parameters that have no values or command substitutions with no output) are removed.</p>
<p class="tab">If the <b>braceexpand</b> (<b>-B</b>) option is set then each of the fields resulting from <a href="#IFS">IFS</a> are checked to see if they contain one or more of the brace patterns <b>{*,*}</b>, <b>{</b><i>l1</i>..<i>l2</i><b>}</b> , <b>{</b><i>n1</i>..<i>n2</i><b>}</b> , <b>{</b><i>n1</i>..<i>n2% fmt</i><b>}</b> , <b>{</b><i>n1</i>..<i>n2</i> ..<i>n3</i><b>}</b> , or <b>{</b><i>n1</i>..<i>n2</i> ..<i>n3%fmt</i><b>}</b> , where <b>*</b> represents any character, <i>l1</i>,<i>l2</i> are letters and <i>n1</i>,<i>n2</i>,<i>n3</i> are signed numbers and <i>fmt</i> is a format specified as used by <a href="/unix/uprintf.htm">printf</a>. In each case, fields are created by prepending the characters before the <b>{</b> and appending the characters after the <b>}</b> to each of the strings generated by the characters between the <b>{</b> and <b>}</b>. The resulting fields are checked to see if they have any brace patterns.</p>
<p class="tab">In the first form, a field is created for each string between <b>{</b> and <b>,</b>, between <b>,</b> and <b>,</b>, and between <b>, and }</b>. The string represented by <b>*</b> can contain embedded matching <b>{</b> and <b>}</b> without quoting. Otherwise, each <b>{</b> and <b>}</b> with <b>*</b> must be quoted.</p>
<p class="tab">In the seconds form, <i>l1</i> and <i>l2</i> must both be either uppercase or both be lowercase characters in the C locale. In this case, a field is created for each character from <i>l1</i> thru <i>l2</i>.</p>
<p class="tab">In the remaining forms, a field is created for each number starting at <i>n1</i> and continuing until it reaches <i>n2</i> incrementing <i>n1</i> by <i>n3</i>. The cases where <i>n3</i> is not specified behave as if <i>n3</i> where <b>1</b> if <i>n1</i><b>&lt;=</b><i>n2</i> and <b>-1</b> otherwise. If forms which specify <i>%fmt</i> any format flags, widths and precisions can be specified and <i>fmt</i> can end in any of the specifiers <b>cdiouxX</b>. For example, <b>{</b><i>a</i><b>,</b><i>z</i><b>}{1</b>..<b>5</b>..<b>3%02d}{</b><i>b</i>..<i>c</i><b>}x</b> expands to the 8 fields, <b>a01bx</b>, <b>a01cx</b>, <b>a04bx</b>, <b>a04cx</b>, <b>z01bx</b>, <b>z01cx</b>, <b>z04bx</b> and <b>z4cx</b>.</p>
<h2 id="File-Name-Generation">File name generation</h2>
<p class="tab">Following splitting, each field is scanned for the characters <b>*</b>, <b>?</b>, <b>(</b>, and <b>[</b> unless the <b>-f</b> option is set. If one of these characters appears, then the word is regarded as a pattern. Each file name component containing any pattern character is replaced with a lexicographically sorted set of names that matches the pattern from that directory. If no file name is found that matches the pattern, then that component of the file name is left unchanged unless the pattern is prefixed with <b>~(</b><i>N</i><b>)</b> in which case it is removed as described below. If <b>FIGNORE</b> is set, then each file name component that matches the pattern defined by the value of <b>FIGNORE</b> is ignored when generating the matching file names. The names <b>.</b> and <b>..</b> are also ignored. If <b>FIGNORE</b> is not set, the character <b>.</b> at the start of each file name component is ignored unless the first character of the pattern corresponding to this component is the character <b>.</b> itself. Note, that for other uses of <i>pattern</i> matching the <b>/</b> and <b>.</b> are not treated specially.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>*</b></td>
<td>Matches any string, including the null string. When used for file name expansion, if the <b>globstar</b> option is on, two adjacent <b>*</b>'s by itself will match all files and zero or more directories and subdirectories. If followed by a <b>/</b> then only directories and subdirectories will match.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>Matches any single character.</td>
</tr>
<tr class="tcw">
<td><b>[</b>...<b>]</b></td>
<td>Matches any one of the enclosed characters. A pair of characters separated by <b>-</b> matches any character <a href="/jargon/l/lexicon.htm">lexically</a> between the pair, inclusive. If the first character following the opening <b>[</b> is a <b>!</b> or <b>^</b>, then any character not enclosed is matched. A <b>-</b> can be included in the character set by putting as the first or last character. Within <b>[</b> and <b>]</b>, character classes can be specified with the syntax <b>[:</b><i>class</i><b>:]</b> where <i>class</i> is one of the following classes defined in the ANSI C standard. Note that word is equivalent to <b>alnum</b> plus the character <b>_</b>.<br><br><ul><li><b>alnum</b></li><li><b>alpha</b></li><li><b>blank</b></li><li><b>cntrl</b></li><li><b>digit</b></li><li><b>graph</b></li><li><b>lower</b></li><li><b>print</b></li><li><b>punct</b></li><li><b>space</b></li><li><b>upper</b></li><li><b>word</b></li><li><b>xdigit</b></li></ul> Within <b>[</b> and <b>]</b>, an equivalence class can be specified with the syntax <b>[=</b><i>c</i><b>=]</b> which matches all characters with the same primary collation weight (as defined by the current locale) as the character <i>c</i>. Within <b>[</b> and <b>]</b>, <b>[.</b><i>symbol</i><b>.]</b> matches the collating symbol <i>symbol</i>.</td>
</tr>
</table>
<p class="tab">A <i>pattern-list</i> is a list of one or more patterns separated from each other with a <b>&amp;</b> or <b>?</b>. A <b>&amp;</b> signifies that all patterns must be matched whereas <b>?</b> requires that only one pattern be matched. Composite patterns can be formed with one or more of the following sub-patterns:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>?(</b><i>pattern-list</i><b>)</b></td>
<td>Optionally matches any one of the given patterns.</td>
</tr>
<tr class="tcw">
<td><b>*(</b><i>pattern-list</i><b>)</b></td>
<td>Matches zero or more occurrences of the given patterns.</td>
</tr>
<tr class="tcw">
<td><b>+(</b><i>pattern-list</i><b>)</b></td>
<td>Matches one or more occurrences of the given patterns.</td>
</tr>
<tr class="tcw">
<td><b>{</b><i>n</i><b>}(</b><i>pattern-list</i><b>)</b></td>
<td>Matches <i>n</i> occurrences of the given patterns.</td>
</tr>
<tr class="tcw">
<td><b>{</b><i>m</i><b>,</b><i>n</i><b>}(</b><i>pattern-list</i><b>)</b></td>
<td>Matches from <i>m</i> to <i>n</i> occurrences of the given patterns. If <i>m</i> is omitted, 0 will be used. If <i>n</i> is omitted at least <i>m</i> occurrences will be matched.</td>
</tr>
<tr class="tcw">
<td><b>@(</b><i>pattern-list</i><b>)</b></td>
<td>Matches exactly one of the given patterns.</td>
</tr>
<tr class="tcw">
<td><b>!(</b><i>pattern-list</i><b>)</b></td>
<td>Matches anything except one of the given patterns.</td>
</tr>
</table>
<p class="tab">By default, each pattern (or sub-pattern) will match the longest string possible consistent with generating the longest overall match. If more than one match is possible, the one starting closest to the beginning of the string will be chosen. However, for each of the above compound patterns a "<b>-</b>" can be inserted in front of the <b>(</b> to cause the shortest match to the specified <i>pattern-list</i> to be used.</p>
<p class="tab">When <i>pattern-list</i> is contained within parentheses, the backslash character <b>\</b> is treated specially even when inside a character class. All ANSI C character escapes are recognized and match the specified character. In addition the following escape sequences are recognized:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:50px"><b>\d</b></td>
<td>Matches any character in the <b>digit</b> class.</td>
</tr>
<tr class="tcw">
<td><b>\D</b></td>
<td>Matches any character not in the <b>digit</b> class.</td>
</tr>
<tr class="tcw">
<td><b>\s</b></td>
<td>Matches any character in the <b>space</b> class.</td>
</tr>
<tr class="tcw">
<td><b>\S</b></td>
<td>Matches any character not in the <b>space</b> class.</td>
</tr>
<tr class="tcw">
<td><b>\w</b></td>
<td>Matches any character in the <b>word</b> class.</td>
</tr>
<tr class="tcw">
<td><b>\W</b></td>
<td>Matches any character not in the <b>word</b> class.</td>
</tr>
</table>
<p class="tab">A pattern of the form <b>%(</b><i>pattern-pair(s)</i><b>)</b> is a sub-pattern that can match <a href="/jargon/n/nesting.htm">nested</a> character expressions. Each <i>pattern-pair</i> is a two character sequence which cannot contain <b>&amp;</b> or <b>?</b>. The first <i>pattern-pair</i> specifies the starting and ending characters for the match. Each subsequent <i>pattern-pair</i> represents the beginning and ending characters of a nested group that will be skipped over when counting starting and ending character matches. The behavior is unspecified when the first character of a <i>pattern-pair</i> is alpha-numeric except for the following:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>D</b></td>
<td>Causes the ending character to terminate the search for this pattern without finding a match.</td>
</tr>
<tr class="tcw">
<td><b>E</b></td>
<td>Causes the ending character to be interpreted as an escape character.</td>
</tr>
<tr class="tcw">
<td><b>L</b></td>
<td> Causes the ending character to be interpreted as a quote character causing all characters to be ignored when looking for a match.</td>
</tr>
<tr class="tcw">
<td><b>Q</b></td>
<td>Causes the ending character to be interpreted as a quote character causing all characters other than any escape character to be ignored when looking for a match. Thus, <b>%({}Q"E\)</b>, matches characters starting at <b>{</b> until the matching <b>}</b> is found not counting any <b>{</b> or <b>}</b> that is inside a double quoted string or preceded by the escape character <b>\</b>. Without the <b>{}</b> this pattern matches any <a href="/jargon/c/c.htm">C language</a> string.</td>
</tr>
</table>
<p class="tab">Each sub-pattern in a composite pattern is numbered, starting at <b>1</b>, by the location of the <b>(</b> in the pattern. The sequence <b>\</b><i>n</i>, where <i>n</i> is a single digit and <b>\</b><i>n</i> comes after the <i>n</i>-th sub-pattern, matches the same string as the sub-pattern itself.</p>
<p class="tab">Finally, a pattern can contain sub-patterns of the form <b>~(</b><i>options</i><b>:</b><i>pattern-list</i><b>)</b>, where either <i>options</i> or <b>:</b><i>pattern-list</i> can be omitted. Unlike the other compound patterns, these sub-patterns are not counted in the numbered sub-patterns. <b>:</b><i>pattern-list</i> must be omitted for options <b>F</b>, <b>G</b>, <b>N</b> , and <b>V</b> below. If options is present, it can consist of one or more of the following:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>+</b></td>
<td>Enable the following options. This is the default.</td>
</tr>
<tr class="tcw">
<td><b>-</b></td>
<td>Disable the following options.</td>
</tr>
<tr class="tcw">
<td><b>E</b></td>
<td>The remainder of the pattern uses extended <a href="/jargon/r/regex.htm">regular expression</a> syntax like the <a href="/unix/uegrep.htm">egrep</a> command.</td>
</tr>
<tr class="tcw">
<td><b>F</b></td>
<td>The remainder of the pattern uses <a href="/unix/ufgrep.htm">fgrep</a> expression syntax.</td>
</tr>
<tr class="tcw">
<td><b>G</b></td>
<td>The remainder of the pattern uses basic regular expression syntax like the <a href="/unix/ugrep.htm">grep</a> command.</td>
</tr>
<tr class="tcw">
<td><b>K</b></td>
<td>The remainder of the pattern uses shell pattern syntax. This is the default.</td>
</tr>
<tr class="tcw">
<td><b>N</b></td>
<td>This is ignored. However, when it is the first letter and is used with file name generation, and no matches occur, the file pattern expands to the empty string.</td>
</tr>
<tr class="tcw">
<td><b>X</b></td>
<td>The remainder of the pattern uses augmented regular expression syntax like the <b>xgrep</b> command.</td>
</tr>
<tr class="tcw">
<td><b>P</b></td>
<td>The remainder of the pattern uses <a href="/jargon/p/perl.htm">perl</a> regular expression syntax. Not all perl regular expression syntax is currently implemented.</td>
</tr>
<tr class="tcw">
<td><b>V</b></td>
<td>The remainder of the pattern uses <a href="/jargon/s/system-v.htm">System V</a> regular expression syntax.</td>
</tr>
<tr class="tcw">
<td><b>i</b></td>
<td>Treat the match as <a href="/jargon/c/casesens.htm">case insensitive</a>.</td>
</tr>
<tr class="tcw">
<td><b>g</b></td>
<td>File the longest match (greedy). This is the default.</td>
</tr>
<tr class="tcw">
<td><b>l</b></td>
<td>Left anchor the pattern. This is the default for <b>K</b> style patterns.</td>
</tr>
<tr class="tcw">
<td><b>r</b></td>
<td>Right anchor the pattern. This is the default for <b>K</b> style patterns.</td>
</tr>
</table>
<p class="tab">If both <i>options</i> and <b>:</b><i>pattern-list</i> are specified, then the options apply only to <i>pattern-list</i>. Otherwise, these options remain in effect until they are disabled by a subsequent <b>~(</b>...<b>)</b> or at the end of the sub-pattern containing <b>~(</b>...<b>)</b>.</p>
<h2 id="Quoting">Quoting</h2>
<p class="tab">Each of the metacharacters listed earlier (see <a href="#Definitions">definitions</a> above) has a special meaning to the shell and causes termination of a word unless quoted. A character may be quoted (i.e., made to stand for itself) by preceding it with a <b>\</b>. The pair <b>\newline</b> is removed. All characters enclosed between a pair of single quote marks (<b>''</b>) that is not preceded by a <b>$</b> are quoted. A single quote cannot appear in the single quotes. A single quoted string preceded by an unquoted <b>$</b> is processed as an ANSI C string except for the following:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>\0</b></td>
<td>Causes the remainder of the string to be ignored.</td>
</tr>
<tr class="tcw">
<td><b>\E</b></td>
<td>Equivalent to the escape character (<a href="/jargon/a/ascii.htm">ASCII</a> 033).</td>
</tr>
<tr class="tcw">
<td><b>\e</b></td>
<td>Equivalent to the escape character (ASCII 033).</td>
</tr>
<tr class="tcw">
<td><b>\cx</b></td>
<td>Expands to the character <b>control-x</b>.</td>
</tr>
<tr class="tcw">
<td><b>\C</b>[<b>.</b><i>name</i><b>.</b>]</td>
<td>Expands to the collating element name.</td>
</tr>
</table>
<p class="tab">Inside double quote marks (<b>""</b>), parameter and command substitution occur and <b>\</b> quotes the characters <b>\</b>, <b>'</b>, <b>"</b>, and <b>$</b>. A <b>$</b> in front of a double quoted string is ignored in the "C" or "POSIX" locale, and may cause the string to be replaced by a locale specific string otherwise. The meaning of <b>$*</b> and <b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2a0e6a">[email&#160;protected]</a></b> is identical when not quoted or when used as a variable assignment value or as a file name. However, when used as a command argument, "<b>$*</b>" is equivalent to "<b>$1</b><i>d</i><b>$2</b><i>d</i>...", where <i>d</i> is the first character of the <a href="#IFS">IFS</a> variable, whereas "<b><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="391d79">[email&#160;protected]</a></b>" is equivalent to "<b>$1</b>" "<b>$2</b>" .... Inside grave quote marks (<b>"</b>), <b>\</b> quotes the characters <b>\</b>, <b>'</b>, and <b>$</b>. If the grave quotes occur within double quotes, then <b>\</b> also quotes the character <b>"</b>.</p>
<p class="tab">The special meaning of reserved words or aliases can be removed by quoting any character of the reserved word. The recognition of function names or built-in command names listed below cannot be altered by quoting them.</p>
<h2 id="Arithmetic-Evaluation">Arithmetic evaluation</h2>
<p class="tab">The shell performs arithmetic evaluation for arithmetic substitution, to evaluate an arithmetic command, to evaluate an indexed array subscript, and to evaluate arguments to the built-in commands <b>shift</b> and <b>let</b>. Evaluations are performed using double precision <a href="/jargon/f/floapoin.htm">floating point</a> arithmetic or long double precision floating point for systems that provide this data type. Floating point constants follow the ANSI C programming language floating point conventions. The floating point constants <b>Nan</b> and <b>Inf</b> can be use to represent "not a number" and infinity respectively. Integer constants follow the ANSI C programming language integer constant conventions although only single byte character constants are recognized and character casts are not recognized. In addition constants can be of the form <b>[</b><i>base</i><b>#]</b><i>n</i> where <i>base</i> is a decimal number between two and sixty-four representing the arithmetic base and <i>n</i> is a number in that base. The digits above 9 are represented by the lowercase letters, the uppercase letters, <b>@</b>, and <b>_</b> respectively. For bases less than or equal to 36, upper and lowercase characters can be used interchangeably.</p>
<p class="tab">An arithmetic expression uses the same syntax, precedence, and associativity of expression as the C language. All the C language operators that apply to floating point quantities can be used. Aso, the operator <b>**</b> can be used for exponentiation. It has higher precedence than multiplication and is left associative. Also, when the value of an arithmetic variable or sub-expression can be represented as a long integer, all C language integer arithmetic operations can be performed. Variables can be referenced by name within an arithmetic expression without using the parameter expansion syntax. When a variable is referenced, its value is evaluated as an arithmetic expression.</p>
<p class="tab">Any of the following math library functions that are in the C math library can be used within an arithmetic expression:</p>
<ul>
<li>abs</li>
<li>acos</li>
<li>acosh</li>
<li>asin</li>
<li>asinh</li>
<li>atan</li>
<li>atan2</li>
<li>atanh</li>
<li>cbrt</li>
<li>ceil</li>
<li>copysign</li>
<li>cos</li>
<li>cosh</li>
<li>erf</li>
<li>erfc</li>
<li>exp</li>
<li>exp2</li>
<li>expm1</li>
<li>fabs</li>
<li>fpclassify</li>
<li>fdim</li>
<li>finite</li>
<li>floor</li>
<li>fma</li>
<li>fmax</li>
<li>fmin</li>
<li>fmod</li>
<li>hypot</li>
<li>ilogb</li>
<li>int</li>
<li>isfinite</li>
<li>sinf</li>
<li>isnan</li>
<li>isnormal</li>
<li>issubnormal</li>
<li>issubordered</li>
<li>iszero</li>
<li>j0</li>
<li>j1</li>
<li>jn</li>
<li>lgamma</li>
<li>log</li>
<li>log10</li>
<li>log2</li>
<li>logb</li>
<li>nearbyint</li>
<li>nextafter</li>
<li>nexttoward</li>
<li>pow</li>
<li>remainder</li>
<li>rint</li>
<li>round</li>
<li>scanb</li>
<li>signbit</li>
<li>sin</li>
<li>sinh</li>
<li>sqrt</li>
<li>tan</li>
<li>tanh</li>
<li>tgamma</li>
<li>trunc</li>
<li>y0</li>
<li>y1</li>
<li>yn</li>
</ul>
<p class="tab">Also, arithmetic functions can be defined as shell functions with a variant of the function name syntax:</p>
<pre class="tab tcy">function .sh.math.name <i>ident</i> ... { <i>list</i> ;}</pre>
<p class="tab">where <i>name</i> is the function name used in the arithmetic expression and each identifier, <i>ident</i> is a name reference to the long double precision floating point argument. The value of <b>.sh.value</b> when the function returns is the value of this function. User defined functions can take up to 3 arguments and override C math library functions.</p>
<p class="tab">An internal representation of a variable as a double precision floating point can be specified with the <b>-E</b> [<i>n</i>], <b>-F</b> [<i>n</i>], or <b>-X</b> [<i>n</i>] option of the <b>typeset</b> special built-in command. The <b>-E</b> option causes the expansion of the value to be represented using scientific notation when it is expanded. The optional <i>option</i> argument <i>n</i> defines the number of significant figures. The <b>-F</b> option causes the expansion to be represented as a floating decimal number when it is expanded. The <b>-X</b> option cause the expansion to be represented using the <b>%a</b> format defined by ISO C-99. The optional option argument <i>n</i> defines the number of places after the decimal (or <a href="/jargon/r/radix.htm">radix</a>) point in this case.</p>
<p class="tab">An internal integer representation of a variable can be specified with the <b>-i</b> [<i>n</i>] option of the <b>typeset</b> special built-in command. The optional option argument <i>n</i> specifies an arithmetic base to be used when expanding the variable. If you do not specify an arithmetic base, <a href="/jargon/d/decimal.htm">base 10</a> will be used.</p>
<p class="tab">Arithmetic evaluation is performed on the value of each assignment to a variable with the <b>-E</b>, <b>-F</b>, <b>-X</b>, or <b>-i</b> attribute. Assigning a floating point number to a variable whose type is an integer causes the fractional part to be <a href="/jargon/t/truncate.htm">truncated</a>.</p>
<h2>Prompting</h2>
<p class="tab">When used interactively, the shell prompts with the value of <a href="#PS1">PS1</a> after expanding it for parameter expansion, command substitution, and arithmetic substitution, before reading a command. Also, each single <b>!</b> in the prompt is replaced by the command number. A <b>!!</b> is required to place <b>!</b> in the prompt. If at any time a <a href="/jargon/n/newline.htm">newline</a> is typed and further input is needed to complete a command, then the secondary prompt (i.e., the value of <a href="#PS2">PS2</a>) is issued.</p>
<h2 id="Conditional-Expressions">Conditional expressions</h2>
<p class="tab">A conditional expression is used with the <b>[[</b> compound command to test attributes of files and to compare strings. Field splitting and file name generation are not performed on the words between <b>[[</b> and <b>]]</b>. Each expression can be constructed from one or more of the following unary or binary expressions: "<i>string</i> <b>True</b>", if <i>string</i> is not null.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:180px"><b>-a</b> <i>file</i></td>
<td>Same as <b>-e</b> below. This is obsolete.</td>
</tr>
<tr class="tcw">
<td><b>-b</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is a block special <i>file</i>.</td>
</tr>
<tr class="tcw">
<td><b>-c</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is a character special file.</td>
</tr>
<tr class="tcw">
<td><b>-d</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is a <a href="/jargon/d/director.htm">directory</a>.</td>
</tr>
<tr class="tcw">
<td><b>-e</b> <i>file</i></td>
<td><b>True</b>, if file exists.</td>
</tr>
<tr class="tcw">
<td><b>-f</b> <i>file</i></td>
<td><b>True</b>, if file exists and is an ordinary file.</td>
</tr>
<tr class="tcw">
<td><b>-g</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and it has its setgid bit set.</td>
</tr>
<tr class="tcw">
<td><b>-k</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and it has its sticky bit set.</td>
</tr>
<tr class="tcw">
<td><b>-n</b> <i>string</i></td>
<td><b>True</b>, if length of <i>string</i> is non-zero.</td>
</tr>
<tr class="tcw">
<td><b>-o ?</b><i>option</i></td>
<td><b>True</b>, if option named <i>option</i> is a valid option name.</td>
</tr>
<tr class="tcw">
<td><b>-o</b> <i>option</i></td>
<td><b>True</b>, if <i>option</i> named option is on.</td>
</tr>
<tr class="tcw">
<td><b>-p</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is a <a href="/jargon/f/fifo.htm">fifo</a> special file or a <a href="/jargon/p/pipe.htm">pipe</a>.</td>
</tr>
<tr class="tcw">
<td><b>-r</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is readable by current process.</td>
</tr>
<tr class="tcw">
<td><b>-s</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and has size greater than zero.</td>
</tr>
<tr class="tcw">
<td><b>-t</b> <i>fildes</i></td>
<td><b>True</b>, if file descriptor number <i>fildes</i> is open and associated with a terminal device.</td>
</tr>
<tr class="tcw">
<td><b>-u</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and it has its setuid bit set.</td>
</tr>
<tr class="tcw">
<td><b>-v</b> <i>name</i></td>
<td><b>True</b>, if variable <i>name</i> is a valid variable name and is set.</td>
</tr>
<tr class="tcw">
<td><b>-w</b> <i>file</i></td>
<td><b>True</b>, if file exists and is writable by current process.</td>
</tr>
<tr class="tcw">
<td><b>-x</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is executable by current process. If <i>file</i> exists and is a directory, then <b>true</b> if the current process has permission to search in the directory.</td>
</tr>
<tr class="tcw">
<td><b>-z</b> <i>string</i></td>
<td><b>True</b>, if <i>length</i> of string is zero.</td>
</tr>
<tr class="tcw">
<td><b>-L</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is a <a href="/jargon/s/symblink.htm">symbolic link</a>.</td>
</tr>
<tr class="tcw">
<td><b>-h</b> <i>file</i></td>
<td><b>True</b>, if file exists and is a symbolic link.</td>
</tr>
<tr class="tcw">
<td><b>-N</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and the modification time is greater than the last access time.</td>
</tr>
<tr class="tcw">
<td><b>-O</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is owned by the effective user id of this process.</td>
</tr>
<tr class="tcw">
<td><b>-G</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and its group matches the effective group id of this process.</td>
</tr>
<tr class="tcw">
<td><b>-R</b> <i>name</i></td>
<td><b>True</b> if variable <i>name</i> is a name reference.</td>
</tr>
<tr class="tcw">
<td><b>-S</b> <i>file</i></td>
<td><b>True</b>, if <i>file</i> exists and is a socket.</td>
</tr>
<tr class="tcw">
<td><i>file1</i> <b>-nt</b> <i>file2</i></td>
<td><b>True</b>, if <i>file1</i> exists and <i>file2</i> does not, or <i>file1</i> is newer than <i>file2</i>.</td>
</tr>
<tr class="tcw">
<td><i>file1</i> <b>-ot</b> <i>file2</i></td>
<td><b>True</b>, if <i>file2</i> exists and <i>file1</i> does not, or <i>file1</i> is older than <i>file2</i>.</td>
</tr>
<tr class="tcw">
<td><i>file1</i> <b>-ef</b> <i>file2</i></td>
<td><b>True</b>, if <i>file1</i> and <i>file2</i> exist and refer to the same file.</td>
</tr>
<tr class="tcw">
<td><i>string</i> <b>==</b> <i>pattern</i></td>
<td><b>True</b>, if <i>string</i> matches <i>pattern</i>. Any part of <i>pattern</i> can be quoted to cause it to be matched as a string. With a successful match to a pattern, the <b>.sh.match</b> array variable contains the match and sub-pattern matches.</td>
</tr>
<tr class="tcw">
<td><i>string</i> <b>=</b> <i>pattern</i></td>
<td>Same as <b>==</b> above, but is obsolete.</td>
</tr>
<tr class="tcw">
<td><i>string</i> <b>!=</b> <i>pattern</i></td>
<td><b>True</b>, if string does not match <i>pattern</i>. When the <i>string</i> matches the <i>pattern</i> the <b>.sh.match</b> array variable contains the match and sub-pattern matches.</td>
</tr>
<tr class="tcw">
<td><i>string</i> <b>=~</b> <i>ere</i></td>
<td><b>True</b> if <i>string</i> matches the pattern <b>~(E)</b><i>ere</i> where <i>ere</i> is an extended regular expression.</td>
</tr>
<tr class="tcw">
<td><i>string1</i> <b>&lt;</b> <i>string2</i></td>
<td><b>True</b>, if <i>string1</i> comes before <i>string2</i> based on <a href="/jargon/a/ascii.htm">ASCII</a> value of their characters.</td>
</tr>
<tr class="tcw">
<td><i>string1</i> <b>&gt;</b> <i>string2</i></td>
<td><b>True</b>, if <i>string1</i> comes after <i>string2</i> based on ASCII value of their characters.</td>
</tr>
</table>
<p class="tab">The following obsolete arithmetic comparisons are also permitted:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><i>exp1</i> <b>-eq</b> <i>exp2</i></td>
<td><b>True</b>, if <i>exp1</i> is equal to <i>exp2</i>.</td>
</tr>
<tr class="tcw">
<td><i>exp1</i> <b>-ne</b> <i>exp2</i></td>
<td><b>True</b>, if <i>exp1</i> is not equal to <i>exp2</i>.</td>
</tr>
<tr class="tcw">
<td><i>exp1</i> <b>-lt</b> <i>exp2</i></td>
<td><b>True</b>, if <i>exp1</i> is less than <i>exp2</i>.</td>
</tr>
<tr class="tcw">
<td><i>exp1</i> <b>-gt</b> <i>exp2</i></td>
<td><b>True</b>, if <i>exp1</i> is greater than <i>exp2</i>.</td>
</tr>
<tr class="tcw">
<td><i>exp1</i> <b>-le</b> <i>exp2</i></td>
<td><b>True</b>, if <i>exp1</i> is less than or equal to <i>exp2</i>.</td>
</tr>
<tr class="tcw">
<td><i>exp1</i> <b>-ge</b> <i>exp2</i></td>
<td><b>True</b>, if <i>exp1</i> is greater than or equal to <i>exp2</i>.</td>
</tr>
</table>
<p class="tab">In each of the above expressions, if <i>file</i> is of the form <b>/dev/fd/</b><i>n</i>, where <i>n</i> is an integer, then the test is applied to the open file whose descriptor number is <i>n</i>.</p>
<p class="tab">A compound expression can be constructed from these primitives using any of the following, listed in decreasing order of precedence.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>(</b><i>expression</i><b>)</b></td>
<td><b>True</b>, if <i>expression</i> is true. Used to group expressions.</td>
</tr>
<tr class="tcw">
<td><b>!</b> <i>expression</i></td>
<td><b>True</b> if expression is false.</td>
</tr>
<tr class="tcw">
<td><i>expression1</i> <b>&amp;&amp;</b> <i>expression2</i></td>
<td><b>True</b>, if <i>expression1</i> and <i>expression2</i> are both true.</td>
</tr>
<tr class="tcw">
<td><i>expression1</i> <b>??</b> <i>expression2</i></td>
<td><b>True</b>, if either <i>expression1</i> or <i>expression2</i> is true.</td>
</tr>
</table>
<h2>Input/output</h2>
<p class="tab">Before a command is executed, its input and output may be redirected using a special notation interpreted by the shell. The following may appear anywhere in a simple-command or may precede or follow a command and are not passed on to the invoked command. Command substitution, parameter expansion, and arithmetic substitution occur before word or digit is used except as noted below. File name generation occurs only if the shell is interactive and the pattern matches a single file. Field splitting is not performed.</p>
<p class="tab">In each of the following redirections, if file is of the form <b>/dev/sctp/</b><i>host</i><b>/</b><i>port</i>, <b>/dev/tcp/</b><i>host</i><b>/</b><i>port</i>, or <b>/dev/udp/</b><i>host</i><b>/</b><i>port</i>, where <i>host</i> is a <a href="/jargon/h/hostname.htm">hostname</a> or host address, and <i>port</i> is a service given by name or an integer port number, then the redirection attempts to make a <a href="/jargon/t/tcpip.htm">tcp</a>, sctp or <a href="/jargon/u/udp.htm">udp</a> connection to the corresponding socket.</p>
<p class="tab">No intervening space is allowed between the characters of redirection operators.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:130px"><b>&lt;</b><i>word</i></td>
<td>Use file <i>word</i> as <a href="/jargon/s/stdin.htm">standard input</a> (file descriptor 0).</td>
</tr>
<tr class="tcw">
<td><b>&gt;</b><i>word</i></td>
<td>Use file <i>word</i> as standard output (file descriptor 1). If the file does not exist then it is created. If the file exists, and the <b>noclobber</b> option is on, this causes an error; otherwise, it is truncated to zero length.</td>
</tr>
<tr class="tcw">
<td><b>&gt;|</b><i>word</i></td>
<td>Same as <b>&gt;</b>, except that it overrides the <b>noclobber</b> option.</td>
</tr>
<tr class="tcw">
<td><b>&gt;;</b><i>word</i></td>
<td>Write output to a <a href="/jargon/t/tempfile.htm">temporary file</a>. If the command completes successfully, rename it to <i>word</i>, otherwise, delete the temporary file. <b>&gt;;</b><i>word</i> cannot be used with the <b>exec</b> built-in.</td>
</tr>
<tr class="tcw">
<td><b>&gt;&gt;</b><i>word</i></td>
<td>Use file <i>word</i> as standard output. If the file exists, then output is appended to it (by first seeking to the <a href="/jargon/e/eof.htm">end-of-file</a>); otherwise, the file is created.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&gt;</b><i>word</i></td>
<td>Open file <i>word</i> for reading and writing as standard output.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&gt;;</b><i>word</i></td>
<td>The same as <b>&lt;&gt;</b><i>word</i> except that if the command completes successfully, <i>word</i> is truncated to the <a href="/jargon/o/offset.htm">offset</a> at command completion. <b>&lt;&gt;;</b><i>word</i> cannot be used with the <b>exec</b> built-in.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&lt;</b>[<b>-</b>]<i>word</i></td>
<td>The shell input is read up to a line that is the same as <i>word</i> after any quoting is removed, or to an end-of-file. No parameter substitution, command substitution, arithmetic substitution or file name generation is performed on <i>word</i>. The resulting document, called a here-document, becomes the standard input. If any character of word is quoted, then no interpretation is placed upon the characters of the document; otherwise, parameter expansion, command substitution, and arithmetic substitution occur, <b>\newline</b> is ignored, and <b>\</b> must be used to quote the characters <b>\</b>, <b>$</b>, <b>'</b>. If <b>-</b> is appended to <b>&lt;&lt;</b>, then all leading tabs are stripped from <i>word</i> and from the document. If <b>#</b> is appended to <b>&lt;&lt;</b>, then leading spaces and tabs will be stripped off the first line of the document and up to an equivalent indentation will be stripped from the remaining lines and from <i>word</i>. A tab stop is assumed to occur at every 8 columns for determining the indentation.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&lt;&lt;</b><i>word</i></td>
<td>A short form of here-document in which <i>word</i> becomes the contents of the here-document after any parameter expansion, command substitution, and arithmetic substitution occur.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&amp;</b><i>digit</i></td>
<td>The standard input is duplicated from file descriptor <i>digit</i>. Similarly for the standard output using <b>&gt;&amp;</b><i>digit</i>.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&amp;</b><i>digit</i><b>-</b></td>
<td>The file descriptor given by <i>digit</i> is moved to standard input. Similarly for the standard output using <b>&gt;&amp;</b><i>digit</i><b>-</b>.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&amp;-</b></td>
<td>The standard input is closed. Similarly for the standard output using <b>&gt;&amp;-</b>.</td>
</tr>
<tr class="tcw">
<td><b>&lt;&amp;p</b></td>
<td>The input from the co-process is moved to standard input.</td>
</tr>
<tr class="tcw">
<td><b>&gt;&amp;p</b></td>
<td>The output to the co-process is moved to standard output.</td>
</tr>
<tr class="tcw">
<td><b>&lt;#</b>((<i>expr</i>))</td>
<td>Evaluate arithmetic expression <i>expr</i> and position file descriptor 0 to the resulting value bytes from the start of the file. The variables CUR and EOF evaluate to the current offset and end-of-file offset respectively when evaluating <i>expr</i>.</td>
</tr>
<tr class="tcw">
<td><b>&gt;#((</b><i>offset</i><b>))</b></td>
<td>The same as <b>&lt;#</b> except applies to file descriptor 1.</td>
</tr>
<tr class="tcw">
<td><b>&lt;#</b><i>pattern</i></td>
<td>Seeks forward to the beginning of the next line containing pattern.</td>
</tr>
<tr class="tcw">
<td><b>&lt;##</b><i>pattern</i></td>
<td>The same as <b>&lt;#</b> except that the portion of the file that is skipped is copied to standard output.</td>
</tr>
</table>
<p class="tab">If one of the above is preceded by a digit, with no intervening space, then the file descriptor number referred to is that specified by the digit (instead of the default 0 or 1). If one of the above, other than <b>&gt;&amp;-</b> and the <b>&gt;#</b> and <b>&lt;#</b> forms, is preceded by <b>{</b><i>varname</i><b>}</b> with no intervening space, then a file descriptor number greater than 10 will be selected by the shell and stored in the variable <i>varname</i>. If <b>&gt;&amp;-</b> or the any of the <b>&gt;#</b> and <b>&lt;#</b> forms is preceded by <b>{</b><i>varname</i><b>}</b> the value of <i>varname</i> defines the file descriptor to close or position. For example:</p>
<pre class="tab tcy">... 2&gt;&amp;1</pre>
<p class="tab">means file descriptor 2 is to be opened for writing as a duplicate of file descriptor 1 and</p>
<pre class="tab tcy">exec {n}&lt;file</pre>
<p class="tab">means open file named file for reading and store the file descriptor number in variable <i>n</i>.</p>
<p class="tab">The order in which redirections are specified is significant. The shell evaluates each redirection in terms of the (file descriptor, file) association at the time of evaluation. For example:</p>
<pre class="tab tcy">... 1&gt;fname 2&gt;&amp;1</pre>
<p class="tab">first associates file descriptor 1 with file <i>fname</i>. It then associates file descriptor 2 with the file associated with file descriptor 1 (i.e., <i>fname</i>). If the order of redirections were reversed, file descriptor 2 would be associated with the terminal (assuming file descriptor 1 had been) and then file descriptor 1 would be associated with file <i>fname</i>.</p>
<p class="tab">If a command is followed by <b>&amp;</b> and job control is not active, then the default standard input for the command is the empty file <b>/dev/null</b>. Otherwise, the environment for the execution of a command contains the file descriptors of the invoking shell as modified by input/output specifications.</p>
<h2 id="Environment">Environment</h2>
<p class="tab">The <i>environment</i> is a list of <a href="/jargon/e/envivari.htm">name-value pairs</a> that is passed to an executed program in the same way as a normal argument list. The names must be identifiers and the values are character strings. The shell interacts with the environment in several ways. On invocation, the shell scans the environment and creates a variable for each name found, giving it the corresponding value and attributes and marking it export. Executed commands inherit the environment. If the user modifies the values of these variables or creates new ones, using the <b>export</b> or <b>typeset -x</b> commands, they become part of the environment. The environment seen by any executed command is thus composed of any name-value pairs originally inherited by the shell, whose values may be modified by the current shell, plus any additions which must be noted in <b>export</b> or <b>typeset -x</b> commands.</p>
<p class="tab">The environment for any simple-command or function may be augmented by prefixing it with one or more variable assignments. A variable assignment argument is a word of the form <i>identifier</i><b>=</b><i>value</i>. Thus:</p>
<pre class="tab tcy">TERM=450 cmd args</pre>
<p class="tab">and</p>
<pre class="tab tcy">(export TERM; TERM=450; cmd args)</pre>
<p class="tab">are equivalent (as far as the above execution of <i>cmd</i> is concerned except for special built-in commands listed below - those that are preceded with a dagger).</p>
<p class="tab">If the obsolete <b>-k</b> option is set, all variable assignment arguments are placed in the environment, even if they occur after the command name. The following first prints <b>a=b c</b> and then <b>c</b>:</p>
<pre class="tab tcy">echo a=b c set -k echo a=b c</pre>
<p class="tab">This feature is intended for use with scripts written for early versions of the shell and its use in new scripts is strongly discouraged.</p>
<h2 id="Functions">Functions</h2>
<p class="tab">For historical reasons, there are two ways to define functions, the <b>name()</b> syntax and the function name syntax, described in the <a href="#commands">commands</a> section above. Shell functions are read in and stored internally. Alias names are resolved when the function is read. Functions are executed like commands with the arguments passed as positional parameters. See <a href="#Execution">execution</a> below.</p>
<p class="tab">Functions defined by the function name syntax and called by name execute in the same process as the caller and share all files and present working directory with the caller. Traps caught by the caller are reset to their default action inside the function. A trap condition that is not caught or ignored by the function causes the function to terminate and the condition to be passed on to the caller. A trap on EXIT set inside a function is executed in the environment of the caller after the function completes. Ordinarily, variables are shared between the calling program and the function. However, the <b>typeset</b> special built-in command used within a function defines local variables whose scope includes the current function. They can be passed to functions that they call in the variable assignment list that precedes the call or as arguments passed as name references. Errors within functions return control to the caller.</p>
<p class="tab">Functions defined with the <b>name()</b> syntax and functions defined with the function name syntax that are invoked with the <b>.</b> special built-in are executed in the caller's environment and share all variables and traps with the caller. Errors in these function executions cause the script containing them to abort.</p>
<p class="tab">The special built-in command <b>return</b> is used to return from function calls.</p>
<p class="tab">Function names can be listed with the <b>-f</b> or <b>+f</b> option of the <b>typeset</b> special built-in command. The text of functions, when available, are also listed with <b>-f</b>. Functions can be undefined with the <b>-f</b> option of the unset special built-in command.</p>
<p class="tab">Ordinarily, functions are unset when the shell executes a shell script. Functions that need to be defined across separate invocations of the shell should be placed in a directory and the <b>FPATH</b> variable should contain the name of this directory. They may also be specified in the <b>ENV</b> file.</p>
<h2>Discipline functions</h2>
<p class="tab">Each variable can have zero or more discipline functions associated with it. The shell initially understands the discipline names <b>get</b>, <b>set</b>, <b>append</b>, and <b>unset</b> but can be added when defining new types. On most systems, others can be added at run time via the C programming interface extension provided by the <b>builtin</b> built-in utility. If the <b>get</b> discipline is defined for a variable, it is invoked whenever the given variable is referenced. If the variable <b>.sh.value</b> is assigned a value inside the discipline function, the referenced variable evaluates to this value instead. If the <b>set</b> discipline is defined for a variable, it is invoked whenever the given variable is assigned a value. If the <b>append</b> discipline is defined for a variable, it is invoked whenever a value is appended to the given variable. The variable <b>.sh.value</b> is given the value of the variable before invoking the discipline, and the variable is assigned the value of <b>.sh.value</b> after the discipline completes. If <b>.sh.value</b> is unset inside the discipline, then that value is unchanged. If the <b>unset</b> discipline is defined for a variable, it is invoked whenever the given variable is unset. The variable does not be unset unless it is unset explicitly from in the discipline function.</p>
<p class="tab">The variable <b>.sh.name</b> contains the name of the variable for which the discipline function is called, <b>.sh.subscript</b> is the subscript of the variable, and <b>.sh.value</b> contains the value being assigned inside the <b>set</b> discipline function. The variable <b>_</b> is a reference to the variable including the subscript if any. For the <b>set</b> discipline, changing <b>.sh.value</b> changes the value that gets assigned. Finally, the expansion <b>${ var</b>.<i>name</i><b>}</b>, when <i>name</i> is the name of a discipline, and there is no variable of this name, is equivalent to the command substitution <b>${ var.</b><i>name</i><b>;}</b>.</p>
<h2 id="Name-Spaces">Name spaces</h2>
<p class="tab">Commands and functions that are executed as part of the list of a namespace command that modify variables or create new ones, create a new variable whose name is the name of the name space as given by identifier preceded by "<b>..</b>" When a variable whose name is <i>name</i> is referenced, it is first searched for using <b>.identifier.</b><i>name</i>. Similarly, a function defined by a command in the namespace <i>list</i> is created using the name <b>space name</b> preceded by a "<b>.</b>".</p>
<p class="tab">When the list of a namespace command contains a namespace command, the names of variables and functions that are created consist of the variable or function name preceded by the list of identifiers each preceded by "<b>.</b>".</p>
<p class="tab">Outside of a name space, a variable or function created inside a name space can be referenced by preceding it with the name space <b>name</b>.</p>
<p class="tab">By default, variables staring with <b>.sh</b> are in the sh name space.</p>
<h2 id="Type-Variables">Type variables</h2>
<p class="tab">Typed variables provide a way to create data structure and objects. A type can be defined by a shared library, the <b>enum</b> built-in command described below, or using the new <b>-T</b> option of the <b>typeset</b> built-in command. With the <b>-T</b> option of typeset, the type name, specified as an option argument to <b>-T</b>, is set with a compound variable assignment that defines the type. Function definitions can appear inside the compound variable assignment and these become discipline functions for this type and can be invoked or redefined by each instance of the type. The function name <b>create</b> is treated specially. It is invoked for each instance of the type that is created but is not inherited and cannot be redefined for each instance.</p>
<p class="tab">When a type is defined a special built-in command of that name is added. These built-ins are declaration commands and follow the same expansion rules as all the special built-in commands defined below that are preceded by &Dagger; &Dagger; . These commands can subsequently be used inside further type definitions. The man page for these commands can be generated using the <b>--man</b> option or any of the other <b>--</b> options described with <b>getopts</b>. The <b>-r</b>, <b>-a</b>, <b>-A</b>, <b>-h</b>, and <b>-S</b> options of <b>typeset</b> are permitted with each of these new built-ins.</p>
<p class="tab">An instance of a type is created by invoking the type name followed by one or more instance names. Each instance of the type is initialized with a copy of the sub-variables except for sub-variables that are defined with the <b>-S</b> option. Variables defined with the <b>-S</b> are shared by all instances of the type. Each instance can change the value of any sub-variable and can also define new discipline functions of the same names as those defined by the type definition and as any standard discipline names. No additional sub-variables can be defined for any instance.</p>
<p class="tab">When defining a type, if the value of a sub-variable is not set and the <b>-r</b> attribute is specified, it causes the sub-variable to be a required sub-variable. Whenever an instance of a type is created, all required sub-variables must be specified. These sub-variables become readonly in each instance.</p>
<p class="tab">When unset is invoked on a sub-variable within a type, and the <b>-r</b> attribute has not been specified for this field, the value is reset to the default value associative with the type. Invoking <b>unset</b> on a type instance not contained within another type deletes all sub-variables and the variable itself.</p>
<p class="tab">A type definition can be derived from another type definition by defining the first sub-variable name as <b>_</b> and defining its type as the base type. Any remaining definitions will be additions and modifications that apply to the new type. If the new type name is the same is that of the base type, the type will be replaced and the original type will no longer be accessible.</p>
<p class="tab">The <b>typeset</b> command with the <b>-T</b> and no option argument or operands writes all the type definitions to standard output in a form that can be read in to create all they types.</p>
<h2 id="Jobs">Jobs</h2>
<p class="tab">If the <b>monitor</b> option of the <b>set</b> command is turned on, an interactive shell associates a job with each pipeline. It keeps a table of current jobs, printed by the <b>jobs</b> command, and assigns them small integer numbers. When a job is started asynchronously with <b>&amp;</b>, the shell prints a line which looks like:</p>
<pre class="tab">[1] 1234</pre>
<p class="tab">indicating that the job which was started asynchronously was job number <b>1</b> and had one (top-level) process, whose process id was <b>1234</b>.</p>
<p class="tab">This paragraph and the next require features that are not in all versions of UNIX and may not apply. If you are running a job and want to do something else, you may hit the key <b>^Z</b> (control-Z) which sends a STOP signal to the current job. The shell will then normally indicate that the job was &quot;Stopped,&quot; and print another prompt. You can then manipulate the state of this job, putting it in the background with the <b>bg</b> command, or run some other commands and then eventually bring the job back into the foreground with the foreground command <b>fg</b>. A <b>^Z</b> takes effect immediately and is like an interrupt in that pending output and unread input are discarded when it is typed.</p>
<p class="tab">A job being run in the background stops if it tries to read from the terminal. Background jobs are normally allowed to produce output, but this can be disabled by giving the command <b>stty tostop</b>. If you set this <a href="/unix/ustty.htm">tty option</a>, then background jobs stops when they try to produce output like they do when they try to read input.</p>
<p class="tab">A job pool is a collection of jobs started with <b>list &amp;</b> associated with a name.</p>
<p class="tab">There are several ways to refer to jobs in the shell. A job can be referred to by the process id of any process of the job or by one of the following:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>%</b><i>number</i></td>
<td>The job with the given number.</td>
</tr>
<tr class="tcw">
<td><b>pool</b></td>
<td>All the jobs in the job pool named by <i>pool</i>.</td>
</tr>
<tr class="tcw">
<td><i>pool</i><b>.</b><i>number</i></td>
<td>The job number <i>number</i> in the job pool named by <i>pool</i>.</td>
</tr>
<tr class="tcw">
<td><b>%</b><i>string</i></td>
<td>Any job whose command line begins with <i>string</i>.</td>
</tr>
<tr class="tcw">
<td><b>%?</b><i>string</i></td>
<td>Any job whose command line contains string.</td>
</tr>
<tr class="tcw">
<td><b>%%</b></td>
<td>Current job.</td>
</tr>
<tr class="tcw">
<td><b>%+</b></td>
<td>Equivalent to <b>%%</b>.</td>
</tr>
<tr class="tcw">
<td><b>%-</b></td>
<td>Previous job. Also, unless noted otherwise, wherever a job can be specified, the name of a background job pool can represent all the jobs in that pool.</td>
</tr>
</table>
<p class="tab">The shell learns immediately whenever a process changes state. It normally informs you whenever a job becomes blocked so that no further progress is possible, but only before it prints a prompt. This is done so that it does not otherwise disturb your work. The notify option of the set command causes the shell to print these job change messages as soon as they occur.</p>
<p class="tab">When the <b>monitor</b> option is on, each background job that completes triggers any trap set for <b>CHLD</b>.</p>
<p class="tab">When you try to leave the shell while jobs are running or stopped, you will be warned that 'You have stopped(running) jobs.' You may use the <a href="/jargon/j/job.htm">jobs</a> command to see what they are. If you immediately try to exit again, the shell will not warn you a second time, and the stopped jobs will be terminated. When a login shell receives a HUP signal, it sends a HUP signal to each job not been disowned with the <b>disown</b> built-in command described below.</p>
<h2>Signals</h2>
<p class="tab">The <b>INT</b> and <b>QUIT</b> <a href="/unix/signals.htm">signals</a> for an invoked command are ignored if the command is followed by &amp; and the <b>monitor</b> option is not active. Otherwise, signals have the values inherited by the shell from its parent (but see also the <b>trap</b> built-in command below).</p>
<h2 id="Execution">Execution</h2>
<p class="tab">Each time a command is read, the above substitutions are carried out. If the command name matches one of the <i>Special Built-in Commands</i> listed below, it is executed in the current shell process. Next, the command name is checked to see if it matches a user defined function. If it does, the positional parameters are saved and then reset to the arguments of the function call. A function is also executed in the current shell process. When the function completes or issues a <b>return</b>, the positional parameter list is restored. For functions defined with the <b>function</b> <i>name</i> syntax, any trap set on EXIT in the function is executed. The exit value of a function is the value of the last command executed. If a command name is not a special built-in command or a user defined function, but it is one of the built-in commands listed below, it is executed in the current shell process.</p>
<p class="tab">The shell variables <b>PATH</b> followed by the variable <b>FPATH</b> defines the list of directories to search for the command name. Alternative directory names are separated by a colon (<b>:</b>). The default path is <b>/bin:/usr/bin:</b> (specifying <b>/bin</b>, <b>/usr/bin</b>, and the current directory in that order). The current directory can be specified by two or more adjacent colons, or by a colon at the beginning or end of the path list. If the command name contains a <b>/</b>, then the search path is not used. Otherwise, each directory in the list of directories defined by <b>PATH</b> and <b>FPATH</b> is checked in order. If the directory being searched is contained in <b>FPATH</b> and contains a file whose name matches the command being searched, then this file is loaded into the current shell environment as if it were the argument to the <b>.</b> command except that only preset aliases are expanded, and a function of the given name is executed as described above.</p>
<p class="tab">If this directory is not in <b>FPATH</b>, the shell first determines whether there is a built-in version of a command corresponding to a given pathname and if so it is invoked in the current process. If no built-in is found, the shell checks for a file named <b>.paths</b> in this directory. If found and there is a line of the form <b>FPATH=</b><i>path</i> where path names an existing directory then that directory is searched after immediately after the current directory as if it were found in the <b>FPATH</b> variable. If <i>path</i> does not begin with <b>/</b>, it is checked for relative to the directory being searched.</p>
<p class="tab">The <b>.paths</b> file is then checked for a line of the form <b>PLUGIN_LIB=</b><i>libname</i> "[ <b>:</b> <i>libname</i> ] ...". Each library named by <i>libname</i> will be searched for as if it were an option argument to <b>builtin -f</b>, and if it contains a built-in of the specified name this will be executed instead of a command by this name. Any built-in loaded from a library found this way will be associated with the directory containing the <b>.paths</b> file so it only executes if not found in an earlier directory.</p>
<p class="tab">Finally, the directory will be checked for a file of the given name. If the file has execute permission but is not an <b>a.out</b> file, it is assumed to be a file containing shell commands. A separate shell is spawned to read it. All non-exported variables are removed in this case. If the shell command file doesn't have read permission, or if the setuid and/or setgid bits are set on the file, then the shell executes an agent whose job it is to set up the permissions and execute the shell with the shell command file passed down as an open file. If the <b>.paths</b> contains a line of the form <b>name=</b><i>value</i> in the first or second line, then the environment variable name is modified by prepending the directory specified by <i>value</i> to the directory <i>list</i>. If <i>value</i> is not an absolute directory, then it specifies a directory relative to the directory that the executable was found. If the environment variable name does not already exist it is added to the environment list for the specified command. A parenthesized command is executed in a sub-shell without removing non-exported variables.</p>
<h2 id="Command-Re-Entry">Command re-entry</h2>
<p class="tab">The text of the last <b>HISTSIZE</b> (default <b>512</b>) commands entered from a <a href="/jargon/t/terminal.htm">terminal</a> device is saved in a history file. The file <b>$HOME/.sh_history</b> is used if the <b>HISTFILE</b> variable is not set or if the file it names is not writable. A shell can access the commands of all interactive shells which use the same named <b>HISTFILE</b>. The built-in command <b>hist</b> is used to list or edit a portion of this file. The portion of the file to be edited or listed can be selected by number or by giving the first character or characters of the command. A single command or range of commands can be specified. If you do not specify an editor program as an argument to hist then the value of the variable <b>HISTEDIT</b> is used. If <b>HISTEDIT</b> is unset, the obsolete variable <b>FCEDIT</b> is used. If <b>FCEDIT</b> is not defined, then <b>/bin/ed</b> is used. The edited command(s) is printed and re-executed upon leaving the editor unless you quit without writing. The <b>-s</b> option (and in obsolete versions, the editor name <b>-</b>) is used to skip the editing phase and to re-execute the command. In this case, a substitution parameter of the form <i>old</i><b>=</b><i>new</i> can modify the command before execution. For example, with the preset alias <b>r</b>, which is aliased to '<b>hist -s</b>', typing '<b>r bad=good c</b>' will re-execute the most recent command which starts with the letter <b>c</b>, replacing the first occurrence of the string <b>bad</b> with the string <b>good</b>.</p>
<h2>In-line editing options</h2>
<p class="tab">Normally, each command line entered from a terminal device is typed followed by a newline ('RETURN' or 'LINE FEED'). If either the <b>emacs</b>, <b>gmacs</b>, or <b>vi</b> option is active, the user can edit the command line. To be in either of these edit modes set the corresponding option. An editing option is automatically selected each time the <b>VISUAL</b> or <b>EDITOR</b> variable is assigned a value ending in either of these option names.</p>
<p class="tab">The editing features require that the user's terminal accept 'RETURN' as carriage return without line feed and that a space (' ') must overwrite the current character on the screen.</p>
<p class="tab">Unless the <b>multiline</b> option is on, the editing modes implement a concept where the user is looking through a window at the current line. The window width is the value of <b>COLUMNS</b> if it's defined, otherwise 80. If the window width is too small to display the prompt and leave at least 8 columns to enter input, the prompt is truncated from the left. If the line is longer than the window width minus two, a mark is displayed at the end of the window to notify the user. As the cursor moves and reaches the window boundaries, the window will be centered about the cursor. The mark is a <b>&gt;</b> (<b>&lt;</b>, <b>*</b>) if the line extends on the right (left, both) side(s) of the window.</p>
<p class="tab">The search commands in each edit mode access the history file. Only strings are matched, not patterns, although a leading <b>^</b> in the string restricts the match to begin at the first character in the line. Each of the edit modes has an operation to list the files or commands that match a partially entered word. When applied to the first word on the line, or the first word after a <b>;</b>, <b>?</b>, <b>&amp;</b>, or <b>(</b>, and the word does not begin with <b>~</b> or contain a <b>/</b>, the list of aliases, functions, and executable commands defined by the <b>PATH</b> variable that could match the partial word is displayed. Otherwise, the list of files that match the given word is displayed. If the partially entered word does not contain any file expansion characters, a <b>*</b> is appended before generating these lists. After displaying the generated list, the input line is redrawn. These operations are called <i>command name listing</i> and <i>file name listing</i>, respectively. There are additional operations, referred to as <i>command name completion</i> and <i>file name completion</i>, which compute the list of matching commands or files, but instead of printing the list, replace the current word with a complete or partial match. For file name completion, if the match is unique, a <b>/</b> is appended if the file is a directory and a space is appended if the file is not a directory. Otherwise, the longest common prefix for all the matching files replaces the word. For command name completion, only the portion of the file names after the last <b>/</b> are used to find the longest command prefix. If only a single name matches this prefix, then the word is replaced with the command name followed by a space. When using a tab for completion that does not yield a unique match, a subsequent tab provides a numbered list of matching alternatives. A specific selection can be made by entering the selection number followed by a tab.</p>
<h2 id="Key-Bindings">Key bindings</h2>
<p class="tab">The <b>KEYBD</b> trap can intercept keys as they are typed and change the characters that are actually seen by the shell. This trap is executed after each character (or sequence of characters when the first character is ESC) is entered while reading from a terminal. The variable <b>.sh.edchar</b> contains the character or character sequence which generated the trap. Changing the value of <b>.sh.edchar</b> in the trap action causes the shell to behave as if the new value were entered from the keyboard rather than the original value.</p>
<p class="tab">The variable <b>.sh.edcol</b> is set to the input column number of the cursor at the time of the input. The variable <b>.sh.edmode</b> is set to ESC when in <b>vi</b> insert mode (see below) and is null otherwise. By prepending <b>${.sh.editmode}</b> to a value assigned to <b>.sh.edchar</b>, it causes the shell to change to control mode if it's not already in this mode.</p>
<p class="tab">This trap is not invoked for characters entered as arguments to editing directives, or while reading input for a character search.</p>
<h2>Emacs editing mode</h2>
<p class="tab">This mode is entered by enabling either the <b>emacs</b> or <b>gmacs</b> option. The only difference between these two modes is the way they handle <b>^T</b>. To edit, the user moves the cursor to the point needing correction and then inserts or deletes characters or words as needed. All the editing commands are control characters or escape sequences. The notation for control characters is caret (<b>^</b>) followed by the character. For example, <b>^F</b> is the notation for <b>control-F</b>. This is entered by depressing '<b>f</b>' while holding down the '<b>Ctrl</b>' (control) key. The '<b>Shift</b>' key is not depressed. The notation <b>^?</b> indicates the <b>Del</b> (delete) key.</p>
<p class="tab">The notation for escape sequences is <b>M-</b> followed by a character. For example, <b>M</b>-<b>f</b> (pronounced Meta f) is entered by depressing <b>ESC</b> (ASCII 033) followed by '<b>f</b>'. (<b>M</b>-<b>F</b> would be the notation for <b>ESC</b> followed by '<b>Shift</b>' (capital) '<b>F</b>'.)</p>
<p class="tab">All edit commands operate from any place on the line (not only at the beginning). Neither the 'RETURN' nor the 'LINE FEED' key is entered after edit commands except when noted.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px"><b>^F</b></td>
<td>Move cursor forward (right) one character.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[C</b></td>
<td>Move cursor forward (right) one character.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>f</b></td>
<td> Move cursor forward one word. The <a href="/unix/uemacs.htm">emacs editor</a>'s idea of a word is a string of characters consisting of only letters, digits and underscores.</td>
</tr>
<tr class="tcw">
<td><b>^B</b></td>
<td>Move cursor backward (left) one character.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[D</b></td>
<td>Move cursor backward (left) one character.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>b</b></td>
<td>Move cursor backward one word.</td>
</tr>
<tr class="tcw">
<td><b>^A</b></td>
<td>Move cursor to start of line.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[H</b></td>
<td>Move cursor to start of line.</td>
</tr>
<tr class="tcw">
<td><b>^E</b></td>
<td>Move cursor to end of line.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[Y</b></td>
<td>Move cursor to end of line.</td>
</tr>
<tr class="tcw">
<td><b>^]char</b></td>
<td>Move cursor forward to character <i>char</i> on current line.</td>
</tr>
<tr class="tcw">
<td><b>M-^]</b><i>char</i></td>
<td>Move cursor backward to character <i>char</i> on current line.</td>
</tr>
<tr class="tcw">
<td><b>^X^X</b></td>
<td>Interchange the cursor and mark.</td>
</tr>
<tr class="tcw">
<td><b>erase</b></td>
<td>User defined erase character as defined by the <b>stty</b> command, usually <b>^H</b> or <b>#</b>. Delete previous character.</td>
</tr>
<tr class="tcw">
<td><b>lnext</b></td>
<td>User defined literal next character as defined by the <b>stty</b> command, or <b>^V</b> if not defined. Removes the next character's editing features (if any).</td>
</tr>
<tr class="tcw">
<td><b>^D</b></td>
<td>Delete current character.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>d</b></td>
<td>Delete current word.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>^H</b></td>
<td>(<b>Meta</b>-<b>backspace</b>) Delete previous word.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>h</b></td>
<td>Delete previous word.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>^?</b></td>
<td>(<b>Meta</b>-<b>DEL</b>) Delete previous word (if your interrupt character is <b>^?</b> (<b>DEL</b>, the default) then this command will not work).</td>
</tr>
<tr class="tcw">
<td><b>^T</b></td>
<td>Transpose current character with previous character and advance the cursor in <b>emacs</b> mode. Transpose two previous characters in <b>gmacs</b> mode.</td>
</tr>
<tr class="tcw">
<td><b>^C</b></td>
<td>Capitalize current character.</td>
</tr>
<tr class="tcw">
<td><b>M-c</b></td>
<td>Capitalize current word.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>l</b></td>
<td>Change the current word to lowercase.</td>
</tr>
<tr class="tcw">
<td><b>^K</b></td>
<td>Delete from the cursor to the end of the line. If preceded by a numerical parameter whose value is less than the current cursor position, then delete from given position up to the cursor. If preceded by a numerical parameter whose value is greater than the current cursor position, then delete from cursor up to given cursor position.</td>
</tr>
<tr class="tcw">
<td><b>^W</b></td>
<td>Kill from the cursor to the mark.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>p</b></td>
<td>Push the region from the cursor to the mark on the stack.</td>
</tr>
<tr class="tcw">
<td><b>kill</b></td>
<td>User defined kill character as defined by the <b>stty</b> command, usually <b>^G</b> or <b>@</b>. Kill the entire current line.<br><br> If two kill characters are entered in succession, all kill characters from then on cause a line feed.</td>
</tr>
<tr class="tcw">
<td><b>^Y</b></td>
<td>Restore last item removed from line. Yank item back to the line.</td>
</tr>
<tr class="tcw">
<td><b>^L</b></td>
<td>Line feed and print current line.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>^L</b></td>
<td>Clear the screen.</td>
</tr>
<tr class="tcw">
<td><b>^@</b></td>
<td>(Null character) Set mark.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>space</b></td>
<td>(Meta space) Set mark.</td>
</tr>
<tr class="tcw">
<td><b>^J</b></td>
<td>(New line) Execute the current line.</td>
</tr>
<tr class="tcw">
<td><b>^M</b></td>
<td>(Return) Execute the current line.</td>
</tr>
<tr class="tcw">
<td><b>eof</b></td>
<td><a href="/jargon/e/eof.htm">End-of-file</a> character, normally <b>^D</b>, is processed as an End-of-file only if the current line is null.</td>
</tr>
<tr class="tcw">
<td><b>^P</b></td>
<td>Fetch previous command. Each time <b>^P</b> is entered the previous command back in time is accessed. Moves back one line when not on the first line of a multi-line command.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[A</b></td>
<td>If the cursor is at the end of the line, it is equivalent to <b>^R</b> with string set to the contents of the current line. Otherwise, it is equivalent to <b>^P</b>.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>&lt;</b></td>
<td>Fetch the least recent (oldest) history line.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>&gt;</b></td>
<td>Fetch the most recent (youngest) history line.</td>
</tr>
<tr class="tcw">
<td><b>^N</b></td>
<td>Fetch next command line. Each time <b>^N</b> is entered the next command line forward in time is accessed.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[B</b></td>
<td>Equivalent to <b>^N</b>.</td>
</tr>
<tr class="tcw">
<td><b>^R</b><i>string</i></td>
<td>Reverse search history for a previous command line containing <i>string</i>. If a parameter of zero is given, the search is forward. The <i>string</i> is terminated by a 'RETURN' or 'NEW LINE'. If <i>string</i> is preceded by a <b>^</b>, the matched line must begin with <i>string</i>. If <i>string</i> is omitted, then the next command line containing the most recent <i>string</i> is accessed. In this case, a parameter of zero reverses the direction of the search.</td>
</tr>
<tr class="tcw">
<td><b>^O</b></td>
<td>Operate - Execute the current line and fetch the next line relative to current line from the history file.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<i>digits</i></td>
<td>(Escape) Define numeric parameter, the digits are taken as a parameter to the next command. The commands that accept a parameter are <b>^F</b>, <b>^B</b>, <b>erase</b>, <b>^C</b>, <b>^D</b>, <b>^K</b>, <b>^R</b>, <b>^P</b>, <b>^N</b>, <b>^]</b>, <b>M</b>-<b>.</b>, <b>M</b>-<b>^]</b>, <b>M</b>-<b>_</b>, <b>M</b>-<b>=</b>, <b>M</b>-<b>b</b>, <b>M</b>-<b>c</b>, <b>M</b>-<b>d</b>, <b>M</b>-<b>f</b>, <b>M</b>-<b>h</b>, <b>M</b>-<b>l</b> and <b>M</b>-<b>^H</b>.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<i>letter</i></td>
<td>Soft-key - Your alias list is searched for an alias by the name <b>_</b><i>letter</i> and if an alias of this name is defined, its value will be inserted on the input queue. The letter must not be one of the above meta-functions.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>[</b><i>letter</i></td>
<td>Soft-key - Your alias list is searched for an alias by the name <b>__</b><i>letter</i> and if an alias of this name is defined, its value will be inserted on the input queue. This can program function keys on many terminals.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>.</b></td>
<td>The last word of the previous command is inserted on the line. If preceded by a numeric parameter, the value of this parameter determines which word to insert rather than the last word.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>_</b></td>
<td>Same as <b>M</b>-<b>..</b></td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>*</b></td>
<td>Attempt file name generation on the current word. An asterisk is appended if the word doesn't match any file or contain any special pattern characters.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>ESC</b></td>
<td>Command or file name completion as described above.</td>
</tr>
<tr class="tcw">
<td><b>^I tab</b></td>
<td>Attempts command or file name completion as described above. If a partial completion occurs, repeating this will behave as if <b>M</b>-<b>=</b> were entered. If no match is found or entered after space, a tab is inserted.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>=</b></td>
<td>If not preceded by a numeric parameter, it generates the list of matching commands or file names as described above. Otherwise, the word under the cursor is replaced by the item corresponding to the value of the numeric parameter from the most recently generated command or file list. If the cursor is not on a word, it is inserted instead.</td>
</tr>
<tr class="tcw">
<td><b>^U</b></td>
<td>Multiply parameter of next command by 4.</td>
</tr>
<tr class="tcw">
<td><b>\</b></td>
<td>Escape next character. Editing characters, the user's <b>erase</b>, <b>kill</b> and <b>interrupt</b> (normally <b>^?</b>) characters may be entered in a command line or in a search string if preceded by a <b>\</b>. The <b>\</b> removes the next character's editing features (if any).</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>^V</b></td>
<td>Display version of the shell.</td>
</tr>
<tr class="tcw">
<td><b>M</b>-<b>#</b></td>
<td>If the line does not begin with a <b>#</b>, a <b>#</b> is inserted at the beginning of the line and after each newline, and the line is entered. This causes a comment to be inserted in the history file. If the line begins with a <b>#</b>, the <b>#</b> is deleted and one <b>#</b> after each newline is also deleted.</td>
</tr>
</table>
<h2 id="Vi-Editing-Mode">Vi editing mode</h2>
<p class="tab">There are two typing modes. Initially, when you enter a command you are in the input mode. To edit, the user enters control mode by typing <b>ESC</b> (ASCII code 033) and moves the cursor to the point needing correction and then inserts or deletes characters or words as needed. Most control commands accept an optional repeat count before the command.</p>
<p class="tab">When in <b>vi</b> mode on most systems, canonical processing is initially enabled and the command will be echoed again if the speed is 1200 <a href="/jargon/b/baud.htm">baud</a> or greater and it contains any control characters or less than one second has elapsed since the prompt was printed. The <b>ESC</b> character terminates canonical processing for the remainder of the command and the user can then modify the command line. This scheme has the advantages of canonical processing with the type-ahead echoing of raw mode.</p>
<p class="tab">If the option <b>viraw</b> is also set, the terminal always has canonical processing disabled. This mode is implicit for systems that do not support two alternate end of line delimiters, and may be helpful for certain terminals.</p>
<p class="tab">By default, the editor is placed into "Input" edit mode.</p>
<p class="tab">Input edit commands:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:90px"><b>erase</b></td>
<td>User defined erase character as defined by the <a href="/unix/ustty.htm">stty</a> command, usually <b>^H</b> or <b>#</b>. Delete previous character.</td>
</tr>
<tr class="tcw">
<td><b>^W</b></td>
<td>Delete the previous blank-separated word. On some systems, the <b>viraw</b> option may be required for this to work.</td>
</tr>
<tr class="tcw">
<td><b>eof</b></td>
<td>As the first character of the line causes the shell to terminate unless the <b>ignoreeof</b> option is set. Otherwise, this character is ignored.</td>
</tr>
<tr class="tcw">
<td><b>lnext</b></td>
<td>User defined literal next character as defined by the <b>stty</b> or <b>^V</b> if not defined. Removes the next character's editing features (if any). On some systems, the <b>viraw</b> option may be required for this to work.</td>
</tr>
<tr class="tcw">
<td><b>\</b></td>
<td>Escape the next erase or kill character.</td>
</tr>
<tr class="tcw">
<td><b>^I tab</b></td>
<td>Attempts command or file name completion as described above and returns to input mode. If a partial completion occurs, repeating this will behave as if <b>=</b> were entered from control mode. If no match is found or entered after space, a <b>tab</b> is inserted.</td>
</tr>
</table>
<p class="tab">Motion edit commands (these commands move the cursor):</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px">[<i>count</i>]<b>l</b></td>
<td>Cursor forward (right) one character.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>[C</b></td>
<td>Cursor forward (right) one character.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>w</b></td>
<td>Cursor forward one alpha-numeric word.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>W</b></td>
<td>Cursor to the beginning of the next word that follows a blank.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>e</b></td>
<td>Cursor to end of word.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>E</b></td>
<td>Cursor to end of the current blank delimited word.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>h</b></td>
<td>Cursor backward (left) one character.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>[D</b></td>
<td>Cursor backward (left) one character.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>b</b></td>
<td>Cursor backward one word.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>B</b></td>
<td>Cursor to preceding blank separated word.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>?</b></td>
<td>Cursor to column <i>count</i>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>f</b><i>c</i></td>
<td>Find the next character <i>c</i> in the current line.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>F</b><i>c</i></td>
<td>Find the previous character <i>c</i> in the current line.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>t</b><i>c</i></td>
<td>Equivalent to <b>f</b> followed by <b>h</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>T</b><i>c</i></td>
<td>Equivalent to <b>F</b> followed by <b>l</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>;</b></td>
<td>Repeats <i>count</i> times, the last single character find command (<b>f</b>, <b>F</b>, <b>t</b>, or <b>T</b>).</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>,</b></td>
<td>Reverses the last single character find command <i>count</i> times.</td>
</tr>
<tr class="tcw">
<td><b>0</b></td>
<td>Cursor to start of line.</td>
</tr>
<tr class="tcw">
<td><b>^</b></td>
<td>Cursor to start of line.</td>
</tr>
<tr class="tcw">
<td><b>[H</b></td>
<td>Cursor to first non-blank character in line.</td>
</tr>
<tr class="tcw">
<td><b>$</b></td>
<td>Cursor to end of line.</td>
</tr>
<tr class="tcw">
<td><b>[Y</b></td>
<td>Cursor to end of line.</td>
</tr>
<tr class="tcw">
<td><b>%</b></td>
<td>Moves to balancing <b>(</b>, <b>)</b>, <b>{</b>, <b>}</b>, <b>[</b>, or <b>]</b>. If cursor is not on one of the above characters, the remainder of the line is searched for the first occurrence of one of the above characters first.</td>
</tr>
</table>
<p class="tab">Search edit commands (commands that access your command history):</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:110px">[<i>count</i>]<b>k</b></td>
<td>Fetch previous command. Each time <b>k</b> is entered the previous command back in time is accessed.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>-</b></td>
<td>Equivalent to <b>k</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>[A</b></td>
<td>If cursor is at the end of the line it is equivalent to <b>/</b> with <i>string</i> set to the contents of the current line. Otherwise, it is equivalent to <b>k</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>j</b></td>
<td>Fetch next command. Each time <b>j</b> is entered the next command forward in time is accessed.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>+</b></td>
<td>Equivalent to <b>j</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>[B</b></td>
<td>Equivalent to <b>j</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>G</b></td>
<td>The command number <i>count</i> is fetched. The default is the least recent history command.</td>
</tr>
<tr class="tcw">
<td><b>/</b><i>string</i></td>
<td>Search backward through history for a previous command containing <i>string</i>. String is terminated by a 'RETURN' or 'NEW LINE'. If string is preceded by a <b>^</b>, the matched line must begin with <i>string</i>. If <i>string</i> is null, the previous string will be used.</td>
</tr>
<tr class="tcw">
<td><b>?</b><i>string</i></td>
<td>Same as <b>/</b> except that search will be in the forward direction.</td>
</tr>
<tr class="tcw">
<td><b>n</b></td>
<td>Search for next match of the last pattern to <b>/</b> or <b>?</b> commands.</td>
</tr>
<tr class="tcw">
<td><b>N</b></td>
<td>Search for next match of the last pattern to <b>/</b> or <b>?</b>, but in reverse direction.</td>
</tr>
</table>
<p class="tab">Vi Mode Text Modification Edit Commands (these commands modifies the line):</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px"><b>a</b></td>
<td>Enter input mode and enter text after the current character.</td>
</tr>
<tr class="tcw">
<td><b>A</b></td>
<td>Append text to the end of the line. Equivalent to <b>$a</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>c</b><i>motion</i><br><br><b>c</b>[<i>count</i>]<i>motion</i></td>
<td>Delete current character through the character that motion would move the cursor to and enter input mode. If motion is <b>c</b>, the entire line is deleted and input mode entered.</td>
</tr>
<tr class="tcw">
<td><b>C</b></td>
<td>Delete the current character through the end of line and enter input mode. Equivalent to <b>c$</b>.</td>
</tr>
<tr class="tcw">
<td><b>S</b></td>
<td>Equivalent to <b>cc</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>s</b></td>
<td>Replace characters under the cursor in input mode.</td>
</tr>
<tr class="tcw">
<td><b>D</b></td>
<td>Delete the current character through the end of line. Equivalent to <b>d$</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>d</b><i>motion</i><br><br><b>d</b>[<i>count</i>]<i>motion</i></td>
<td>Delete current character through the character that motion would be moved. If motion is <b>d</b>, the entire line is deleted.</td>
</tr>
<tr class="tcw">
<td><b>i</b></td>
<td>Enter input mode and insert text before the current character.</td>
</tr>
<tr class="tcw">
<td><b>I</b></td>
<td>Insert text before the beginning of the line. Equivalent to <b>0i</b>.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>P</b></td>
<td>Place the previous text modification before the cursor.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>p</b></td>
<td>Place the previous text modification after the cursor.</td>
</tr>
<tr class="tcw">
<td><b>R</b></td>
<td>Enter input mode and replace characters on the screen with characters you type overlay fashion.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>rc</b></td>
<td>Replace the count character(s) starting at the current cursor position with <b>c</b>, and advance the cursor.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>x</b></td>
<td>Delete current character.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>X</b></td>
<td>Delete preceding character.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>.</b></td>
<td>Repeat the previous text modification command.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>~</b></td>
<td>Invert the case of the <i>count</i> character(s) starting at the current cursor position and advance the cursor.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>_</b></td>
<td>Causes the <i>count</i> word of the previous command to be appended and input mode entered. The last word is used if count is omitted.</td>
</tr>
<tr class="tcw">
<td><b>*</b></td>
<td>Causes an <b>*</b> to be appended to the current word and file name generation attempted. If no match is found, it plays an audio bell. Otherwise, the word is replaced by the matching pattern and input mode is entered.</td>
</tr>
<tr class="tcw">
<td><b>\</b></td>
<td>Command or file name completion as described above.</td>
</tr>
</table>
<p class="tab">Other miscellaneous vi mode edit commands:</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:150px">[<i>count</i>]<b>y</b><i>motion</i><br><br><b>y</b>[<i>count</i>]<i>motion</i></td>
<td>Yank current character through character that motion would move the cursor to and puts them into the delete buffer. The text and cursor are unchanged.</td>
</tr>
<tr class="tcw">
<td><b>yy</b></td>
<td>Yanks the entire line.</td>
</tr>
<tr class="tcw">
<td><b>Y</b></td>
<td>Yanks from current position to end of line. Equivalent to <b>y$</b>.</td>
</tr>
<tr class="tcw">
<td><b>u</b></td>
<td>Undo the last text modifying command.</td>
</tr>
<tr class="tcw">
<td><b>U</b></td>
<td>Undo all the text modifying commands performed on the line.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>v</b></td>
<td>Returns the command <b>hist -e ${VISUAL:-${EDITOR:-vi}}</b> <i>count</i> in the input buffer. If <i>count</i> is omitted, then the current line is used.</td>
</tr>
<tr class="tcw">
<td><b>^L</b></td>
<td>Line feed and print current line. Has effect only in control mode.</td>
</tr>
<tr class="tcw">
<td><b>^J</b></td>
<td>(New line) Execute the current line, regardless of mode.</td>
</tr>
<tr class="tcw">
<td><b>^M</b></td>
<td>(Return) Execute the current line, regardless of mode.</td>
</tr>
<tr class="tcw">
<td><b>#</b></td>
<td>If the first character of the command is a <b>#</b>, then this command deletes this <b>#</b> and each <b>#</b> that follows a newline. Otherwise, sends the line after inserting a <b>#</b> in front of each line in the command. Useful for causing the current line to be inserted in the history as a comment and uncommenting previously commented commands in the history file.</td>
</tr>
<tr class="tcw">
<td>[<i>count</i>]<b>=</b></td>
<td>If <i>count</i> is not specified, it generates the list of matching commands or file names as described above. Otherwise, the word under the cursor is replaced by the count item from the most recently generated command or file list. If the cursor is not on a word, it is inserted instead.</td>
</tr>
<tr class="tcw">
<td><b>@</b><i>letter</i></td>
<td>Your alias list is searched for an alias by the name <b>_</b><i>letter</i> and if an alias of this name is defined, its value will be inserted on the input queue for processing.</td>
</tr>
<tr class="tcw">
<td><b>^V</b></td>
<td>Display version of the shell.</td>
</tr>
</table>
<h2>Built-in commands</h2>
<p class="tab">The following simple-commands are executed in the shell process. Input/Output redirection is permitted. Unless otherwise indicated, the output is written on file descriptor 1 and the exit status, when there is no syntax error, is zero. Except for <b>:</b>, <b>true</b>, <b>false</b>, <b>echo</b>, <b>newgrp</b>, and <b>login</b>, all built-in commands accept <b>--</b> to indicate end of options. They also interpret the option <b>--man</b> as a request to display the <a href="/unix/uman.htm">man</a> page onto standard error and <b>-?</b> as a help request which prints a usage message on standard error. Commands that are preceded by one or two &Dagger; symbols are special built-in commands and are treated specially in the following ways:</p>
<ol>
<li>Variable assignment lists preceding the command remain in effect when the command completes.</li>
<li>I/O redirections are processed after variable assignments.</li>
<li>Errors cause a script containing them to abort.</li>
<li>They are not valid function names.</li>
<li>Words following a command preceded by &Dagger; &Dagger; that are in the format of a variable assignment are expanded with the same rules as a variable assignment. This means that tilde substitution is performed after the <b>=</b> sign and field splitting and file name generation are not performed. These are called <i>declaration built-ins</i>.</li>
</ol>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px">&Dagger; <b>:</b> [ <i>arg</i> ... ]</td>
<td>The command only expands parameters.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>.</b> <i>name</i> [ <i>arg</i> ... ]</td>
<td>If <i>name</i> is a function defined with the function <i>name</i> reserved word syntax, the function is executed in the current environment (as if it had been defined with the <b>name()</b> syntax). Otherwise, if <i>name</i> refers to a file, the file is read in its entirety and the commands are executed in the current shell environment. The search path specified by <b>PATH</b> is used to find the directory containing the file. If any arguments <i>arg</i> are given, they become the positional parameters while processing the <b>.</b> command and the original positional parameters are restored upon completion. Otherwise, the positional parameters are unchanged. The exit status is the exit status of the last command executed.</td>
</tr>
<tr class="tcw">
<td>&Dagger; &Dagger; <b>alias</b> [ <b>-ptx</b> ] [ <i>name</i> [ <b>=</b><i>value</i> ] ] ...</td>
<td><b>alias</b> with no arguments prints the list of aliases in the form <i>name</i><b>=</b><i>value</i> on standard output. The <b>-p</b> option causes the word alias to be inserted before each one. When one or more arguments are given, an alias is defined for each name whose value is given. A trailing space in <i>value</i> causes the next word to be checked for alias substitution. The obsolete <b>-t</b> option is used to set and list tracked aliases. The value of a tracked alias is the full pathname corresponding to the given name. The value becomes undefined when the value of <b>PATH</b> is reset but the alias remains tracked. Without the <b>-t</b> option, for each name in the argument list for which no value is given, the name and value of the alias is printed. The obsolete <b>-x</b> option has no effect. The exit status is non-zero if a <i>name</i> is given, but no <i>value</i>, and no alias was defined for the name.</td>
</tr>
<tr class="tcw">
<td><b>bg</b> [ <i>job</i>... ]</td>
<td>This command exists only on systems that support job control. Puts each specified <i>job</i> into the background. The current job is put in the background if job is not specified. See <a href="#Jobs">Jobs</a> for a description of the format of <i>job</i>.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>break</b> [ <i>n</i> ]</td>
<td>Exit from the enclosing <b>for</b>, <b>while</b>, <b>until</b>, or <b>select</b> loop, if any. If <i>n</i> is specified, then break <i>n</i> levels.</td>
</tr>
<tr class="tcw">
<td><b>builtin</b> [ <b>-ds</b> ] [ <b>-f</b> <i>file</i> ] [ <i>name</i> ... ]comput</td>
<td>If <i>name</i> is not specified, and no <b>-f</b> option is specified, the built-ins are printed on standard output. The <b>-s</b> option prints only the special built-ins. Otherwise, each name represents the pathname whose basename is the name of the built-in. The entry point function name is determined by prepending <b>b_</b> to the built-in name. A built-in specified by a pathname is only executed when that pathname is found during the path search. Built-ins found in libraries loaded via the <b>.paths</b> file will be associate with the pathname of the directory containing the <b>.paths</b> file.<br><br> Special built-ins cannot be bound to a pathname or deleted. The <b>-d</b> option deletes each of the given built-ins. On systems that support dynamic loading, the <b>-f</b> option names a shared library containing the code for built-ins. The shared library prefix and/or suffix, which depend on the system, can be omitted. Once a library is loaded, its symbols become available for subsequent invocations of <b>builtin</b>. Multiple libraries can be specified with separate invocations of the <b>builtin</b> command. Libraries are searched in the reverse order in which they are specified. When a library is loaded, it looks for a function in the library whose name is <b>lib_init()</b> and invokes this function with an argument of <b>0</b>.</td>
</tr>
<tr class="tcw">
<td><b>cd</b> [ <b>-LP</b> ] [ <i>arg</i> ]<br><br><b>cd</b> [ <b>-LP</b> ] <i>old new</i></td>
<td>This command can be in either of two forms. In the first form, it changes the current directory to <i>arg</i>. If <i>arg</i> is <b>-</b>, the directory is changed to the previous directory. The shell variable <b>HOME</b> is the default <i>arg</i>. The variable <b>PWD</b> is set to the current directory. The shell variable <b>CDPATH</b> defines the search path for the directory containing <i>arg</i>. Alternative directory names are separated by a colon (<b>:</b>). The default path is <b>&lt;null&gt;</b> (specifying the current directory). Note that the current directory is specified by a null path name, which can appear immediately after the equal sign or between the colon delimiters anywhere else in the path <i>list</i>. If <i>arg</i> begins with a <b>/</b> then the search path is not used. Otherwise, each directory in the path is searched for <i>arg</i>. The second form of <b>cd</b> substitutes the string <i>new</i> for the string <i>old</i> in the current directory name, <b>PWD</b>, and tries to change to this new directory. By default, <a href="/jargon/s/symblink.htm">symbolic link</a> names are treated literally when finding the directory name. This is equivalent to the <b>-L</b> option. The <b>-P</b> option causes symbolic links to be resolved when determining the directory. The last instance of <b>-L</b> or <b>-P</b> on the command line determines which method is used. The <b>cd</b> command may not be executed by <b>rksh</b>.</td>
</tr>
<tr class="tcw">
<td><b>command</b> [ <b>-pvxV</b> ] <i>name</i> [ <i>arg</i> ... ]</td>
<td>Without the <b>-v</b> or <b>-V</b> options, <b>command</b> executes <i>name</i> with the arguments given by <i>arg</i>. The <b>-p</b> option causes a default path to be searched rather than the one defined by the value of <b>PATH</b>. Functions aren't searched for when finding <i>name</i>. Also, if <i>name</i> refers to a special built-in, none of the special properties associated with the leading daggers will be honored. For example, the predefined alias <b>redirect='command exec'</b> prevents a script from terminating when an invalid redirection is given. With the <b>-x</b> option, if command execution would result in a failure because there are too many arguments, errno <b>E2BIG</b>, the shell will invoke command name multiple times with a subset of the arguments on each invocation. Arguments that occur before the first word that expands to multiple arguments and after the last word that expands to multiple arguments will be passed on each invocation. The exit status will be the maximum invocation exit status. With the <b>-v</b> option, <b>command</b> is equivalent to the built-in whence command described below. The <b>-V</b> option causes command to act like whence <b>-v</b>.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>continue</b> [ <i>n</i> ]</td>
<td>Resume the next iteration of the enclosing <b>for</b>, <b>while</b>, <b>until</b>, or <b>select</b> loop. If <i>n</i> is specified, then resume at the <i>n</i>-th enclosing loop.</td>
</tr>
<tr class="tcw">
<td><b>disown</b> [ <i>job</i>... ]</td>
<td>Causes the shell not to send a <b>HUP</b> signal to each given job, or all active jobs if job is omitted, when a login shell terminates.</td>
</tr>
<tr class="tcw">
<td><b>echo</b> [ <i>arg</i> ... ]</td>
<td>When the first <i>arg</i> does not begin with a <b>-</b>, and none of the arguments contain a <b>\</b>, then <b>echo</b> prints each of its arguments separated by a space and terminated by a newline. Otherwise, the behavior of <b>echo</b> is system dependent and <b>print</b> or <b>printf</b> described below should be used. See <a href="/jargon/e/echo.htm">echo</a> for usage and description.</td>
</tr>
<tr class="tcw">
<td>&Dagger; &Dagger; <b>enum</b> [ <b>-i</b> ] <i>type</i>[<b>=</b>(<i>value</i> ...) ]</td>
<td>Creates a declaration command named <i>type</i> that is an integer type that allows one of the specified values as enumeration names. If <b>=</b>(<i>value</i> ...) is omitted, then <i>type</i> must be an indexed array variable with at least two elements and the values are taken from this array variable. If <b>-i</b> is specified the values are case insensitive.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>eval</b> [ <i>arg</i> ... ]</td>
<td>The arguments are read as input to the shell and the resulting command(s) executed.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>exec</b> [ <b>-c</b> ] [ <b>-a</b> <i>name</i> ] [ <i>arg</i> ... ]</td>
<td>If <i>arg</i> is given, the command specified by the arguments is executed in place of this shell without creating a new process. The <b>-c</b> option causes the environment to be cleared before applying variable assignments associated with the <b>exec</b> invocation. The <b>-a</b> option causes name rather than the first <i>arg</i>, to become <b>argv[0]</b> for the new process. Input/output arguments may appear and affect the current process. If <i>arg</i> is not given, the effect of this command is to modify file descriptors as prescribed by the input/output redirection list. In this case, any file descriptor numbers greater than 2 that are opened with this mechanism are closed when invoking another program.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>exit</b> [ <i>n</i> ]</td>
<td>Causes the shell to exit with the exit status specified by <i>n</i>. The value will be the least significant 8 bits of the specified status. If <i>n</i> is omitted, then the exit status is that of the last command executed. An end-of-file also causes the shell to exit except for a shell which has the <b>ignoreeof</b> option (see <b>set</b> below) turned on.</td>
</tr>
<tr class="tcw">
<td>&Dagger; &Dagger; <b>export</b> [ <b>-p</b> ] [ <i>name</i>[<b>=</b><i>value</i>] ] ...</td>
<td>If <i>name</i> is not given, the names and values of each variable with the <b>export</b> attribute are printed with the values quoted in a manner that allows them to be re-input. The <b>export</b> command is the same as <b>typeset -x</b> except that if you use <b>export</b> within a function, no local variable is created. The <b>-p</b> option causes the word <b>export</b> to be inserted before each one. Otherwise, the given names are marked for automatic export to the environment of subsequently-executed commands.</td>
</tr>
<tr class="tcw">
<td><b>false</b></td>
<td>Does nothing, and exits 1. Used with <b>until</b> for infinite loops.</td>
</tr>
<tr class="tcw">
<td><b>fg</b> [ <i>job</i>... ]</td>
<td>This command is only on systems that support job control. Each <i>job</i> specified is brought to the foreground and waited for in the specified order. Otherwise, the current job is brought into the foreground. See <a href="#Jobs">Jobs</a> for a description of the format of <i>job</i>.</td>
</tr>
<tr class="tcw">
<td><b>getconf</b> [ <i>name</i> [ <i>pathname</i> ] ]</td>
<td>Prints the current value of the configuration parameter given by <i>name</i>. The configuration parameters are defined by the <a href="/jargon/i/ieee.htm">IEEE</a> <a href="/jargon/p/posix.htm">POSIX</a> 1003.1 and IEEE POSIX 1003.2 standards. The <i>pathname</i> argument is required for parameters whose value depends on the location in the file system. If no arguments are given, <b>getconf</b> prints the names and values of the current configuration parameters. The pathname <b>/</b> is used for each of the parameters that requires <i>pathname</i>.</td>
</tr>
<tr class="tcw">
<td><b>getopts</b> [ <b>-a</b> <i>name</i> ] <i>optstring</i> <i>vname</i> [ <i>arg</i> ... ]</td>
<td>Checks <i>arg</i> for legal options. If <i>arg</i> is omitted, the positional parameters are used. An option argument begins with a <b>+</b> or a <b>-</b>. An option not beginning with <b>+</b> or <b>-</b> or the argument <b>--</b> ends the options. Options beginning with <b>+</b> are only recognized when optstring begins with a <b>+</b>. <i>optstring</i> contains the letters that <b>getopts</b> recognizes. If a letter is followed by a <b>:</b>, that option is expected to have an argument. The options can be separated from the argument by blanks. The option <b>-?</b> causes <b>getopts</b> to generate a usage message on standard error. The <b>-a</b> argument can specify the name to use for the usage message, which defaults to <b>$0</b>. <b>getopts</b> places the next option letter it finds inside variable <i>vname</i> each time it is invoked. The option letter will be prepended with a <b>+</b> when <i>arg</i> begins with a <b>+</b>. The index of the next <i>arg</i> is stored in <b>OPTIND</b>. The option argument, if any, gets stored in <b>OPTARG</b>. A leading <b>:</b> in <i>optstring</i> causes <b>getopts</b> to store the letter of an invalid option in <b>OPTARG</b>, and to set <i>vname</i> to <b>?</b> for an unknown option and to <b>:</b> when a required option argument is missing. Otherwise, <b>getopts</b> prints an error message. The exit status is non-zero when there are no more options. There is no way to specify any of the options <b>:</b>, <b>+</b>, <b>-</b>, <b>?</b>, <b>[</b>, and <b>]</b>. The option <b>#</b> can only be specified as the first option.</td>
</tr>
<tr class="tcw">
<td><b>hist</b> [ <b>-e</b> <i>ename</i> ] [ <b>-nlr</b> ] [ <i>first</i> [ <i>last</i> ] ]<br><br><b>hist -s</b> [ <i>old</i><b>=</b><i>new</i> ] [ <i>command</i> ]</td>
<td>In the first form, a range of commands from <i>first</i> to <i>last</i> is selected from the last <b>HISTSIZE</b> commands that were typed at the terminal. The arguments first and last may be specified as a number or as a string. A string is used to locate the most recent command starting with the given string. A negative number is used as an offset to the current command number. If the <b>-l</b> option is selected, the commands are listed on standard output. Otherwise, the editor program <i>ename</i> is invoked on a file containing these keyboard commands. If <i>ename</i> is not supplied, then the value of the variable <b>HISTEDIT</b> is used. If <b>HISTEDIT</b> is not set, then <b>FCEDIT</b> (default <b>/bin/ed</b>) is used as the editor. When editing is complete, the edited command(s) is executed if the changes were saved. If <i>last</i> is not specified, then it will be set to <i>first</i>. If <i>first</i> is not specified, the default is the previous command for editing and <b>-16</b> for listing. The option <b>-r</b> reverses the order of the commands and the option <b>-n</b> suppresses command numbers when listing. In the second form, <i>command</i> is interpreted as <i>first</i> described above and defaults to the last command executed. The resulting command is executed after the optional substitution <i>old</i><b>=</b><i>new</i> is performed.</td>
</tr>
<tr class="tcw">
<td><b>jobs</b> [ <b>-lnp</b> ] [ <i>job</i> ... ]</td>
<td>Lists information about each given job; or all active jobs if <i>job</i> is omitted. The <b>-l</b> option lists process IDs in addition to the normal information. The <b>-n</b> option only displays jobs that have stopped or exited since last notified. The <b>-p</b> option causes only the process group to be listed. See <a href="#Jobs">Jobs</a> for a description of the format of <i>job</i>.</td>
</tr>
<tr class="tcw">
<td><b>kill</b> [ <b>-s</b> <i>signame</i> ] <i>job</i> ...<br><br><b>kill</b> [ <b>-n</b> <i>signum</i> ] <i>job</i> ...<br><br><b>kill -Ll</b> [ <i>sig</i> ... ]</td>
<td>Sends either the <b>TERM</b> (terminate) <a href="/unix/signals.htm">signal</a> or the specified signal to the specified jobs or processes. Signals are either given by number with the <b>-n</b> option or by name with the <b>-s</b> option (as given in <b>&lt;signal.h&gt;</b>, stripped of the prefix "<b>SIG</b>" with the exception that <b>SIGCLD</b> is named <b>CHLD</b>). For backward compatibility, the <b>n</b> and <b>s</b> can be omitted and the number or name placed immediately after the <b>-</b>. If the signal being sent is <b>TERM</b> (terminate) or <b>HUP</b> (hangup), then the job or process will be sent a <b>CONT</b> (continue) signal if it's stopped. The argument <b>job</b> can be the process id of a process that is not a member of one of the active jobs. See <a href="#Jobs">Jobs</a> for a description of the format of job. In the third form, <b>kill -l</b>, or <b>kill -L</b>, if <i>sig</i> is not specified, the signal names are listed. The <b>-l</b> option list only the signal names. <b>-L</b> options lists each signal name and corresponding number. Otherwise, for each <i>sig</i> that is a name, the corresponding signal number is listed. For each <i>sig</i> that is a number, the signal name corresponding to the least significant 8 bits of <i>sig</i> is listed.</td>
</tr>
<tr class="tcw">
<td><b>let</b> <i>arg</i> ...</td>
<td>Each <i>arg</i> is a separate arithmetic expression to be evaluated. <b>let</b> only recognizes <a href="/jargon/o/octal.htm">octal</a> constants starting with <b>0</b> when the <b>set</b> option <b>letoctal</b> is on. See <a href="#Arithmetic-Evaluation">arithmetic evaluation</a> above, for a description of arithmetic expression evaluation. The exit status is <b>0</b> if the value of the last expression is non-zero, and <b>1</b> otherwise.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>newgrp</b> [ <i>arg</i> ... ]</td>
<td>Equivalent to <b>exec "/bin/newgrp arg</b> ...".</td>
</tr>
<tr class="tcw">
<td><b>print</b> [ <b>-CRenprsv</b> ] [ <b>-u</b> <i>unit</i>] [ <b>-f</b> <i>format</i> ] [ <i>arg</i> ... ]</td>
<td>With no options or with option <b>-</b> or <b>--</b>, each <i>arg</i> is printed on standard output. The <b>-f</b> option causes the arguments to be printed as described by <b>printf</b>. In this case, any <b>e</b>, <b>n</b>, <b>r</b>, <b>R</b> options are ignored. Otherwise, unless the <b>-C</b>, <b>-R</b>, <b>-r</b>, or <b>-v</b> are specified, the following escape conventions will be applied:<br>
<table class="mtable3">
<tr class="tcw">
<td style="width:50px"><b>\a</b></td>
<td>The alert character (ASCII 07).</td>
</tr>
<tr class="tcw">
<td><b>\b</b></td>
<td>The backspace character (ASCII 010).</td>
</tr>
<tr class="tcw">
<td><b>\c</b></td>
<td>Causes <b>print</b> to end without processing more arguments and not adding a newline.</td>
</tr>
<tr class="tcw">
<td><b>\f</b></td>
<td>The formfeed character (ASCII 014).</td>
</tr>
<tr class="tcw">
<td><b>\n</b></td>
<td>The newline character (ASCII 012).</td>
</tr>
<tr class="tcw">
<td><b>\r</b></td>
<td>The <a href="/jargon/c/cr.htm">carriage return</a> character (ASCII 015).</td>
</tr>
<tr class="tcw">
<td><b>\t</b></td>
<td>The tab character (ASCII 011).</td>
</tr>
<tr class="tcw">
<td><b>\v</b></td>
<td>The vertical tab character (ASCII 013).</td>
</tr>
<tr class="tcw">
<td><b>\E</b></td>
<td>The escape character (ASCII 033).</td>
</tr>
<tr class="tcw">
<td><b>\\</b></td>
<td>The backslash character <b>\</b>.</td>
</tr>
<tr class="tcw">
<td><b>\0</b><i>x</i></td>
<td>The character defined by the 1, 2, or 3-digit octal string given by <i>x</i>.</td>
</tr>
</table>
The <b>-R</b> option prints all subsequent arguments and options other than <b>-n</b>. The <b>-e</b> causes the above escape conventions to be applied. This is the default behavior. It reverses the effect of an earlier <b>-r</b>. The <b>-p</b> option causes the arguments to be written onto the pipe of the process spawned with <b>?&amp;</b> instead of standard output. The <b>-v</b> option treats each <i>arg</i> as a variable name and writes the value in the <b>printf %B</b> format. The <b>-C</b> option treats each <i>arg</i> as a variable name and writes the value in the <b>printf %#B</b> format. The <b>-s</b> option causes the arguments to be written onto the history file instead of standard output. The <b>-u</b> option can specify a one digit file descriptor unit number unit on which the output will be placed. The default is <b>1</b>. If the option <b>-n</b> is used, no newline is added to the output.</td>
</tr>
<tr class="tcw">
<td><b>printf</b> <i>format</i> [ <i>arg</i> ... ]</td>
<td>The arguments <i>arg</i> are printed on standard output in accordance with the ANSI C formatting rules associated with the <i>format</i> string format. If the number of arguments exceeds the number of format specifications, the <i>format</i> string is reused to format remaining arguments. The following extensions can also be used:<br><br>
<table class="mtable3">
<tr class="tcw">
<td style="width:100px"><b>%b</b></td>
<td>A <b>%b</b> format can be used instead of <b>%s</b> to cause escape sequences in the corresponding <i>arg</i> to be expanded as described in <b>print</b>.</td>
</tr>
<tr class="tcw">
<td><b>%B</b></td>
<td>A <b>%B</b> option causes each of the arguments to be treated as variable names and the binary value of variable will be printed. The alternate flag <b>#</b> causes a compound variable to be output on a single line. This is most useful for compound variables and variables whose attribute is <b>-b</b>.</td>
</tr>
<tr class="tcw">
<td><b>%H</b></td>
<td>A <b>%H</b> format can be used instead of <b>%s</b> to cause characters in <i>arg</i> that are special in <a href="/jargon/h/html.htm">HTML</a> and <a href="/jargon/x/xml.htm">XML</a> to be output as their entity name. The alternate flag <b>#</b> formats the output for use as a <a href="/jargon/u/uri.htm">URI</a>.</td>
</tr>
<tr class="tcw">
<td><b>%P</b></td>
<td>A <b>%P</b> format can be used instead of <b>%s</b> to cause <i>arg</i> to be interpreted as an extended regular expression and be printed as a shell pattern.</td>
</tr>
<tr class="tcw">
<td><b>%R</b></td>
<td>A <b>%R</b> format can be used instead of <b>%s</b> to cause <i>arg</i> to be interpreted as a shell pattern and to be printed as an extended regular expression.</td>
</tr>
<tr class="tcw">
<td><b>%q</b></td>
<td>A <b>%q</b> format can be used instead of <b>%s</b> to cause the resulting string to be quoted in a manner than can be reinput to the shell. When <b>q</b> is preceded by the alternative format specifier, <b>#</b>, the string is quoted in manner suitable as a field in a <a href="/jargon/c/csv.htm">.csv format file</a>.</td>
</tr>
<tr class="tcw">
<td><b>%(</b><i>date-format</i><b>)T</b></td>
<td>A <b>%(</b><i>date-format</i><b>)T</b> format can be use to treat an argument as a date/time string and to format the date/time according to the date-format as defined for the <a href="/unix/udate.htm">date</a> command.</td>
</tr>
<tr class="tcw">
<td><b>%Z</b></td>
<td>A <b>%Z</b> format outputs a byte whose value is 0.</td>
</tr>
<tr class="tcw">
<td><b>%d</b></td>
<td>The precision field of the <b>%d</b> format can be followed by a <b>.</b> and the output base. In this case, the <b>#</b> flag character causes <i>base</i><b>#</b> to be prepended.</td>
</tr>
<tr class="tcw">
<td><b>#</b></td>
<td>The <b>#</b> flag, when used with the <b>%d</b> format without an output base, displays the output in powers of 1000 indicated by one of the following suffixes: <b>k</b> for <a href="/jargon/k/kilobyte.htm">kilobyte</a>, <b>M</b> for <a href="/jargon/m/megabyte.htm">megabyte</a>, <b>G</b> for <a href="/jargon/g/gigabyte.htm">gigabyte</a>, <b>T</b> for <a href="/jargon/t/terabyte.htm">terabyte</a>, <b>P</b> for <a href="/jargon/p/petabyte.htm">petabyte</a>, <b>E</b> for <a href="/jargon/e/exabyte.htm">exabyte</a>. When used with the <b>%i</b> format, displays the output in powers of 1024 indicated by one of the following suffixes: <b>Ki Mi Gi Ti Pi Ei</b>.</td>
</tr>
<tr class="tcw">
<td><b>=</b></td>
<td>The <b>=</b> flag centers the output in the specified field width.</td>
</tr>
<tr class="tcw">
<td><b>L</b></td>
<td>The <b>L</b> flag, when used with the <b>%c</b> or <b>%s</b> formats, treats precision as character width instead of byte count.</td>
</tr>
<tr class="tcw">
<td><b>,</b></td>
<td>The <b>,</b> flag, when used with the <b>%d</b> or <b>%f</b> formats, separates groups of digits with the grouping delimiter (<b>,</b> on groups of 3 in the C locale.)</td>
</tr>
</table>
</td>
</tr>
<tr class="tcw">
<td><b>pwd</b> [ <b>-LP</b> ]</td>
<td>Outputs the value of the current working directory. The <b>-L</b> option is the default; it prints the logical name of the current directory. If the <b>-P</b> option is given, all symbolic links are resolved from the name. The last instance of <b>-L</b> or <b>-P</b> on the command line determines which method is used.</td>
</tr>
<tr class="tcw">
<td><b>read</b> [ <b>-ACSprsv</b> ] [ <b>-d</b> <i>delim</i>] [ <b>-n</b> <i>n</i>] [ [ <b>-N</b> <i>n</i>] [ [ <b>-t</b> <i>timeout</i>] [ <b>-u</b> <i>unit</i>] [ <i>vname</i><b>?</b><i>prompt</i> ] [ <i>vname</i> ... ]</td>
<td>The shell input mechanism. One line is read and is broken up into fields using the characters in <a href="#IFS">IFS</a> as separators. The escape character, <b>\</b>, is used to remove any special meaning for the next character and for line continuation. The <b>-d</b> option causes the read to continue to the first character of <i>delim</i> rather than newline. The <b>-n</b> option causes at most <i>n</i> bytes to read rather a full line but return when reading from a slow device as soon as any characters are read. The <b>-N</b> option causes exactly <i>n</i> to be read unless an end-of-file is encountered or the read times out because of the <b>-t</b> option. In raw mode, <b>-r</b>, the <b>\</b> character is not treated specially. The first field is assigned to the first <i>vname</i>, the second field to the second <i>vname</i>, etc., with leftover fields assigned to the last <i>vname</i>. When <i>vname</i> has the binary attribute and <b>-n</b> or <b>-N</b> is specified, the bytes that are read are stored directly into the variable. If the <b>-v</b> is specified, then the value of the first <i>vname</i> will be used as a default value when reading from a terminal device. The <b>-A</b> option causes the variable <i>vname</i> to be unset and each field that is read to be stored in successive elements of the indexed array <i>vname</i>. The <b>-C</b> option causes the variable <i>vname</i> to be read as a compound variable. Blanks are ignored when finding the beginning open parenthesis. The <b>-S</b> option causes the line to be treated like a record in a <b>.csv</b> format file so that double quotes allows the delimiter character and the newline character to appear within a field. The <b>-p</b> option causes the input line to be taken from the input pipe of a process spawned by the shell using <b>?&amp;</b>. If the <b>-s</b> option is present, the input will be saved as a command in the history file. The option <b>-u</b> can specify a one digit file descriptor unit to read. The file descriptor can be opened with the <b>exec</b> special built-in command. The default value of unit <i>n</i> is 0. The option <b>-t</b> is used to specify a timeout in seconds when reading from a terminal or pipe. If <i>vname</i> is omitted, then REPLY is used as the default <i>vname</i>. An end-of-file with the <b>-p</b> option causes cleanup for this process so that another can be spawned. If the first argument contains a <b>?</b>, the remainder of this word is used as a prompt on standard error when the shell is interactive. The exit status is <b>0</b> unless an end-of-file is encountered or read has timed out.</td>
</tr>
<tr class="tcw">
<td>&Dagger; &Dagger; <b>readonly</b> [ <b>-p</b> ] [ <i>vname</i>[<b>=</b><i>value</i>] ] ...</td>
<td>If <i>vname</i> is not given, the names and values of each variable with the <b>readonly</b> attribute is printed with the values quoted in a manner that allows them to be re-inputted. The <b>-p</b> option causes the word <b>readonly</b> to be inserted before each one. Otherwise, the given <i>vname</i>s are marked <b>readonly</b> and these names cannot be changed by subsequent assignment. When defining a type, if the value of a <b>readonly</b> sub-variable is not defined the value is required when creating each instance.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>return</b> [ <i>n</i> ]</td>
<td>Causes a shell function or <b>.</b> script to return to the invoking script with the exit status specified by <i>n</i>. The value will be the least significant 8 bits of the specified status. If <i>n</i> is omitted, then the return status is that of the last command executed. If <b>return</b> is invoked while not in a function or a <b>.</b> script, then it behaves the same as exit.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>set</b> [ <b> &plusmn;BCGabefhkmnoprstuvx</b> ] [ <b> &plusmn;o</b> [ <i>option</i> ] ] ... [ <b> &plusmn;A</b> <i>vname</i> ] [ <i>arg</i> ... ]</td>
<td>The options for this command are as follows:<br>
<table class="mtable3">
<tr class="tcw">
<td style="width:40px"><b>-A</b></td>
<td>Array assignment. Unset the variable <i>vname</i> and assign values sequentially from the <i>arg</i> list. If <b>+A</b> is used, the variable <i>vname</i> is not unset first.</td>
</tr>
<tr class="tcw">
<td><b>-B</b></td>
<td>Enable brace pattern field generation. This is the default behavior.</td>
</tr>
<tr class="tcw">
<td><b>-B</b></td>
<td>Enable brace group expansion. On by default.</td>
</tr>
<tr class="tcw">
<td><b>-C</b></td>
<td>Prevents redirection <b>&gt;</b> from truncating existing files. Files that are created are opened with the <b>O_EXCL</b> mode. Requires <b>&gt;?</b> to truncate a file when turned on.</td>
</tr>
<tr class="tcw">
<td><b>-G</b></td>
<td>Causes the pattern <b>**</b> by itself to match files and zero or more directories and sub-directories when used for file name generation. If followed by a <b>/</b> only directories and sub-directories are matched.</td>
</tr>
<tr class="tcw">
<td><b>-a</b></td>
<td>All subsequent variables that are defined are automatically exported.</td>
</tr>
<tr class="tcw">
<td><b>-b</b></td>
<td>Prints job completion messages as soon as a background job changes state rather than waiting for the next prompt.</td>
</tr>
<tr class="tcw">
<td><b>-e</b></td>
<td>Unless contained in a <b>??</b> or <b>&amp;&amp;</b> command, or the command following an <b>if</b>, <b>while</b>, or <b>until</b> command or in the pipeline following <b>!</b>, if a command has a non-zero exit status, execute the ERR trap, if set, and exit. This mode is disabled while reading profiles.</td>
</tr>
<tr class="tcw">
<td><b>-f</b></td>
<td>Disables file name generation.</td>
</tr>
<tr class="tcw">
<td><b>-h</b></td>
<td>Each command becomes a tracked alias when first encountered.</td>
</tr>
<tr class="tcw">
<td><b>-k</b></td>
<td>(Obsolete). All variable assignment arguments are placed in the environment for a command, not only those that precede the command name.</td>
</tr>
<tr class="tcw">
<td><b>-m</b></td>
<td>Background jobs will run in a separate process group and a line prints upon completion. The exit status of background jobs is reported in a completion message. On systems with job control, this option is turned on automatically for interactive shells.</td>
</tr>
<tr class="tcw">
<td><b>-n</b></td>
<td>Read commands and check them for syntax errors, but do not execute them. Ignored for interactive shells.</td>
</tr>
<tr class="tcw">
<td><b>-o</b></td>
<td>The following argument can be one of the following option names:<br>
<table class="mtable4">
<tr class="tcw">
<td style="width:160px"><b>allexport</b></td>
<td>Same as <b>-a</b>.</td>
</tr>
<tr class="tcw">
<td><b>errexit</b></td>
<td>Same as <b>-e</b>.</td>
</tr>
<tr class="tcw">
<td><b>bgnice</b></td>
<td>All background jobs are run at a lower priority. This is the default mode.</td>
</tr>
<tr class="tcw">
<td><b>braceexpand</b></td>
<td>Same as <b>-B</b>.</td>
</tr>
<tr class="tcw">
<td><b>emacs</b></td>
<td>Puts you in an <a href="/unix/uemacs.htm">emacs</a> style in-line editor for command entry.</td>
</tr>
<tr class="tcw">
<td><b>globstar</b></td>
<td>Same as <b>-G</b>.</td>
</tr>
<tr class="tcw">
<td><b>gmacs</b></td>
<td>Puts you in a <b>gmacs</b> style in-line editor for command entry.</td>
</tr>
<tr class="tcw">
<td><b>ignoreeof</b></td>
<td>The shell will not exit on end-of-file. The command <b>exit</b> must be used.</td>
</tr>
<tr class="tcw">
<td><b>keyword</b></td>
<td>Same as <b>-k</b>.</td>
</tr>
<tr class="tcw">
<td><b>letoctal</b></td>
<td>The <b>let</b> command allows octal constants starting with 0.</td>
</tr>
<tr class="tcw">
<td><b>markdirs</b></td>
<td>All directory names resulting from file name generation have a trailing <b>/</b> appended.</td>
</tr>
<tr class="tcw">
<td><b>monitor</b></td>
<td>Same as <b>-m</b>.</td>
</tr>
<tr class="tcw">
<td><b>multiline</b></td>
<td>The built-in editors uses multiple lines on the screen for lines that are longer than the width of the screen. This may not work for all terminals.</td>
</tr>
<tr class="tcw">
<td><b>noclobber</b></td>
<td>Same as <b>-C</b>.</td>
</tr>
<tr class="tcw">
<td><b>noexec</b></td>
<td>Same as <b>-n</b>.</td>
</tr>
<tr class="tcw">
<td><b>noglob</b></td>
<td>Same as <b>-f</b>.</td>
</tr>
<tr class="tcw">
<td><b>nolog</b></td>
<td>Do not save function definitions in the history file.</td>
</tr>
<tr class="tcw">
<td><b>notify</b></td>
<td>Same as <b>-b</b>.</td>
</tr>
<tr class="tcw">
<td><b>nounset</b></td>
<td>Same as <b>-u</b>.</td>
</tr>
<tr class="tcw">
<td><b>pipefail</b></td>
<td>A pipeline will not complete until all components of the pipeline have completed, and the return value will be the value of the last non-zero command to fail or zero if no command has failed.</td>
</tr>
<tr class="tcw">
<td><b>showme</b></td>
<td>When enabled, simple commands or pipelines preceded by a semicolon (<b>;</b>) will be displayed as if the <b>xtrace</b> option were enabled but aren't executed. Otherwise, the leading <b>;</b> is ignored.</td>
</tr>
<tr class="tcw">
<td><b>privileged</b></td>
<td>Same as <b>-p</b>.</td>
</tr>
<tr class="tcw">
<td><b>verbose</b></td>
<td>Same as <b>-v</b>.</td>
</tr>
<tr class="tcw">
<td><b>trackall</b></td>
<td>Same as <b>-h</b>.</td>
</tr>
<tr class="tcw">
<td><b>vi</b></td>
<td>Puts you in insert mode of a <a href="/unix/uvi.htm">vi</a> style in-line editor until you hit the escape character (ASCII code 033). This puts you in control mode. A return sends the line.</td>
</tr>
<tr class="tcw">
<td><b>viraw</b></td>
<td>Each character is processed as it is typed in <b>vi</b> mode.</td>
</tr>
<tr class="tcw">
<td><b>xtrace</b></td>
<td>Same as <b>-x</b>.</td>
</tr>
</table>
<br>
If no option name is supplied, then the current option settings are printed.</td>
</tr>
<tr class="tcw">
<td><b>-p</b></td>
<td>Disables processing of the <b>$HOME/.profile</b> file and uses the file <b>/etc/suid_profile</b> instead of the <b>ENV</b> file. This mode is on whenever the effective uid (gid) is not equal to the real uid (gid). Turning this off causes the effective uid and gid to be set to the real uid and gid.</td>
</tr>
<tr class="tcw">
<td><b>-r</b></td>
<td>Enables the restricted shell. This option cannot be unset once set.</td>
</tr>
<tr class="tcw">
<td><b>-s</b></td>
<td>Sort the positional parameters lexicographically.</td>
</tr>
<tr class="tcw">
<td><b>-t</b></td>
<td>(Obsolete). Exit after reading and executing one command.</td>
</tr>
<tr class="tcw">
<td><b>-u</b></td>
<td>Treat unset parameters as an error when substituting.</td>
</tr>
<tr class="tcw">
<td><b>-v</b></td>
<td>Print shell input lines as they are read.</td>
</tr>
<tr class="tcw">
<td><b>-x</b></td>
<td>Print commands and their arguments as they are executed.</td>
</tr>
<tr class="tcw">
<td><b>--</b></td>
<td>Do not change any of the options; useful in setting <b>$1</b> to a value beginning with <b>-</b>. If no arguments follow this option, then the positional parameters are unset.</td>
</tr>
</table>
</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>shift</b> [ <i>n</i> ]</td>
<td>The positional parameters from <b>$</b><i>n</i><b>+1</b> ... are renamed <b>$1</b> ... , default <i>n</i> is 1. The parameter <i>n</i> can be any arithmetic expression that evaluates to a non-negative number less than or equal to <b>$#</b>.</td>
</tr>
<tr class="tcw">
<td><b>sleep</b> <i>seconds</i></td>
<td>Suspends execution for the number of decimal seconds or fractions of a second given by <i>seconds</i>.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>trap</b> [ <b>-p</b> ] [ <i>action</i> ] [ <i>sig</i> ] ...</td>
<td>The <b>-p</b> option causes the trap action associated with each trap as specified by the arguments to be printed with appropriate quoting. Otherwise, <i>action</i> will be processed as if it were an argument to <b>eval</b> when the shell receives signal(s) <i>sig</i>. Each <i>sig</i> can be given as a number or as the name of the signal. Trap commands are executed in order of signal number. Any attempt to set a trap on a signal that was ignored on entry to the current shell is ineffective. If <i>action</i> is omitted and the first <i>sig</i> is a number, or if action is <b>-</b>, then the trap(s) for each <i>sig</i> are reset to their original values. If <i>action</i> is the null string then this signal is ignored by the shell and by the commands it invokes. If <i>sig</i> is <b>ERR</b> then <i>action</i> will be executed whenever a command has a non-zero exit status. If <i>sig</i> is DEBUG then action will be executed before each command. The variable <b>.sh.command</b> contains the contents of the current command line when <i>action</i> is running. If the exit status of the trap is 2 the command isn't executed. If the exit status of the trap is 255 and inside a function or a dot script, the function or dot script return. If <i>sig</i> is <b>0</b> or <b>EXIT</b> and the trap statement is executed inside the body of a function defined with the function name syntax, then the command action is executed after the function completes. If <i>sig</i> is <b>0</b> or <b>EXIT</b> for a trap set outside any function then the command <i>action</i> is executed on exit from the shell. If <i>sig</i> is <b>KEYBD</b>, then <i>action</i> will be executed whenever a key is read while in <b>emacs</b>, <b>gmacs</b>, or <b>vi</b> mode. The trap command with no arguments prints a list of commands associated with each signal number.</td>
</tr>
</table>
<p class="tab">An <b>exit</b> or <b>return</b> without an argument in a trap action will preserve the exit status of the command that invoked the trap.</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:250px"><b>true</b></td>
<td>Does nothing, and exits <b>0</b>. Used with <b>while for</b> infinite loops.</td>
</tr>
<tr class="tcw">
<td>&Dagger; &Dagger; <b>typeset</b> [ <b> &plusmn;ACHSfblmnprtux</b> ] [ <b> &plusmn;EFLRXZi</b>[<i>n</i>] ] [ <b>+-M</b> [ <i>mapname</i> ] ] [ <b>-T</b> [ <i>tname</i><b>=(</b><i>assign_list</i><b>)</b> ] ] [ <b>-h</b> <i>str</i> ] [ <b>-a</b> [<i>type</i>] ] [ <i>vname</i>[<b>=</b><i>value</i> ] ] ...</td>
<td>Sets attributes and values for shell variables and functions. When invoked inside a function defined with the function name <i>syntax</i>, a new instance of the variable <i>vname</i> is created, and the variable's <i>value</i> and <i>type</i> are restored when the function completes. The following list of attributes may be specified:<br>
<table class="mtable3">
<tr class="tcw">
<td style="width:40px"><b>-A</b></td>
<td>Declares <i>vname</i> to be an associative array. Subscripts are strings rather than arithmetic expressions.</td>
</tr>
<tr class="tcw">
<td><b>-C</b></td>
<td>causes each <i>vname</i> to be a compound variable. The <i>value</i> names a compound variable it is copied into <i>vname</i>. Otherwise, it unsets each <i>vname</i>.</td>
</tr>
<tr class="tcw">
<td><b>-a</b></td>
<td>Declares <i>vname</i> to be an indexed array. If <i>type</i> is specified, it must be the name of an enumeration type created with the <i>enum</i> command and it allows enumeration constants to be used as subscripts.</td>
</tr>
<tr class="tcw">
<td><b>-E</b></td>
<td>Declares <i>vname</i> to be a double precision floating point number. If <i>n</i> is non-zero, it defines the number of significant figures used when expanding <i>vname</i>. Otherwise, ten significant figures will be used.</td>
</tr>
<tr class="tcw">
<td><b>-F</b></td>
<td>Declares <i>vname</i> to be a double precision floating point number. If <i>n</i> is non-zero, it defines the number of places after the decimal point used when expanding <i>vname</i>. Otherwise, ten places after the decimal point will be used.</td>
</tr>
<tr class="tcw">
<td><b>-H</b></td>
<td>This option provides UNIX to host-name file mapping on non-UNIX machines.</td>
</tr>
<tr class="tcw">
<td><b>-L</b></td>
<td>Left justify and remove leading blanks from <i>value</i>. If <i>n</i> is non-zero, it defines the width of the field, otherwise it is determined by the width of the value of first assignment. When the variable is assigned to, it is filled on the right with blanks or truncated, if necessary, to fit into the field. The <b>-R</b> option is turned off.</td>
</tr>
<tr class="tcw">
<td><b>-M</b></td>
<td>Use the character mapping defined by <b>wctrans</b> such as <b>tolower</b> and <b>toupper</b> when assigning a value to each of the specified operands. When mapping is specified and there are not operands, all variables that use this mapping are written to standard output. When mapping is omitted and there are no operands, all mapped variables are written to standard output.</td>
</tr>
<tr class="tcw">
<td><b>-R</b></td>
<td>Right justify and fill with leading blanks. If <i>n</i> is non-zero, it defines the width of the field, otherwise it is determined by the width of the value of first assignment. The field is left filled with blanks or truncated from the end if the variable is reassigned. The <b>-L</b> option is turned off.</td>
</tr>
<tr class="tcw">
<td><b>-S</b></td>
<td>When used in the <b>assign_list</b> of a type definition, it causes the specified sub-variable to be shared by all instances of the type. When used inside a function defined with the function reserved word, the specified variables has function static scope. Otherwise, the variable is unset before processing the assignment list.</td>
</tr>
<tr class="tcw">
<td><b>-T</b></td>
<td>If followed by <i>tname</i>, it creates a type named by <i>tname</i> using the compound assignment <b>assign_list</b> to <i>tname</i>. Otherwise, it writes all the type definitions to standard output.</td>
</tr>
<tr class="tcw">
<td><b>-X</b></td>
<td>Declares <i>vname</i> to be a double precision floating point number and expands using the <b>%a</b> format of ISO-C99. If <i>n</i> is non-zero, it defines the number of <a href="/jargon/h/hex.htm">hex</a> digits after the <a href="/jargon/r/radix.htm">radix</a> point that is used when expanding <i>vname</i>. The default is 10.</td>
</tr>
<tr class="tcw">
<td><b>-Z</b></td>
<td>Right justify and fill with leading zeros if the first non-blank character is a digit and the <b>-L</b> option has not been set. Remove leading zeros if the <b>-L</b> option is also set. If <i>n</i> is non-zero, it defines the width of the field, otherwise it is determined by the width of the value of first assignment.</td>
</tr>
<tr class="tcw">
<td><b>-f</b></td>
<td>The names refer to function names rather than variable names. No assignments can be made and the only other valid options are <b>-S</b>, <b>-t</b>, <b>-u</b> and <b>-x</b>. The <b>-S</b> can be used with discipline functions defined in a type to indicate that the function is static. For a static function, the same method will be used by all instances of that type no matter which instance references it. Also, it can only use value of variables from the original type definition. These discipline functions cannot be redefined in any type instance. The <b>-t</b> option turns on execution tracing for this function. The <b>-u</b> option causes this function to be marked undefined. The <b>FPATH</b> variable will be searched to find the function definition when the function is referenced. If no options other than <b>-f</b> is specified, then the function definition will be displayed on standard output. If <b>+f</b> is specified, then a line containing the function name followed by a shell comment containing the line number and path name of the file where this function was defined, if any, is displayed. The exit status can determine whether the function is defined so that <b>typeset -f .sh.math.name</b> return <b>0</b> when math function name is defined and non-zero otherwise.</td>
</tr>
<tr class="tcw">
<td><b>-b</b></td>
<td>The variable can hold any number of bytes of data. The data can be text or binary. The value is represented by the base64 encoding of the data. If <b>-Z</b> is also specified, the size in bytes of the data in the buffer is determined by the size associated with the <b>-Z</b>. If the <a href="/jargon/b/base64.htm">base64</a> string assigned results in more data, it will be truncated. Otherwise, it will be filled with bytes whose value is zero. The <b>printf</b> format <b>%B</b> can output the actual data in this buffer instead of the base64 encoding of the data.</td>
</tr>
<tr class="tcw">
<td><b>-h</b></td>
<td>Used within type definitions to add information when generating information about the sub-variable on the <a href="/unix/uman.htm">man</a> page. It is ignored when used outside of a type definition. When used with <b>-f</b>, the information is associated with the corresponding discipline function.</td>
</tr>
<tr class="tcw">
<td><b>-i</b></td>
<td>Declares <i>vname</i> to be represented internally as integer. The right side of an assignment is evaluated as an arithmetic expression when assigning to an integer. If <i>n</i> is non-zero, it defines the output arithmetic base, otherwise the output base will be ten.</td>
</tr>
<tr class="tcw">
<td><b>-l</b></td>
<td>Used with <b>-i</b>, <b>-E</b> or <b>-F</b>, to indicate long integer, or long float. Otherwise, all uppercase characters are converted to lowercase. The uppercase option, <b>-u</b>, is turned off. Equivalent to <b>-M tolower</b>.</td>
</tr>
<tr class="tcw">
<td><b>-m</b></td>
<td>moves or renames the variable. The value is the name of a variable whose value is moved to <i>vname</i>. The original variable will be unset. Cannot be used with any other options.</td>
</tr>
<tr class="tcw">
<td><b>-n</b></td>
<td>Declares <i>vname</i> to be a reference to the variable whose name is defined by the value of variable <i>vname</i>. This often references a variable inside a function whose name was passed as an argument. Cannot be used with any other options.</td>
</tr>
<tr class="tcw">
<td><b>-p</b></td>
<td>The name, attributes and values for the given <i>vname</i>s are written on standard output in a form that can be used as shell input. If <b>+p</b> is specified, then the values are not displayed.</td>
</tr>
<tr class="tcw">
<td><b>-r</b></td>
<td>The given <i>vname</i>s are marked readonly and these names cannot be changed by subsequent assignment.</td>
</tr>
<tr class="tcw">
<td><b>-t</b></td>
<td>Tags the variables. Tags are user definable and have no special meaning to the shell.</td>
</tr>
<tr class="tcw">
<td><b>-u</b></td>
<td>When given with <b>-i</b>, specifies unsigned integer. Otherwise, all lowercase characters are converted to uppercase. The lowercase option, <b>-l</b>, is turned off. Equivalent to <b>-M toupper</b>.</td>
</tr>
<tr class="tcw">
<td><b>-x</b></td>
<td>The given <i>vname</i>s are marked for automatic export to the environment of subsequently-executed commands. Variables whose names contain a <b>.</b> cannot be exported.</td>
</tr>
</table>
The <b>-i</b> attribute cannot be specified with <b>-R</b>, <b>-L</b>, <b>-Z</b>, or <b>-f</b>.<br>
<br>
Using <b>+</b> rather than <b>-</b> causes these options to be turned off. If no <i>vname</i> arguments are given, a list of <i>vname</i>s (and optionally the values) of the variables is printed. Using <b>+</b> rather than <b>-</b> keeps the values from being printed. The <b>-p</b> option causes <b>typeset</b> followed by the option letters to be printed before each name rather than the names of the options. If any option other than <b>-p</b> is given, only those variables which have all of the given options are printed. Otherwise, the <i>vnames</i> and attributes of all variables that have attributes are printed.</td>
</tr>
<tr class="tcw">
<td><b>ulimit</b> [ <b>-HSacdfmnpstv</b> ] [ <i>limit</i> ]</td>
<td>Set or display a resource limit. The available resource limits are listed below. Many systems do not support one or more of these limits. The <i>limit</i> for a specified resource is set when <i>limit</i> is specified. The value of <i>limit</i> can be a number in the unit specified below with each resource, or the value <b>unlimited</b>. The <b>-H</b> and <b>-S</b> options specify whether the hard limit or the soft limit for the given resource is set. A hard limit cannot be increased once it is set. A soft limit can be increased up to the value of the hard limit. If neither the <b>H</b> nor <b>S</b> option is specified, the limit applies to both. The current resource limit is printed when <i>limit</i> is omitted. In this case, the soft limit is printed unless <b>H</b> is specified. When more than one resource is specified, then the limit name and unit is printed before the value.<br>
<table class="mtable3">
<tr class="tcw">
<td style="width:40px"><b>-a</b></td>
<td>Lists all of the current resource limits.</td>
</tr>
<tr class="tcw">
<td><b>-c</b></td>
<td>The number of 512-byte blocks on the size of core dumps.</td>
</tr>
<tr class="tcw">
<td><b>-d</b></td>
 <td>The number of K-bytes on the size of the data area.</td>
</tr>
<tr class="tcw">
<td><b>-f</b></td>
<td>The number of 512-byte blocks on files that can be written by the current process or by child processes (files of any size may be read).</td>
</tr>
<tr class="tcw">
<td><b>-m</b></td>
<td>The number of K-bytes on the size of physical memory.</td>
</tr>
<tr class="tcw">
<td><b>-n</b></td>
<td>The number of file descriptors plus 1.</td>
</tr>
<tr class="tcw">
<td><b>-p</b></td>
<td>The number of 512-byte blocks for pipe buffering.</td>
</tr>
<tr class="tcw">
<td><b>-s</b></td>
<td>The number of K-bytes on the size of the stack area.</td>
</tr>
<tr class="tcw">
<td><b>-t</b></td>
<td>The number of CPU seconds to be used by each process.</td>
</tr>
<tr class="tcw">
<td><b>-v</b></td>
<td>The number of K-bytes for virtual memory.</td>
</tr>
</table>
<br>
If no option is given, <b>-f</b> is assumed.</td>
</tr>
<tr class="tcw">
<td><b>umask</b> [ <b>-S</b> ] [ <i>mask</i> ]</td>
<td>The user file-creation mask is set to <i>mask</i> (see <a href="/unix/uumask.htm">umask</a>). <i>mask</i> can either be an octal number or a symbolic value as described in the documentation of <a href="/unix/uchmod.htm">chmod</a>. If a symbolic value is given, the new <b>umask</b> value is the complement of the result of applying <i>mask</i> to the complement of the previous <i>umask</i> value. If <i>mask</i> is omitted, the current value of the mask is printed. The <b>-S</b> option causes the mode to be printed as a symbolic value. Otherwise, the mask is printed in octal.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>unalias</b> [ <b>-a</b> ] <i>name</i> ...</td>
<td>The aliases given by the list of names are removed from the alias <i>list</i>. The <b>-a</b> option causes all the aliases to be unset.</td>
</tr>
<tr class="tcw">
<td>&Dagger; <b>unset</b> [ <b>-fnv</b> ] <i>vname</i> ...</td>
<td>The variables given by the list of <i>vnames</i> are unassigned, i.e., except for sub-variables within a type, their values and attributes are erased. For sub-variables of a type, the values are reset to the default value from the type definition. Readonly variables cannot be unset. If the <b>-f</b> option is set, then the names refer to function <i>names</i>. If the <b>-v</b> option is set, then the names refer to variable names. The <b>-f</b> option overrides <b>-v</b>. If <b>-n</b> is set and <i>name</i> is a name reference, then <i>name</i> will be unset rather than the variable that it references. The default is equivalent to <b>-v</b>. Unsetting <b>LINENO</b>, <b>MAILCHECK</b>, <b>OPTARG</b>, <b>OPTIND</b>, <b>RANDOM</b>, <b>SECONDS</b>, <b>TMOUT</b>, and <b>_</b> removes their special meaning even if they are subsequently assigned to.</td>
</tr>
<tr class="tcw">
<td><b>wait</b> [ <i>job</i> ... ]</td>
<td> Wait for the specified job and report its termination status. If <i>job</i> is not given, then wait for all currently active child processes. The exit status from this command is that of the last process waited for if <i>job</i> is specified; otherwise it is zero. See <a href="#Jobs">Jobs</a> for a description of the format of <i>job</i>.</td>
</tr>
<tr class="tcw">
<td><b>whence</b> [ <b>-afpv</b> ] <i>name</i> ...</td>
<td>For each name, indicate how it would be interpreted if used as a command name. The <b>-v</b> option produces a more <a href="/jargon/v/verbose.htm">verbose</a> report. The <b>-f</b> option skips the search for functions. The <b>-p</b> option does a path search for name even if name is an alias, a function, or a reserved word. The <b>-p</b> option turns off the <b>-v</b> option. The <b>-a</b> option is similar to the <b>-v</b> option but causes all interpretations of the given name to be reported.</td>
</tr>
</table>
<h2 id="Invocation">Invocation</h2>
<p class="tab">If the shell is invoked by <a href="/jargon/e/exec.htm">exec</a>, and the first character of argument zero (<b>$0</b>) is <b>-</b>, then the shell is assumed to be a login shell and commands are read from <b>/etc/profile</b> and then from either <b>.profile</b> in the current directory or <b>$HOME/.profile</b>, if either file exists. Next, for interactive shells, commands are read from the file named by performing parameter expansion, command substitution, and arithmetic substitution on the value of the environment variable <b>ENV</b> if the file exists. If the <b>-s</b> option is not present and <i>arg</i> and a file by the name of <i>arg</i> exists, then it reads and executes this script. Otherwise, if the first <i>arg</i> does not contain a <b>/</b>, a path search is performed on the first <i>arg</i> to determine the name of the script to execute. The script <i>arg</i> must have execute permission and any setuid and setgid settings are ignored. If the script is not found on the path, <i>arg</i> is processed as if it named a built-in command or function. Commands are then read as described below; the following options are interpreted by the shell when it is invoked:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:120px"><b>-D</b></td>
<td>Do not execute the script, but output the set of double quoted strings preceded by a <b>$</b>. These strings are needed for localization of the script to different locales.</td>
</tr>
<tr class="tcw">
<td><b>-E</b></td>
<td>Reads the file named by the <b>ENV</b> variable or by <b>$HOME/.kshrc</b> if not defined after the profiles.</td>
</tr>
<tr class="tcw">
<td><b>-c</b></td>
<td>If the <b>-c</b> option is present, then commands are read from the first <i>arg</i>. Any remaining arguments become positional parameters starting at <b>0</b>.</td>
</tr>
<tr class="tcw">
<td><b>-s</b></td>
<td>If the <b>-s</b> option is present or if no arguments remain, then commands are read from the standard input. Shell output is written to file descriptor 2.</td>
</tr>
<tr class="tcw">
<td><b>-i</b></td>
<td>If the <b>-i</b> option is present or if the shell input and output are attached to a terminal (as told by <b>tcgetattr</b>), then this shell is interactive. In this case, <b>TERM</b> is ignored (so that <b>kill 0</b> does not kill an interactive shell) and <b>INTR</b> is caught and ignored. In all cases, <b>QUIT</b> is ignored by the shell.</td>
</tr>
<tr class="tcw">
<td><b>-r</b></td>
<td>If the <b>-r</b> option is present, the shell is a restricted shell.</td>
</tr>
<tr class="tcw">
<td><b>-D</b></td>
<td>A list of all double quoted strings that are preceded by a <b>$</b> will be printed on standard output and the shell will exit. This set of strings will be subject to language translation when the locale is not <a href="/jargon/c/c.htm">C</a> or <a href="/jargon/p/posix.htm">POSIX</a>. No commands will be executed.</td>
</tr>
<tr class="tcw">
<td><b>-P</b></td>
<td>If <b>-P</b> or <b>-o</b> profile is present, the shell is a profile shell.</td>
</tr>
<tr class="tcw">
<td><b>-R</b> <i>file name</i></td>
<td>The <b>-R</b> <i>file name</i> option is used to generate a cross reference database that can be used by a separate utility to find definitions and references for variables and commands.</td>
</tr>
</table>
<p class="tab">The remaining options and arguments are described under the <b>set</b> command above. An optional <b>-</b> as the first argument is ignored.</p>
<h2>Rksh only</h2>
<p class="tab"><b>Rksh</b> is used to set up login names and execution environments whose capabilities are more controlled than those of the standard shell. The actions of <b>rksh</b> are identical to those of <b>ksh</b>, except that the following are disallowed:</p>
<ul>
<li>Unsetting the restricted option</li>
<li>changing directory (see <a href="/unix/ucd.htm">cd</a>)</li>
<li>setting or unsetting the value or attributes of <b>SHELL</b>, <b>ENV</b>, <b>FPATH</b>, or <b>PATH</b></li>
<li>specifying path or command names containing <b>/</b></li>
<li>redirecting output (<b>&gt;</b>, <b>&gt;|</b>, <b>&lt;&gt;</b>, and <b>&gt;&gt;</b>)</li>
<li>adding or deleting built-in commands</li>
<li>using <b>command -p</b> to invoke a command</li>
</ul>
<p class="tab">The restrictions above are enforced after <b>.profile</b> and the <b>ENV</b> files are interpreted.</p>
<p class="tab">When a command to be executed is a shell procedure, <b>rksh</b> invokes <b>ksh</b> to execute it. Thus, it is possible to provide to the end-user shell procedures that have access to the full power of the standard shell, while imposing a limited menu of commands; this scheme assumes that the end-user does not have write and execute permissions in the same directory.</p>
<p class="tab">The net effect of these rules is that the writer of the <b>.profile</b> has complete control over user actions, by performing guaranteed setup actions and leaving the user in an appropriate directory (probably not the login directory).</p>
<p class="tab">The system administrator often sets up a directory of commands (e.g., <b>/usr/rbin</b>) that can be safely invoked by <b>rksh</b>.</p>
<h2>Exit status</h2>
<p class="tab">Errors detected by the shell, such as syntax errors, cause the shell to return a non-zero exit status. If the shell is used non-interactively, then execution of the shell file is abandoned unless the error occurs inside a subshell in which case the subshell is abandoned. Otherwise, the shell returns the exit status of the last command executed (see also the <b>exit</b> command above). Runtime errors detected by the shell are reported by printing the command or function name and the error condition. If the line number that the error occurred on is greater than one, then the line number is also printed in square brackets (<b>[]</b>) after the command or function name.</p>
<h2>Files</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:190px"><b>/etc/profile</b></td>
<td>The system wide initialization file, executed for login shells.</td>
</tr>
<tr class="tcw">
<td><b>$HOME/.profile</b></td>
<td>The personal initialization file, executed for login shells after <b>/etc/profile</b>.</td>
</tr>
<tr class="tcw">
<td><b>$HOME/..kshrc</b></td>
<td>Default personal initialization file, executed for interactive shells when <b>ENV</b> is not set.</td>
</tr>
<tr class="tcw">
<td><b>/etc/suid_profile</b></td>
<td>Alternative initialization file, executed instead of the personal initialization file when the real and effective user or group id do not match.</td>
</tr>
<tr class="tcw">
<td><b>/dev/null</b></td>
<td>The null device.</td>
</tr>
</table>
<h2 id="examples">Examples</h2>
<pre class="tcy tab">ksh</pre>
<p class="tab">Invokes the Korn shell.</p>
<h2 id="related">Related commands</h2>
<p class="tab"><a href="/unix/ubash.htm"><b>bash</b></a> &mdash; The Bourne Again shell command interpreter.<br><a href="/unix/ucsh.htm"><b>csh</b></a> &mdash; The C shell command interpreter.<br><a href="/unix/ush.htm"><b>sh</b></a> &mdash; The Bourne shell command interpreter.</p>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a83011e45c3e3',m:'nk8MkfjddaSmNyNdMhQVp57eTkc_0tN4g3qjPyz0Ogw-1661495352-0-AZFs13dG3OPhFSNtoKSX7UCxkqMTgYdS+rxl69BAY4WDxjsDWrAWRn2KFXURXKokLrRJ4fHTMENaVn+PL9QVfUTACX982J/n1Z+cw1LCJBN1HisuXsY8Twmm859gyNrLQg==',s:[0x5c697128cb,0xb2c76640fb],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>