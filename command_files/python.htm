<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Overview of the Python 3 programming language</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-03-13">03/13/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/python.gif" width="300" height="300" alt="Python programming language." class="floatRight">
<p class="intro">This page describes the Python 3 programming language, and how to use it.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#desc">Description</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#options">Options</a></li>
<li><a href="#Interpreter-Interface">Interpreter interface</a></li>
<li><a href="#System-Files-And-Directories">System files and directories</a></li>
<li><a href="#Environment-Variables">Environment variables</a></li>
<li><a href="#Using-The-Python-Interpreter">Using the Python interpreter</a></li>
<li><a href="#An-Introduction-To-The-Python-Language">An introduction to the Python language</a></li>
<li><a href="#Data-Structures">Data structures</a></li>
<li><a href="#Modules">Modules</a></li>
<li><a href="#Input-And-Output">Input and output</a></li>
<li><a href="#Errors-And-Exceptions">Errors and exceptions</a></li>
<li><a href="#Classes">Classes</a></li>
<li><a href="#The-Python-Standard-Library">The Python standard library</a></li>
<li class="out"><a href="/unix.htm">Linux main page</a></li>
</ul>
</div>
<h2 id="desc">Description</h2>
<p class="tab">Python is a general-purpose, <a href="/jargon/h/highll.htm">high-level</a> programming language. Its design philosophy emphasizes <a href="/jargon/c/code.htm">code</a> readability, and its <a href="/jargon/s/syntax.htm">syntax</a> allows programmers to express concepts in fewer lines of code than would be possible in languages such as C. Python supports multiple programming paradigms, including object-oriented, imperative, and functional/procedural styles. It has a dynamic typing system, automatic memory management, and a <a href="/unix/pylibbi.htm">comprehensive standard library</a>.</p>
<p class="tab">Like other dynamic languages, Python is often used as a <a href="/jargon/s/script.htm">scripting</a> language, but it can also be <a href="/jargon/c/compile.htm">compiled</a> into <a href="/jargon/e/execfile.htm">executable</a> programs.</p>
<p class="tab">Python was created by <a href="/people/guido_van_rossum.htm">Guido Van Rossum</a>. Development of Python began in <a href="/history/1989.htm">1989</a> with version 3.0 being released in 2008.</p>
<h2>Philosophy</h2>
<p class="tab">The core philosophy of the Python language includes the following precepts:</p>
<ul>
<li>Beautiful is better than ugly.</li>
<li>Explicit is better than implicit.</li>
<li>Simple is better than complex.</li>
<li>Complex is better than complicated.</li>
<li>Readability matters.</li>
</ul>
<h2>Indentation</h2>
<p class="tab">Python uses <a href="/jargon/w/whitspac.htm">whitespace</a> indentation, rather than <a href="/jargon/c/curlybra.htm">curly braces</a> or <a href="/jargon/k/keyword.htm">keywords</a>, to <a href="/jargon/d/delimite.htm">delimit</a> blocks of code. Indentation must increase after certain statements, and a reduction of indentation indicates the end of a <a href="/jargon/b/block.htm">code block</a>.</p>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">python3.4 [ -B ] [ -b ] [ -d ] [ -E ] [ -h ] [ -i ] [ -I ]
          [ -m module-name ] [ -q ] [ -O ] [ -OO ] [ -s ] [ -S ] [ -u ]
          [ -v ] [ -V ] [ -W argument ] [ -x ] [ [ -X option ] -?  ]
          [ -c command | script | - ] [ arguments ]</pre>
<h2 id="options">Options</h2>
<p class="tab">Python 3.x takes the following command-line <a href="/jargon/s/switch.htm">switches</a>:</p>
<table class="mtable4 tab">
<tbody>
<tr class="tcw">
<td style="width:200px"><pre><b>-B</b></pre></td>
<td>Don't write <b>.py</b>[<b>co</b>] <a href="/jargon/b/bytecode.htm">bytecode</a> files on import. See also <b>PYTHONDONTWRITEBYTECODE</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>-b</b></pre></td>
<td>Issue warnings about <b>str(bytes_instance)</b>, <b>str(bytearray_instance)</b> and comparing <b>bytes</b>/<b>bytearray</b> with <b>str</b>. (<b>-bb</b> issues errors rather than warnings)</td>
</tr>
<tr class="tcw">
<td><pre><b>-c</b> <i>command</i></pre></td>
<td>Specify the command to execute (see next section). This terminates the option list (following options are passed as <a href="/jargon/a/argument.htm">arguments</a> to the command).</td>
</tr>
<tr class="tcw">
<td><pre><b>-d</b></pre></td>
<td>Turn on parser <a href="/jargon/d/debug.htm">debugging</a> output (for advanced users only, depending on compilation options).</td>
</tr>
<tr class="tcw">
<td><pre><b>-E</b></pre></td>
<td>Ignore environment variables like <b>PYTHONPATH</b> and <b>PYTHONHOME</b> that modify the behavior of the interpreter.</td>
</tr>
<tr class="tcw">
<td><pre><b>-h</b>, <b>-?</b>, <b>--help</b></pre></td>
<td>Prints the usage for the interpreter executable and exits.</td>
</tr>
<tr class="tcw">
<td><pre><b>-i</b></pre></td>
<td>When a script is passed as first <a href="/jargon/a/argument.htm">argument</a> or the <b>-c</b> option is used, enter interactive mode after executing the script or the command. It does not read the <b>$PYTHONSTARTUP</b> file. This can be useful to inspect global variables or a stack trace when a script raises an exception.</td>
</tr>
<tr class="tcw">
<td><pre><b>-I</b></pre></td>
<td>Run Python in isolated mode. This also implies <b>-E</b> and <b>-S</b>. In isolated mode <b>sys.path</b> contains neither the script's directory nor the user's site-packages directory. All <b>PYTHON*</b> environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting malicious code.</td>
</tr>
<tr class="tcw">
<td><pre><b>-m</b> <i>module-name</i></pre></td>
<td>Searches <b>sys.path</b> for the named module and runs the corresponding <b>.py</b> file as a script.</td>
</tr>
<tr class="tcw">
<td><pre><b>-O</b></pre></td>
<td>Turn on basic optimizations. This changes the filename extension for compiled (bytecode) files from <b>.pyc</b> to <b>.pyo</b>. Given twice, causes docstrings to be discarded.</td>
</tr>
<tr class="tcw">
<td><pre><b>-OO</b></pre></td>
<td>Discard docstrings in addition to the <b>-O</b> optimizations.</td>
</tr>
<tr class="tcw">
<td><pre><b>-q</b></pre></td>
<td>Do not print the version and Copyright messages. These messages are also suppressed in non-interactive mode.</td>
</tr>
<tr class="tcw">
<td><pre><b>-s</b></pre></td>
<td>Don't add user site directory to <b>sys.path</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>-S</b></pre></td>
<td>Disable the import of the module site and the site-dependent manipulations of <b>sys.path</b> that it entails. Also, disable these manipulations if site is explicitly imported later.</td>
</tr>
<tr class="tcw">
<td><pre><b>-u</b></pre></td>
<td>Force the binary I/O layers of <b>stdout</b> and <b>stderr</b> to be unbuffered. <b>stdin</b> is always buffered. The text I/O layer is still line-buffered.</td>
</tr>
<tr class="tcw">
<td><pre><b>-v</b></pre></td>
<td>Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded. When given twice, print a message for each file that is checked for when searching for a module. Also, provides information on module cleanup at exit.</td>
</tr>
<tr class="tcw">
<td><pre><b>-V</b>, <b>--version</b></pre></td>
<td>Prints the Python version number of the executable and exits.</td>
</tr>
<tr class="tcw">
<td><pre><b>-W</b> <i>argument</i></pre></td>
<td>Warning control. Python sometimes prints warning message to <b>sys.stderr</b>. A typical warning message has the following form: <b>file:line: category: message</b>. By default, each warning is printed once for each source line where it occurs. This option controls how often warnings are printed. Multiple <b>-W</b> options may be given; when a warning matches more than one option, the action for the last matching option is performed. Invalid <b>-W</b> options are ignored (a warning message is printed about invalid options when the first warning is issued). Warnings can also be controlled from within a Python program using the warnings module.<br><br> The simplest form of argument is one of the following action <a href="/jargon/s/string.htm">strings</a> (or a unique abbreviation): <b>ignore</b> to ignore all warnings; <b>default</b> to explicitly request the default behavior (printing each warning once per source line); <b>all</b> to print a warning each time it occurs (this may generate many messages if a warning is triggered repeatedly for the same source line, such as inside a loop); <b>module</b> to print each warning only the first time it occurs in each module; <b>once</b> to print each warning only the first time it occurs in the program; or <b>error</b> to raise an exception instead of printing a warning message.<br><br> The full form of argument is <b>action:message:category:module:line</b>. Here, action is as explained above but only applies to messages that match the remaining fields. Empty fields match all values; trailing empty fields may be omitted. The message field matches the start of the warning message printed; this match is case-insensitive. The category field matches the warning category. This must be a class name; the match test whether the actual warning category of the message is a subclass of the specified warning category. The full class name must be given. The module field matches the (fully-qualified) module name; this match is case-sensitive. The line field matches the line number, where zero matches all line numbers and is thus equivalent to an omitted line number.</td>
</tr>
<tr class="tcw">
<td><pre><b>-X</b> <i>option</i></pre></td>
<td>Set implementation specific option.</td>
</tr>
<tr class="tcw">
<td><pre><b>-x</b></pre></td>
<td>Skip the first line of the source. This is intended to be a <a href="/jargon/m/msdos.htm">DOS</a>-specific hack. (Warning: the line numbers in error messages will be off by one)</td>
</tr>
</tbody>
</table>
<h2 id="Interpreter-Interface">Interpreter interface</h2>
<p class="tab">The interpreter interface resembles that of the UNIX <a href="/jargon/s/shell.htm">shell</a>: when called with standard input connected to a <a href="/jargon/t/tty.htm">tty</a> device, it prompts for commands and executes them until an EOF is read; when called with a file name argument or with a file as standard input, it reads and executes a script from that file; when called with <b>-c</b> <i>command</i>, it executes the Python statement(s) given as <i>command</i>. Here <i>command</i> may contain multiple statements separated by <a href="/jargon/n/newline.htm">newlines</a>. Leading whitespace is significant in Python statements. In non-interactive mode, the entire input is parsed before it is executed.</p>
<p class="tab">If available, the script name and additional arguments thereafter are passed to the script in the Python variable <b>sys.argv</b>, which is a list of <a href="/jargon/s/string.htm">strings</a> (you must first <b>import sys</b> to be able to access it). If no script name is given, <b>sys.argv[0]</b> is an empty string; if <b>-c</b> is used, <b>sys.argv[0]</b> contains the string '<b>-c</b>'. Note that options interpreted by the Python interpreter itself are not placed in <b>sys.argv</b>.</p>
<p class="tab">In interactive mode, the primary prompt is '<b>&gt;&gt;&gt;</b>'; the second prompt (which appears when a command is not complete) is '<b>...</b>'. The prompts can be changed by assignment to <b>sys.ps1</b> or <b>sys.ps2</b>. The interpreter quits when it reads an <a href="/jargon/e/eof.htm">EOF</a> at a prompt. When an unhandled exception occurs, a stack trace is printed and control returns to the primary prompt; in non-interactive mode, the interpreter exits after printing the stack trace. The interrupt signal raises the <a href="/unix/pylibbi.htm#exception:KeyboardInterrupt">KeyboardInterrupt</a> exception; other UNIX <a href="/unix/signals.htm">signals</a> are not caught (except that <b>SIGPIPE</b> is sometimes ignored, in favor of the <a href="/unix/pylibbi.htm#exception:IOError">IOError</a> exception). Error messages are written to <b>stderr</b>.</p>
<h2 id="System-Files-And-Directories">System files and directories</h2>
<p class="tab">These are subject to difference depending on local installation conventions; <b>${prefix}</b> and <b>${exec_prefix}</b> are installation-dependent and should be interpreted as for GNU software; they may be the same. On Debian GNU/{Hurd,Linux} the default for both is <b>/usr</b>.</p>
<table class="mtable4 tab">
<tbody>
<tr class="tcw">
<td style="width:420px"><pre><b>${</b><i>exec_prefix</i><b>}/bin/python</b></pre></td>
<td>Recommended location of the interpreter.</td>
</tr>
<tr class="tcw">
<td><pre><b>${</b><i>prefix</i><b>}/lib/python</b><i>&lt;version&gt;</i><b>${</b><i>exec_prefix</i><b>}/lib/python</b><i>&lt;version&gt;</i></pre></td>
<td>Recommended locations of the directories containing the standard modules.</td>
</tr>
<tr class="tcw">
<td><pre><b>${</b><i>prefix</i><b>}/include/python</b><i>&lt;version&gt;</i><b>${</b><i>exec_prefix</i><b>}/include/python</b><i>&lt;version&gt;</i></pre></td>
<td>Recommended locations of the directories containing the include files needed for developing Python extensions and embedding the interpreter.</td>
</tr>
</tbody>
</table>
<h2 id="Environment-Variables">Environment variables</h2>
<table class="mtable4 tab">
<tbody>
<tr class="tcw">
<td style="width:290px"><pre><b>PYTHONHOME</b></pre></td>
<td>Change the location of the standard Python libraries. By default, the libraries are searched in <b>${</b><i>prefix</i><b>}/lib/python</b><i>&lt;version&gt;</i> and <b>${</b><i>exec_prefix</i><b>}/lib/python</b><i>&lt;version&gt;</i>, where <b>${</b><i>prefix</i><b>}</b> and <b>${</b><i>exec_prefix</i><b>}</b> are installation-dependent directories, both defaulting to <b>/usr/local</b>. When <b>$PYTHONHOME</b> is set to a single directory, its value replaces both <b>${</b><i>prefix</i><b>}</b> and <b>${</b><i>exec_prefix</i><b>}</b>. To specify different values for these, set <b>$PYTHONHOME</b> to <b>${</b><i>prefix</i><b>}:${</b><i>exec_prefix</i><b>}</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONPATH</b></pre></td>
<td>Augments the default search path for module files. The format is the same as the shell's <b>$PATH</b>: one or more directory pathnames separated by colons. Non-existent directories are silently ignored. The default search path is installation dependent, but generally begins with <b>${</b><i>prefix</i><b>}/lib/python</b><i>&lt;version&gt;</i> (see <b>PYTHONHOME</b> above). The default search path is always appended to <b>$PYTHONPATH</b>. If a script argument is given, the directory containing the script is inserted in the path in front of <b>$PYTHONPATH</b>. The search path can be manipulated from within a Python program as the variable <b>sys.path</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONSTARTUP</b></pre></td>
<td>If this is the name of a readable file, the Python commands in that file are executed before the first prompt is displayed in interactive mode. The file is executed in the same name space where interactive commands are executed so that objects defined or imported in it can be used without qualification in the interactive session. You can also change the prompts <b>sys.ps1</b> and <b>sys.ps2</b> in this file.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONY2K</b></pre></td>
<td>Set this to a non-empty string to cause the time module to require dates specified as strings to include 4-digit years, otherwise 2-digit years are converted based on rules described in the time module documentation.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONOPTIMIZE</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-O</b> option. If set to an integer, it is equivalent to specifying <b>-O</b> multiple times.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONDEBUG</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-d</b> option. If set to an integer, it is equivalent to specifying <b>-d</b> multiple times.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONDONTWRITEBYTECODE</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-B</b> option (don't try to write <b>.py[co]</b> files).</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONINSPECT</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-i</b> option.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONIOENCODING</b></pre></td>
<td>If this is set before running the interpreter, it overrides the encoding used for stdin/stdout/stderr, in the syntax <b>encodingname:errorhandler</b> The errorhandler part is optional and has the same meaning as in <b>str.encode</b>. For stderr, the errorhandler part is ignored; the handler will always be '<b>backslashreplace</b>'.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONNOUSERSITE</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-s</b> option (Don't add the user site directory to <b>sys.path</b>).</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONUNBUFFERED</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-u</b> option.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONVERBOSE</b></pre></td>
<td>If this is set to a non-empty string it is equivalent to specifying the <b>-v</b> option. If set to an integer, it is equivalent to specifying <b>-v</b> multiple times.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONWARNINGS</b></pre></td>
<td>If this is set to a comma-separated string it is equivalent to specifying the <b>-W</b> option for each separate value.</td>
</tr>
<tr class="tcw">
<td><pre><b>PYTHONHASHSEED</b></pre></td>
<td>If this variable is set to "random", a random value is used to seed the hashes of str, bytes and datetime objects. If <b>PYTHONHASHSEED</b> is set to an integer value, it is used as a fixed seed for generating the <b>hash()</b> of the types covered by the hash randomization. Its purpose is to allow repeatable hashing, such as for selftests for the interpreter itself, or to allow a cluster of python processes to share hash values.<br><br> The integer must be a decimal number in the range [<b>0</b>,<b>4294967295</b>]. Specifying the value 0 will disable hash randomization.</td>
</tr>
</tbody>
</table>
<h2 id="Using-The-Python-Interpreter">Using the Python interpreter</h2>
<h2 id="Invoking-The-Interpreter">Invoking the interpreter</h2>
<p class="tab">The Python interpreter is usually installed as <b>/usr/local/bin/python3.4</b>; putting <b>/usr/local/bin</b> in your Unix shell's search path makes it possible to start it by typing the command at the shell prompt:</p>
<pre class="tab tcy">python3.4</pre>
<p class="tab">When you invoke the interpreter, you will see the following introduction text which resembles the following:</p>
<pre class="tab">Python 3.4.0 (default, Apr 11 2014, 13:05:18) 
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</pre>
<p class="tab">The '<b>&gt;&gt;&gt;</b>' is the primary interpreter prompt: it lets you know that you can begin typing in Python code, and that code will be interpeted. When you see '<b>&gt;&gt;&gt;</b>' in commands listed below, this represents the primary prompt.</p>
<p class="tab">On Windows machines, the Python installation is usually placed in <b>C:\Python34</b>, although you can change this when you're running the installer. To add this directory to your path, you can type the following command into the command prompt in a DOS box:</p>
<pre class="tab tcy">set path=%path%;C:\python34</pre>
<p class="tab">Typing an end-of-file <a href="/jargon/c/charact.htm">character</a> (<b>Control-D</b> on Unix, <b>Control-Z</b> on Windows) at the primary Python prompt causes the interpreter to exit with a zero exit status. If that doesn't work, you can exit the interpreter by typing the following command: <b>quit()</b>.</p>
<p class="tab">The interpreter's line-editing features include interactive editing, history substitution and code completion on systems that support readline. Perhaps the quickest check to see whether command line editing is supported is typing <b>Control-P</b> to the first Python prompt you get. If it beeps, you have command line editing. If nothing appears to happen, or if <b>^P</b> is <a href="/jargon/e/echo.htm">echoed</a>, command line editing isn't available; you'll only be able to use backspace to remove characters from the current line.</p>
<p class="tab">The interpreter operates somewhat like the Unix shell: when called with standard input connected to a <a href="/jargon/t/tty.htm">tty</a> device, it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a script from that file.</p>
<p class="tab">A second way of starting the interpreter is</p>
<pre class="tab tcy">python -c <i>command</i> [<i>arg</i>] ...</pre>
<p class="tab">which executes the statement(s) in command, analogous to the shell's <b>-c</b> option. Since Python statements often contain spaces or other characters that are special to the shell, it is usually advised to quote command in its entirety with single quotes.</p>
<p class="tab">Some Python modules are also useful as scripts. These can be invoked using</p>
<pre class="tab tcy">python -m <i>module</i> [<i>arg</i>] ...</pre>
<p class="tab">which executes the source file for module as if you had spelled out its full name on the command line.</p>
<p class="tab">When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards. This can be done by passing <b>-i</b> before the script.</p>
<h2 id="Argument-Passing">Argument passing</h2>
<p class="tab">When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the <b>argv</b> variable in the <b>sys</b> module. You can access this list by executing <b>import sys</b>. The length of the list is at least one; when no script and no arguments are given, <b>sys.argv[0]</b> is an empty string. When the script name is given as '<b>-</b>' (meaning standard input), <b>sys.argv[0]</b> is set to '<b>-</b>'. When <b>-c</b> command is used, <b>sys.argv[0]</b> is set to '<b>-c</b>'. When <b>-m</b> module is used, <b>sys.argv[0]</b> is set to the full name of the located module. Options found after <b>-c</b> command or <b>-m</b> <i>module</i> are not consumed by the Python interpreter's option processing but left in <b>sys.argv</b> for the command or module to handle.</p>
<h2 id="Interactive-Mode">Interactive mode</h2>
<p class="tab">When commands are read from a tty, the interpreter is said to be in interactive mode. In this mode it prompts for the next command with the primary prompt, usually three greater-than signs (<b>&gt;&gt;&gt;</b>); for continuation lines it prompts with the secondary prompt, by default three dots (<b>...</b>). The interpreter prints a welcome message stating its version number and a Copyright notice before printing the first prompt:</p>
<pre class="tab">Python 3.4 (default, Mar 16 2014, 09:25:04)
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>
<p class="tab">Continuation lines are needed when entering a multi-line construct. As an example, take a look at this <b>if</b> statement:</p>
<pre class="tab tcy">&gt;&gt;&gt; the_world_is_flat = True
&gt;&gt;&gt; if the_world_is_flat:
...     print("Be careful not to fall off!")
...
Be careful not to fall off!</pre>
<h2 id="Error-Handling">Error handling</h2>
<p class="tab">When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack trace. (Exceptions handled by an <b>except</b> clause in a <b>try</b> statement are not errors in this context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit; this applies to internal inconsistencies and some cases of running out of memory. All error messages are written to the standard error stream; normal output from executed commands is written to standard output.</p>
<p class="tab">Typing the interrupt character (usually <b>Control-C</b> or <b>DEL</b>) to the primary or secondary prompt cancels the input and returns to the primary prompt. Typing an interrupt while a command is executing raises the <b>KeyboardInterrupt</b> exception, which may be handled by a <b>try</b> statement.</p>
<h2 id="Executable-Python-Scripts">Executable Python scripts</h2>
<p class="tab">On BSD'ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line</p>
<pre class="tab tcy">#! /usr/bin/env python3.4
</pre>
<p class="tab">(assuming that the interpreter is on the user's PATH) at the beginning of the script and giving the file an executable mode. The <b>#!</b> must be the first two characters of the file. On some platforms, this first line must end with a Unix-style line ending ('<b>\n</b>'), not a Windows ('<b>\r\n</b>') line ending. Note that the hash, or pound, character, '<b>#</b>', is used to start a comment in Python.</p>
<p class="tab">The script can be given an executable mode, or permission, using the <a href="/unix/uchmod.htm">chmod</a> command:</p>
<pre class="tab tcy">chmod +x myscript.py</pre>
<p class="tab">On Windows systems, there is no notion of an &quot;executable mode.&quot; The Python installer automatically associates <b>.py</b> files with <b>python.exe</b> so that double-clicking a Python file runs it as a script. The extension can also be <b>.pyw</b>, in which case, the console window that normally appears is suppressed.</p>
<h2 id="Source-Code-Encoding">Source code encoding</h2>
<p class="tab">By default, Python source files are treated as encoded in <a href="/jargon/u/utf.htm">UTF-8</a>. In that encoding, characters of most languages in the world can be used simultaneously in string literals, identifiers and comments &mdash; although the standard library only uses <a href="/jargon/a/ascii.htm">ASCII</a> characters for identifiers, a convention that any portable code should follow. To display all these characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the characters in the file.</p>
<p class="tab">It is also possible to specify a different encoding for source files. To do this, put one more special comment line right after the <b>#!</b> line to define the source file encoding:</p>
<pre class="tab tcy"># -*- coding: encoding -*-</pre>
<p class="tab">With that declaration, everything in the source file will be treated as having the encoding instead of UTF-8.</p>
<p class="tab">For example, if your editor of choice does not support UTF-8 encoded files and insists on using some other encoding, say Windows-1252, you can write:</p>
<pre class="tab tcy"># -*- coding: cp-1252 -*-</pre>
<p class="tab">and still use all characters in the Windows-1252 character set in the source files. The special encoding comment must be in the first or second line within the file.</p>
<h2 id="The-Interactive-Startup-File">The interactive startup file</h2>
<p class="tab">When you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started. You can do this by setting an environment variable named <b>PYTHONSTARTUP</b> to the name of a file containing your start-up commands. This is similar to the <b>.profile</b> feature of the Unix shells.</p>
<p class="tab">This file is only read in interactive sessions, not when Python reads commands from a script, and not when <b>/dev/tty</b> is given as the explicit source of commands (which otherwise behaves like an interactive session). It is executed in the same namespace where interactive commands are executed, so that objects that it defines or imports can be used without qualification in the interactive session. You can also change the prompts <b>sys.ps1</b> and <b>sys.ps2</b> in this file.</p>
<p class="tab">If you want to read an additional start-up file from the current directory, you can program this in the global start-up file using code like <b>if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read())</b>. If you want to use the startup file in a script, you must do this explicitly in the script:</p>
<pre class="tab tcy">import os
filename = os.environ.get('PYTHONSTARTUP')
if filename and os.path.isfile(filename):
    exec(open(filename).read())</pre>
<h2 id="The-Customization-Modules">The customization modules</h2>
<p class="tab">Python provides two hooks to let you customize it: <b>sitecustomize</b> and <b>usercustomize</b>. To see how it works, you need first to find the location of your user <b>site-packages</b> directory. Start Python and run this code:</p>
<pre class="tab tcy">&gt;&gt;&gt; import site
&gt;&gt;&gt; site.getusersitepackages()
'/home/user/.local/lib/python3.2/site-packages'</pre>
<p class="tab">Now you can create a file named <b>usercustomize.py</b> in that directory and put anything you want in it. It will affect every invocation of Python, unless it is started with the <b>-s</b> option to disable the automatic import.</p>
<p class="tab"><b>sitecustomize</b> works in the same way, but is typically created by an administrator of the computer in the global <b>site-packages directory</b>, and is imported before <b>usercustomize</b>.</p>
<h2 id="An-Introduction-To-The-Python-Language">An introduction to the Python language</h2>
<p class="tab">In the following examples, input and output are distinguished by the presence or absence of prompts (<b>&gt;&gt;&gt;</b> and <b>...</b>): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.</p>
<p class="tab">Many of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python start with the hash character, <b>#</b>, and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.</p>
<p class="tab">Some examples:</p>
<pre class="tab tcy"># this is the first comment
spam = 1  # and this is the second comment
          # ... and now a third!
text = "# This is not a comment because it's inside quotes."
</pre>
<h2 id="Using-Python-As-A-Calculator">Using Python as a calculator</h2>
<p class="tab">The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators <b>+</b>, <b>-</b>, <b>*</b> and <b>/</b> work like in most other languages (for example, <a href="/jargon/p/pascal.htm">Pascal</a> or <a href="/jargon/c/c.htm">C</a>); parentheses (<b>()</b>) can be used for grouping. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; 2 + 2
4
&gt;&gt;&gt; 50 - 5*6
20
&gt;&gt;&gt; (50 - 5*6) / 4
5.0
&gt;&gt;&gt; 8 / 5  # division always returns a floating point number
1.6</pre>
<p class="tab">The integer numbers (e.g., <b>2</b>, <b>4</b>, <b>20</b>) have type <b>int</b>, the ones with a fractional part (e.g., <b>5.0</b>, <b>1.6</b>) have type float. We will see more about numeric types later in the tutorial.</p>
<p class="tab">Division (<b>/</b>) always returns a float. To do floor division and get an integer result (discarding any fractional result) you can use the <b>//</b> operator; to calculate the remainder you can use <b>%</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; 17 / 3  # classic division returns a float
5.666666666666667
&gt;&gt;&gt;
&gt;&gt;&gt; 17 // 3  # floor division discards the fractional part
5
&gt;&gt;&gt; 17 % 3  # the % operator returns the remainder of the division
2
&gt;&gt;&gt; 5 * 3 + 2  # result * divisor + remainder
17</pre>
<p class="tab">With Python, it is possible to use the <b>**</b> operator to calculate powers:</p>
<pre class="tab tcy">&gt;&gt;&gt; 5 ** 2  # 5 squared
25
&gt;&gt;&gt; 2 ** 7  # 2 to the power of 7
128</pre>
<p class="tab">The equal sign (<b>=</b>) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt:</p>
<pre class="tab tcy">&gt;&gt;&gt; width = 20
&gt;&gt;&gt; height = 5 * 9
&gt;&gt;&gt; width * height
900</pre>
<p class="tab">If a variable is not "defined" (assigned a value), trying to use it gives you an error:</p>
<pre class="tab tcy">&gt;&gt;&gt; n  # try to access an undefined variable
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'n' is not defined</pre>
<p class="tab">There is full support for <a href="/jargon/f/floapoin.htm">floating point</a>; operators with mixed type operands convert the integer operand to floating point:</p>
<pre class="tab tcy">&gt;&gt;&gt; 3 * 3.75 / 1.5
7.5
&gt;&gt;&gt; 7.0 / 2
3.5</pre>
<p class="tab">In interactive mode, the last printed expression is assigned to the variable <b>_</b>. This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example:</p>
<pre class="tab tcy">&gt;&gt;&gt; tax = 12.5 / 100
&gt;&gt;&gt; price = 100.50
&gt;&gt;&gt; price * tax
12.5625
&gt;&gt;&gt; price + _
113.0625
&gt;&gt;&gt; round(_, 2)
113.06</pre>
<p class="tab">This variable should be treated as <a href="/jargon/r/readonly.htm">read-only</a> by the user. Don't explicitly assign a value to it &mdash; you would create an independent local variable with the same name masking the built-in variable with its magic behavior.</p>
<p class="tab">In addition to <b>int</b> and <b>float</b>, Python supports other types of numbers, such as <b>Decimal</b> and <b>Fraction</b>. Python also has built-in support for complex numbers, and uses the <b>j</b> or <b>J</b> suffix to indicate the imaginary part (e.g., <b>3+5j</b>).</p>
<h2 id="Strings">Strings</h2>
<p class="tab">Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes (<b>'...'</b>) or double quotes (<b>"..."</b>) with the same result. <b>\</b> can be used to escape quotes:</p>
<pre class="tab tcy">&gt;&gt;&gt; 'spam eggs'  # single quotes
'spam eggs'
&gt;&gt;&gt; 'doesn\'t'  # use \' to escape the single quote...
"doesn't"
&gt;&gt;&gt; "doesn't"  # ...or use double quotes instead
"doesn't"
&gt;&gt;&gt; '"Yes," he said.'
'"Yes," he said.'
&gt;&gt;&gt; "\"Yes,\" he said."
'"Yes," he said.'
&gt;&gt;&gt; '"Isn\'t," she said.'
'"Isn\'t," she said.'
</pre>
<p class="tab">In the interactive interpreter, the output string is enclosed in quotes and special characters are escaped with backslashes. While this might sometimes look different from the input (the enclosing quotes could change), the two strings are equivalent. The string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes. The <b>print()</b> function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters:</p>
<pre class="tab tcy">&gt;&gt;&gt; '"Isn\'t," she said.'
'"Isn\'t," she said.'
&gt;&gt;&gt; print('"Isn\'t," she said.')
"Isn't," she said.
&gt;&gt;&gt; s = 'First line.\nSecond line.'  # \n means newline
&gt;&gt;&gt; s  # without print(), \n is included in the output
'First line.\nSecond line.'
&gt;&gt;&gt; print(s)  # with print(), \n produces a new line
First line.
Second line.</pre>
<p class="tab">If you don't want characters prefaced by <b>\</b> to be interpreted as special characters, you can use raw strings by adding an <b>r</b> before the first quote:</p>
<pre class="tab tcy">&gt;&gt;&gt; print('C:\some\name')  # here \n means newline!
C:\some
ame
&gt;&gt;&gt; print(r'C:\some\name')  # note the r before the quote
C:\some\name</pre>
<p class="tab">String literals can span multiple lines. One way is using triple-quotes: <b>"""..."""</b> or <b>'''...'''</b>. End of lines are automatically included in the string, but it's possible to prevent this by adding a <b>\</b> at the end of the line. The following example:</p>
<pre class="tab tcy">print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
</pre>
<p class="tab">produces the following output (note that the initial newline is not included):</p>
<pre class="tab">Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to</pre>
<p class="tab">Strings can be concatenated (glued together) with the <b>+</b> operator, and repeated with <b>*</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; # 3 times 'un', followed by 'ium'
&gt;&gt;&gt; 3 * 'un' + 'ium'
'unununium'</pre>
<p class="tab">Two or more string literals (i.e., the ones enclosed between quotes) next to each other are automatically concatenated.</p>
<pre class="tab tcy">&gt;&gt;&gt; 'Py' 'thon'
'Python'</pre>
<p class="tab">This only works with two literals though, not with variables or expressions:</p>
<pre class="tab tcy">&gt;&gt;&gt; prefix = 'Py'
&gt;&gt;&gt; prefix 'thon'  # can't concatenate a variable and a string literal
  ...
SyntaxError: invalid syntax
&gt;&gt;&gt; ('un' * 3) 'ium'
  ...
SyntaxError: invalid syntax</pre>
<p class="tab">If you want to concatenate variables or a variable and a literal, use <b>+</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; prefix + 'thon'
'Python'</pre>
<p class="tab">This feature is particularly useful when you want to break long strings:</p>
<pre class="tab tcy">&gt;&gt;&gt; text = ('Put several strings within parentheses '
            'to have them joined together.')
&gt;&gt;&gt; text
'Put several strings within parentheses to have them joined together.'</pre>
<p class="tab">Strings can be indexed (subscripted), with the first character having index <b>0</b>. There is no separate character type; a character is a string of size one:</p>
<pre class="tab tcy">&gt;&gt;&gt; word = 'Python'
&gt;&gt;&gt; word[0]  # character in position 0
'P'
&gt;&gt;&gt; word[5]  # character in position 5
'n'</pre>
<p class="tab">Indices may also be negative numbers, to start counting from the right:</p>
<pre class="tab tcy">&gt;&gt;&gt; word[-1]  # last character
'n'
&gt;&gt;&gt; word[-2]  # second-last character
'o'
&gt;&gt;&gt; word[-6]
'P'</pre>
<p class="tab">Note that since <b>-0</b> is the same as <b>0</b>, negative indices start from <b>-1</b>.</p>
<p class="tab">In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing allows you to obtain substring:</p>
<pre class="tab tcy">&gt;&gt;&gt; word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
&gt;&gt;&gt; word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'</pre>
<p class="tab">Note how the start is always included, and the end always excluded. This makes sure that <b>s[:i] + s[i:]</b> is always equal to <b>s</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; word[:2] + word[2:]
'Python'
&gt;&gt;&gt; word[:4] + word[4:]
'Python'</pre>
<p class="tab">Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced.</p>
<pre class="tab tcy">&gt;&gt;&gt; word[:2]  # character from the beginning to position 2 (excluded)
'Py'
&gt;&gt;&gt; word[4:]  # characters from position 4 (included) to the end
'on'
&gt;&gt;&gt; word[-2:] # characters from the second-last (included) to the end
'on'</pre>
<p class="tab">One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered <b>0</b>. Then the right edge of the last character of a string of <i>n</i> characters has index <i>n</i>, for example:</p>
<pre class="tab"> &#9484;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9488;
 | <b>P</b> | <b>y</b> | <b>t</b> | <b>h</b> | <b>o</b> | <b>n</b> |
 &#9492;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9496; 
<b>0   1   2   3   4   5   6-6  -5  -4  -3  -2  -1</b>
</pre>
<p class="tab">The first row of numbers gives the position of the indices <b>0</b>...<b>6</b> in the string; the second row gives the corresponding negative indices. The slice from <i>i</i> to <i>j</i> consists of all characters between the edges labeled <i>i</i> and <i>j</i>, respectively.</p>
<p class="tab">For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For example, the length of <b>word[1:3]</b> is <b>2</b>.</p>
<p class="tab">Attempting to use an index that is too large results in an error:</p>
<pre class="tab tcy">&gt;&gt;&gt; word[42]  # the word only has 7 characters
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: string index out of range</pre>
<p class="tab">If you need a different string, you should create a new one:</p>
<pre class="tab tcy">&gt;&gt;&gt; 'J' + word[1:]
'Jython'
&gt;&gt;&gt; word[:2] + 'py'
'Pypy'</pre>
<p class="tab">The built-in function <b>len()</b> returns the length of a string:</p>
<pre class="tab tcy">&gt;&gt;&gt; s = 'supercalifragilisticexpialidocious'
&gt;&gt;&gt; len(s)
34</pre>
<h2 id="Lists">Lists</h2>
<p class="tab">Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.</p>
<pre class="tab tcy">&gt;&gt;&gt; squares = [1, 4, 9, 16, 25]
&gt;&gt;&gt; squares
[1, 4, 9, 16, 25]</pre>
<p class="tab">Like strings (and all other built-in <b>sequence</b> type), lists can be indexed and sliced:</p>
<pre class="tab tcy">&gt;&gt;&gt; squares[0]  # indexing returns the item
1
&gt;&gt;&gt; squares[-1]
25
&gt;&gt;&gt; squares[-3:]  # slicing returns a new list
[9, 16, 25]</pre>
<p class="tab">All slice operations return a new list containing the requested elements. This means that the following slice returns a new (shallow) copy of the list:</p>
<pre class="tab tcy">&gt;&gt;&gt; squares[:]
[1, 4, 9, 16, 25]</pre>
<p class="tab">Lists also support operations like concatenation:</p>
<pre class="tab tcy">&gt;&gt;&gt; squares + [36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</pre>
<p class="tab">Unlike strings, which are immutable, lists are a mutable type, i.e., it's possible to change their content:</p>
<pre class="tab tcy">&gt;&gt;&gt; cubes = [1, 8, 27, 65, 125]  # something's wrong here
&gt;&gt;&gt; 4 ** 3  # the cube of 4 is 64, not 65!
64
&gt;&gt;&gt; cubes[3] = 64  # replace the wrong value
&gt;&gt;&gt; cubes
[1, 8, 27, 64, 125]</pre>
<p class="tab">You can also add new items at the end of the list, using the <b>append()</b> method (we discuss more about methods later):</p>
<pre class="tab tcy">&gt;&gt;&gt; cubes.append(216)  # add the cube of 6
&gt;&gt;&gt; cubes.append(7 ** 3)  # and the cube of 7
&gt;&gt;&gt; cubes
[1, 8, 27, 64, 125, 216, 343]</pre>
<p class="tab">Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:</p>
<pre class="tab tcy">&gt;&gt;&gt; letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
&gt;&gt;&gt; letters
['a', 'b', 'c', 'd', 'e', 'f', 'g']
&gt;&gt;&gt; # replace some values
&gt;&gt;&gt; letters[2:5] = ['C', 'D', 'E']
&gt;&gt;&gt; letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
&gt;&gt;&gt; # now remove them
&gt;&gt;&gt; letters[2:5] = []
&gt;&gt;&gt; letters
['a', 'b', 'f', 'g']
&gt;&gt;&gt; # clear the list by replacing all the elements with an empty list
&gt;&gt;&gt; letters[:] = []
&gt;&gt;&gt; letters
[]</pre>
<p class="tab">The built-in function <b>len()</b> also applies to lists:</p>
<pre class="tab tcy">&gt;&gt;&gt; letters = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; len(letters)
4</pre>
<p class="tab">It is possible to nest lists (create lists containing other lists), for example:</p>
<pre class="tab tcy">&gt;&gt;&gt; a = ['a', 'b', 'c']
&gt;&gt;&gt; n = [1, 2, 3]
&gt;&gt;&gt; x = [a, n]
&gt;&gt;&gt; x
[['a', 'b', 'c'], [1, 2, 3]]
&gt;&gt;&gt; x[0]
['a', 'b', 'c']
&gt;&gt;&gt; x[0][1]
'b'</pre>
<h2 id="First-Steps-Toward-Programming">First steps toward programming</h2>
<p class="tab">Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an initial sub-sequence of the <a href="https://en.wikipedia.org/wiki/Fibonacci_number" class="external">Fibonacci series</a> as follows:</p>
<pre class="tab tcy">&gt;&gt;&gt; # Fibonacci series:
... # the sum of two elements defines the next
... a, b = 0, 1
&gt;&gt;&gt; while b &lt; 10:
...     print(b)
...     a, b = b, a+b
...
1
1
2
3
5
8</pre>
<p class="tab">This example introduces several new features.</p>
<ul>
<li>The first line contains a multiple assignment: the variables <b>a</b> and <b>b</b> simultaneously get the new values <b>0</b> and <b>1</b>. On the last line this is used again, demonstrating that the expressions on the right side are all evaluated first before any of the assignments take place. The right side expressions are evaluated from the left to the right.</li>
<li id="While">The <b>while</b> loop executes as long as the condition <b>(here: b &lt; 10)</b> remains true. In Python, like in C, any non-zero integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used in the example is a simple comparison. The standard comparison operators are written the same as in C: <b>&lt;</b> (less than), <b>&gt;</b> (greater than), <b>==</b> (equal to), <b>&lt;=</b> (less than or equal to), <b>&gt;=</b> (greater than or equal to) and <b>!=</b> (not equal to).</li>
<li>The body of the loop is indented: indentation is Python's way of grouping statements. At the interactive prompt, you have to type a tab or space(s) for each indented line. In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility. When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same amount.</li>
<li id="Print()">The <b>print()</b> function writes the value of the argument(s) it is given. It differs from writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments, floating point quantities, and strings. Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this:</li>
</ul>
<pre class="tab tcy">&gt;&gt;&gt; i = 256*256
&gt;&gt;&gt; print('The value of i is', i)
The value of i is 65536</pre>
<p class="tab">The keyword argument <b>end</b> can be used to avoid the newline after the output, or end the output with a different string:</p>
<pre class="tab tcy">&gt;&gt;&gt; a, b = 0, 1
&gt;&gt;&gt; while b &lt; 1000:
...     print(b, end=',')
...     a, b = b, a+b
...
1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,</pre>
<h2 id="More-Flow-Control-Tools">More flow control tools</h2>
<p class="tab">Besides the <b>while</b> statement, Python knows the usual control flow statements known from other languages, with some twists.</p>
<h2 id="If-Statements">if statements</h2>
<p class="tab">Perhaps the most well-known statement type is the <b>if</b> statement. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; x = int(input("Please enter an integer: "))
Please enter an integer: 42
&gt;&gt;&gt; if x &lt; 0:
...     x = 0
...     print('Negative changed to zero')
... elif x == 0:
...     print('Zero')
... elif x == 1:
...     print('Single')
... else:
...     print('More')
...
More</pre>
<p class="tab">There can be zero or more <b>elif</b> parts, and the <b>else</b> part is optional. The keyword '<b>elif</b>' is short for 'else if', and is useful to avoid excessive indentation. An <b>if</b> ... <b>elif</b> ... <b>elif</b> ... sequence is a substitute for the switch or case statements found in other languages.</p>
<h2 id="For-Statements">for statements</h2>
<p class="tab">The <b>for</b> statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python's <b>for</b> statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; # Measure some strings:
... words = ['cat', 'window', 'defenestrate']
&gt;&gt;&gt; for w in words:
...     print(w, len(w))
...
cat 3
window 6
defenestrate 12</pre>
<p class="tab">If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:</p>
<pre class="tab tcy">&gt;&gt;&gt; for w in words[:]:  # Loop over a slice copy of the entire list.
...     if len(w) &gt; 6:
...         words.insert(0, w)
...
&gt;&gt;&gt; words
['defenestrate', 'cat', 'window', 'defenestrate']</pre>
<h2 id="The-Range-Function">The range() function</h2>
<p class="tab">If you do need to iterate over a sequence of numbers, the built-in function <b>range()</b> comes in handy. It generates arithmetic progressions:</p>
<pre class="tab tcy">&gt;&gt;&gt; for i in range(5):
...     print(i)
...
0
1
2
3
4</pre>
<p class="tab">The given end point is never part of the generated sequence; <b>range(10)</b> generates 10 values, the legal indices for items of a sequence of length <b>10</b>. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the 'step'):</p>
<pre class="tab tcy">range(5, 10)
   5 through 9
range(0, 10, 3)
   0, 3, 6, 9
range(-10, -100, -30)
  -10, -40, -70</pre>
<p class="tab">To iterate over the indices of a sequence, you can combine <b>range()</b> and <b>len()</b> as follows:</p>
<pre class="tab tcy">&gt;&gt;&gt; a = ['Mary', 'had', 'a', 'little', 'lamb']
&gt;&gt;&gt; for i in range(len(a)):
...     print(i, a[i])
...
0 Mary
1 had
2 a
3 little
4 lamb</pre>
<p class="tab">In most such cases, however, it is convenient to use the <b>enumerate()</b> function; see <a href="#Looping-Techniques">Looping techniques</a>.</p>
<p class="tab">A strange thing happens if you <b>print</b> a <b>range</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; print(range(10))
range(0, 10)</pre>
<p class="tab">In many ways the object returned by <b>range()</b> behaves as if it is a list, but in fact it isn't. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn't really make the list, thus saving space.</p>
<p class="tab">We say such an object is "iterable", that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the <b>for</b> statement is such an iterator. The function <b>list()</b> is another; it creates lists from iterables:</p>
<pre class="tab tcy">&gt;&gt;&gt; list(range(5))
[0, 1, 2, 3, 4]</pre>
<p class="tab">Later we will see more functions that return iterables and take iterables as argument.</p>
<h2 id="Break-And-Continue-Statements-And-Else-Clauses-On-Loops">break and continue statements, and else clauses on loops</h2>
<p class="tab">The <b>break</b> statement, like in C, breaks out of the smallest enclosing <b>for</b> or <b>while</b> loop.</p>
<p class="tab">Loop statements may have an <b>else</b> clause; it is executed when the loop terminates through exhaustion of the list (with <b>for</b>) or when the condition becomes false (with <b>while</b>), but not when the loop is terminated by a <b>break</b> statement. This is exemplified by the following loop, which searches for prime numbers:</p>
<pre class="tab tcy">&gt;&gt;&gt; for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3</pre>
<p class="tab">(Notice that the <b>else</b> clause belongs to the <b>for</b> loop, not the <b>if</b> statement; this is an example of the indentation defining the scope of a code block.)</p>
<p class="tab">When used with a loop, the <b>else</b> clause has more in common with the <b>else</b> clause of a <b>try</b> statement than it does that of <b>if</b> statements: a <b>try</b> statement's <b>else</b> clause runs when no exception occurs, and a loop's else clause runs when no <b>break</b> occurs. For more on the <b>try</b> statement and exceptions.</p>
<p class="tab">The <b>continue</b> statement, also borrowed from C, continues with the next iteration of the loop:</p>
<pre class="tab tcy">&gt;&gt;&gt; for num in range(2, 10):
...     if num % 2 == 0:
...         print("Found an even number", num)
...         continue
...     print("Found a number", num)
Found an even number 2
Found a number 3
Found an even number 4
Found a number 5
Found an even number 6
Found a number 7
Found an even number 8
Found a number 9</pre>
<h2 id="Pass-Statements">pass statements</h2>
<p class="tab">The <b>pass</b> statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; while True:
...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)
...</pre>
<p class="tab">This is commonly used for creating minimal classes:</p>
<pre class="tab tcy">&gt;&gt;&gt; class MyEmptyClass:
...     pass
...</pre>
<p class="tab">Another place <b>pass</b> can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The <b>pass</b> is silently ignored:</p>
<pre class="tab tcy">&gt;&gt;&gt; def initlog(*args):
...     pass   # Remember to implement this!
...</pre>
<h2 id="Defining-Functions">Defining functions</h2>
<p class="tab">We can create a function that writes the Fibonacci series to an arbitrary boundary:</p>
<pre class="tab tcy">&gt;&gt;&gt; def fib(n):    # write Fibonacci series up to n
...     """Print a Fibonacci series up to n."""
...     a, b = 0, 1
...     while a &lt; n:
...         print(a, end=' ')
...         a, b = b, a+b
...     print()
...
&gt;&gt;&gt; # Now call the function we defined:
... fib(2000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597</pre>
<p class="tab">The keyword <b>def</b> introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.</p>
<p class="tab">The first statement of the function body can optionally be a string literal; this string literal is the function's documentation string, or "docstring". (More about docstrings is found in the section <a href="#Documentation-Strings">Documentation strings</a>.) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it's good practice to include docstrings in code that you write, so it's recommended that you make a habit of it.</p>
<p class="tab">The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a <b>global</b> statement), although they may be referenced.</p>
<p class="tab">The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). When a function calls another function, a new local symbol table is created for that call.</p>
<p class="tab">A function definition introduces the function name in the current symbol table. The value of the function name has a type that is recognized by the interpreter as a user-defined function. This value can be assigned to another name which can then also be used as a function. This serves as a general renaming mechanism:</p>
<pre class="tab tcy">&gt;&gt;&gt; fib
&lt;function fib at 10042ed0&gt;
&gt;&gt;&gt; f = fib
&gt;&gt;&gt; f(100)
0 1 1 2 3 5 8 13 21 34 55 89</pre>
<p class="tab">Coming from other languages, you might object that <b>fib</b> is not a function but a procedure since it doesn't return a value. In fact, even functions without a <b>return</b> statement do return a value, albeit a rather boring one. This value is called <b>None</b> (it's a built-in name). Writing the value <b>None</b> is normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using <b>print()</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; fib(0)
&gt;&gt;&gt; print(fib(0))
None</pre>
<p class="tab">It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it:</p>
<pre class="tab tcy">&gt;&gt;&gt; def fib2(n): # return Fibonacci series up to n
...     """Return a list containing the Fibonacci series up to n."""
...     result = []
...     a, b = 0, 1
...     while a &lt; n:
...         result.append(a)    # see below
...         a, b = b, a+b
...     return result
...
&gt;&gt;&gt; f100 = fib2(100)    # call it
&gt;&gt;&gt; f100                # write the result
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</pre>
<p class="tab">This example, as usual, demonstrates some new Python features:</p>
<ul>
<li>The <b>return</b> statement returns with a value from a function. <b>return</b> without an expression argument returns <b>None</b>. Falling off the end of a function also returns <b>None</b>.</li>
<li>The statement <b>result.append(a)</b> calls a method of the list object result. A method is a function that 'belongs' to an object and is named <b>obj.methodname</b>, where <b>obj</b> is some object (this may be an expression), and <b>methodname</b> is the name of a method that is defined by the object's type. Different types define different methods. Methods of different types may have the same name without causing ambiguity. (It is possible to define object types and methods, using classes, see <a href="#Classes">Classes</a>) The method <b>append()</b> shown in the example is defined for list objects; it adds a new element at the end of the list. In this example, it is equivalent to <b>result = result + [a]</b>, but more efficient.</li>
</ul>
<h2 id="More-On-Defining-Functions">More on defining functions</h2>
<p class="tab">It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.</p>
<h2 id="Default-Argument-Values">Default argument values</h2>
<p class="tab">The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow. For example:</p>
<pre class="tab tcy">def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries &lt; 0:
            raise OSError('uncooperative user')
        print(complaint)</pre>
<p class="tab">This function can be called in several ways:</p>
<ul>
<li>giving only the mandatory argument: <b>ask_ok('Do you really want to quit?')</b></li> 
<li>giving one of the optional arguments: <b>ask_ok('OK to overwrite the file?', 2)</b></li>
<li>or even giving all arguments: <b>ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')</b></li>
</ul>
<p class="tab">This example also introduces the <b>in</b> keyword. This tests whether or not a sequence contains a certain value.</p>
<p class="tab">The default values are evaluated at the point of function definition in the defining scope, so that</p>
<pre class="tab tcy">i = 5
def f(arg=i):
    print(arg)
i = 6
f()</pre>
<p class="tab">will print <b>5</b>.</p>
<div class="tip tab" role="note">
<span class="title note">Warning</span>
<p>The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls:</p>
</div>
<pre class="tab tcy">def f(a, L=[]):
    L.append(a)
    return L
print(f(1))
print(f(2))
print(f(3))</pre>
<p class="tab">This will print</p>
<pre class="tab tcy">[1]
[1, 2]
[1, 2, 3]</pre>
<p class="tab">If you don't want the default to be shared between subsequent calls, you can write the function like this instead:</p>
<pre class="tab tcy">def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L</pre>
<h2 id="Keyword-Arguments">Keyword arguments</h2>
<p class="tab">Functions can also be called using keyword arguments of the form <i>kwarg</i><b>=</b><i>value</i>. For instance, the following function:</p>
<pre class="tab tcy">def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")
</pre>
<p class="tab">accepts one required argument (<b>voltage</b>) and three optional arguments (<b>state</b>, <b>action</b>, and <b>type</b>). This function can be called in any of the following ways:</p>
<pre class="tab tcy">parrot(1000)                                          # 1 positional argument
parrot(voltage=1000)                                  # 1 keyword argument
parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword</pre>
<p class="tab">but all the following calls would be invalid:</p>
<pre class="tab tcy">parrot()                     # required argument missing
parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
parrot(110, voltage=220)     # duplicate value for the same argument
parrot(actor='John Cleese')  # unknown keyword argument</pre>
<p class="tab">In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g., <b>actor</b> is not a valid argument for the <b>parrot</b> function), and their order is not important. This also includes non-optional arguments (e.g., <b>parrot(voltage=1000)</b> is valid too). No argument may receive a value more than once. Here's an example that fails due to this restriction:</p>
<pre class="tab tcy">&gt;&gt;&gt; def function(a):
...     pass
...
&gt;&gt;&gt; function(0, a=0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: function() got multiple values for keyword argument 'a'</pre>
<p class="tab">When a final formal parameter of the form <b>**name</b> is present, it receives a dictionary (see <a href="/unix/pylibbi.htm#Mapping-Types-Dict">Mapping Types &mdash; dict</a>) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form <b>*name</b> (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list. (<b>*name</b> must occur before <b>**name</b>.) For example, if we define a function like this:</p>
<pre class="tab tcy">def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    keys = sorted(keywords.keys())
    for kw in keys:
        print(kw, ":", keywords[kw])
</pre>
<p class="tab">It could be called like this:</p>
<pre class="tab tcy">cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")
</pre>
<p class="tab">and it would print:</p>
<pre class="tab">-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
client : John Cleese
shopkeeper : Michael Palin
sketch : Cheese Shop Sketch</pre>
<p class="tab">Note that the list of keyword argument names is created by sorting the result of the keywords dictionary's <b>keys()</b> method before printing its contents; if this is not done, the order in which the arguments are printed is undefined.</p>
<h2 id="Arbitrary-Argument-Lists">Arbitrary argument lists</h2>
<p class="tab">Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see <a href="#Tuples-And-Sequences">Tuples and sequences</a>). Before the variable number of arguments, zero or more normal arguments may occur.</p>
<pre class="tab tcy">def write_multiple_items(file, separator, *args):
    file.write(separator.join(args))</pre>
<p class="tab">Normally, these "variadic" arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the <b>*args</b> parameter are 'keyword-only' arguments, meaning that they can only be used as keywords rather than positional arguments.</p>
<pre class="tab tcy">&gt;&gt;&gt; def concat(*args, sep="/"):
...    return sep.join(args)
...
&gt;&gt;&gt; concat("earth", "mars", "venus")
'earth/mars/venus'
&gt;&gt;&gt; concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'</pre>
<h2 id="Unpacking-Argument-Lists">Unpacking argument lists</h2>
<p class="tab">The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in <b>range()</b> function expects separate <i>start</i> and <i>stop</i> arguments. If they are not available separately, write the function call with the <b>*</b>-operator to unpack the arguments out of a list or tuple:</p>
<pre class="tab tcy">&gt;&gt;&gt; list(range(3, 6))            # normal call with separate arguments
[3, 4, 5]
&gt;&gt;&gt; args = [3, 6]
&gt;&gt;&gt; list(range(*args))            # call with arguments unpacked from a list
[3, 4, 5]</pre>
<p class="tab">In the same fashion, dictionaries can deliver keyword arguments with the <b>**</b>-operator:</p>
<pre class="tab tcy">&gt;&gt;&gt; def parrot(voltage, state='a stiff', action='voom'):
...     print("-- This parrot wouldn't", action, end=' ')
...     print("if you put", voltage, "volts through it.", end=' ')
...     print("E's", state, "!")
...
&gt;&gt;&gt; d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
&gt;&gt;&gt; parrot(**d)
-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !</pre>
<h2 id="Lambda-Expressions">Lambda expressions</h2>
<p class="tab">Small anonymous functions can be created with the <b>lambda</b> keyword. This function returns the sum of its two arguments: <b>lambda a, b: a+b</b>. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope:</p>
<pre class="tab tcy">&gt;&gt;&gt; def make_incrementor(n):
...     return lambda x: x + n
...
&gt;&gt;&gt; f = make_incrementor(42)
&gt;&gt;&gt; f(0)
42
&gt;&gt;&gt; f(1)
43</pre>
<p class="tab">The above example uses a lambda expression to return a function. Another use is to pass a small function as an argument:</p>
<pre class="tab tcy">&gt;&gt;&gt; pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
&gt;&gt;&gt; pairs.sort(key=lambda pair: pair[1])
&gt;&gt;&gt; pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]</pre>
<h2 id="Documentation-Strings">Documentation strings</h2>
<p class="tab">Here are some conventions about the content and formatting of documentation strings.</p>
<p class="tab">The first line should always be a short, concise summary of the object's purpose. For brevity, it should not explicitly state the object's name or type, since these are available by other means (except if the name happens to be a verb describing a function's operation). This line should begin with a capital letter and end with a period.</p>
<p class="tab">If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object's calling conventions, its side effects, etc.</p>
<p class="tab">The Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired. This is done using the following convention. The first non-blank line after the first line of the string determines the amount of indentation for the entire documentation string. (We can't use the first line since it is generally adjacent to the string's opening quotes so its indentation is not apparent in the string literal.) Whitespace "equivalent" to this indentation is then stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally).</p>
<p class="tab">Here is an example of a multi-line docstring:</p>
<pre class="tab tcy">&gt;&gt;&gt; def my_function():
...     """Do nothing, but document it.
...
...     No, really, it doesn't do anything.
...     """
...     pass
...
&gt;&gt;&gt; print(my_function.__doc__)
Do nothing, but document it.
    No, really, it doesn't do anything.</pre>
<h2 id="Function-Annotations">Function annotations</h2>
<p class="tab">Function annotations are completely optional, arbitrary metadata information about user-defined functions. Neither Python itself nor the standard library use function annotations in any way; this section shows the syntax. Third-party projects are free to use function annotations for documentation, type checking, and other uses.</p>
<p class="tab">Annotations are stored in the <b>__annotations__</b> attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal <b>-&gt;</b>, followed by an expression, between the parameter list and the colon denoting the end of the <b>def</b> statement. The following example has a positional argument, a keyword argument, and the return value annotated with nonsense:</p>
<pre class="tab tcy">&gt;&gt;&gt; def f(ham: 42, eggs: int = 'spam') -&gt; "Nothing to see here":
...     print("Annotations:", f.__annotations__)
...     print("Arguments:", ham, eggs)
...
&gt;&gt;&gt; f('wonderful')
Annotations: {'eggs': &lt;class 'int'&gt;, 'return': 'Nothing to see here', 'ham': 42}
Arguments: wonderful spam</pre>
<h2 id="About-Coding-Style">About coding style</h2>
<p class="tab">Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about coding style. Most languages can be written (or more concise, formatted) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that.</p>
<p class="tab">For Python, <a href="https://legacy.python.org/dev/peps/pep-0008/" class="external">PEP 8</a> has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Every Python developer should read it at some point. Here are the most important points extracted for you:</p>
<ul>
<li>Use 4-space indentation, and no tabs.<br><br> 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.</li>
<li>Wrap lines so that they don't exceed 79 characters.<br><br> This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.</li>
<li>Use blank lines to separate functions and classes, and larger blocks of code inside functions.</li>
<li>When possible, put comments on a line of their own.</li>
<li>Use docstrings.</li>
<li>Use spaces around operators and after commas, but not directly inside bracketing constructs: <b>a = f(1, 2) + g(3, 4)</b>.</li>
<li>Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use <b>self</b> as the name for the first method argument (see <a href="#A-First-Look-At-Classes">A first look at classes</a> for more on classes and methods), or Python creator Guido Van Rossum's <a href="https://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html" class="external">blog post</a> about using the <b>self</b> argument in class methods).</li>
<li>Don't use fancy encodings if your code is meant to be used in international environments. Python's default, UTF-8, or even plain ASCII work best in any case.</li>
<li>Likewise, don't use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</li>
</ul>
<h2 id="Data-Structures">Data structures</h2>
<p class="tab">This chapter describes some things you've learned about already in more detail, and adds some new things as well.</p>
<h2 id="More-On-Lists">More on lists</h2>
<p class="tab">The list data type has some more methods. Here are all of the methods of list objects:</p>
<table class="mtable4 tab">
<tbody>
<tr class="tcw">
<td style="width:200px"><pre><b>list.append(</b><i>x</i><b>)</b></pre></td>
<td>Add an item to the end of the list. Equivalent to <b>a[len(a):] = [</b><i>x</i><b>]</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.extend(</b><i>L</i><b>)</b></pre></td>
<td>Extend the list by appending all the items in the given list. Equivalent to <b>a[len(a):] =</b> <i>L</i>.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.insert(</b><i>i</i><b>,</b> <i>x</i><b>)</b></pre></td>
<td>Insert an item at a given position. The first argument is the index of the element before which to insert, so <b>a.insert(0,</b> <i>x</i><b>)</b> inserts at the front of the list, and <b>a.insert(len(a),</b> <i>x</i><b>)</b> is equivalent to <b>a.append(</b><i>x</i><b>)</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.remove(</b><i>x</i><b>)</b></pre></td>
<td>Remove the first item from the list whose value is <i>x</i>. It is an error if there is no such item.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.pop([</b><i>i</i><b>])</b></pre></td>
<td>Remove the item at the given position in the list, and return it. If no index is specified, <b>a.pop()</b> removes and returns the last item in the list. (The square brackets around the <i>i</i> in the method signature denote that the parameter is optional, not that you should type square brackets at that position.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.clear()</b></pre></td>
<td>Remove all items from the list. Equivalent to del <b>a[:]</b>.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.index(</b><i>x</i><b>)</b></pre></td>
<td>Return the index in the list of the first item whose value is <i>x</i>. It is an error if there is no such item.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.count(</b><i>x</i><b>)</b></pre></td>
<td>Return the number of times <i>x</i> appears in the list.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.sort()</b></pre></td>
<td>Sort the items of the list in place.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.reverse()</b></pre></td>
<td>Reverse the elements of the list in place.</td>
</tr>
<tr class="tcw">
<td><pre><b>list.copy()</b></pre></td>
<td>Return a shallow copy of the list. Equivalent to <b>a[:]</b>.</td>
</tr>
</tbody>
</table>
<p class="tab">An example that uses most of the list methods:</p>
<pre class="tab tcy">&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]
&gt;&gt;&gt; print(a.count(333), a.count(66.25), a.count('x'))
2 1 0
&gt;&gt;&gt; a.insert(2, -1)
&gt;&gt;&gt; a.append(333)
&gt;&gt;&gt; a
[66.25, 333, -1, 333, 1, 1234.5, 333]
&gt;&gt;&gt; a.index(333)
1
&gt;&gt;&gt; a.remove(333)
&gt;&gt;&gt; a
[66.25, -1, 333, 1, 1234.5, 333]
&gt;&gt;&gt; a.reverse()
&gt;&gt;&gt; a
[333, 1234.5, 1, 333, -1, 66.25]
&gt;&gt;&gt; a.sort()
&gt;&gt;&gt; a
[-1, 1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; a.pop()
1234.5
&gt;&gt;&gt; a
[-1, 1, 66.25, 333, 333]</pre>
<p class="tab">You might have noticed that methods like <b>insert</b>, <b>remove</b> or <b>sort</b> that only modify the list have no return value printed &ndash; they return the default <b>None</b>. This is a design principle for all mutable data structures in Python.</p>
<h2 id="Using-Lists-As-Stacks">Using lists as stacks</h2>
<p class="tab">The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved ("last-in, first-out"). To add an item to the top of the stack, use <b>append()</b>. To retrieve an item from the top of the stack, use <b>pop()</b> without an explicit index. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; stack = [3, 4, 5]
&gt;&gt;&gt; stack.append(6)
&gt;&gt;&gt; stack.append(7)
&gt;&gt;&gt; stack
[3, 4, 5, 6, 7]
&gt;&gt;&gt; stack.pop()
7
&gt;&gt;&gt; stack
[3, 4, 5, 6]
&gt;&gt;&gt; stack.pop()
6
&gt;&gt;&gt; stack.pop()
5
&gt;&gt;&gt; stack
[3, 4]</pre>
<h2 id="Using-Lists-As-Queues">Using lists as queues</h2>
<p class="tab">It is also possible to use a list as a queue, where the first element added is the first element retrieved ("first-in, first-out"); however, lists are not efficient for this purpose. While <b>appends</b> and <b>pops</b> from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).</p>
<p class="tab">To implement a queue, use <b>collections.deque</b> which was designed to have fast <b>appends</b> and <b>pops</b> from both ends. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; queue = deque(["Eric", "John", "Michael"])
&gt;&gt;&gt; queue.append("Terry")           # Terry arrives
&gt;&gt;&gt; queue.append("Graham")          # Graham arrives
&gt;&gt;&gt; queue.popleft()                 # The first to arrive now leaves
'Eric'
&gt;&gt;&gt; queue.popleft()                 # The second to arrive now leaves
'John'
&gt;&gt;&gt; queue                           # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])</pre>
<h2 id="List-Comprehensions">List comprehensions</h2>
<p class="tab">List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.</p>
<p class="tab">For example, assume we want to create a list of squares, like:</p>
<pre class="tab tcy">&gt;&gt;&gt; squares = []
&gt;&gt;&gt; for x in range(10):
...     squares.append(x**2)
...
&gt;&gt;&gt; squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</pre>
<p class="tab">We can obtain the same result with:</p>
<pre class="tab tcy">squares = [x**2 for x in range(10)]
</pre>
<p class="tab">This is also equivalent to <b>squares = list(map(lambda x: x**2, range(10)))</b>, but it's more concise and readable.</p>
<p class="tab">A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:</p>
<pre class="tab tcy">&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</pre>
<p class="tab">and it's equivalent to:</p>
<pre class="tab tcy">&gt;&gt;&gt; combs = []
&gt;&gt;&gt; for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
&gt;&gt;&gt; combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</pre>
<p class="tab">Note how the order of the <b>for</b> and <b>if</b> statements is the same in both these snippets.</p>
<p class="tab">If the expression is a tuple (e.g., the <b>(x, y)</b> in the previous example), it must be parenthesized.</p>
<pre class="tab tcy">&gt;&gt;&gt; vec = [-4, -2, 0, 2, 4]
&gt;&gt;&gt; # create a new list with the values doubled
&gt;&gt;&gt; [x*2 for x in vec]
[-8, -4, 0, 4, 8]
&gt;&gt;&gt; # filter the list to exclude negative numbers
&gt;&gt;&gt; [x for x in vec if x &gt;= 0]
[0, 2, 4]
&gt;&gt;&gt; # apply a function to all the elements
&gt;&gt;&gt; [abs(x) for x in vec]
[4, 2, 0, 2, 4]
&gt;&gt;&gt; # call a method on each element
&gt;&gt;&gt; freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
&gt;&gt;&gt; [weapon.strip() for weapon in freshfruit]
['banana', 'loganberry', 'passion fruit']
&gt;&gt;&gt; # create a list of 2-tuples like (number, square)
&gt;&gt;&gt; [(x, x**2) for x in range(6)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
&gt;&gt;&gt; # the tuple must be parenthesized, otherwise an error is raised
&gt;&gt;&gt; [x, x**2 for x in range(6)]
  File "&lt;stdin&gt;", line 1, in ?
    [x, x**2 for x in range(6)]
               ^
SyntaxError: invalid syntax
&gt;&gt;&gt; # flatten a list using a listcomp with two 'for'
&gt;&gt;&gt; vec = [[1,2,3], [4,5,6], [7,8,9]]
&gt;&gt;&gt; [num for elem in vec for num in elem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]</pre>
<p class="tab">List comprehensions can contain complex expressions and nested functions:</p>
<pre class="tab tcy">&gt;&gt;&gt; from math import pi
&gt;&gt;&gt; [str(round(pi, i)) for i in range(1, 6)]
['3.1', '3.14', '3.142', '3.1416', '3.14159']
</pre>
<h2 id="Nested-List-Comprehensions">Nested list comprehensions</h2>
<p class="tab">The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.</p>
<p class="tab">Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:</p>
<pre class="tab tcy">&gt;&gt;&gt; matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7, 8],
...     [9, 10, 11, 12],
... ]</pre>
<p class="tab">The following list comprehension will transpose rows and columns:</p>
<pre class="tab tcy">&gt;&gt;&gt; [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</pre>
<p class="tab">As we saw in the previous section, the nested listcomp is evaluated in the context of the for that follows it, so this example is equivalent to:</p>
<pre class="tab tcy">&gt;&gt;&gt; transposed = []
&gt;&gt;&gt; for i in range(4):
...     transposed.append([row[i] for row in matrix])
...
&gt;&gt;&gt; transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</pre>
<p class="tab">which, in turn, is the same as:</p>
<pre class="tab tcy">&gt;&gt;&gt; transposed = []
&gt;&gt;&gt; for i in range(4):
...     # the following 3 lines implement the nested listcomp
...     transposed_row = []
...     for row in matrix:
...         transposed_row.append(row[i])
...     transposed.append(transposed_row)
...
&gt;&gt;&gt; transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</pre>
<p class="tab">In the real world, you should prefer built-in functions to complex flow statements. The <b>zip()</b> function would do a great job for this use case:</p>
<pre class="tab tcy">&gt;&gt;&gt; list(zip(*matrix))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]</pre>
<p class="tab">See <a href="#Unpacking-Argument-Lists">Unpacking argument lists</a> for details on the asterisk in this line.</p>
<h2 id="The-Del-Statement">The del statement</h2>
<p class="tab">There is a way to remove an item from a list given its index instead of its value: the <b>del</b> statement. This differs from the <b>pop()</b> method which returns a value. The <b>del</b> statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; del a[0]
&gt;&gt;&gt; a
[1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; del a[2:4]
&gt;&gt;&gt; a
[1, 66.25, 1234.5]
&gt;&gt;&gt; del a[:]
&gt;&gt;&gt; a
[]</pre>
<p class="tab"><b>del</b> can also be used to delete entire variables:</p>
<pre class="tab tcy">&gt;&gt;&gt; del a
</pre>
<p class="tab">Referencing the name <b>a</b> hereafter is an error (at least until another value is assigned to it). We'll find other uses for <b>del</b> later.</p>
<h2 id="Tuples-And-Sequences">Tuples and sequences</h2>
<p class="tab">We saw that lists and strings have many common properties, such as indexing and slicing operations. They are two examples of sequence data types (see <a href="/unix/pylibbi.htm#Sequence-Types-List-Tuple-Range">Sequence Types &mdash; list, tuple, range</a>). Since Python is an evolving language, other sequence data types may be added. There is also another standard sequence data type: the tuple.</p>
<p class="tab">A tuple consists of a number of values separated by commas, for instance:</p>
<pre class="tab tcy">&gt;&gt;&gt; t = 12345, 54321, 'hello!'
&gt;&gt;&gt; t[0]
12345
&gt;&gt;&gt; t
(12345, 54321, 'hello!')
&gt;&gt;&gt; # Tuples may be nested:
... u = t, (1, 2, 3, 4, 5)
&gt;&gt;&gt; u
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
&gt;&gt;&gt; # Tuples are immutable:
... t[0] = 88888
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
&gt;&gt;&gt; # but they can contain mutable objects:
... v = ([1, 2, 3], [3, 2, 1])
&gt;&gt;&gt; v
([1, 2, 3], [3, 2, 1])</pre>
<p class="tab">As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however, it is possible to create tuples which contain mutable objects, such as lists.</p>
<p class="tab">Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of namedtuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.</p>
<p class="tab">A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; empty = ()
&gt;&gt;&gt; singleton = 'hello', # &lt;-- note trailing comma
&gt;&gt;&gt; len(empty)
0
&gt;&gt;&gt; len(singleton)
1
&gt;&gt;&gt; singleton
('hello',)</pre>
<p class="tab">The statement <b>t = 12345, 54321, 'hello!'</b> is an example of tuple packing: the values <b>12345</b>, <b>54321</b> and <b>'hello!'</b> are packed together in a tuple. The reverse operation is also possible:</p>
<pre class="tab tcy">&gt;&gt;&gt; x, y, z = t
</pre>
<p class="tab">This is called, appropriately enough, "sequence unpacking" and works for any sequence on the right side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really a combination of tuple packing and sequence unpacking.</p>
<h2 id="Sets">Sets</h2>
<p class="tab">Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p>
<p class="tab">Curly braces or the <b>set()</b> function can be used to create sets. Note: to create an empty set you have to use <b>set()</b>, not <b>{}</b>; the latter creates an empty dictionary, a data structure that we discuss in the next section.</p>
<p class="tab">Here is a brief demonstration:</p>
<pre class="tab tcy">&gt;&gt;&gt; basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
&gt;&gt;&gt; print(basket)                      # show that duplicates have been removed
{'orange', 'banana', 'pear', 'apple'}
&gt;&gt;&gt; 'orange' in basket                 # fast membership testing
True
&gt;&gt;&gt; 'crabgrass' in basket
False
&gt;&gt;&gt; # Demonstrate set operations on unique letters from two words
...
&gt;&gt;&gt; a = set('abracadabra')
&gt;&gt;&gt; b = set('alacazam')
&gt;&gt;&gt; a                                  # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
&gt;&gt;&gt; a - b                              # letters in a but not in b
{'r', 'd', 'b'}
&gt;&gt;&gt; a | b                              # letters in either a or b
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
&gt;&gt;&gt; a &amp; b                              # letters in both a and b
{'a', 'c'}
&gt;&gt;&gt; a ^ b                              # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}</pre>
<p class="tab">Similarly to list comprehensions, set comprehensions are also supported:</p>
<pre class="tab tcy">&gt;&gt;&gt; a = {x for x in 'abracadabra' if x not in 'abc'}
&gt;&gt;&gt; a
{'r', 'd'}</pre>
<h2 id="Dictionaries">Dictionaries</h2>
<p class="tab">Another useful data type built into Python is the dictionary (see <a href="/unix/pylibbi.htm#Mapping-Types-Dict">Mapping Types &mdash; dict</a>). Dictionaries are sometimes found in other languages as "associative memories" or "associative arrays". Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can't use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like <b>append()</b> and <b>extend()</b>.</p>
<p class="tab">It is best to think of a dictionary as an unordered set of <i>key</i><b>:</b><i>value</i> pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: <b>{}</b>. Placing a comma-separated list of <i>key</i><b>:</b><i>value</i> pairs within the braces adds initial <i>key</i><b>:</b><i>value</i> pairs to the dictionary; this is also the way dictionaries are written on output.</p>
<p class="tab">The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a <i>key</i><b>:</b><i>value</i> pair with <b>del</b>. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key.</p>
<p class="tab">Performing <b>list(d.keys())</b> on a dictionary returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, use <b>sorted(d.keys())</b> instead). To check whether a single key is in the dictionary, use the <b>in</b> keyword.</p>
<p class="tab">Here is a small example using a dictionary:</p>
<pre class="tab tcy">&gt;&gt;&gt; tel = {'jack': 4098, 'sape': 4139}
&gt;&gt;&gt; tel['guido'] = 4127
&gt;&gt;&gt; tel
{'sape': 4139, 'guido': 4127, 'jack': 4098}
&gt;&gt;&gt; tel['jack']
4098
&gt;&gt;&gt; del tel['sape']
&gt;&gt;&gt; tel['irv'] = 4127
&gt;&gt;&gt; tel
{'guido': 4127, 'irv': 4127, 'jack': 4098}
&gt;&gt;&gt; list(tel.keys())
['irv', 'guido', 'jack']
&gt;&gt;&gt; sorted(tel.keys())
['guido', 'irv', 'jack']
&gt;&gt;&gt; 'guido' in tel
True
&gt;&gt;&gt; 'jack' not in tel
False</pre>
<p class="tab">The <b>dict()</b> constructor builds dictionaries directly from sequences of key-value pairs:</p>
<pre class="tab tcy">&gt;&gt;&gt; dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
{'sape': 4139, 'jack': 4098, 'guido': 4127}</pre>
<p class="tab">Also, dict comprehensions can be used to create dictionaries from arbitrary <i>key</i> and <i>value</i> expressions:</p>
<pre class="tab tcy">&gt;&gt;&gt; {x: x**2 for x in (2, 4, 6)}
{2: 4, 4: 16, 6: 36}</pre>
<p class="tab">When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:</p>
<pre class="tab tcy">&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)
{'sape': 4139, 'jack': 4098, 'guido': 4127}</pre>
<h2 id="Looping-Techniques">Looping techniques</h2>
<p class="tab">When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the <b>items()</b> method.</p>
<pre class="tab tcy">&gt;&gt;&gt; knights = {'gallahad': 'the pure', 'robin': 'the brave'}
&gt;&gt;&gt; for k, v in knights.items():
...     print(k, v)
...
gallahad the pure
robin the brave</pre>
<p class="tab" id="Enumerate()">When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the <b>enumerate()</b> function.</p>
<pre class="tab tcy">&gt;&gt;&gt; for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)
...
0 tic
1 tac
2 toe</pre>
<p class="tab">To loop over two or more sequences at the same time, the entries can be paired with the <b>zip()</b> function.</p>
<pre class="tab tcy">&gt;&gt;&gt; questions = ['name', 'quest', 'favorite color']
&gt;&gt;&gt; answers = ['lancelot', 'the holy grail', 'blue']
&gt;&gt;&gt; for q, a in zip(questions, answers):
...     print('What is your {0}?  It is {1}.'.format(q, a))
...
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.</pre>
<p class="tab">To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the <b>reversed()</b> function.</p>
<pre class="tab tcy">&gt;&gt;&gt; for i in reversed(range(1, 10, 2)):
...     print(i)
...
9
7
5
3
1</pre>
<p class="tab">To loop over a sequence in sorted order, use the <b>sorted()</b> function which returns a new sorted list while leaving the source unaltered.</p>
<pre class="tab tcy">&gt;&gt;&gt; basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
&gt;&gt;&gt; for f in sorted(set(basket)):
...     print(f)
...
apple
banana
orange
pear</pre>
<p class="tab">To change a sequence you are iterating over while inside the loop (for example to duplicate certain items), it is recommended that you first make a copy. Looping over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:</p>
<pre class="tab tcy">&gt;&gt;&gt; words = ['cat', 'window', 'defenestrate']
&gt;&gt;&gt; for w in words[:]:  # Loop over a slice copy of the entire list.
...     if len(w) &gt; 6:
...         words.insert(0, w)
...
&gt;&gt;&gt; words
['defenestrate', 'cat', 'window', 'defenestrate']</pre>
<h2 id="More-On-Conditions">More on conditions</h2>
<p class="tab">The conditions used in <b>while</b> and <b>if</b> statements can contain any operators, not only comparisons.</p>
<p class="tab">The comparison operators in and not in check whether a value occurs (does not occur) in a sequence. The operators <b>is</b> and <b>is not</b> compare whether two objects are really the same object; this only matters for mutable objects like lists. All comparison operators have the same priority, which is lower than that of all numerical operators.</p>
<p class="tab">Comparisons can be chained. For example, <b>a &lt; b == c</b> tests whether a is less than <b>b</b> and moreover <b>b</b> equals <b>c</b>.</p>
<p class="tab">Comparisons may be combined using the Boolean operators <b>and</b> and <b>or</b>, and the outcome of a comparison (or of any other Boolean expression) may be negated with <b>not</b>. These have lower priorities than comparison operators; between them, <b>not</b> has the highest priority and or the lowest, so that <b>A</b> and not <b>B</b> or <b>C</b> is equivalent to <b>(A and (not B)) or C</b>. As always, parentheses can be used to express the desired composition.</p>
<p class="tab">The Boolean operators <b>and</b> and <b>or</b> are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined. For example, if <b>A</b> and <b>C</b> are true but <b>B</b> is false, <b>A</b> and <b>B</b> and <b>C</b> does not evaluate the expression <b>C</b>. When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument.</p>
<p class="tab">It is possible to assign the result of a comparison or other Boolean expression to a variable. For example,</p>
<pre class="tab tcy">&gt;&gt;&gt; string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
&gt;&gt;&gt; non_null = string1 or string2 or string3
&gt;&gt;&gt; non_null
'Trondheim'</pre>
<p class="tab">Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing <b>=</b> in an expression when <b>==</b> was intended.</p>
<h2 id="Comparing-Sequences-And-Other-Types">Comparing sequences and other types</h2>
<p class="tab">Sequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one. Lexicographical ordering for strings uses the Unicode codepoint number to order individual characters. Some examples of comparisons between sequences of the same type:</p>
<pre class="tab tcy">(1, 2, 3)              &lt; (1, 2, 4)
[1, 2, 3]              &lt; [1, 2, 4]
'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'
(1, 2, 3, 4)           &lt; (1, 2, 4)
(1, 2)                 &lt; (1, 2, -1)
(1, 2, 3)             == (1.0, 2.0, 3.0)
(1, 2, ('aa', 'ab'))   &lt; (1, 2, ('abc', 'a'), 4)
</pre>
<p class="tab">Note that comparing objects of different types with <b>&lt;</b> or <b>&gt;</b> is legal provided that the objects have appropriate comparison methods. For example, mixed numeric types are compared according to their numeric value, so <b>0</b> equals <b>0.0</b>, etc. Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a TypeError exception.</p>
<h2 id="Modules">Modules</h2>
<p class="tab">If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that you've written in several programs without copying its definition into each program.</p>
<p class="tab">To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).</p>
<p class="tab">A module is a file containing Python definitions and statements. The file name is the module name with the suffix <b>.py</b> appended. Within a module, the module's name (as a string) is available as the value of the global variable <b>__name__</b>. For instance, use your favorite text editor to create a file called <b>fibo.py</b> in the current directory with the following contents:</p>
<pre class="tab tcy"># Fibonacci numbers module
def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while b &lt; n:
        print(b, end=' ')
        a, b = b, a+b
    print()
def fib2(n): # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while b &lt; n:
        result.append(b)
        a, b = b, a+b
    return result</pre>
<p class="tab">Now enter the Python interpreter and import this module with the following command:</p>
<pre class="tab tcy">&gt;&gt;&gt; import fibo
</pre>
<p class="tab">This does not enter the names of the functions defined in <b>fibo</b> directly in the current symbol table; it only enters the module name <b>fibo</b> there. Using the module name you can access the functions:</p>
<pre class="tab tcy">&gt;&gt;&gt; fibo.fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
&gt;&gt;&gt; fibo.fib2(100)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
&gt;&gt;&gt; fibo.__name__
'fibo'</pre>
<p class="tab">If you intend to use a function often you can assign it to a local name:</p>
<pre class="tab tcy">&gt;&gt;&gt; fib = fibo.fib
&gt;&gt;&gt; fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377</pre>
<h2 id="More-On-Modules">More on modules</h2>
<p class="tab">A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement. (They are also run if the file is executed as a script.)</p>
<p class="tab">Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user's global variables. On the other hand, if you know what you are doing you can touch a module's global variables with the same notation used to refer to its functions, modname.itemname.</p>
<p class="tab">Modules can import other modules. It is customary but not required to place all <b>import</b> statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module's global symbol table.</p>
<p class="tab">There is a variant of the <b>import</b> statement that imports names from a module directly into the importing module's symbol table. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; from fibo import fib, fib2
&gt;&gt;&gt; fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377</pre>
<p class="tab">This does not introduce the module name from which the <b>import</b>s are taken in the local symbol table (so in the example, <b>fibo</b> is not defined).</p>
<p class="tab">There is even a variant to <b>import</b> all names that a module defines:</p>
<pre class="tab tcy">&gt;&gt;&gt; from fibo import *
&gt;&gt;&gt; fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377</pre>
<p class="tab">This imports all names except those beginning with an underscore (<b>_</b>). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.</p>
<p class="tab">Note that in general the practice of importing <b>*</b> from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.</p>
<div class="tip" role="note">
<span class="title note">Note</span>
<p>For efficiency reasons, each module is only imported once per interpreter session. Therefore, if you change your modules, you must restart the interpreter &ndash; or, if it's one module you want to test interactively, use <b>imp.reload()</b>, e.g., <b>import imp; imp.reload(modulename)</b>.</p>
</div>
<h2 id="Executing-Modules-As-Scripts">Executing modules as scripts</h2>
<p class="tab">When you run a Python module with</p>
<pre class="tab tcy">python fibo.py &lt;arguments&gt;
</pre>
<p class="tab">the code in the module will be executed, as if you imported it, but with the <b>__name__</b> set to "<b>__main__</b>". That means that by adding this code at the end of your module:</p>
<pre class="tab tcy">if __name__ == "__main__":
    import sys
    fib(int(sys.argv[1]))</pre>
<p class="tab">you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the "main" file:</p>
<pre class="tab tcy">$ python fibo.py 50
1 1 2 3 5 8 13 21 34</pre>
<p class="tab">If the module is imported, the code is not run:</p>
<pre class="tab tcy">&gt;&gt;&gt; import fibo
&gt;&gt;&gt;
</pre>
<p class="tab">This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).</p>
<h2 id="The-Module-Search-Path">The module search path</h2>
<p class="tab">When a module named <b>spam</b> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <b>spam.py</b> in a list of directories given by the variable <b>sys.path</b>. <b>sys.path</b> is initialized from these locations:</p>
<ul>
<li>The directory containing the input script (or the current directory when no file is specified).</li>
<li><b>PYTHONPATH</b> (a list of directory names, with the same syntax as the shell variable <b>PATH</b>).</li>
<li>The installation-dependent default.</li>
</ul>
<div class="tip" role="note">
<span class="title note">Note</span>
<p>On file systems which support symlinks, the directory containing the input script is calculated after the symlink is followed. In other words, the directory containing the symlink is not added to the module search path.</p>
</div>
<p class="tab">After initialization, Python programs can modify <b>sys.path</b>. The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended. See section <a href="#Standard-Modules">Standard modules</a> for more information.</p>
<h2 id="Compiled-Python-Files">"Compiled" Python files</h2>
<p class="tab">To speed up loading modules, Python caches the compiled version of each module in the <b>__pycache__</b> directory under the name <b>module.version.pyc</b>, where the version encodes the format of the compiled file; it generally contains the Python version number. For example, in CPython release 3.3 the compiled version of <b>spam.py</b> would be cached as <b>__pycache__/spam.cpython-33.pyc</b>. This naming convention allows compiled modules from different releases and different versions of Python to coexist.</p>
<p class="tab">Python checks the modification date of the source against the compiled version to see if it's out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library can be shared among systems with different architectures.</p>
<p class="tab">Python does not check the cache in two circumstances. First, it always recompiles and does not store the result for the module that's loaded directly from the command line. Second, it does not check the cache if there is no source module. To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.</p>
<p class="tab">Some tips for experts:</p>
<ul>
<li>You can use the <b>-O</b> or <b>-OO</b> switches on the Python command to reduce the size of a compiled module. The <b>-O</b> switch removes assert statements, the <b>-OO</b> switch removes both assert statements and <b>__doc__</b> strings. Since some programs may rely on having these available, you should only use this option if you know what you're doing. "Optimized" modules have a <b>.pyo</b> rather than a <b>.pyc</b> suffix and are usually smaller. Future releases may change the effects of optimization.</li>
<li>A program doesn't run any faster when it is read from a <b>.pyc</b> or <b>.pyo</b> file than when it is read from a <b>.py</b> file; the only thing that's faster about <b>.pyc</b> or <b>.pyo</b> files is the speed with which they are loaded.</li>
<li>The module <b>compileall</b> can create <b>.pyc</b> files (or <b>.pyo</b> files when <b>-O</b> is used) for all modules in a directory.</li>
<li>There is more detail on this process, including a flow chart of the decisions, in <a href="https://legacy.python.org/dev/peps/pep-3147/" class="external">PEP 3147</a>.</li>
</ul>
<h2 id="Standard-Modules">Standard modules</h2>
<p class="tab">Python comes with a library of standard modules. Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access to operating system primitives such as system calls. The set of such modules is a configuration option which also depends on the underlying platform. For example, the <b>winreg</b> module is only provided on Windows systems. One particular module deserves some attention: <b>sys</b>, which is built into every Python interpreter. The variables <b>sys.ps1</b> and <b>sys.ps2</b> define the strings used as primary and secondary prompts:</p>
<pre class="tab tcy">&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.ps1
'&gt;&gt;&gt; '
&gt;&gt;&gt; sys.ps2
'... '
&gt;&gt;&gt; sys.ps1 = 'C&gt; '
C&gt; print('Yuck!')
Yuck!
C&gt;
</pre>
<p class="tab">These two variables are only defined if the interpreter is in interactive mode.</p>
<p class="tab">The variable <b>sys.path</b> is a list of strings that determines the interpreter's search path for modules. It is initialized to a default path taken from the environment variable <b>PYTHONPATH</b>, or from a built-in default if <b>PYTHONPATH</b> is not set. You can modify it using standard list operations:</p>
<pre class="tab tcy">&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('/ufs/guido/lib/python')
</pre>
<h2 id="The-Dir-Function">The dir() function</h2>
<p class="tab">The built-in function <b>dir()</b> is used to find out which names a module defines. It returns a sorted list of strings:</p>
<pre class="tab tcy">&gt;&gt;&gt; import fibo, sys
&gt;&gt;&gt; dir(fibo)
['__name__', 'fib', 'fib2']
&gt;&gt;&gt; dir(sys)  
['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',
 '__package__', '__stderr__', '__stdin__', '__stdout__',
 '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',
 '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',
 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',
 'call_tracing', 'callstats', 'copyright', 'displayhook',
 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',
 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',
 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',
 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',
 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',
 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',
 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',
 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',
 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',
 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',
 'thread_info', 'version', 'version_info', 'warnoptions']</pre>
<p class="tab">Without arguments, <b>dir()</b> lists the names you have defined currently:</p>
<pre class="tab tcy">&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; import fibo
&gt;&gt;&gt; fib = fibo.fib
&gt;&gt;&gt; dir()
['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']</pre>
<p class="tab">Note that it lists all types of names: variables, modules, functions, etc.</p>
<p class="tab"><b>dir()</b> does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module builtins:</p>
<pre class="tab tcy">&gt;&gt;&gt; import builtins
&gt;&gt;&gt; dir(builtins)  
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',
 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',
 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',
 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',
 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',
 'FileExistsError', 'FileNotFoundError', 'FloatingPointError',
 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',
 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',
 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',
 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',
 'NotImplementedError', 'OSError', 'OverflowError',
 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',
 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',
 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',
 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',
 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',
 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',
 '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',
 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',
 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',
 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',
 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',
 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',
 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',
 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',
 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',
 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',
 'zip']</pre>
<h2 id="Pakages">Packages</h2>
<p class="tab">Packages are a way of structuring Python's module namespace using &quot;dotted module names&quot;. For example, the module name <b>A.B</b> designates a submodule named <b>B</b> in a package named <b>A</b>. Like the use of modules saves the authors of different modules from having to worry about each other's global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or the Python Imaging Library from having to worry about each other's module names.</p>
<p class="tab">Suppose you want to design a collection of modules (a &quot;package&quot;) for the uniform handling of sound files and sound data. There are many different sound file formats (usually recognized by their extension, for example: <b>.wav</b>, <b>.aiff</b>, <b>.au</b>), so you may need to create and maintain a growing collection of modules for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you are writing a never-ending stream of modules to perform these operations. Here's a possible structure for your package (expressed in terms of a hierarchical filesystem):</p>
<pre class="tab">sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...</pre>
<p class="tab">When importing the package, Python searches through the directories on <b>sys.path</b> looking for the package subdirectory.</p>
<p class="tab">The <b>__init__.py</b> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, <b>__init__.py</b> can be an empty file, but it can also execute initialization code for the package or set the <b>__all__</b> variable, described later.</p>
<p class="tab">Users of the package can import individual modules from the package, for example:</p>
<pre class="tab tcy">import sound.effects.echo
</pre>
<p class="tab">This loads the submodule <b>sound.effects.echo</b>. It must be referenced with its full name.</p>
<pre class="tab tcy">sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
</pre>
<p class="tab">An alternative way of importing the submodule is:</p>
<pre class="tab tcy">from sound.effects import echo
</pre>
<p class="tab">This also loads the submodule <b>echo</b>, and makes it available without its package prefix, so it can be used as follows:</p>
<pre class="tab tcy">echo.echofilter(input, output, delay=0.7, atten=4)
</pre>
<p class="tab">Yet another variation is to import the desired function or variable directly:</p>
<pre class="tab tcy">from sound.effects.echo import echofilter
</pre>
<p class="tab">Again, this loads the submodule <b>echo</b>, but this makes its function <b>echofilter()</b> directly available:</p>
<pre class="tab tcy">echofilter(input, output, delay=0.7, atten=4)
</pre>
<p class="tab">Note that when using <b>from package import item</b>, the <b>item</b> can be either a submodule (or subpackage) of the package, or some other name defined in the package, like a function, class or variable. The <b>import</b> statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an ImportError exception is raised.</p>
<p class="tab">Contrarily, when using syntax like <b>import item.subitem.subsubitem</b>, each item except for the last must be a package; the last item can be a module or a package but can't be a class or function or variable defined in the previous item.</p>
<h2 id="Importing-*-From-A-Package">Importing * from a package</h2>
<p class="tab">Now what happens when the user writes <b>from sound.effects import *</b>? Ideally, one would hope that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports them all. This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported.</p>
<p class="tab">The only solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a package's <b>__init__.py</b> code defines a list named <b>__all__</b>, it is taken to be the list of module names that should be imported when <b>from package import *</b> is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don't see a use for importing <b>*</b> from their package. For example, the file <b>sound/effects/__init__.py</b> could contain the following code:</p>
<pre class="tab tcy">__all__ = ["echo", "surround", "reverse"]
</pre>
<p class="tab">This would mean that <b>from sound.effects import *</b> would import the three named submodules of the sound package.</p>
<p class="tab">If <b>__all__</b> is not defined, the statement <b>from sound.effects import *</b> does not import all submodules from the package <b>sound.effects</b> into the current namespace; it only ensures that the package <b>sound.effects</b> has been imported (possibly running any initialization code in <b>__init__.py</b>) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by <b>__init__.py</b>. It also includes any submodules of the package that were explicitly loaded by previous import statements. Consider this code:</p>
<pre class="tab tcy">import sound.effects.echo
import sound.effects.surround
from sound.effects import *</pre>
<p class="tab">In this example, the <b>echo</b> and <b>surround</b> modules are imported in the current namespace because they are defined in the <b>sound.effects</b> package when the <b>from</b>...<b>import</b> statement is executed. (This also works when <b>__all__</b> is defined.)</p>
<p class="tab">Although certain modules are designed to export only names that follow certain patterns when you use <b>import *</b>, it is still considered bad practise in production code.</p>
<p class="tab">Remember, there is nothing wrong with using <b>from Package import specific_submodule</b>! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.</p>
<h2 id="Intra-Package-References">Intra-package references</h2>
<p class="tab">When packages are structured into subpackages (as with the <b>sound</b> package in the example), you can use absolute imports to refer to submodules of siblings packages. For example, if the module <b>sound.filters.vocoder</b> needs to use the echo module in the <b>sound.effects</b> package, it can use <b>from sound.effects import echo</b>.</p>
<p class="tab">You can also write relative imports, with the from module import name form of import statement. These imports use leading dots to indicate the current and parent packages involved in the relative import. From the surround module for example, you might use:</p>
<pre class="tab tcy">from . import echo
from .. import formats
from ..filters import equalizer</pre>
<p class="tab">Note that relative imports are based on the name of the current module. Since the name of the main module is always "<b>__main__</b>", modules intended for use as the main module of a Python application must always use absolute imports.</p>
<h2 id="Packages-In-Multiple-Directories">Packages in multiple directories</h2>
<p class="tab">Packages support one more special attribute, <b>__path__</b>. This is initialized to be a list containing the name of the directory holding the package's <b>__init__.py</b> before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.</p>
<p class="tab">While this feature is not often needed, it can be used to extend the set of modules found in a package.</p>
<h2 id="Input-And-Output">Input and output</h2>
<p class="tab">There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.</p>
<h2 id="Fancier-Output-Formatting">Fancier output formatting</h2>
<p class="tab">So far we've encountered two ways of writing values: expression statements and the <b>print()</b> function. (A third way is using the <b>write()</b> method of file objects; the standard output file can be referenced as <b>sys.stdout</b>.</p>
<p class="tab">Often you'll want more control over the formatting of your output than printing space-separated values. There are two ways to format your output; the first way is to do all the string handling yourself; using string slicing and concatenation operations you can create any layout you can imagine. The string type has some methods that perform useful operations for padding strings to a given column width; these will be discussed shortly. The second way is to use the <b>str.format()</b> method.</p>
<p class="tab">The <b>string</b> module contains a <b>Template</b> class which offers yet another way to substitute values into strings.</p>
<p class="tab">One question remains, of course: how do you convert values to strings? Luckily, Python has ways to convert any value to a string: pass it to the <b>repr()</b> or <b>str()</b> functions.</p>
<p class="tab">The <b>str()</b> function is meant to return representations of values that are fairly human-readable, while <b>repr()</b> is meant to generate representations which can be read by the interpreter (or will force a <b>SyntaxError</b> if there is no equivalent syntax). For objects which don't have a particular representation for human consumption, <b>str()</b> will return the same value as <b>repr()</b>. Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function. Strings, in particular, have two distinct representations.</p>
<p class="tab">Some examples:</p>
<pre class="tab tcy">&gt;&gt;&gt; s = 'Hello, world.'
&gt;&gt;&gt; str(s)
'Hello, world.'
&gt;&gt;&gt; repr(s)
"'Hello, world.'"
&gt;&gt;&gt; str(1/7)
'0.14285714285714285'
&gt;&gt;&gt; x = 10 * 3.25
&gt;&gt;&gt; y = 200 * 200
&gt;&gt;&gt; s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'
&gt;&gt;&gt; print(s)
The value of x is 32.5, and y is 40000...
&gt;&gt;&gt; # The repr() of a string adds string quotes and backslashes:
... hello = 'hello, world\n'
&gt;&gt;&gt; hellos = repr(hello)
&gt;&gt;&gt; print(hellos)
'hello, world\n'
&gt;&gt;&gt; # The argument to repr() may be any Python object:
... repr((x, y, ('spam', 'eggs')))
"(32.5, 40000, ('spam', 'eggs'))"
</pre>
<p class="tab">Here are two ways to write a table of squares and cubes:</p>
<pre class="tab tcy">&gt;&gt;&gt; for x in range(1, 11):
...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
...     # Note use of 'end' on previous line
...     print(repr(x*x*x).rjust(4))
...
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
&gt;&gt;&gt; for x in range(1, 11):
...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
...
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000</pre>
<p class="tab">(Note that in the first example, one space between each column was added by the way <b>print()</b> works: it always adds spaces between its arguments.)</p>
<p class="tab">This example demonstrates the <b>str.rjust()</b> method of string objects, which right-justifies a string in a field of a given width by padding it with spaces on the left. There are similar methods <b>str.ljust()</b> and <b>str.center()</b>. These methods do not write anything, they only return a new string. If the input string is too long, they don't truncate it, but return it unchanged; this will mess up your column layout but that's usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as in <b>x.ljust(n)[:n]</b>.)</p>
<p class="tab">There is another method, <b>str.zfill()</b>, which pads a numeric string on the left with zeros. It understands about plus and minus signs:</p>
<pre class="tab tcy">&gt;&gt;&gt; '12'.zfill(5)
'00012'
&gt;&gt;&gt; '-3.14'.zfill(7)
'-003.14'
&gt;&gt;&gt; '3.14159265359'.zfill(5)
'3.14159265359'</pre>
<p class="tab">Basic usage of the <b>str.format()</b> method looks like this:</p>
<pre class="tab tcy">&gt;&gt;&gt; print('We are the {} who say "{}!"'.format('knights', 'Ni'))
We are the knights who say "Ni!"
</pre>
<p class="tab">The brackets and characters within them (called format fields) are replaced with the objects passed into the <b>str.format()</b> method. A number in the brackets can be used to refer to the position of the object passed into the <b>str.format()</b> method.</p>
<pre class="tab tcy">&gt;&gt;&gt; print('{0} and {1}'.format('spam', 'eggs'))
spam and eggs
&gt;&gt;&gt; print('{1} and {0}'.format('spam', 'eggs'))
eggs and spam</pre>
<p class="tab">If keyword arguments are used in the <b>str.format()</b> method, their values are referred to using the name of the argument.</p>
<pre class="tab tcy">&gt;&gt;&gt; print('This {food} is {adjective}.'.format(
...       food='spam', adjective='absolutely horrible'))
This spam is absolutely horrible.</pre>
<p class="tab">Positional and keyword arguments can be arbitrarily combined:</p>
<pre class="tab tcy">&gt;&gt;&gt; print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
                                                       other='Georg'))
The story of Bill, Manfred, and Georg.</pre>
<p class="tab"><b>'!a'</b> (apply <b>ascii()</b>), <b>'!s'</b> (apply <b>str()</b>) and <b>'!r'</b> (apply <b>repr()</b>) can be used to convert the value before it is formatted:</p>
<pre class="tab tcy">&gt;&gt;&gt; import math
&gt;&gt;&gt; print('The value of PI is approximately {}.'.format(math.pi))
The value of PI is approximately 3.14159265359.
&gt;&gt;&gt; print('The value of PI is approximately {!r}.'.format(math.pi))
The value of PI is approximately 3.141592653589793.</pre>
<p class="tab">An optional <b>':'</b> and format specifier can follow the field name. This allows greater control over how the value is formatted. The following example rounds Pi to three places after the decimal.</p>
<pre class="tab tcy">&gt;&gt;&gt; import math
&gt;&gt;&gt; print('The value of PI is approximately {0:.3f}.'.format(math.pi))
The value of PI is approximately 3.142.</pre>
<p class="tab">Passing an integer after the <b>':'</b> will cause that field to be a minimum number of characters wide. This is useful for making tables pretty.</p>
<pre class="tab tcy">&gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
&gt;&gt;&gt; for name, phone in table.items():
...     print('{0:10} ==&gt; {1:10d}'.format(name, phone))
...
Jack       ==&gt;       4098
Dcab       ==&gt;       7678
Sjoerd     ==&gt;       4127
</pre>
<p class="tab">If you have a really long format string that you don't want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. This can be done by passing the dict and using square brackets '<b>[]</b>' to access the keys</p>
<pre class="tab tcy">&gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
&gt;&gt;&gt; print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
...       'Dcab: {0[Dcab]:d}'.format(table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678</pre>
<p class="tab">This could also be done by passing the table as keyword arguments with the &lsquo;<b>**</b>' notation.</p>
<pre class="tab tcy">&gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
&gt;&gt;&gt; print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678</pre>
<p class="tab">This is particularly useful in combination with the built-in function <b>vars()</b>, which returns a dictionary containing all local variables.</p>
<h2 id="Old-String-Formatting">Old string formatting</h2>
<p class="tab">The <b>%</b> operator can also be used for string formatting. It interprets the left argument much like a <b>sprintf()</b>-style format string to be applied to the right argument, and returns the string resulting from this formatting operation. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; import math
&gt;&gt;&gt; print('The value of PI is approximately %5.3f.' % math.pi)
The value of PI is approximately 3.142.
</pre>
<p class="tab">More information is found in the <a href="/unix/pylibbi.htm#Printf-Style-String-Formatting">printf-style String Formatting</a> section.</p>
<h2 id="Reading-And-Writing-Files">Reading and writing files</h2>
<p class="tab"><b>open()</b> returns a file object, and is most commonly used with two arguments: <b>open(filename, mode)</b>.</p>
<pre class="tab tcy">&gt;&gt;&gt; f = open('workfile', 'w')
</pre>
<p class="tab">The first argument is a string containing the filename. The second argument is another string containing a few characters describing the way in which the file will be used. The mode can be '<b>r</b>' when the file will only be read, '<b>w</b>' for only writing (an existing file with the same name will be erased), and '<b>a</b>' opens the file for appending; any data written to the file is automatically added to the end. '<b>r+</b>' opens the file for both reading and writing. The mode argument is optional; '<b>r</b>' will be assumed if it's omitted.</p>
<p class="tab">Normally, files are opened in text mode, that means, you read and write strings from and to the file, which are encoded in a specific encoding (the default being UTF-8). '<b>b</b>' appended to the mode opens the file in binary mode: now the data is read and written in the form of bytes objects. This mode should be used for all files that don't contain text.</p>
<p class="tab">In text mode, the default when reading is to convert platform-specific line endings (<b>\n</b> on Unix, <b>\r\n</b> on Windows) to <b>\n</b>. When writing in text mode, the default is to convert occurrences of <b>\n</b> back to platform-specific line endings. This behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in JPEG or EXE files. Be very careful to use binary mode when reading and writing such files.</p>
<h2 id="Methods-Of-File-Objects">Methods of file objects</h2>
<p class="tab">The rest of the examples in this section will assume that a file object called <b>f</b> has already been created.</p>
<p class="tab">To read a file's contents, call <b>f.read(size)</b>, which reads some quantity of data and returns it as a string or bytes object. <b>size</b> is an optional numeric argument. When <b>size</b> is omitted or negative, the entire contents of the file will be read and returned; it's your problem if the file is twice as large as your machine's memory. Otherwise, at most <b>size</b> bytes are read and returned. If the end of the file has been reached, <b>f.read()</b> will return an empty string (<b>''</b>).</p>
<pre class="tab tcy">&gt;&gt;&gt; f.read()
'This is the entire file.\n'
&gt;&gt;&gt; f.read()
''</pre>
<p class="tab"><b>f.readline()</b> reads a single line from the file; a newline character (<b>\n</b>) is left at the end of the string, and is only omitted on the last line of the file if the file doesn't end in a newline. This makes the return value unambiguous; if <b>f.readline()</b> returns an empty string, the end of the file has been reached, while a blank line is represented by '<b>\n</b>', a string containing only a single newline.</p>
<pre class="tab tcy">&gt;&gt;&gt; f.readline()
'This is the first line of the file.\n'
&gt;&gt;&gt; f.readline()
'Second line of the file\n'
&gt;&gt;&gt; f.readline()
''</pre>
<p class="tab">For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code:</p>
<pre class="tab tcy">&gt;&gt;&gt; for line in f:
...     print(line, end='')
...
This is the first line of the file.
Second line of the file</pre>
<p class="tab">If you want to read all the lines of a file in a list you can also use <b>list(f)</b> or <b>f.readlines()</b>.</p>
<p class="tab"><b>f.write(string)</b> writes the contents of string to the file, returning the number of characters written.</p>
<pre class="tab tcy">&gt;&gt;&gt; f.write('This is a test\n')
15</pre>
<p class="tab">To write something other than a string, it needs to be converted to a string first:</p>
<pre class="tab tcy">&gt;&gt;&gt; value = ('the answer', 42)
&gt;&gt;&gt; s = str(value)
&gt;&gt;&gt; f.write(s)
18</pre>
<p class="tab"><b>f.tell()</b> returns an integer giving the file object's current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode.</p>
<p class="tab">To change the file object's position, use <b>f.seek(offset, from_what)</b>. The position is computed from adding offset to a reference point; the reference point is selected by the <b>from_what</b> argument. A <b>from_what</b> value of <b>0</b> measures from the beginning of the file, <b>1</b> uses the current file position, and <b>2</b> uses the end of the file as the reference point. <b>from_what</b> can be omitted and defaults to <b>0</b>, using the beginning of the file as the reference point.</p>
<pre class="tab tcy">&gt;&gt;&gt; f = open('workfile', 'rb+')
&gt;&gt;&gt; f.write(b'0123456789abcdef')
16
&gt;&gt;&gt; f.seek(5)     # Go to the 6th byte in the file
5
&gt;&gt;&gt; f.read(1)
b'5'
&gt;&gt;&gt; f.seek(-3, 2) # Go to the 3rd byte before the end
13
&gt;&gt;&gt; f.read(1)
b'd'</pre>
<p class="tab">In text files (those opened without <b>a b</b> in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with <b>seek(0, 2)</b>) and the only valid offset values are those returned from the <b>f.tell()</b>, or zero. Any other offset value produces undefined behaviour.</p>
<p class="tab">When you're done with a file, call <b>f.close()</b> to close it and free up any system resources taken up by the open file. After calling <b>f.close()</b>, attempts to use the file object will automatically fail.</p>
<pre class="tab tcy">&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f.read()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
ValueError: I/O operation on closed file</pre>
<p class="tab" id="With-Open">It is good practice to use the with keyword when dealing with file objects. This has the advantage that the file is properly closed after its suite finishes, even if an exception is raised on the way. It is also much shorter than writing equivalent <b>try-finally</b> blocks:</p>
<pre class="tab tcy">&gt;&gt;&gt; with open('workfile', 'r') as f:
...     read_data = f.read()
&gt;&gt;&gt; f.closed
True</pre>
<p class="tab">File objects have some additional methods, such as <b>isatty()</b> and <b>truncate()</b> which are less frequently used.</p>
<h2 id="Saving-Structured-Data-With-Json">Saving structured data with json</h2>
<p class="tab">Strings can easily be written to and read from a file. Numbers take a bit more effort, since the <b>read()</b> method only returns strings, which will have to be passed to a function like <b>int()</b>, which takes a string like '<b>123</b>' and returns its numeric value <b>123</b>. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.</p>
<p class="tab">Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called <a href="/jargon/j/json.htm">JSON</a> (JavaScript Object Notation). The standard module called <b>json</b> can take Python data hierarchies, and convert them to string representations; this process is called serializing. Reconstructing the data from the string representation is called deserializing. Between serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.</p>
<div class="tip" role="note">
<span class="title note">Note</span>
<p>The JSON format is commonly used by modern applications to allow for data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability.</p>
</div>
<p class="tab">If you have an object <b>x</b>, you can view its JSON string representation with a simple line of code:</p>
<pre class="tab tcy">&gt;&gt;&gt; json.dumps([1, 'simple', 'list'])
'[1, "simple", "list"]'
</pre>
<p class="tab">Another variant of the <b>dumps()</b> function, called <b>dump()</b>, serializes the object to a text file. So if <b>f</b> is a text file object opened for writing, we can do this:</p>
<pre class="tab tcy">json.dump(x, f)
</pre>
<p class="tab">To decode the object again, if <b>f</b> is a text file object which has been opened for reading:</p>
<pre class="tab tcy">x = json.load(f)
</pre>
<p class="tab">This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort. The reference for the json module contains an explanation of this.</p>
<h2 id="Errors-And-Exceptions">Errors and exceptions</h2>
<p class="tab">Until now error messages haven't been more than mentioned, but if you tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.</p>
<h2 id="Syntax-Errors">Syntax errors</h2>
<p class="tab">Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:</p>
<pre class="tab tcy">&gt;&gt;&gt; while True print('Hello world')
  File "&lt;stdin&gt;", line 1, in ?
    while True print('Hello world')
                   ^
SyntaxError: invalid syntax</pre>
<p class="tab">The parser repeats the offending line and displays a little 'arrow' pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) the token preceding the arrow: in the example, the error is detected at the function <b>print()</b>, since a colon ('<b>:</b>') is missing before it. File name and line number are printed so you know where to look in case the input came from a script.</p>
<h2 id="Exceptions">Exceptions</h2>
<p class="tab">Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:</p>
<pre class="tab tcy">&gt;&gt;&gt; 10 * (1/0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
ZeroDivisionError: division by zero
&gt;&gt;&gt; 4 + spam*3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: name 'spam' is not defined
&gt;&gt;&gt; '2' + 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: Can't convert 'int' object to str implicitly</pre>
<p class="tab">The last line of the error message indicates what happened. Exceptions come in different types, and the type is printed as part of the message: the types in the example are <b>ZeroDivisionError</b>, <b>NameError</b> and <b>TypeError</b>. The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). Standard exception names are built-in identifiers (not reserved keywords).</p>
<p class="tab">The rest of the line provides detail based on the type of exception and what caused it.</p>
<p class="tab">The preceding part of the error message shows the context where the exception happened, in the form of a stack traceback. In general, it contains a stack traceback listing source lines; however, it will not display lines read from standard input.</p>
<p class="tab"><a href="/unix/pylibbi.htm#Built-In-Exceptions">Built-in Exceptions</a> lists the built-in exceptions and their meanings.</p>
<p class="tab" id="Try-Except">It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using <b>Control-C</b> or whatever the operating system supports); note that a user-generated interruption is signalled by raising the KeyboardInterrupt exception.</p>
<pre class="tab tcy">&gt;&gt;&gt; while True:
...     try:
...         x = int(input("Please enter a number: "))
...         break
...     except ValueError:
...         print("Oops!  That was no valid number.  Try again...")
...</pre>
<p class="tab">The <b>try</b> statement works as follows.</p>
<ul>
<li>First, the <b>try</b> clause (the statement(s) between the <b>try</b> and <b>except</b> keywords) is executed.</li>
<li>If no exception occurs, the <b>except</b> clause is skipped and execution of the <b>try</b> statement is finished.</li>
<li>If an exception occurs during execution of the <b>try</b> clause, the rest of the clause is skipped. Then if its type matches the exception named after the <b>except</b> keyword, the except clause is executed, and then execution continues after the <b>try</b> statement.</li>
<li>If an exception occurs which does not match the exception named in the <b>except</b> clause, it is passed on to outer <b>try</b> statements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above.</li>
</ul>
<p class="tab">A <b>try</b> statement may have more than one except clause, to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding <b>try</b> clause, not in other handlers of the same <b>try</b> statement. An except clause may name multiple exceptions as a parenthesized tuple, for example:</p>
<pre class="tab tcy">... except (RuntimeError, TypeError, NameError):
...     pass</pre>
<p class="tab">The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way! It can also be used to print an error message and then re-raise the exception (allowing a caller to handle the exception as well):</p>
<pre class="tab tcy">import sys
try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("OS error: {0}".format(err))
except ValueError:
    print("Could not convert data to an integer.")
except:
    print("Unexpected error:", sys.exc_info()[0])
    raise</pre>
<p class="tab">The <b>try</b> ... <b>except</b> statement has an optional <b>else</b> clause, which, when present, must follow all <b>except</b> clauses. It is useful for code that must be executed if the <b>try</b> clause does not raise an exception. For example:</p>
<pre class="tab tcy">for arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except IOError:
        print('cannot open', arg)
    else:
        print(arg, 'has', len(f.readlines()), 'lines')
        f.close()</pre>
<p class="tab">The use of the <b>else</b> clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn't raised by the code being protected by the <b>try</b> ... <b>except</b> statement.</p>
<p class="tab">When an exception occurs, it may have an associated value, also known as the exception's argument. The presence and type of the argument depend on the exception type.</p>
<p class="tab">The <b>except</b> clause may specify a variable after the exception name. The variable is bound to an exception instance with the arguments stored in <b>instance.args</b>. For convenience, the exception instance defines <b>__str__()</b> so the arguments can be printed directly without having to reference <b>.args</b>. One may also instantiate an exception first before raising it and add any attributes to it as desired.</p>
<pre class="tab tcy">&gt;&gt;&gt; try:
...    raise Exception('spam', 'eggs')
... except Exception as inst:
...    print(type(inst))    # the exception instance
...    print(inst.args)     # arguments stored in .args
...    print(inst)          # __str__ allows args to be printed directly,
...                         # but may be overridden in exception subclasses
...    x, y = inst.args     # unpack args
...    print('x =', x)
...    print('y =', y)
...
&lt;class 'Exception'&gt;
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs</pre>
<p class="tab">If an exception has arguments, they are printed as the last part ('detail') of the message for unhandled exceptions.</p>
<p class="tab">Exception handlers don't only handle exceptions if they occur immediately in the <b>try</b> clause, but also if they occur inside functions that are called (even indirectly) in the <b>try</b> clause. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; def this_fails():
...     x = 1/0
...
&gt;&gt;&gt; try:
...     this_fails()
... except ZeroDivisionError as err:
...     print('Handling run-time error:', err)
...
Handling run-time error: int division or modulo by zero</pre>
<h2 id="Raising-Exceptions">Raising exceptions</h2>
<p class="tab">The <b>raise</b> statement allows the programmer to force a specified exception to occur. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; raise NameError('HiThere')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: HiThere</pre>
<p class="tab">The sole argument to raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from <b>Exception</b>).</p>
<p class="tab">If you need to determine whether an exception was raised but don't intend to handle it, a simpler form of the raise statement allows you to re-raise the exception:</p>
<pre class="tab tcy">&gt;&gt;&gt; try:
...     raise NameError('HiThere')
... except NameError:
...     print('An exception flew by!')
...     raise
...
An exception flew by!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ?
NameError: HiThere</pre>
<h2 id="User-Defined-Exceptions">User-defined Exceptions</h2>
<p class="tab">Programs may name their own exceptions by creating a new exception class (see <a href="#Classes">Classes</a> for more about Python classes). Exceptions should typically be derived from the <b>Exception</b> class, either directly or indirectly. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; class MyError(Exception):
...     def __init__(self, value):
...         self.value = value
...     def __str__(self):
...         return repr(self.value)
...
&gt;&gt;&gt; try:
...     raise MyError(2*2)
... except MyError as e:
...     print('My exception occurred, value:', e.value)
...
My exception occurred, value: 4
&gt;&gt;&gt; raise MyError('oops!')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
__main__.MyError: 'oops!'</pre>
<p class="tab">In this example, the default <b>__init__()</b> of <b>Exception</b> has been overridden. The new behavior creates the <i>value</i> attribute. This replaces the default behavior of creating the <i>args</i> attribute.</p>
<p class="tab">Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception. When creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions defined by that module, and subclass that to create specific exception classes for different error conditions:</p>
<pre class="tab tcy">class Error(Exception):
    """Base class for exceptions in this module."""
    pass
class InputError(Error):
    """Exception raised for errors in the input.
    Attributes:
        expression -- input expression in which the error occurred
        message -- explanation of the error
    """
    def __init__(self, expression, message):
        self.expression = expression
        self.message = message
class TransitionError(Error):
    """Raised when an operation attempts a state transition that's not
    allowed.
    Attributes:
        previous -- state at beginning of transition
        next -- attempted new state
        message -- explanation of why the specific transition is not allowed
    """
    def __init__(self, previous, next, message):
        self.previous = previous
        self.next = next
        self.message = message</pre>
<p class="tab">Most exceptions are defined with names that end in "Error," similar to the naming of the standard exceptions.</p>
<p class="tab">Many standard modules define their own exceptions to report errors that may occur in functions they define. More information on classes is presented in chapter <a href="#Classes">Classes</a>.</p>
<h2 id="Defining-Clean-Up-Actions">Defining clean-up actions</h2>
<p class="tab">The <b>try</b> statement has another optional clause that is intended to define clean-up actions that must be executed under all circumstances. For example:</p>
<pre class="tab tcy">&gt;&gt;&gt; try:
...     raise KeyboardInterrupt
... finally:
...     print('Goodbye, world!')
...
Goodbye, world!
KeyboardInterrupt</pre>
<p class="tab">A <b>finally</b> clause is always executed before leaving the <b>try</b> statement, whether an exception has occurred or not. When an exception has occurred in the <b>try</b> clause and has not been handled by an <b>except</b> clause (or it has occurred in a <b>except</b> or <b>else</b> clause), it is re-raised after the <b>finally</b> clause has been executed. The <b>finally</b> clause is also executed "on the way out" when any other clause of the <b>try</b> statement is left via a <b>break</b>, <b>continue</b> or <b>return</b> statement. A more complicated example:</p>
<pre class="tab tcy">&gt;&gt;&gt; def divide(x, y):
...     try:
...         result = x / y
...     except ZeroDivisionError:
...         print("division by zero!")
...     else:
...         print("result is", result)
...     finally:
...         print("executing finally clause")
...
&gt;&gt;&gt; divide(2, 1)
result is 2.0
executing finally clause
&gt;&gt;&gt; divide(2, 0)
division by zero!
executing finally clause
&gt;&gt;&gt; divide("2", "1")
executing finally clause
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
  File "&lt;stdin&gt;", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'</pre>
<p class="tab">As you can see, the finally clause is executed in any event. The TypeError raised by dividing two strings is not handled by the except clause and therefore re-raised after the finally clause has been executed.</p>
<p class="tab">In real world applications, the finally clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.</p>
<h2 id="Predefined-Clean-Up-Actions">Predefined clean-up actions</h2>
<p class="tab">Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen.</p>
<pre class="tab tcy">for line in open("myfile.txt"):
    print(line, end="")
</pre>
<p class="tab">The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The <b>with</b> statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly.</p>
<pre class="tab tcy">with open("myfile.txt") as f:
    for line in f:
        print(line, end="")
</pre>
<p class="tab">After the statement is executed, the file <b>f</b> is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation.</p>
<h2 id="Classes">Classes</h2>
<p class="tab">Compared with other programming languages, Python's class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Objects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.</p>
<p class="tab">In C++ terminology, normally class members (including the data members) are public (except see below <a href="#Private-Variables">Private variables</a>), and all member functions are virtual. As in Modula-3, there are no shorthands for referencing the object's members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. As in Smalltalk, classes themselves are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.</p>
<p class="tab">(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms. I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)</p>
<h2 id="A-Word-About-Names-And-Objects">A word about names and objects</h2>
<p class="tab">Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object. This is known as aliasing in other languages. This is usually not appreciated on a first glance at Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples). However, aliasing has a possibly surprising effect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types. This is usually used to the benefit of the program, since aliases behave like pointers in some respects. For example, passing an object is cheap since only a pointer is passed by the implementation; and if a function modifies an object passed as an argument, the caller will see the change &mdash; this eliminates the need for two different argument passing mechanisms as in Pascal.</p>
<h2 id="Python-Scopes-And-Namespaces">Python scopes and namespaces</h2>
<p class="tab">Before introducing classes, I first have to tell you something about Python's scope rules. Class definitions play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what's going on. Incidentally, knowledge about this subject is useful for any advanced Python programmer.</p>
<p class="tab">Let's begin with some definitions.</p>
<p class="tab">A namespace is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries, but that's normally not noticeable in any way (except for performance), and it may change in the future. Examples of namespaces are: the set of built-in names (containing functions such as <b>abs()</b>, and built-in exception names); the global names in a module; and the local names in a function invocation. In a sense the set of attributes of an object also form a namespace. The important thing to know about namespaces is that there is absolutely no relation between names in different namespaces; for instance, two different modules may both define a function <b>maximize</b> without confusion &mdash; users of the modules must prefix it with the module name.</p>
<p class="tab">We use the word "attribute" for any name following a dot &mdash; for example, in the expression <b>z.real</b>, <b>real</b> is an attribute of the object <b>z</b>. Strictly speaking, references to names in modules are attribute references: in the expression <b>modname.funcname</b>, <b>modname</b> is a module object and <b>funcname</b> is an attribute of it. In this case, there happens to be a straightforward mapping between the module's attributes and the global names defined in the module: they share the same namespace!</p>
<p class="tab">Attributes may be read-only or writable. In the latter case, assignment to attributes is possible. Module attributes are writable: you can write <b>modname.the_answer = 42</b>. Writable attributes may also be deleted with the <b>del</b> statement. For example, <b>del modname.the_answer</b> will remove the attribute <b>the_answer</b> from the object named by <b>modname</b>.</p>
<p class="tab">Namespaces are created at different moments and have different lifetimes. The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted. The global namespace for a module is created when the module definition is read in; normally, module namespaces also last until the interpreter quits. The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively, are considered part of a module called <b>__main__</b>, so they have their own global namespace. (The built-in names actually also live in a module; this is called <b>builtins</b>.)</p>
<p class="tab">The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function. (Actually, forgetting would be a better way to describe what actually happens.) Of course, recursive invocations each have their own local namespace.</p>
<p class="tab">A "scope" is a textual region of a Python program where a namespace is directly accessible. "Directly accessible" here means that an unqualified reference to a name attempts to find the name in the namespace.</p>
<p class="tab">Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:</p>
<ul>
<li>the innermost scope, which is searched first, contains the local names</li>
<li>the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names</li>
<li>the next-to-last scope contains the current module's global names</li>
<li>the outermost scope (searched last) is the namespace containing built-in names</li>
</ul>
<p class="tab">If a name is declared global, then all references and assignments go directly to the middle scope containing the module's global names. To rebind variables found outside of the innermost scope, the <b>nonlocal</b> statement can be used; if not declared nonlocal, those variable are read-only (an attempt to write to such a variable creates a new local variable in the innermost scope, leaving the identically named outer variable unchanged).</p>
<p class="tab">Usually, the local scope references the local names of the (textually) current function. Outside functions, the local scope references the same namespace as the global scope: the module's namespace. Class definitions place yet another namespace in the local scope.</p>
<p class="tab">It is important to realize that scopes are determined textually: the <b>global</b> scope of a function defined in a module is that module's namespace, no matter from where or by what alias the function is called. On the other hand, the actual search for names is done dynamically, at run time &mdash; however, the language definition is evolving towards static name resolution, at "compile" time, so don't rely on dynamic name resolution! (In fact, local variables are already determined statically.)</p>
<p class="tab">A special quirk of Python is that &ndash; if no global statement is in effect &ndash; assignments to names always go into the innermost scope. Assignments do not copy data &mdash; they bind names to objects. The same is true for deletions: the statement <b>del x</b> removes the binding of <b>x</b> from the namespace referenced by the local scope. In fact, all operations that introduce new names use the local scope: in particular, <b>import</b> statements and function definitions bind the module or function name in the local scope.</p>
<p class="tab">The global statement can be used to indicate that particular variables live in the global scope and should be rebound there; the <b>nonlocal</b> statement indicates that particular variables live in an enclosing scope and should be rebound there.</p>
<h2 id="Scopes-And-Namespaces-Example">Scopes and namespaces example</h2>
<p class="tab">This is an example demonstrating how to reference the different scopes and namespaces, and how global and nonlocal affect variable binding:</p>
<pre class="tab tcy">def scope_test():
    def do_local():
        spam = "local spam"
    def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"
    def do_global():
        global spam
        spam = "global spam"
    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)
scope_test()
print("In global scope:", spam)
</pre>
<p class="tab">The output of the example code is:</p>
<pre class="tab tcy">After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: nonlocal spam
In global scope: global spam</pre>
<p class="tab">Note how the local assignment (which is default) didn't change <b>scope_test</b>&lsquo;s binding of spam. The nonlocal assignment changed <b>scope_test</b>&lsquo;s binding of <b>spam</b>, and the global assignment changed the module-level binding.</p>
<p class="tab">You can also see that there was no previous binding for spam before the global assignment.</p>
<h2 id="A-First-Look-At-Classes">A first look at classes</h2>
<p class="tab">Classes introduce a little bit of new syntax, three new object types, and some new semantics.</p>
<h2>Class definition syntax</h2>
<p class="tab">The simplest form of class definition looks like this:</p>
<pre class="tab tcy">class ClassName:
    &lt;statement-1&gt;
    .
    .
    .
    &lt;statement-N&gt;
</pre>
<p class="tab">Class definitions, like function definitions (<b>def</b> statements) must be executed before they have any effect. (You could conceivably place a class definition in a branch of an <b>if</b> statement, or inside a function.)</p>
<p class="tab">In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful &mdash; we'll come back to this later. The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods &mdash; again, this is explained later.</p>
<p class="tab">When a class definition is entered, a new namespace is created, and used as the local scope &mdash; thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here.</p>
<p class="tab">When a class definition is left normally (via the end), a class object is created. This is basically a wrapper around the contents of the namespace created by the class definition; we'll learn more about class objects in the next section. The original local scope (the one in effect before the class definition was entered) is reinstated, and the class object is bound here to the class name given in the class definition header (<b>ClassName</b> in the example).</p>
<h2>Class objects</h2>
<p class="tab">Class objects support two kinds of operations: attribute references and instantiation.</p>
<p class="tab">Attribute references use the standard syntax used for all attribute references in Python: <b>obj.name</b>. Valid attribute names are all the names that were in the class's namespace when the class object was created. So, if the class definition looked like this:</p>
<pre class="tab tcy">class MyClass:
    """A simple example class"""
    i = 12345
    def f(self):
        return 'hello world'</pre>
<p class="tab">then <b>MyClass.i</b> and <b>MyClass.f</b> are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of <b>MyClass.i</b> by assignment. <b>__doc__</b> is also a valid attribute, returning the docstring belonging to the class: "A simple example class".</p>
<p class="tab">Class instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class):</p>
<pre class="tab tcy">x = MyClass()
</pre>
<p class="tab">creates a new instance of the class and assigns this object to the local variable <b>x</b>.</p>
<p class="tab">The instantiation operation ("calling" a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named <b>__init__()</b>, like this:</p>
<pre class="tab tcy">def __init__(self):
    self.data = []</pre>
<p class="tab">Of course, the <b>__init__()</b> method may have arguments for greater flexibility. In that case, arguments given to the class instantiation operator are passed on to <b>__init__()</b>. For example,</p>
<pre class="tab tcy">&gt;&gt;&gt; class Complex:
...     def __init__(self, realpart, imagpart):
...         self.r = realpart
...         self.i = imagpart
...
&gt;&gt;&gt; x = Complex(3.0, -4.5)
&gt;&gt;&gt; x.r, x.i
(3.0, -4.5)</pre>
<h2 id="Instance-Objects">Instance objects</h2>
<p class="tab">Now what can we do with instance objects? The only operations understood by instance objects are attribute references. There are two kinds of valid attribute names, data attributes and methods.</p>
<p class="tab">data attributes correspond to "instance variables" in Smalltalk, and to "data members" in C++. Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to. For example, if <b>x</b> is the instance of <b>MyClass</b> created above, the following piece of code will print the value <b>16</b>, without leaving a trace:</p>
<pre class="tab tcy">x.counter = 1
while x.counter &lt; 10:
    x.counter = x.counter * 2
print(x.counter)
del x.counter</pre>
<p class="tab">The other kind of instance attribute reference is a method. A method is a function that "belongs to" an object. (In Python, the term <b>method</b> is not unique to class instances: other object types can have methods as well. For example, list objects have methods called <b>append</b>, <b>insert</b>, <b>remove</b>, <b>sort</b>, and so on. However, in the following discussion, we'll use the term <b>method</b> exclusively to mean methods of class instance objects, unless explicitly stated otherwise.) Valid method names of an instance object depend on its class. By definition, all attributes of a class that are function objects define corresponding methods of its instances. So in our example, <b>x.f</b> is a valid method reference, since <b>MyClass.f</b> is a function, but <b>x.i</b> is not, since <b>MyClass.i</b> is not. But <b>x.f</b> is not the same thing as <b>MyClass.f</b> &mdash; it is a method object, not a function object.</p>
<h2 id="Method-Objects">Method objects</h2>
<p class="tab">Usually, a method is called right after it is bound:</p>
<pre class="tab tcy">x.f()
</pre>
<p class="tab">In the <b>MyClass</b> example, this will return the string <b>'hello world'</b>. However, it is not necessary to call a method right away: <b>x.f</b> is a method object, and can be stored away and called at a later time. For example:</p>
<pre class="tab tcy">xf = x.f
while True:
    print(xf())</pre>
<p class="tab">will continue to print <b>hello world</b> until the end of time. What exactly happens when a method is called? You may have noticed that <b>x.f()</b> was called without an argument above, even though the function definition for <b>f()</b> specified an argument. What happened to the argument? Surely Python raises an exception when a function that requires an argument is called without any &mdash; even if the argument isn't actually used...</p>
<p class="tab">Actually, you may have guessed the answer: the special thing about methods is that the object is passed as the first argument of the function. In our example, the call <b>x.f()</b> is exactly equivalent to <b>MyClass.f(x)</b>. In general, calling a method with a list of <b>n</b> arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method's object before the first argument.</p>
<p class="tab">If you still don't understand how methods work, a look at the implementation can perhaps clarify matters. When an instance attribute is referenced that isn't a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p>
<h2 id="Random-Remarks">Additional notes about data attributes</h2>
<p class="tab">Data attributes override method attributes with the same name; to avoid accidental name conflicts, which may cause hard-to-find bugs in large programs, it is wise to use some kind of convention that minimizes the chance of conflicts. Possible conventions include capitalizing method names, prefixing data attribute names with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data attributes.</p>
<p class="tab">Data attributes may be referenced by methods as well as by ordinary users ("clients") of an object. In other words, classes are not usable to implement pure abstract data types. In fact, nothing in Python makes it possible to enforce data hiding &mdash; it is all based upon convention. (On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary; this can be used by extensions to Python written in C.)</p>
<p class="tab">Clients should use data attributes with care &mdash; clients may mess up invariants maintained by the methods by stamping on their data attributes. Note that clients may add data attributes of their own to an instance object without affecting the validity of the methods, as long as name conflicts are avoided &mdash; again, a naming convention can save a lot of headaches here.</p>
<p class="tab">There is no shorthand for referencing data attributes (or other methods!) from within methods. I find that this actually increases the readability of methods: there is no chance of confusing local variables and instance variables when glancing through a method.</p>
<p class="tab">Often, the first argument of a method is called <b>self</b>. This is nothing more than a convention: the name <b>self</b> has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.</p>
<p class="tab">Any function object that is a class attribute defines a method for instances of that class. It is not necessary that the function definition is textually enclosed in the class definition: assigning a function object to a local variable in the class is also ok. For example:</p>
<pre class="tab tcy"># Function defined outside the class
def f1(self, x, y):
    return min(x, x+y)
class C:
    f = f1
    def g(self):
        return 'hello world'
    h = g</pre>
<p class="tab">Now <b>f</b>, <b>g</b> and <b>h</b> are all attributes of class C that refer to function objects, and consequently they are all methods of instances of C &mdash; <b>h</b> being exactly equivalent to <b>g</b>. Note that this practice usually only serves to confuse the reader of a program.</p>
<p class="tab">Methods may call other methods using method attributes of the <b>self</b> argument:</p>
<pre class="tab tcy">class Bag:
    def __init__(self):
        self.data = []
    def add(self, x):
        self.data.append(x)
    def addtwice(self, x):
        self.add(x)
        self.add(x)</pre>
<p class="tab">Methods may reference global names in the same way as ordinary functions. The global scope associated with a method is the module containing its definition. (A class is never used as a global scope.) While one rarely encounters a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as functions and classes defined in it. Usually, the class containing the method is itself defined in this global scope, and in the next section we find some good reasons why a method would want to reference its own class.</p>
<p class="tab">Each value is an object, and therefore has a class (also called its type). It is stored as <b>object.__class__</b>.</p>
<h2>Inheritance</h2>
<p class="tab">Of course, a language feature would not be worthy of the name "class" without supporting inheritance. The syntax for a derived class definition looks like this:</p>
<pre class="tab tcy">class DerivedClassName(BaseClassName):
    &lt;statement-1&gt;
    .
    .
    .
    &lt;statement-N&gt;
</pre>
<p class="tab">The name <b>BaseClassName</b> must be defined in a scope containing the derived class definition. In place of a base class name, other arbitrary expressions are also allowed. This can be useful, for example, when the base class is defined in another module:</p>
<pre class="tab tcy">class DerivedClassName(modname.BaseClassName):
</pre>
<p class="tab">Execution of a derived class definition proceeds the same as for a base class. When the class object is constructed, the base class is remembered. This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class. This rule is applied recursively if the base class itself is derived from some other class.</p>
<p class="tab">There's nothing special about instantiation of derived classes: <b>DerivedClassName()</b> creates a new instance of the class. Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object.</p>
<p class="tab">Derived classes may override methods of their base classes. Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it. (For C++ programmers: all methods in Python are effectively <b>virtual</b>.)</p>
<p class="tab">An overriding method in a derived class may in fact want to extend rather than replace the base class method of the same name. There is a simple way to call the base class method directly: just call <b>BaseClassName.methodname(self, arguments)</b>. This is occasionally useful to clients as well. (Note that this only works if the base class is accessible as <b>BaseClassName</b> in the global scope.)</p>
<p class="tab">Python has two built-in functions that work with inheritance:</p>
<ul>
<li>Use <b>isinstance()</b> to check an instance's type: <b>isinstance(obj, int)</b> will be True only if <b>obj.__class__</b> is <b>int</b> or some class derived from <b>int</b>.</li>
<li>Use <b>issubclass()</b> to check class inheritance: <b>issubclass(bool, int)</b> is <b>True</b> since <b>bool</b> is a subclass of <b>int</b>. However, <b>issubclass(float, int)</b> is <b>False</b> since <b>float</b> is not a subclass of <b>int</b>.</li>
</ul>
<h2 id="Multiple-Inheritance">Multiple inheritance</h2>
<p class="tab">Python supports a form of multiple inheritance as well. A class definition with multiple base classes looks like this:</p>
<pre class="tab tcy">class DerivedClassName(Base1, Base2, Base3):
    &lt;statement-1&gt;
    .
    .
    .
    &lt;statement-N&gt;
</pre>
<p class="tab">For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy. Thus, if an attribute is not found in <b>DerivedClassName</b>, it is searched for in <b>Base1</b>, then (recursively) in the base classes of <b>Base1</b>, and if it was not found there, it was searched for in <b>Base2</b>, and so on.</p>
<p class="tab">In fact, it is slightly more complex than that; the method resolution order changes dynamically to support cooperative calls to <b>super()</b>. This approach is known in some other multiple-inheritance languages as <b>call-next-method</b> and is more powerful than the <b>super</b> call found in single-inheritance languages.</p>
<p class="tab">Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class). For example, all classes inherit from <b>object</b>, so any case of multiple inheritance provides more than one path to reach <b>object</b>. To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right ordering specified in each class, that calls each parent only once, and that is monotonic (meaning that a class can be subclassed without affecting the precedence order of its parents). Taken together, these properties make it possible to design reliable and extensible classes with multiple inheritance.</p>
<h2 id="Private-Variables">Private variables</h2>
<p class="tab">"Private" instance variables that cannot be accessed except from inside an object don't exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g., <b>_spam</b>) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.</p>
<p class="tab">Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called name mangling. Any identifier of the form <b>__spam</b> (at least two leading underscores, at most one trailing underscore) is textually replaced with <b>_classname__spam</b>, where <b>classname</b> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.</p>
<p class="tab">Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For example:</p>
<pre class="tab tcy">class Mapping:
    def __init__(self, iterable):
        self.items_list = []
        self.__update(iterable)
    def update(self, iterable):
        for item in iterable:
            self.items_list.append(item)
    __update = update   # private copy of original update() method
class MappingSubclass(Mapping):
    def update(self, keys, values):
        # provides new signature for update()
        # but does not break __init__()
        for item in zip(keys, values):
            self.items_list.append(item)</pre>
<p class="tab">Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a variable that is considered private. This can even be useful in special circumstances, such as in the debugger.</p>
<p class="tab">Notice that code passed to <b>exec()</b> or <b>eval()</b> does not consider the classname of the invoking class to be the current class; this is similar to the effect of the <b>global</b> statement, the effect that is likewise restricted to code that is byte-compiled together. The same restriction applies to <b>getattr()</b>, <b>setattr()</b> and <b>delattr()</b>, as well as when referencing <b>__dict__</b> directly.</p>
<h2 id="Odds-And-Ends">Additional notes about data types</h2>
<p class="tab">Sometimes it is useful to have a data type similar to the Pascal "record" or C "struct", bundling together a few named data items. An empty class definition will do nicely:</p>
<pre class="tab tcy">class Employee:
    pass
john = Employee() # Create an empty employee record
# Fill the fields of the record
john.name = 'John Doe'
john.dept = 'computer lab'
john.salary = 1000</pre>
<p class="tab">A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead. For instance, if you have a function that formats some data from a file object, you can define a class with methods <b>read()</b> and <b>readline()</b> that get the data from a string buffer instead, and pass it as an argument.</p>
<p class="tab">Instance method objects have attributes, too: <b>m.__self__</b> is the instance object with the method <b>m()</b>, and <b>m.__func__</b> is the function object corresponding to the method.</p>
<h2 id="Exceptions-Are-Classes-Too">Exceptions are classes too</h2>
<p class="tab">User-defined exceptions are identified by classes as well. Using this mechanism it is possible to create extensible hierarchies of exceptions.</p>
<p class="tab">There are two new valid (semantic) forms for the raise statement:</p>
<pre class="tab tcy">raise Class
raise Instance</pre>
<p class="tab">In the first form, <b>Class</b> must be an instance of <b>type</b> or of a class derived from it. The first form is a shorthand for:</p>
<pre class="tab tcy">raise Class()
</pre>
<p class="tab">A class in an <b>except</b> clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around &mdash; an except clause listing a derived class is not compatible with a base class). For example, the following code will print B, C, D in that order:</p>
<pre class="tab tcy">class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass
for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")
</pre>
<p class="tab">Note that if the <b>except</b> clauses were reversed (with <b>except B</b> first), it would have printed <b>B</b>, <b>B</b>, <b>B</b> &mdash; the first matching <b>except</b> clause is triggered.</p>
<p class="tab">When an error message is printed for an unhandled exception, the exception's class name is printed, then a colon and a space, and finally the instance converted to a string using the built-in function <b>str()</b>.</p>
<h2 id="Iterators">Iterators</h2>
<p class="tab">By now you have probably noticed that most container objects can be looped over using a <b>for</b> statement:</p>
<pre class="tab tcy">for element in [1, 2, 3]:
    print(element)
for element in (1, 2, 3):
    print(element)
for key in {'one':1, 'two':2}:
    print(key)
for char in "123":
    print(char)
for line in open("myfile.txt"):
    print(line)</pre>
<p class="tab">This style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. Behind the scenes, the <b>for</b> statement calls <b>iter()</b> on the container object. The function returns an iterator object that defines the method <b>__next__()</b> which accesses elements in the container one at a time. When there are no more elements, <b>__next__()</b> raises a <b>StopIteration</b> exception which tells the <b>for</b> loop to terminate. You can call the <b>__next__()</b> method using the <b>next()</b> built-in function; this example shows how it all works:</p>
<pre class="tab tcy">&gt;&gt;&gt; s = 'abc'
&gt;&gt;&gt; it = iter(s)
&gt;&gt;&gt; it
&lt;iterator object at 0x00A1DB50&gt;
&gt;&gt;&gt; next(it)
'a'
&gt;&gt;&gt; next(it)
'b'
&gt;&gt;&gt; next(it)
'c'
&gt;&gt;&gt; next(it)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
    next(it)
StopIteration</pre>
<p class="tab">Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes. Define an <b>__iter__()</b> method which returns an object with a <b>__next__()</b> method. If the class defines <b>__next__()</b>, then <b>__iter__()</b> can just return <b>self</b>:</p>
<pre class="tab tcy">class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def __next__(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]</pre>
<pre class="tab tcy">&gt;&gt;&gt; rev = Reverse('spam')
&gt;&gt;&gt; iter(rev)
&lt;__main__.Reverse object at 0x00A1DB50&gt;
&gt;&gt;&gt; for char in rev:
...     print(char)
...
m
a
p
s</pre>
<h2 id="Generators">Generators</h2>
<p class="tab">Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the <b>yield</b> statement whenever they want to return data. Each time <b>next()</b> is called on it, the generator resumes where it left-off (it remembers all the data values and which statement was last executed). An example shows that generators can be trivially easy to create:</p>
<pre class="tab tcy">def reverse(data):
    for index in range(len(data)-1, -1, -1):
        yield data[index]</pre>
<pre class="tab tcy">&gt;&gt;&gt; for char in reverse('golf'):
...     print(char)
...
f
l
o
g</pre>
<p class="tab">Anything that can be done with generators can also be done with class based iterators as described in the previous section. What makes generators so compact is that the <b>__iter__()</b> and <b>__next__()</b> methods are created automatically.</p>
<p class="tab">Another key feature is that the local variables and execution state are automatically saved between calls. This made the function easier to write and much more clear than an approach using instance variables like <b>self.index</b> and <b>self.data</b>.</p>
<p class="tab">In addition to automatic method creation and saving program state, when generators terminate, they automatically raise <b>StopIteration</b>. In combination, these features make it easy to create iterators with no more effort than writing a regular function.</p>
<h2 id="Generator-Expressions">Generator expressions</h2>
<p class="tab">Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of brackets. These expressions are designed for situations where the generator is used right away by an enclosing function. Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions.</p>
<p class="tab">Examples:</p>
<pre class="tab tcy">&gt;&gt;&gt; sum(i*i for i in range(10))                 # sum of squares
285
&gt;&gt;&gt; xvec = [10, 20, 30]
&gt;&gt;&gt; yvec = [7, 5, 3]
&gt;&gt;&gt; sum(x*y for x,y in zip(xvec, yvec))         # dot product
260
&gt;&gt;&gt; from math import pi, sin
&gt;&gt;&gt; sine_table = {x: sin(x*pi/180) for x in range(0, 91)}
&gt;&gt;&gt; unique_words = set(word  for line in page  for word in line.split())
&gt;&gt;&gt; valedictorian = max((student.gpa, student.name) for student in graduates)
&gt;&gt;&gt; data = 'golf'
&gt;&gt;&gt; list(data[i] for i in range(len(data)-1, -1, -1))
['f', 'l', 'o', 'g']</pre>
<h2 id="The-Python-Standard-Library">The Python standard library</h2>
<h2 id="Operating-System-Interface">Operating system interface</h2>
<p class="tab">The <b>os</b> module provides dozens of functions for interacting with the operating system:</p>
<pre class="tab tcy">&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()      # Return the current working directory
'C:\\Python34'
&gt;&gt;&gt; os.chdir('/server/accesslogs')   # Change current working directory
&gt;&gt;&gt; os.system('mkdir today')   # Run the command mkdir in the system shell
0</pre>
<p class="tab">Be sure to use the <b>import os</b> style instead of <b>from os import *</b>. This will keep <b>os.open()</b> from shadowing the built-in <b>open()</b> function which operates much differently.</p>
<p class="tab">The built-in <b>dir()</b> and <b>help()</b> functions are useful as interactive aids for working with large modules like <b>os</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; import os
&gt;&gt;&gt; dir(os)
&lt;returns a list of all module functions&gt;
&gt;&gt;&gt; help(os)
&lt;returns an extensive manual page created from the module's docstrings&gt;
</pre>
<p class="tab">For daily file and directory management tasks, the <b>shutil</b> module provides a higher level interface that is easier to use:</p>
<pre class="tab tcy">&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.copyfile('data.db', 'archive.db')
'archive.db'
&gt;&gt;&gt; shutil.move('/build/executables', 'installdir')
'installdir'</pre>
<h2 id="File-Wildcards">File wildcards</h2>
<p class="tab">The <b>glob</b> module provides a function for making file lists from directory wildcard searches:</p>
<pre class="tab tcy">&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('*.py')
['primes.py', 'random.py', 'quote.py']</pre>
<h2 id="Command-Line-Arguments">Command line arguments</h2>
<p class="tab">Common utility scripts often need to process command line arguments. These arguments are stored in the <b>sys</b> module's <b>argv</b> attribute as a list. For instance the following output results from running <b>python demo.py one two three</b> at the command line:</p>
<pre class="tab tcy">&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.argv)
['demo.py', 'one', 'two', 'three']</pre>
<p class="tab">The <b>getopt</b> module processes <b>sys.argv</b> using the conventions of the Unix getopt() function. More powerful and flexible command line processing is provided by the argparse module.</p>
<h2 id="Error-Output-Redirection-And-Program-Termination">Error output redirection and program termination</h2>
<p class="tab">The <b>sys</b> module also has attributes for stdin, stdout, and stderr. The latter is useful for emitting warnings and error messages to make them visible even when stdout has been redirected:</p>
<pre class="tab tcy">&gt;&gt;&gt; sys.stderr.write('Warning, log file not found starting a new one\n')
Warning, log file not found starting a new one</pre>
<p class="tab">The most direct way to terminate a script is to use <b>sys.exit()</b>.</p>
<h2>String pattern matching</h2>
<p class="tab">The <b>re</b> module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:</p>
<pre class="tab tcy">Import re
&gt;&gt;&gt; re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
['foot', 'fell', 'fastest']
&gt;&gt;&gt; re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
'cat in the hat'</pre>
<p class="tab">When only simple capabilities are needed, string methods are preferred because they are easier to read and debug:</p>
<pre class="tab tcy">&gt;&gt;&gt; 'tea for too'.replace('too', 'two')
'tea for two'</pre>
<h2 id="Mathematics">Mathematics</h2>
<p class="tab">The <b>math</b> module gives access to the underlying C library functions for floating point math:</p>
<pre class="tab tcy">&gt;&gt;&gt; import math
&gt;&gt;&gt; math.cos(math.pi / 4)
0.70710678118654757
&gt;&gt;&gt; math.log(1024, 2)
10.0</pre>
<p class="tab">The <b>random</b> module provides tools for making random selections:</p>
<pre class="tab tcy">&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(['apple', 'pear', 'banana'])
'apple'
&gt;&gt;&gt; random.sample(range(100), 10)   # sampling without replacement
[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
&gt;&gt;&gt; random.random()    # random float
0.17970987693706186
&gt;&gt;&gt; random.randrange(6)    # random integer chosen from range(6)
4</pre>
<p class="tab">(Note that the second example needs a mailserver running on localhost.)</p>
<h2 id="Dates-And-Times">Dates and times</h2>
<p class="tab">The <b>datetime</b> module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation. The module also supports objects that are time zone aware.</p>
<pre class="tab tcy">&gt;&gt;&gt; # dates are easily constructed and formatted
&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; now = date.today()
&gt;&gt;&gt; now
datetime.date(2003, 12, 2)
&gt;&gt;&gt; now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'
&gt;&gt;&gt; # dates support calendar arithmetic
&gt;&gt;&gt; birthday = date(1964, 7, 31)
&gt;&gt;&gt; age = now - birthday
&gt;&gt;&gt; age.days
14368</pre>
<p class="tab">The SciPy project (<a href="https://scipy.org" class="external">https://scipy.org</a>) has other modules for numerical computations.</p>
<h2 id="Internet-Access">Internet access</h2>
<p class="tab">There are a number of modules for accessing the Internet and processing Internet protocols. Two of the simplest are <b>urllib.request</b> for retrieving data from URLs and <b>smtplib</b> for sending mail:</p>
<pre class="tab tcy">&gt;&gt;&gt; from urllib.request import urlopen
&gt;&gt;&gt; for line in urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):
...     line = line.decode('utf-8')  # Decoding the binary data to text.
...     if 'EST' in line or 'EDT' in line:  # look for Eastern Time
...         print(line)
&lt;BR&gt;Nov. 25, 09:43:32 PM EST
&gt;&gt;&gt; import smtplib
&gt;&gt;&gt; server = smtplib.SMTP('localhost')
&gt;&gt;&gt; server.sendmail('<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="64170b0b100c17051d011624011c05091408014a0b1603">[email&#160;protected]</a>', '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="147e77757167756654716c75796478713a7b6673">[email&#160;protected]</a>',
... """To: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a1cbc2c0c4d2c0d3e1c4d9c0ccd1cdc48fced3c6">[email&#160;protected]</a>
... From: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c3b0acacb7abb0a2baa6b183a6bba2aeb3afa6edacb1a4">[email&#160;protected]</a>
...
... Beware the Ides of March.
... """)
&gt;&gt;&gt; server.quit()
</pre>
<h2 id="Data-Compression">Data compression</h2>
<p class="tab">Common data archiving and compression formats are directly supported by modules including: <b>zlib</b>, <b>gzip</b>, <b>bz2</b>, <b>lzma</b>, <b>zipfile</b> and <b>tarfile</b>.</p>
<pre class="tab tcy">&gt;&gt;&gt; import zlib
&gt;&gt;&gt; s = b'witch which has which witches wrist watch'
&gt;&gt;&gt; len(s)
41
&gt;&gt;&gt; t = zlib.compress(s)
&gt;&gt;&gt; len(t)
37
&gt;&gt;&gt; zlib.decompress(t)
b'witch which has which witches wrist watch'
&gt;&gt;&gt; zlib.crc32(s)
226805979</pre>
<h2 id="Performance-Measurement">Performance measurement</h2>
<p class="tab">Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately.</p>
<p class="tab">For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The <b>timeit</b> module quickly demonstrates a modest performance advantage:</p>
<pre class="tab tcy">&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
0.57535828626024577
&gt;&gt;&gt; Timer('a,b = b,a', 'a=1; b=2').timeit()
0.54962537085770791</pre>
<p class="tab">In contrast to <b>timeit</b>&lsquo;s fine level of granularity, the <b>profile</b> and <b>pstats</b> modules provide tools for identifying time critical sections in larger blocks of code.</p>
<h2 id="Quality-Control">Quality control</h2>
<p class="tab">One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process.</p>
<p class="tab">The <b>doctest</b> module provides a tool for scanning a module and validating tests embedded in a program's docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the <b>doctest</b> module to make sure the code remains true to the documentation:</p>
<pre class="tab tcy">def average(values):
    """Computes the arithmetic mean of a list of numbers.
    &gt;&gt;&gt; print(average([20, 30, 70]))
    40.0
    """
    return sum(values) / len(values)
import doctest
doctest.testmod()   # automatically validate the embedded tests</pre>
<p class="tab">The <b>unittest</b> module is not as effortless as the <b>doctest</b> module, but it allows a more comprehensive set of tests to be maintained in a separate file:</p>
<pre class="tab tcy">import unittest
class TestStatisticalFunctions(unittest.TestCase):
    def test_average(self):
        self.assertEqual(average([20, 30, 70]), 40.0)
        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
        with self.assertRaises(ZeroDivisionError):
            average([])
        with self.assertRaises(TypeError):
            average(20, 30, 70)
unittest.main() # Calling from the command line invokes all tests</pre>
<h2 id="Batteries-Included">"Batteries included"</h2>
<p class="tab">Python has a "batteries included" philosophy. This is best seen through the sophisticated and robust capabilities of its larger packages. For example:</p>
<ul>
<li>The <b>xmlrpc.client</b> and <b>xmlrpc.server</b> modules make implementing remote procedure calls into an almost trivial task. Despite the modules names, no direct knowledge or handling of XML is needed.</li>
<li>The email package is a library for managing email messages, including MIME and other RFC 2822-based message documents. Unlike <b>smtplib</b> and <b>poplib</b> which actually send and receive messages, the email package has a complete toolset for building or decoding complex message structures (including attachments) and for implementing Internet encoding and header protocols.</li>
<li>The <b>xml.dom</b> and <b>xml.sax</b> packages provide robust support for parsing this popular data interchange format. Likewise, the csv module supports direct reads and writes in a common database format. Together, these modules and packages greatly simplify data interchange between Python applications and other tools.</li>
<li>Internationalization is supported by a number of modules including <b>gettext</b>, <b>locale</b>, and the <b>codecs</b> package.</li>
</ul>
<h2 id="Output-Formatting">Output formatting</h2>
<p class="tab">The <b>reprlib</b> module provides a version of <b>repr()</b> customized for abbreviated displays of large or deeply nested containers:</p>
<pre class="tab tcy">&gt;&gt;&gt; import reprlib
&gt;&gt;&gt; reprlib.repr(set('supercalifragilisticexpialidocious'))
"set(['a', 'c', 'd', 'e', 'f', 'g', ...])"
</pre>
<p class="tab">The <b>pprint</b> module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the "pretty printer" adds line breaks and indentation to more clearly reveal data structure:</p>
<pre class="tab tcy">&gt;&gt;&gt; import pprint
&gt;&gt;&gt; t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
...     'yellow'], 'blue']]]
...
&gt;&gt;&gt; pprint.pprint(t, width=30)
[[[['black', 'cyan'],
   'white',
   ['green', 'red']],
  [['magenta', 'yellow'],
   'blue']]]</pre>
<p class="tab">The <b>textwrap</b> module formats paragraphs of text to fit a given screen width:</p>
<pre class="tab tcy">&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; doc = """The wrap() method is just like fill() except that it returns
... a list of strings instead of one big string with newlines to separate
... the wrapped lines."""
...
&gt;&gt;&gt; print(textwrap.fill(doc, width=40))
The wrap() method is just like fill()
except that it returns a list of strings
instead of one big string with newlines
to separate the wrapped lines.</pre>
<p class="tab">The <b>locale</b> module accesses a database of culture specific data formats. The grouping attribute of locale's format function provides a direct way of formatting numbers with group separators:</p>
<pre class="tab tcy">&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'English_United States.1252')
'English_United States.1252'
&gt;&gt;&gt; conv = locale.localeconv()          # get a mapping of conventions
&gt;&gt;&gt; x = 1234567.8
&gt;&gt;&gt; locale.format("%d", x, grouping=True)
'1,234,567'
&gt;&gt;&gt; locale.format_string("%s%.*f", (conv['currency_symbol'],
...                      conv['frac_digits'], x), grouping=True)
'$1,234,567.80'</pre>
<h2 id="Templating">Templating</h2>
<p class="tab">The <b>string</b> module includes a versatile <b>Template</b> class with a simplified syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application.</p>
<p class="tab">The format uses placeholder names formed by <b>$</b> with valid Python identifiers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing <b>$$</b> creates a single escaped <b>$</b>:</p>
<pre class="tab tcy">&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; t = Template('${village}folk send $$10 to $cause.')
&gt;&gt;&gt; t.substitute(village='Nottingham', cause='the ditch fund')
'Nottinghamfolk send $10 to the ditch fund.'</pre>
<p class="tab">The <b>substitute()</b> method raises a <b>KeyError</b> when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the <b>safe_substitute()</b> method may be more appropriate &mdash; it will leave placeholders unchanged if data is missing:</p>
<pre class="tab tcy">&gt;&gt;&gt; t = Template('Return the $item to $owner.')
&gt;&gt;&gt; d = dict(item='unladen swallow')
&gt;&gt;&gt; t.substitute(d)
Traceback (most recent call last):
  ...
KeyError: 'owner'
&gt;&gt;&gt; t.safe_substitute(d)
'Return the unladen swallow to $owner.'</pre>
<p class="tab">Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:</p>
<pre class="tab tcy">&gt;&gt;&gt; import time, os.path
&gt;&gt;&gt; photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
&gt;&gt;&gt; class BatchRename(Template):
...     delimiter = '%'
&gt;&gt;&gt; fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')
Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f
&gt;&gt;&gt; t = BatchRename(fmt)
&gt;&gt;&gt; date = time.strftime('%d%b%y')
&gt;&gt;&gt; for i, filename in enumerate(photofiles):
...     base, ext = os.path.splitext(filename)
...     newname = t.substitute(d=date, n=i, f=ext)
...     print('{0} --&gt; {1}'.format(filename, newname))
img_1074.jpg --&gt; Ashley_0.jpg
img_1076.jpg --&gt; Ashley_1.jpg
img_1077.jpg --&gt; Ashley_2.jpg
</pre>
<p class="tab">Another application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.</p>
<h2>Working with binary data record layouts</h2>
<p class="tab">The <b>struct</b> module provides <b>pack()</b> and <b>unpack()</b> functions for working with variable length binary record formats. The following example shows how to loop through header information in a ZIP file without using the <b>zipfile</b> module. Pack codes "H" and "I" represent two and four byte unsigned numbers respectively. The "<b>&lt;</b>" indicates that they are standard size and in little-endian byte order:</p>
<pre class="tab tcy">import struct
with open('myfile.zip', 'rb') as f:
    data = f.read()
start = 0
for i in range(3):                      # show the first 3 file headers
    start += 14
    fields = struct.unpack('&lt;IIIHH', data[start:start+16])
    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields
    start += 16
    filename = data[start:start+filenamesize]
    start += filenamesize
    extra = data[start:start+extra_size]
    print(filename, hex(crc32), comp_size, uncomp_size)
    start += extra_size + comp_size     # skip to the next header</pre>
<h2 id="Multi-threading">Multi-threading</h2>
<p class="tab">Threading is a technique for decoupling tasks that are not sequentially dependent. Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background. A related use case is running I/O in parallel with computations in another thread.</p>
<p class="tab">The following code shows how the high level threading module can run tasks in background while the main program continues to run:</p>
<pre class="tab tcy">import threading, zipfile
class AsyncZip(threading.Thread):
    def __init__(self, infile, outfile):
        threading.Thread.__init__(self)
        self.infile = infile
        self.outfile = outfile
    def run(self):
        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
        f.write(self.infile)
        f.close()
        print('Finished background zip of:', self.infile)
background = AsyncZip('mydata.txt', 'myarchive.zip')
background.start()
print('The main program continues to run in foreground.')
background.join()    # Wait for the background task to finish
print('Main program waited until background was done.')</pre>
<p class="tab">The principal challenge of multi-threaded applications is coordinating threads that share data or other resources. To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores.</p>
<p class="tab">While those tools are powerful, minor design errors can result in problems that are difficult to reproduce. So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the queue module to feed that thread with requests from other threads. Applications using Queue objects for inter-thread communication and coordination are easier to design, more readable, and more reliable.</p>
<h2 id="Logging">Logging</h2>
<p class="tab">The logging module offers a full featured and flexible logging system. At its simplest, log messages are sent to a file or to <b>sys.stderr</b>:</p>
<pre class="tab tcy">import logging
logging.debug('Debugging information')
logging.info('Informational message')
logging.warning('Warning:config file %s not found', 'server.conf')
logging.error('Error occurred')
logging.critical('Critical error -- shutting down')</pre>
<p class="tab">This produces the following output:</p>
<pre class="tab tcy">WARNING:root:Warning:config file server.conf not found
ERROR:root:Error occurred
CRITICAL:root:Critical error -- shutting down</pre>
<p class="tab">By default, informational and debugging messages are suppressed and the output is sent to standard error. Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server. New filters can select different routing based on message priority: <b>DEBUG</b>, <b>INFO</b>, <b>WARNING</b>, <b>ERROR</b>, and <b>CRITICAL</b>.</p>
<p class="tab">The logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application.</p>
<h2>Weak references</h2>
<p class="tab">Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated.</p>
<p class="tab">This approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The <b>weakref</b> module provides tools for tracking objects without creating a reference. When the object is no longer needed, it is automatically removed from a <b>weakref</b> table and a callback is triggered for <b>weakref</b> objects. Typical applications include caching objects that are expensive to create:</p>
<pre class="tab tcy">&gt;&gt;&gt; import weakref, gc
&gt;&gt;&gt; class A:
...     def __init__(self, value):
...         self.value = value
...     def __repr__(self):
...         return str(self.value)
...
&gt;&gt;&gt; a = A(10)                   # create a reference
&gt;&gt;&gt; d = weakref.WeakValueDictionary()
&gt;&gt;&gt; d['primary'] = a            # does not create a reference
&gt;&gt;&gt; d['primary']                # fetch the object if it is still alive
10
&gt;&gt;&gt; del a                       # remove the one reference
&gt;&gt;&gt; gc.collect()                # run garbage collection right away
0
&gt;&gt;&gt; d['primary']                # entry was automatically removed
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    d['primary']                # entry was automatically removed
  File "C:/python34/lib/weakref.py", line 46, in __getitem__
    o = self.data[key]()
KeyError: 'primary'</pre>
<p class="tab">Many data structure needs can be met with the built-in <b>list</b> type. However, sometimes there is a need for alternative implementations with different performance trade-offs.</p>
<p class="tab">The array module provides an <b>array()</b> object that is like a list that stores only homogeneous data and stores it more compactly. The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode "H") rather than the usual 16 bytes per entry for regular lists of Python <b>int</b> objects:</p>
<pre class="tab tcy">&gt;&gt;&gt; from array import array
&gt;&gt;&gt; a = array('H', [4000, 10, 700, 22222])
&gt;&gt;&gt; sum(a)
26932
&gt;&gt;&gt; a[1:3]
array('H', [10, 700])</pre>
<p class="tab">The collections module provides a <b>deque()</b> object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches:</p>
<pre class="tab tcy">&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; d = deque(["task1", "task2", "task3"])
&gt;&gt;&gt; d.append("task4")
&gt;&gt;&gt; print("Handling", d.popleft())
Handling task1</pre>
<pre class="tab tcy">unsearched = deque([starting_node])
def breadth_first_search(unsearched):
    node = unsearched.popleft()
    for m in gen_moves(node):
        if is_goal(m):
            return m
        unsearched.append(m)</pre>
<pre class="tab tcy">&gt;&gt;&gt; import bisect
&gt;&gt;&gt; scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
&gt;&gt;&gt; bisect.insort(scores, (300, 'ruby'))
&gt;&gt;&gt; scores
[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]</pre>
<p class="tab">The <b>heapq</b> module provides functions for implementing heaps based on regular lists. The lowest valued entry is always kept at position zero. This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort:</p>
<pre class="tab tcy">&gt;&gt;&gt; from heapq import heapify, heappop, heappush
&gt;&gt;&gt; data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
&gt;&gt;&gt; heapify(data)                      # rearrange the list into heap order
&gt;&gt;&gt; heappush(data, -5)                 # add a new entry
&gt;&gt;&gt; [heappop(data) for i in range(3)]  # fetch the three smallest entries
[-5, 0, 1]</pre>
<h2 id="Decimal-Floating-Point-Arithmetic">Decimal floating point arithmetic</h2>
<p class="tab">The decimal module offers a Decimal datatype for decimal floating point arithmetic. Compared to the built-in float implementation of binary floating point, the class is especially helpful for</p>
<ul>
<li>financial applications and other uses which require exact decimal representation,</li>
<li>control over precision,</li>
<li>control over rounding to meet legal or regulatory requirements,</li>
<li>tracking of significant decimal places, or</li>
<li>applications where the user expects the results to match calculations done by hand.</li>
</ul>
<p class="tab">For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent:</p>
<pre class="tab tcy">&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; round(Decimal('0.70') * Decimal('1.05'), 2)
Decimal('0.74')
&gt;&gt;&gt; round(.70 * 1.05, 2)
0.73</pre>
<p class="tab">The <b>Decimal</b> result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance. <b>Decimal</b> reproduces mathematics as done by hand and avoids issues that can arise when binary floating point cannot exactly represent decimal quantities.</p>
<p class="tab">Exact representation enables the Decimal class to perform modulo calculations and equality tests that are unsuitable for binary floating point:</p>
<pre class="tab tcy">&gt;&gt;&gt; Decimal('1.00') % Decimal('.10')
Decimal('0.00')
&gt;&gt;&gt; 1.00 % 0.10
0.09999999999999995
&gt;&gt;&gt; sum([Decimal('0.1')]*10) == Decimal('1.0')
True
&gt;&gt;&gt; sum([0.1]*10) == 1.0
False</pre>
<p class="tab">The decimal module provides arithmetic with as much precision as needed:</p>
<pre class="tab tcy">&gt;&gt;&gt; getcontext().prec = 36
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.142857142857142857142857142857142857')</pre>
<h2 id="Additional-Python-Reference">Additional Python reference</h2>
<ul>
<li><a href="/unix/pylibbi.htm">The Python Standard Library</a></li>
<li><a href="/unix/pylibdt.htm">Data Types in Python</a></li>
<li><a href="/unix/pylibtx.htm">Python Text Processing Modules</a></li>
<li><a href="/unix/pylibnm.htm">Python Numeric and Mathematical Modules</a></li>
<li><a href="/unix/pylibbn.htm">Python Binary Data Services</a></li>
<li><a href="/unix/pylibos.htm">Python Operating System Services</a></li>
<li><a href="/unix/pylibfn.htm">Functional Programming Models in Python</a></li>
<li><a href="/unix/pylibml.htm">The Python HTML Module</a></li>
</ul>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a8337febe84c8',m:'0Xya0FjfX_dDYBXJpIhzbQzDPyAKtLQ06ONP2QVBg0Q-1661495361-0-AYU2j0SNBCEEWr1ESrm9wtzdxKNbiXscsv81iH7bG65BQHx0rcmb3+aq/GQWGe4fgpljX3pBCc/XMQSPXGgzRtVvPQ6XNDHsyx0hpkAWBZdPGU66uzDa1PWC9ieUGKAo+g==',s:[0x92a6fb3b28,0x44d6d60e74],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>