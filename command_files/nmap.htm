<!DOCTYPE html>
<!--[if lt IE 7]><html class="ie6 ie"><![endif]--><!--[if IE 7]><html class="ie7 ie"><![endif]--><!--[if IE 8]><html class="ie8 ie"><![endif]--><!--[if IE 9]><html class="ie9 ie"><![endif]-->
<html lang="en" itemscope itemtype="https://schema.org/WebPage">

<body>
<div class="skip"><a href="#main-content">Skip to Main Content</a></div>
<div class="wrapper">
<header class="cf"><a href="/"><picture><source srcset="/cdn/computer-hope-dark.png" media="(prefers-color-scheme: dark)" class="logo"><img src="/cdn/computer-hope.jpg" width="412" height="82" alt="Computer Hope" aria-label="Computer Hope home page" class="logo"></picture></a><div itemscope itemtype="https://schema.org/SiteNavigationElement"><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><nav><ul id="nav"><li><a href="/oh.htm" title="Questions and answers, troubleshooting, and help">Help</a></li><li><a href="/tips/" title="Computer tips and tricks">Tips</a></li><li><a href="/jargon.htm" title="Computer terms, jargon, and glossary">Dictionary</a></li><li><a href="/history/" title="Computer timeline, events, and biographies">History</a></li><li><a href="/forum/" title="Computer Hope forums and community">Forums</a></li><li><a href="/contact/" title="Contact Computer Hope or other computer companies">Contact</a></li></ul></nav></div></header>
<div class="container ad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="7994873325" style="display:block"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<nav class="container" aria-label="breadcrumb"><ol class="breadcrumbs" itemscope itemtype="https://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/" itemprop="item"><span itemprop="name">Home</span></a><meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/oh.htm" itemprop="item"><span itemprop="name">Help</span></a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/unix.htm" itemprop="item"><span itemprop="name">Linux</span></a><meta itemprop="position" content="3" /></li></ol></nav>
<div class="container content" id="main-content" role="main">
<article>
<h1 itemprop="headline">Linux nmap command</h1>
<div class="updated">Updated: <span itemprop="dateModified" content="2021-11-06">11/06/2021</span> by <span itemprop="author publisher creator" itemscope itemtype="https://schema.org/Organization"><span itemprop="name">Computer Hope</span></span></div>
<img src="/cdn/linux/nmap.gif" width="300" height="300" alt="nmap command" class="floatRight"><p class="intro">On <a href="/jargon/u/unix-like.htm">Unix-like</a> operating systems, the <b>nmap</b> command is a <a href="/jargon/n/network.htm">network</a> exploration tool and <a href="/jargon/p/portscan.htm">port scanner</a>.</p>
<div class="pagenav contents" role="navigation" aria-label="contents">
<ul>
<li><a href="#desc">Description</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#nmap">Nmap output formats</a></li>
<li><a href="#runtime">Runtime interaction</a></li>
<li><a href="typical">A typical nmap scan</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#related">Related commands</a></li>
<li class="out"><a href="/unix.htm">Linux commands help</a></li>
</ul>
</div>
<h2 id="desc">Description</h2>
<p class="tab"><b>nmap</b> ("Network Mapper") is an <a href="/jargon/o/opensour.htm">open source</a> tool for network exploration and security auditing. It was designed to rapidly scan large networks, although it works fine to scan single <a href="/jargon/h/hostcomp.htm">hosts</a>. <b>nmap</b> uses raw <a href="/jargon/i/ip.htm">IP</a> <a href="/jargon/p/packet.htm">packets</a> in novel ways to determine what hosts are available on the network, what services (<a href="/jargon/a/application.htm">application</a> name and <a href="/jargon/v/version.htm">version</a>) those hosts are offering, what <a href="/jargon/o/os.htm">operating systems</a> (and OS versions) they are running, what type of packet filters/<a href="/jargon/f/firewall.htm">firewalls</a> are in use, and several other characteristics. While <b>nmap</b> is commonly used for security audits, many systems and network <a href="/jargon/r/root.htm">administrators</a> find it useful for routine tasks such as network inventory, managing service upgrade schedules, and monitoring host or service <a href="/jargon/u/uptime.htm">uptime</a>.</p>
<p class="tab">The output from <b>nmap</b> is a list of scanned targets, with supplemental information on each depending on the options used. Key among that information is the "interesting ports table". That table lists the port number and protocol, service name, and state. The state is either <b>open</b>, <b>filtered</b>, <b>closed</b>, or <b>unfiltered</b>.</p>
<p class="tab"><b>Open</b> means that an application on the target machine is listening for connections/packets on that port.</p>
<p class="tab"><b>Filtered</b> means that a firewall, filter, or other network obstacle is blocking the port so that <b>nmap</b> cannot tell whether it is open or closed.</p>
<p class="tab"><b>Closed</b> ports have no application listening on them, though they could open up at any time. Ports are classified as unfiltered. When they are responsive to <b>nmap</b>'s probes, but <b>nmap</b> cannot determine whether they are open or closed. <b>nmap</b> reports the state combinations <b>open|filtered</b> and <b>closed|filtered</b> when it cannot determine which of the two states describe a port. The port table may also include software version details when version detection is requested. When an IP protocol scan is requested (<b>-sO</b>), <b>nmap</b> provides information on supported IP protocols rather than listening ports.</p>
<p class="tab">In addition to the interesting ports table, <b>nmap</b> can provide further information on targets, including <a href="/jargon/r/rdns.htm">reverse DNS</a> names, operating system guesses, device types, and <a href="/jargon/m/mac.htm">MAC</a> addresses.</p>
<p class="tab">A typical <b>nmap</b> scan is shown below. The only <b>nmap</b> <a href="/jargon/a/argument.htm">arguments</a> used in this example are <b>-A</b>, to enable OS and version detection, <a href="/jargon/s/script.htm">script</a> scanning, and <a href="/jargon/t/tracerou.htm">traceroute</a>; <b>-T4</b> for faster execution; and then the two target <a href="/jargon/h/hostname.htm">hostnames</a>.</p>
<h2 id="syntax">Syntax</h2>
<pre class="tcy tab">nmap [<i>Scan Type</i>...] [<i>Options</i>] {<i>target specification</i>}</pre>
<h2>Options: target specification</h2>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:350px"><b>-iL</b> <i>&lt;inputfilename&gt;</i></td>
<td>Input from list of hosts/networks.</td>
</tr>
<tr class="tcw">
<td><b>-iR</b> <i>&lt;num hosts&gt;</i></td>
<td>Choose random targets.</td>
</tr>
<tr class="tcw">
<td><b>--exclude</b> <i>&lt;host1[,host2][,host3],...&gt;</i></td>
<td>Exclude hosts/networks.</td>
</tr>
<tr class="tcw">
<td><b>--excludefile</b> <i>&lt;exclude_file&gt;</i></td>
<td>Exclude list from file.</td>
</tr>
</table>
<p class="tab">Everything on the <b>nmap</b> <a href="/jargon/c/commandi.htm">command-line</a> that isn't an option (or option argument) is treated as a target host specification. The simplest case is to specify a target IP address or hostname for scanning.</p>
<p class="tab">Sometimes you want to scan a whole network of adjacent hosts. For this, <b>nmap</b> supports <a href="/jargon/c/cidr.htm">CIDR</a>-style addressing. You can append <b>/numbits</b> to an <a href="/jargon/i/ipv4.htm">IPv4</a> address or hostname and <b>nmap</b> scans every IP address for which the first numbits are the same as for the reference IP or hostname given.</p>
<p class="tab">For example, <b>192.168.10.0/24</b> would scan the 256 hosts between 192.168.10.0 (binary: 11000000 10101000 00001010 00000000) and 192.168.10.255 (binary: 11000000 10101000 00001010 11111111), inclusive. <b>192.168.10.40/24</b> would scan the same targets. Given that the host <b>scanme.nmap.org</b> is at the IP address 64.13.134.52, the specification <b>scanme.nmap.org/16</b> would scan the 65,536 IP addresses between 64.13.0.0 and 64.13.255.255. The smallest allowed value is <b>/0</b>, which targets the whole <a href="/jargon/i/internet.htm">Internet</a>. The largest value is <b>/32</b>, which scans the named host or IP address because all address <a href="/jargon/b/bit.htm">bits</a> are fixed.</p>
<p class="tab">CIDR notation is short but not always flexible enough. For example, you might want to scan <b>192.168.0.0/16</b> but skip any IPs ending with .0 or .255 because they may be used as <a href="/jargon/s/subnetma.htm">subnet</a> network and broadcast addresses. <b>nmap</b> supports this through <a href="/jargon/o/octet.htm">octet</a> range addressing. Rather than specify a normal IP address, you can specify a comma-separated list of numbers or ranges for each octet.</p>
<p class="tab">For example, <b>192.168.0-255.1-254</b> skips all addresses in the range that end in .0 or .255, and <b>192.168.3-5,7.1</b> scans the four addresses 192.168.3.1, 192.168.4.1, 192.168.5.1, and 192.168.7.1. Either side of a range may be omitted; the default values are <b>0</b> on the left and <b>255</b> on the right. Using <b>-</b> by itself is the same as <b>0-255</b>, but remember to use <b>0-</b> in the first octet so the target specification doesn't look like a command-line option. Ranges need not be limited to the final octets: the specifier <b>0-255.0-255.13.37</b> performs an Internet-wide scan for all IP addresses ending in 13.37. This sort of broad sampling can be useful for Internet surveys and research.</p>
<p class="tab"><a href="/jargon/i/ipv6.htm">IPv6</a> addresses can only be specified by their fully qualified IPv6 address or hostname. CIDR and octet ranges aren't yet supported for IPv6.</p>
<p class="tab">IPv6 addresses with non-<a href="/jargon/g/global.htm">global</a> scope need to have a <a href="/jargon/z/zone.htm">zone</a> ID <a href="/jargon/s/suffix.htm">suffix</a>. On <a href="/jargon/u/unix.htm">Unix</a> systems, this is a percent sign followed by an interface name; a complete address might be <b>fe80::a8bb:ccff:fedd:eeff%eth0</b>. On <a href="/jargon/w/windows.htm">Windows</a>, use an interface index number in place of an interface name: <b>fe80::a8bb:ccff:fedd:eeff%1</b>. You can see a list of interface indexes by running the command <b>netsh.exe interface ipv6 show interface</b>.</p>
<p class="tab"><b>nmap</b> accepts multiple host specifications on the command line, and they don't need to be the same type. The command <b>nmap scanme.nmap.org 192.168.0.0/8 10.0.0,1,3-7.-</b> does what you would expect.</p>
<p class="tab">While targets are usually specified on the command lines, the following options are also available to control target selection:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-iL</b> <i>inputfilename</i></td>
<td>Input from list.</td>
</tr>
</table>
<p class="tab">Reads target specifications from <i>inputfilename</i>. Passing a huge list of hosts is often awkward on the command line, yet it is a common need. For example, your <a href="/jargon/i/ipv6.htm">DHCP</a> server might export a list of 10,000 current leases that you want to scan. Or maybe you want to scan all IP addresses except for those to locate hosts using unauthorized static IP addresses. Generate the list of hosts to scan and pass that file name to <b>nmap</b> as an argument to the <b>-iL</b> option. Entries can be in any of the formats accepted by <b>nmap</b> on the command line (IP address, hostname, CIDR, IPv6, or octet ranges). Each entry must be separated by one or more spaces, tabs, or <a href="/jargon/n/newline.htm">newlines</a>. You can specify a hyphen (<b>-</b>) as the filename if you want <b>nmap</b> to read hosts from <a href="/jargon/s/stdin.htm">standard input</a> rather than an actual file.</p>
<p class="tab">The input file may contain <a href="/jargon/c/comment.htm">comments</a> that start with <b>#</b> and extend to the end of the line.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-iR</b> <i>num hosts</i></td>
<td>Choose random targets.</td>
</tr>
</table>
<p class="tab">For Internet-wide surveys and other research, you may want to choose targets at random. The <i>num hosts</i> argument tells <b>nmap</b> how many IPs to generate. Undesirable IPs, such as those in certain private, <a href="/jargon/m/multicast.htm">multicast</a>, or unallocated address ranges, are automatically skipped. The argument <b>0</b> can be specified for a never-ending scan. Keep in mind that some network administrators bristle at unauthorized scans of their networks and may complain. Use this option at your own risk. If you find yourself really bored one rainy afternoon, try the command <b>nmap -Pn -sS -p 80 -iR 0 --open</b> to locate random web servers for browsing.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--exclude</b> <i>host1[,host2[,...]]</i></td>
<td>Exclude hosts/networks.</td>
</tr>
</table>
<p class="tab">Specifies a comma-separated list of targets to be excluded from the scan even if they are part of the overall network range you specify. The list you pass in uses normal <b>nmap</b> <a href="/jargon/s/syntax.htm">syntax</a>, so it can include hostnames, CIDR netblocks, octet ranges, etc. This can be useful when the network you want to scan includes untouchable mission-critical servers, systems that are known to react adversely to port scans, or subnets administered by other people.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--excludefile</b> <i>exclude_file</i></td>
<td>Exclude list from file.</td>
</tr>
</table>
<p class="tab">This offers the same functionality as the <b>--exclude</b> option, except that the excluded targets are provided in a newline-, space-, or tab-<a href="/jargon/d/delimite.htm">delimited</a> <i>exclude_file</i> rather than on the command line.</p>
<p class="tab">The exclude file may contain comments that start with <b>#</b> and extend to the end of the line.</p>
<h3 class="tab">Options: host discovery</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:320px"><b>-sL</b></td>
<td>List Scan - List targets to scan.</td>
</tr>
<tr class="tcw">
<td><b>-sn</b></td>
<td>Ping Scan - disable port scan.</td>
</tr>
<tr class="tcw">
<td><b>-Pn</b></td>
<td>Treat all hosts as online -- skip host discovery.</td>
</tr>
<tr class="tcw">
<td><b>-PS/PA/PU/PY</b><i>[portlist]</i></td>
<td>TCP SYN/ACK, UDP or SCTP discovery to given ports.</td>
</tr>
<tr class="tcw">
<td><b>-PE/PP/PM</b></td>
<td><a href="/jargon/i/icmp.htm">ICMP</a> <a href="/jargon/e/echo.htm">echo</a>, <a href="/jargon/t/timestam.htm">timestamp</a>, and <a href="/jargon/n/netmask.htm">netmask</a> request discovery probes.</td>
</tr>
<tr class="tcw">
<td><b>-PO</b><i>[protocol list]</i></td>
<td>IP Protocol <a href="/jargon/p/ping.htm">Ping.</a></td>
</tr>
<tr class="tcw">
<td><b>-n/-R</b></td>
<td>Never do <a href="/jargon/d/dns.htm">DNS</a> resolution/Always resolve [default: sometimes].</td>
</tr>
<tr class="tcw">
<td><b>--dns-servers</b> <i>&lt;serv1[,serv2],...&gt;</i></td>
<td>Specify custom DNS servers.</td>
</tr>
<tr class="tcw">
<td><b>--system-dns</b></td>
<td>Use OS's DNS resolver.</td>
</tr>
<tr class="tcw">
<td><b>--traceroute</b></td>
<td>Trace hop path to each host.</td>
</tr>
</table>
<p class="tab">One of the very first steps in any network reconnaissance mission is to reduce a (sometimes huge) set of IP ranges into a list of active or interesting hosts. Scanning every port of every single IP address is slow and usually unnecessary. Of course, what makes a host interesting depends greatly on the scan purposes. Network administrators may only be interested in hosts running a certain service, while security auditors may care about every single device with an IP address. An administrator may be comfortable using an ICMP ping to locate hosts on his internal network, while an external penetration tester may use a diverse set of several probes in an attempt to evade firewall restrictions.</p>
<p class="tab">Because host discovery needs are so diverse, <b>nmap</b> offers a wide variety of options for customizing the techniques used. Host discovery is sometimes called <b>ping scan</b>, but it goes well beyond the simple ICMP echo request packets associated with the ubiquitous ping tool. Users can skip the ping step entirely with a list scan (<b>-sL</b>) or by disabling ping (<b>-Pn</b>), or engage the network with arbitrary combinations of multi-port TCP SYN/ACK, UDP, SCTP INIT and ICMP probes. The goal of these probes is to solicit responses which demonstrate that an IP address is actually active (is used by a host or network device). On many networks, only a small percentage of IP addresses are active at any given time. This is particularly common with private address space such as 10.0.0.0/8. That network has 16 million IPs, but it is used by companies with less than a thousand machines. Host discovery can find those machines in a sparsely allocated sea of IP addresses.</p>
<p class="tab">If no host discovery options are given, <b>nmap</b> sends an ICMP echo request, a TCP SYN packet to port 443, a TCP ACK packet to port 80, and an ICMP timestamp request. For IPv6, the ICMP timestamp request is omitted because it is not part of ICMPv6. These defaults are equivalent to the <b>-PE -PS443 -PA80 -PP</b> options. The exceptions to this are the <a href="/jargon/a/arp.htm">ARP</a> (for IPv4) and Neighbor Discovery. (for IPv6) scans used for any targets on a local Ethernet network. For unprivileged Unix shell users, the default probes are a SYN packet to ports 80 and 443 using the connect system call. This host discovery is often sufficient when scanning local networks, but a more comprehensive set of discovery probes is recommended for security auditing.</p>
<p class="tab">The <b>-P*</b> options (which select ping types) can be combined. You can increase your odds of penetrating strict firewalls by sending many probe types using different TCP ports/flags and ICMP codes. Also, note that ARP/Neighbor Discovery (<b>-PR</b>) is done by default against targets on a local <a href="/jargon/e/ethernet.htm">Ethernet</a> network even if you specify other <b>-P*</b> options, because it is often faster and more effective.</p>
<p class="tab">By default, <b>nmap</b> does host discovery and then performs a port scan against each host it determines is online. This is true even if you specify non-default host discovery types such as UDP probes (<b>-PU</b>). Read about the <b>-sn</b> option to learn how to perform only host discovery, or use <b>-Pn</b> to skip host discovery and port scan all target hosts. The following options control host discovery:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sL</b></td>
<td>List Scan.</td>
</tr>
</table>
<p class="tab">The <b>list scan</b> is a degenerate form of host discovery that lists each host of the network(s) specified, without sending any packets to the target hosts. By default, <b>nmap</b> still does reverse-DNS resolution on the hosts to learn their names. It is often surprising how much useful information simple hostnames give out. For example, <b>fw.chi</b> is the name of one company's Chicago firewall. <b>nmap</b> also reports the total number of IP addresses at the end. The list scan is a good sanity check to ensure that you have proper IP addresses for your targets. If the hosts sport domain names you do not recognize, it is worth investigating further to prevent scanning the wrong company's network.</p>
<p class="tab">Since the idea is to print a list of target hosts, options for higher level functionality such as port scanning, OS detection, or ping scanning cannot be combined with this. If you want to disable ping scanning while still performing such higher level functionality, read up on the <b>-Pn</b> (skip ping) option.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sn</b></td>
<td>No port scan.</td>
</tr>
</table>
<p class="tab">This option tells <b>nmap</b> not to do a port scan after host discovery, and only print out the available hosts that responded to the scan. This is often known as a "ping scan", but you can also request that traceroute and NSE host scripts run. This is by default one step more intrusive than the list scan, and can often be used for the same purposes. It allows light reconnaissance of a target network without attracting much attention. Knowing how many hosts are up is more valuable to attackers than the list provided by list scan of every single IP and hostname.</p>
<p class="tab">Systems administrators often find this option valuable as well. It can easily be used to count available machines on a network or monitor server availability. This is often called a <b>ping sweep</b>, and is more reliable than pinging the broadcast address because many hosts do not reply to broadcast queries.</p>
<p class="tab">The default host discovery done with <b>-sn</b> consists of an ICMP echo request, TCP SYN to port 443, TCP ACK to port 80, and an ICMP timestamp request by default. When executed by an unprivileged user, only SYN packets are sent (using a connect call) to ports 80 and 443 on the target. When a privileged user tries to scan targets on a local Ethernet network, ARP requests are used unless <b>--send-ip</b> was specified. The <b>-sn</b> option can be combined with any of the discovery probe types (the <b>-P*</b> options, excluding <b>-Pn</b>) for greater flexibility. If any of those probe type and port number options are used, the default probes are overridden. When strict firewalls are in place between the source host running <b>nmap</b> and the target network, using those advanced techniques is recommended. Otherwise, hosts could be missed when the firewall drops probes or their responses.</p>
<p class="tab">In previous releases of <b>nmap</b>, <b>-sn</b> was known as <b>-sP</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-Pn</b></td>
<td>No ping.</td>
</tr>
</table>
<p class="tab">This option skips the <b>nmap</b> discovery stage altogether. Normally, <b>nmap</b> uses this stage to determine active machines for heavier scanning. By default, <b>nmap</b> only performs heavy probing such as port scans, version detection, or OS detection against hosts that are found to be up. Disabling host discovery with <b>-Pn</b> causes <b>nmap</b> to attempt the requested scanning functions against every target IP address specified. So if a class B target address space (<b>/16</b>) is specified on the command line, all 65,536 IP addresses are scanned. Proper host discovery is skipped as with the list scan, but instead of stopping and printing the target list, <b>nmap</b> continues to perform requested functions as if each target IP is active. To skip ping scan and port scan, while still allowing NSE to run, use the two options <b>-Pn -sn</b> together.</p>
<p class="tab">For machines on a local Ethernet network, ARP scanning will still be performed (unless <b>--send-ip</b> is specified) because <b>nmap</b> needs MAC addresses to further scan target hosts. In previous versions of <b>nmap</b>, <b>-Pn</b> was <b>-P0</b> and <b>-PN</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PS</b> <i>port list</i></td>
<td>TCP SYN Ping.</td>
</tr>
</table>
<p class="tab">This option sends an empty TCP packet with the SYN flag set. The default destination port is 80 (configurable at <a href="/jargon/c/compile.htm">compile</a> time by changing <b>DEFAULT_TCP_PROBE_PORT_SPEC</b> in <b>nmap.h</b>). Alternate ports can be specified as a parameter. The syntax is the same as for the <b>-p</b> except that port type specifiers like <b>T:</b> are not allowed. Examples are <b>-PS22</b> and <b>-PS22-25,80,113,1050,35000</b>. Note that there can be no space between <b>-PS</b> and the port list. If multiple probes are specified, they are sent in parallel.</p>
<p class="tab">The SYN flag suggests to the remote system that you are attempting to establish a connection. Normally the destination port will be closed, and a RST (reset) packet sent back. If the port happens to be open, the target takes the second step of a TCP three-way-<a href="/jargon/h/handshak.htm">handshake</a> by responding with a SYN/ACK TCP packet. The machine running <b>nmap</b> then tears down the nascent connection by responding with a RST rather than sending an ACK packet which would complete the three-way-handshake and establish a full connection. The RST packet is sent by the <a href="/jargon/k/kernel.htm">kernel</a> of the machine running <b>nmap</b> in response to the unexpected SYN/ACK, not by <b>nmap</b> itself.</p>
<p class="tab"><b>nmap</b> does not care whether the port is open or closed. Either the RST or SYN/ACK response discussed previously tell <b>nmap</b> that the host is available and responsive.</p>
<p class="tab">On Unix boxes, only the privileged user <a href="/jargon/r/root.htm">root</a> is generally able to send and receive raw TCP packets. For unprivileged users, a workaround is automatically employed whereby the connect system call is initiated against each target port. This has the effect of sending a SYN packet to the target host, in an attempt to establish a connection. If connect returns with a quick success or an ECONNREFUSED failure, the underlying TCP stack must have received a SYN/ACK or RST and the host is marked available. If the connection attempt is left hanging until a timeout is reached, the host is marked as down.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PA</b> <i>port list</i></td>
<td>TCP ACK Ping.</td>
</tr>
</table>
<p class="tab">The <b>TCP ACK ping</b> is quite similar to the just-discussed SYN ping. The difference, as you could likely guess, is that the TCP ACK flag is set instead of the SYN flag. Such an ACK packet purports to be acknowledging data over an established TCP connection, but no such connection exists. So remote hosts should always respond with a RST packet, disclosing their existence in the process.</p>
<p class="tab">The <b>-PA</b> option uses the same default port as the SYN probe (80) and can also take a list of destination ports in the same format. If an unprivileged user tries this, the connect workaround discussed previously is used. This workaround is imperfect because connect is actually sending a SYN packet rather than an ACK.</p>
<p class="tab">The reason for offering both SYN and ACK ping probes is to maximize the chances of bypassing firewalls. Many administrators configure routers and other simple firewalls to block incoming SYN packets except for those destined for public services like the company website or mail server. This prevents other incoming connections to the organization, while allowing users to make unobstructed outgoing connections to the Internet. This non-stateful approach takes up few resources on the firewall/router and is widely supported by hardware and software filters. The Linux Netfilter/iptables firewall software offers the <b>--syn</b> convenience option to implement this stateless approach. When stateless firewall rules such as this are in place, SYN ping probes (<b>-PS</b>) are likely to be blocked when sent to closed target ports. In such cases, the ACK probe shines as it cuts right through these rules.</p>
<p class="tab">Another common type of firewall uses stateful rules that drop unexpected packets. This feature was initially found mostly on high-end firewalls, though it has become much more common over the years. The Linux Netfilter/iptables system supports this through the <b>--state</b> option, which categorizes packets based on connection state. A SYN probe is more likely to work against such a system, as unexpected ACK packets are generally recognized as bogus and dropped. A solution to this quandary is to send both SYN and ACK probes by specifying <b>-PS</b> and <b>-PA</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PU</b> <i>port list</i></td>
<td>UDP Ping.</td>
</tr>
</table>
<p class="tab">Another host discovery option is the <b>UDP ping</b>, which sends a UDP packet to the given ports. For most ports, the packet will be empty, though for a few a protocol-specific payload will be sent that is more likely to get a response. The payload database is described at <a href="https://nmap.org/book/nmap-payloads.html" class="external">https://nmap.org/book/nmap-payloads.html</a>.</p>
<p class="tab">The <b>--data-length</b> option sends a fixed-length random payload for all ports.</p>
<p class="tab">The port list takes the same format as with the previously discussed <b>-PS</b> and <b>-PA</b> options. If no ports are specified, the default is <b>40125</b>. This default can be configured at compile-time by changing <b>DEFAULT_UDP_PROBE_PORT_SPEC</b> in <b>nmap.h</b>. A highly uncommon port is used by default because sending to open ports is often undesirable for this particular scan type.</p>
<p class="tab">Upon hitting a closed port on the target machine, the UDP probe should elicit an ICMP port unreachable packet in return. This signifies to <b>nmap</b> that the machine is up and available. Other types of ICMP errors, such as host/network unreachables or TTL exceeded are indicative of a down or unreachable host. A lack of response is also interpreted this way. If an open port is reached, most services ignore the empty packet and fail to return any response. This is why the default probe port is 40125, which is highly unlikely to be in use. A few services, such as the Character Generator (chargen) protocol, will respond to an empty UDP packet, and thus disclose to <b>nmap</b> that the machine is available.</p>
<p class="tab">The primary advantage of this scan type is that it bypasses firewalls and filters that only screen TCP. For example, the external interface of the <a href="/comp/linksys.htm">Linksys</a> BEFW11S4 <a href="/jargon/w/wireless.htm">wireless</a> broadband router filters all TCP ports by default, but UDP probes would still elicit port unreachable messages and thus give away the device.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PY</b> <i>port list</i></td>
<td>SCTP INIT Ping.</td>
</tr>
</table>
<p class="tab">This option sends an SCTP packet containing a minimal INIT chunk. The default destination port is 80 (configurable at compile time by changing <b>DEFAULT_SCTP_PROBE_PORT_SPEC</b> in <b>nmap.h</b>). Alternate ports can be specified as a parameter. The syntax is the same as for the <b>-p</b> except that port type specifiers like <b>S:</b> are not allowed. Examples are <b>-PY22</b> and <b>-PY22,80,179,5060</b>. Note that there can be no space between <b>-PY</b> and the port list. If multiple probes are specified, they are sent in parallel.</p>
<p class="tab">The INIT chunk suggests to the remote system that you are attempting to establish an association. Normally the destination port will be closed, and an ABORT chunk will be sent back. If the port happens to be open, the target takes the second step of an SCTP four-way-handshake by responding with an INIT-ACK chunk. If the machine running <b>nmap</b> has a functional SCTP stack, then it tears down the nascent association by responding with an ABORT chunk rather than sending a COOKIE-ECHO chunk which would be the next step in the four-way-handshake. The ABORT packet is sent by the kernel of the machine running <b>nmap</b> in response to the unexpected INIT-ACK, not by <b>nmap</b> itself.</p>
<p class="tab"><b>nmap</b> does not care whether the port is open or closed. Either the ABORT or INIT-ACK response discussed previously tell <b>nmap</b> that the host is available and responsive.</p>
<p class="tab">On Unix boxes, only the privileged user root is generally able to send and receive raw SCTP packets. Using SCTP INIT Pings is currently not possible for unprivileged users.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PE</b>, <b>-PP</b>, <b>-PM</b></td>
<td>ICMP Ping Types.</td>
</tr>
</table>
<p class="tab">In addition to the unusual TCP, UDP and SCTP host discovery types discussed previously, <b>nmap</b> can send the standard packets sent by the ubiquitous <a href="/unix/uping.htm">ping</a> program. <b>nmap</b> sends an ICMP type 8 (echo request) packet to the target IP addresses, expecting a type 0 (echo reply) in return from available hosts. Unfortunately, for network explorers, many hosts and firewalls now block these packets, rather than responding as required by <a href="/jargon/r/rfc.htm">RFC</a> 1122. For this reason, ICMP-only scans are rarely reliable enough against unknown targets over the Internet. But for system administrators monitoring an internal network, they are a practical and efficient approach. Use the <b>-PE</b> option to enable this echo request behavior.</p>
<p class="tab">While echo request is the standard ICMP ping <a href="/jargon/q/query.htm">query</a>, <b>nmap</b> does not stop there. The ICMP standards (RFC 792 and RFC 950) state "a host SHOULD NOT implement these messages". Timestamp and address mask queries can be sent with the <b>-PP</b> and <b>-PM</b> options, respectively. A timestamp reply (ICMP code 14) or address mask reply (code 18) discloses that the host is available. These two queries can be valuable when administrators specifically block echo request packets while forgetting that other ICMP queries are used for the same purpose.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PO</b> <i>protocol list</i></td>
<td>IP Protocol Ping.</td>
</tr>
</table>
<p class="tab">One of the newer host discovery options is the <b>IP protocol ping</b>, which sends IP packets with the specified protocol number set in their IP header. The protocol list takes the same format as do port lists in the previously discussed TCP, UDP and SCTP host discovery options. If no protocols are specified, the default is to send multiple IP packets for ICMP (protocol 1), IGMP (protocol 2), and IP-in-IP (protocol 4). The default protocols can be configured at compile-time by changing <b>DEFAULT_PROTO_PROBE_PORT_SPEC</b> in <b>nmap.h</b>. Note that for the ICMP, IGMP, TCP (protocol 6), UDP (protocol 17) and SCTP (protocol 132), the packets are sent with the proper protocol headers. While other protocols are sent with no additional data beyond the IP header (unless the <b>--data-length</b> option is specified).</p>
<p class="tab">This host discovery method looks for either responses using the same protocol as a probe, or ICMP protocol unreachable messages which signify that the given protocol isn't supported on the destination host. Either type of response signifies that the target host is alive.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-PR</b></td>
<td>ARP Ping.</td>
</tr>
</table>
<p class="tab">One of the most common <b>nmap</b> usage scenarios is to scan an Ethernet LAN. On most LANs, especially those using private address ranges specified by RFC 1918, the vast majority of IP addresses are unused at any given time. When <b>nmap</b> tries to send a raw IP packet such as an ICMP echo request, the operating system must determine the destination hardware (ARP) address corresponding to the target IP so that it can properly address the Ethernet frame. This is often slow and problematic since operating systems weren't written with the expectation that they would need to do millions of ARP requests against unavailable hosts in a short time.</p>
<p class="tab"><b>ARP scan</b> puts <b>nmap</b> and its optimized algorithms in charge of ARP requests. And if it gets a response back, <b>nmap</b> doesn't even need to worry about the IP-based ping packets since it already knows the host is up. This makes ARP scan much faster and more reliable than IP-based scans. So it is done by default when scanning Ethernet hosts that <b>nmap</b> detects are on a local Ethernet network. Even if different ping types (such as <b>-PE</b> or <b>-PS</b>) are specified, <b>nmap</b> uses ARP instead for any of the targets that are on the same LAN. If you absolutely don't want to do an ARP scan, specify <b>--send-ip</b>.</p>
<p class="tab">For IPv6 (<b>-6</b> option), <b>-PR</b> uses ICMPv6 Neighbor Discovery instead of ARP. Neighbor Discovery, defined in RFC 4861, shown as the IPv6 equivalent of ARP.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--traceroute</b></td>
<td>Trace path to host.</td>
</tr>
</table>
<p class="tab"><b>Traceroutes</b> are performed post-scan using information from the scan results to determine the port and protocol most likely to reach the target. It works with all scan types except connect scans (<b>-sT</b>) and idle scans (<b>-sI</b>). All traces use <b>nmap</b>'s dynamic timing model and are performed in parallel.</p>
<p class="tab">Traceroute works by sending packets with a low TTL (time-to-live) in an attempt to elicit ICMP Time Exceeded messages from intermediate hops between the scanner and the target host. Standard traceroute implementations start with a TTL of 1 and increment the TTL until the destination host is reached. <b>nmap</b>'s traceroute starts with a high TTL and then decrements the TTL until it reaches zero. Doing it backwards lets <b>nmap</b> employ clever caching algorithms to speed up traces over multiple hosts. On average <b>nmap</b> sends 5&ndash;10 fewer packets per host, depending on network conditions. If a single subnet is being scanned (i.e., 192.168.0.0/24) <b>nmap</b> may only have to send two packets to most hosts.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-n</b></td>
<td>No DNS resolution.</td>
</tr>
</table>
<p class="tab">Tells <b>nmap</b> to never do reverse DNS resolution on the active IP addresses it finds. Since DNS can be slow even with <b>nmap</b>'s built-in parallel stub resolver, this option can greatly reduce scanning times.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-R</b></td>
<td>DNS resolution for all targets.</td>
</tr>
</table>
<p class="tab">Tells <b>nmap</b> to always do reverse DNS resolution on the target IP addresses. Normally reverse DNS is only performed against responsive (online) hosts.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--system-dns</b></td>
<td>Use system DNS resolver.</td>
</tr>
</table>
<p class="tab">By default, <b>nmap</b> resolves IP addresses by sending queries directly to the name servers configured on your host and then listening for responses. Many requests (often dozens) are performed in parallel to improve performance. Specify this option to use your system resolver instead (one IP at a time via the <b>getnameinfo</b> call). This is slower and rarely useful unless you find a bug in the <b>nmap</b> parallel resolver. The system resolver is always used for IPv6 scans.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--dns-servers</b> <i>server1</i>[<b>,</b><i>server2</i>[<b>,</b>...]]</td>
<td>Servers to use for reverse DNS queries.</td>
</tr>
</table>
<p class="tab">By default, <b>nmap</b> determines your DNS servers (for rDNS resolution) from your <b>resolv.conf</b> file (Unix) or the <a href="/jargon/r/registry.htm">registry</a> (Win32). Alternatively, you may use this option to specify alternate servers. This option is not honored if you are using <b>--system-dns</b> or an IPv6 scan. Using multiple DNS servers is often faster, especially if you choose authoritative servers for your target IP space. This option can also improve stealth, as your requests can be bounced off almost any recursive DNS server on the Internet.</p>
<p class="tab">This option also comes in handy when scanning private networks. Sometimes only a few name servers provide proper rDNS information, and you may not even know where they are. You can scan the network for port 53 (perhaps with version detection), then try <b>nmap</b> list scans (<b>-sL</b>) specifying each name server one at a time with <b>--dns-servers</b> until you find one which works.</p>
<h3 class="tab">Options: scan techniques</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:290px"><b>-sS/sT/sA/sW/sM</b></td>
<td>TCP SYN/Connect()/ACK/ Window/Maimon scans.</td>
</tr>
<tr class="tcw">
<td><b>-sU</b></td>
<td>UDP Scan.</td>
</tr>
<tr class="tcw">
<td><b>-sN/sF/sX</b></td>
<td>TCP Null, FIN, and Xmas scans.</td>
</tr>
<tr class="tcw">
<td><b>--scanflags</b> <i>&lt;flags&gt;</i></td>
<td>Customize TCP scan flags.</td>
</tr>
<tr class="tcw">
<td><b>-sI</b> <i>&lt;zombie host</i>[<b>:</b><i>probeport</i>]&gt;</td>
<td>Idle scan.</td>
</tr>
<tr class="tcw">
<td><b>-sY/sZ</b></td>
<td>SCTP INIT/COOKIE-ECHO scans.</td>
</tr>
<tr class="tcw">
<td><b>-sO</b></td>
<td>IP protocol scan.</td>
</tr>
<tr class="tcw">
<td><b>-b</b> <i>&lt;FTP relay host&gt;</i></td>
<td><a href="/jargon/f/ftp.htm">FTP</a> bounce scan.</td>
</tr>
</table>
<p class="tab">While <b>nmap</b> has grown in functionality over the years, it began as an efficient port scanner, and that remains its core function. The simple command "<b>nmap</b> <i>target</i>" scans 1,000 TCP ports on the host <i>target</i>. While many port scanners have traditionally lumped all ports into the open or closed states, <b>nmap</b> is much more granular. It divides ports into six states: <b>open</b>, <b>closed</b>, <b>filtered</b>, <b>unfiltered</b>, <b>open|filtered</b>, or <b>closed|filtered</b>.</p>
<p class="tab">These states are not intrinsic properties of the port itself, but describe how <b>nmap</b> sees them. For example, an <b>nmap</b> scan from the same network as the target may show port 135/tcp as open, while a scan at the same time with the same options from across the Internet might show that port as filtered.</p>
<p class="tab">The six port states recognized by <b>nmap</b>:</p>
<ol>
<li>An application is actively accepting TCP connections, UDP datagrams or SCTP associations on this port. Finding these is often the primary goal of port scanning. Security-minded people know that each open port is an avenue for attack. Attackers and <a href="/jargon/p/pentest.htm">pentesters</a> want to exploit the open ports, while administrators try to close or protect them with firewalls without thwarting legitimate users. Open ports are also interesting for non-security scans because they show services available for use on the network.</li>
<li>A closed port is accessible (it receives and responds to <b>nmap</b> probe packets), but there is no application listening on it. They can be helpful in showing that a host is up on an IP address (host discovery, or ping scanning), and as part of OS detection. Because closed ports are reachable, it may be worth scanning later in case some open up. Administrators may want to consider blocking such ports with a firewall. Then they would appear in the filtered state, discussed next.</li>
<li><b>nmap</b> cannot determine whether the port is open because packet filtering prevents its probes from reaching the port. The filtering could be from a dedicated firewall device, router rules, or host-based firewall software. These ports frustrate attackers because they provide so little information. Sometimes they respond with ICMP error messages such as type 3 code 13 (destination unreachable: communication administratively prohibited), but filters that drop probes without responding are far more common. This forces <b>nmap</b> to retry several times in case the probe was dropped due to network congestion rather than filtering. This slows down the scan dramatically.</li>
<li>The unfiltered state means that a port is accessible, but <b>nmap</b> cannot determine whether it is open or closed. Only the ACK scan, which is used to map firewall rulesets, classifies ports into this state. Scanning unfiltered ports with other scan types such as Window scan, SYN scan, or FIN scan, may help resolve whether the port is open.</li>
<li><b>nmap</b> places ports in this state when it is unable to determine whether a port is open or filtered. This occurs for scan types where open ports give no response. The lack of response could also mean that a packet filter dropped the probe or any response it elicited. So <b>nmap</b> does not know for sure whether the port is open or being filtered. The UDP, IP protocol, FIN, NULL, and Xmas scans classify ports this way.</li>
<li>This state is used when <b>nmap</b> is unable to determine whether a port is closed or filtered. It is only used for the IP ID idle scan.</li>
</ol>
<p class="tab">Most scan types are only available to privileged users. This is because they send and receive raw packets, which requires root access on Unix systems. Using an administrator account on Windows is recommended, though <b>nmap</b> sometimes works for unprivileged users on that platform when WinPcap has already been loaded into the OS. Requiring root privileges was a serious limitation when <b>nmap</b> was released in 1997, as many users only had access to shared shell accounts. Now, the world is different. Computers are cheaper, far more people have always-on direct Internet access, and desktop Unix systems (including <a href="/jargon/l/linux.htm">Linux</a> and <a href="/jargon/m/macosx.htm">macOS X</a>) are prevalent. A Windows version of <b>nmap</b> is now available, allowing it to run on even more desktops. For all these reasons, users have less need to run <b>nmap</b> from limited shared shell accounts. This is fortunate, as the privileged options make <b>nmap</b> far more powerful and flexible.</p>
<p class="tab">While <b>nmap</b> attempts to produce accurate results, keep in mind that all of its insights are based on packets returned by the target machines (or firewalls in front of them). Such hosts may be untrustworthy and send responses intended to confuse or mislead <b>nmap</b>. Much more common are non-RFC-compliant hosts that do not respond as they should to <b>nmap</b> probes. <b>FIN</b>, <b>NULL</b>, and <b>Xmas</b> scans are particularly susceptible to this problem. Such issues are specific to certain scan types and so are discussed in the individual scan type entries.</p>
<p class="tab">This section documents the dozen or so port scan techniques supported by <b>nmap</b>. Only one method may be used at a time, except that UDP scan (<b>-sU</b>) and any one of the SCTP scan types (<b>-sY</b>, <b>-sZ</b>) may be combined with any one of the TCP scan types. As a memory aid, port scan type options are of the form <b>-sC</b>, where <b>C</b> is a prominent character in the scan name, usually the first. The one exception to this is the deprecated FTP bounce scan (<b>-b</b>). By default, <b>nmap</b> performs a SYN Scan, though it substitutes a connect scan if the user does not have proper privileges to send raw packets (requires root access on Unix). Of the scans listed in this section, unprivileged users can only execute connect and FTP bounce scans.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sS</b></td>
<td>TCP SYN scan.</td>
</tr>
</table>
<p class="tab"><b>SYN scan</b> is the default and most popular scan option for good reasons. It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. It is also relatively unobtrusive and stealthy since it never completes TCP connections. SYN scan works against any compliant TCP stack rather than depending on idiosyncrasies of specific platforms as <b>nmap</b>'s <b>FIN</b>/<b>NULL</b>/<b>Xmas</b>, Maimon and idle scans do. It also allows clear, reliable differentiation between the <b>open</b>, <b>closed</b>, and <b>filtered</b> states.</p>
<p class="tab">This technique is often referred to as <b>half-open scanning</b>, because you don't open a full TCP connection. You send a SYN packet, as if you are going to open a real connection and then wait for a response. A SYN/ACK indicates the port is listening (open), while a RST (reset) is indicative of a non-listener. If no response is received after several retransmissions, the port is marked as filtered. The port is also marked filtered if an ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) is received. The port is also considered open if a SYN packet (without the ACK flag) is received in response. This can be due to an extremely rare TCP feature known as a simultaneous open or split handshake connection (see <a href="https://nmap.org/misc/split-handshake.pdf" class="external">https://nmap.org/misc/split-handshake.pdf</a>).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sT</b></td>
<td>TCP connect scan.</td>
</tr>
</table>
<p class="tab"><b>TCP connect scan</b> is the default TCP scan type when SYN scan is not an option. This is the case when a user does not have raw packet privileges. Instead of writing raw packets as most other scan types do, <b>nmap</b> asks the underlying operating system to establish a connection with the target machine and port by issuing the connect system call. This is the same high-level system call that web browsers, <a href="/jargon/p/ptpcom.htm">P2P</a> clients, and most other network-enabled applications use to establish a connection. It is part of a programming interface known as the <b>Berkeley Sockets API</b>. Rather than read raw packet responses off the wire, <b>nmap</b> uses this API to obtain status information on each connection attempt.</p>
<p class="tab">When SYN scan is available, it is usually a better choice. <b>nmap</b> has less control over the high level connect call than with raw packets, making it less efficient. The system call completes connections to open target ports rather than performing the half-open reset that SYN scan does. Not only does this take longer and require more packets to obtain the same information, but target machines are more likely to log the connection. A decent IDS will catch either, but most machines have no such alarm system. Many services on your average Unix system adds a note to <a href="/jargon/s/syslog.htm">syslog</a>, and sometimes a cryptic error message, when <b>nmap</b> connects and then closes the connection without sending data. Truly pathetic services crash when this happens, though that is uncommon. An administrator who sees a bunch of connection attempts in her logs from a single system should know that she was connect scanned.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sU</b></td>
<td>UDP scans.</td>
</tr>
</table>
<p class="tab">While most popular services on the Internet run over the TCP protocol, <a href="/jargon/u/udp.htm">UDP</a> services are widely deployed. <a href="/jargon/d/dns.htm">DNS</a>, <a href="/jargon/s/snmp.htm">SNMP</a>, and <a href="/jargon/s/syslog.htm">DHCP</a> (registered ports 53, 161/162, and 67/68) are three of the most common. Because UDP scanning is generally slower and more difficult than TCP, some security auditors ignore these ports. This is a mistake, as exploitable UDP services are quite common and attackers certainly don't ignore the whole protocol. Fortunately, <b>nmap</b> helps inventory UDP ports.</p>
<p class="tab">UDP scan is activated with the <b>-sU</b> option. It can be combined with a TCP scan type such as SYN scan (<b>-sS</b>) to check both protocols during the same run.</p>
<p class="tab">UDP scan works by sending a UDP packet to every targeted port. For some common ports such as 53 and 161, a protocol-specific payload is sent, but for most ports the packet is empty. The <b>--data-length</b> option can send a fixed-length random payload to every port. If an ICMP port unreachable error (type 3, code 3) is returned, the port is closed. Other ICMP unreachable errors (type 3, codes 1, 2, 9, 10, or 13) mark the port as filtered. Occasionally, a service will respond with a UDP packet, proving that it is open. If no response is received after retransmissions, the port is classified as <b>open|filtered</b>. This indicates the port could be open, or perhaps packet filters are blocking the communication. Version detection (<b>-sV</b>) helps differentiate the truly open ports from the filtered ones.</p>
<p class="tab">A big challenge with UDP scanning is doing it quickly. Open and filtered ports rarely send any response, leaving <b>nmap</b> to time out and then conduct retransmissions in case the probe or response were lost. Closed ports are often a bigger problem. They usually send back an ICMP port unreachable error. But unlike the RST packets sent by closed TCP ports in response to a SYN or connect scan, many hosts rate limit. ICMP port unreachable messages by default. Linux and <a href="/jargon/s/solaris.htm">Solaris</a> are particularly strict about this. For example, the Linux 2.4.20 kernel limits destination unreachable messages to one per second (in <b>net/ipv4/icmp.c</b>).</p>
<p class="tab"><b>nmap</b> detects rate limiting and slows down accordingly to avoid flooding the network with useless packets that the target machine will drop. Unfortunately, a Linux-style limit of one packet per second makes a 65,536-port scan take more than 18 hours. Ideas for speeding your UDP scans up include scanning more hosts in parallel, doing a quick scan of the popular ports first, scanning from behind the firewall, and using <b>--host-timeout</b> to skip slow hosts.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sY</b></td>
<td>SCTP INIT scan.</td>
</tr>
</table>
<p class="tab"><b>SCTP</b> is a relatively new alternative to the TCP and UDP protocols, combining most characteristics of TCP and UDP, and also adding new features like multi-homing and multi-streaming. It is mostly used for SS7/SIGTRAN related services but has the potential to be used for other applications as well. SCTP INIT scan is the SCTP equivalent of a TCP SYN scan. It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. Like SYN scan, INIT scan is relatively unobtrusive and stealthy since it never completes SCTP associations. It also allows clear, reliable differentiation between the open, closed, and filtered states.</p>
<p class="tab">This technique is often referred to as <b>half-open scanning</b>, because you don't open a full SCTP association. You send an INIT chunk, as if you are going to open a real association and then wait for a response. An INIT-ACK chunk indicates the port is listening (open), while an ABORT chunk is indicative of a non-listener. If no response is received after several retransmissions, the port is marked as filtered. The port is also marked filtered if an ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) is received.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sN; -sF; -sX</b></td>
<td>TCP NULL, FIN, and Xmas scans.</td>
</tr>
</table>
<p class="tab">These three scan types (even more are possible with the <b>--scanflags</b> option described in the next section) exploit a subtle loophole in the TCP RFC to differentiate between open and closed ports. Page 65 of RFC 793 says that "if the [destination] port state is CLOSED .... an incoming segment not containing a RST causes a RST to be sent in response." Then the next page discusses packets sent to open ports without the SYN, RST, or ACK bits set, stating that: "you are unlikely to get here, but if you do, drop the segment, and return."</p>
<p class="tab">When scanning systems compliant with this RFC text, any packet not containing SYN, RST, or ACK bits result in a returned RST if the port is closed and no response at all if the port is open. As long as none of those three bits are included, any combination of the other three (FIN, PSH, and URG) are OK. <b>nmap</b> exploits this with three scan types:</p>
<ol>
<li>Null scan (<b>-sN</b>): Does not set any bits (TCP flag header is 0).</li>
<li>FIN scan (<b>-sF</b>): Sets the TCP FIN bit.</li>
<li>Xmas scan (<b>-sX</b>): Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree.</li>
</ol>
<p class="tab">These three scan types are the same in behavior except for the TCP flags set in probe packets. If a RST packet is received, the port is considered <b>closed</b>, while no response means it is <b>open|filtered</b>. The port is marked filtered if an ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) is received.</p>
<p class="tab">The key advantage to these scan types is that they can sneak through certain non-stateful firewalls and packet filtering routers. Another advantage is that these scan types are a little more stealthy than even a SYN scan. Don't count on this though&mdash;most modern IDS products can be configured to detect them. The big downside is that not all systems follow RFC 793 to the letter. Many systems send RST responses to the probes regardless of whether the port is open or not. This causes all of the ports to be labeled closed. Major operating systems that do this are Microsoft Windows, many <a href="/comp/cisco.htm">Cisco</a> devices, <a href="/jargon/b/bsdi.htm">BSDi</a>, and <a href="/comp/ibm.htm">IBM</a> OS/400. This scan does work against most Unix-based systems though. Another downside of these scans is that they can't distinguish open ports from certain filtered ones, leaving you with the response <b>open|filtered</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sA</b></td>
<td>TCP ACK scan.</td>
</tr>
</table>
<p class="tab">This scan is different than the others discussed so far in that it never determines open (or even <b>open|filtered</b>) ports. It is used to map out firewall rulesets, determining whether they are stateful or not and which ports are filtered.</p>
<p class="tab">The ACK scan probe packet has only the ACK flag set (unless you use <b>--scanflags</b>). When scanning unfiltered systems, open and closed ports will both return a RST packet. <b>nmap</b> then labels them as unfiltered, meaning that they are reachable by the ACK packet, but whether they are open or closed is undetermined. Ports that don't respond, or send certain ICMP error messages back (type 3, code 1, 2, 3, 9, 10, or 13), are labeled <b>filtered</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sW</b></td>
<td>TCP Window scan.</td>
</tr>
</table>
<p class="tab"><b>Window scan</b> is the same as ACK scan except that it exploits an implementation detail of certain systems to differentiate <b>open</b> ports from <b>closed</b> ones, rather than always printing <b>unfiltered</b> when a RST is returned. It does this by examining the <b>TCP Window</b> field of the RST packets returned. On some systems, open ports use a positive window size (even for RST packets) while closed ones have a zero window. So instead of always listing a port as unfiltered when it receives a RST back, Window scan lists the port as open or closed if the TCP Window value in that reset is positive or zero, respectively.</p>
<p class="tab">This scan relies on an implementation detail of a minority of systems out on the Internet, so you can't always trust it. Systems that don't support it will usually return all ports closed. Of course, the machine may have no open ports. If most scanned ports are closed but a few common port numbers (such as 22, 25, 53) are filtered, the system is most likely susceptible. Occasionally, systems even show the exact opposite behavior. If your scan shows 1,000 open ports and three closed or filtered ports, then those three may very well be the truly open ones.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sM</b></td>
<td>TCP Maimon scan.</td>
</tr>
</table>
<p class="tab">The <b>Maimon scan</b> is named after its discoverer, Uriel Maimon. He described the technique in Phrack Magazine issue #49 (November 1996). <b>nmap</b>, which included this technique, was released two issues later. This technique is the same as NULL, FIN, and Xmas scans, except that the probe is FIN/ACK. According to RFC 793 (TCP), a RST packet should be generated in response to such a probe whether the port is open or closed. However, Uriel noticed that many BSD-derived systems drop the packet if the port is open.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--scanflags</b></td>
<td>Custom TCP scan.</td>
</tr>
</table>
<p class="tab">Truly advanced <b>nmap</b> users need not limit themselves to the canned scan types offered. The <b>--scanflags</b> option allows you to design your own scan by specifying arbitrary TCP flags. Let your creative juices flow, while evading intrusion detection systems whose vendors paged through the <b>nmap</b> man page adding specific rules!</p>
<p class="tab">The <b>--scanflags</b> argument is a numerical flag value such as 9 (PSH and FIN), but using symbolic names is easier. Mash together any combination of URG, ACK, PSH, RST, SYN, and FIN. For example, <b>--scanflags URGACKPSHRSTSYNFIN</b> sets everything, though it's not very useful for scanning. The order these are specified in is irrelevant.</p>
<p class="tab">In addition to specifying the desired flags, you can specify a TCP scan type (such as <b>-sA</b> or <b>-sF</b>). That base type tells <b>nmap</b> how to interpret responses. For example, a SYN scan considers no-response to indicate a filtered port, while a FIN scan treats the same as <b>open|filtered</b>. <b>nmap</b> will behave the same way it does for the base scan type, except that it uses the TCP flags you specify instead. If you don't specify a base type, SYN scan is used.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sZ</b></td>
<td>SCTP COOKIE ECHO scan.</td>
</tr>
</table>
<p class="tab"><b>SCTP COOKIE ECHO scan</b> is a more advanced SCTP scan. It takes advantage of the fact that SCTP implementations should silently drop packets containing COOKIE ECHO chunks on open ports, but send an ABORT if the port is closed. The advantage of this scan type is that it is not as obvious a port scan than an INIT scan. Also, there may be non-stateful firewall rulesets blocking INIT chunks, but not COOKIE ECHO chunks. Don't be fooled into thinking that this makes a port scan invisible; a good IDS can detect SCTP COOKIE ECHO scans too. The downside is that SCTP COOKIE ECHO scans cannot differentiate between <b>open</b> and <b>filtered</b> ports, leaving you with the state <b>open|filtered</b> in both cases.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sI</b> <i>zombie host[:probeport]</i></td>
<td>Idle scan.</td>
</tr>
</table>
<p class="tab">This advanced scan method allows for a truly blind TCP port scan of the target (meaning no packets are sent to the target from your real IP address). Instead, a unique side-channel attack exploits predictable IP fragmentation ID sequence generation on the zombie host to glean information about the open ports on the target. IDS systems display the scan as coming from the zombie machine you specify (which must be up and meet certain criteria). This fascinating scan type is too complex to fully describe in this reference guide, so I wrote and posted an informal paper with full details at <a href="https://nmap.org/book/idlescan.html" class="external">https://nmap.org/book/idlescan.html</a>.</p>
<p class="tab">Besides being extraordinarily stealthy (due to its blind nature), this scan type permits mapping out IP-based trust relationships between machines. The port listing shows open ports from the perspective of the <a href="/jargon/z/zombie.htm">zombie host</a>. So you can try scanning a target using various zombies that you think might be trusted. (via router/packet filter rules).</p>
<p class="tab">You can add a colon followed by a port number to the zombie host if you want to probe a particular port on the zombie for IP ID changes. Otherwise, <b>nmap</b> uses the port it uses by default for TCP pings (80).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sO</b></td>
<td>IP protocol scan.</td>
</tr>
</table>
<p class="tab"><b>IP protocol scan</b> allows you to determine which IP protocols (TCP, ICMP, IGMP, etc.) are supported by target machines. This isn't technically a port scan since it cycles through IP protocol numbers rather than TCP or UDP port numbers. Yet it still uses the <b>-p</b> option to select scanned protocol numbers, reports its results in the normal port table format, and even uses the same underlying scan engine as the true port scanning methods. So it is close enough to a port scan that it belongs here.</p>
<p class="tab">Besides being useful in its own right, protocol scan demonstrates the power of open-source software. While the fundamental idea is pretty simple, <b>nmap</b>'s author had not received any requests for such functionality. Then in the summer of 2000, Gerhard Rieger conceived the idea, wrote an excellent patch implementing it, and sent it to the nmap-hackers mailing list. It was incorporated into the <b>nmap</b> tree and a new version was released the next day. Few pieces of commercial software have users enthusiastic enough to design and contribute their improvements.</p>
<p class="tab"><b>Protocol scan</b> works in a similar fashion to UDP scan. Instead of iterating through the port number field of a UDP packet, it sends IP packet headers and iterates through the <a href="/jargon/num/8bit.htm">eight-bit</a> IP protocol field. The headers are usually empty, containing no data and not even the proper header for the claimed protocol. The exceptions are TCP, UDP, ICMP, SCTP, and IGMP. A proper protocol header for those is included since some systems won't send them otherwise and because <b>nmap</b> already has functions to create them. Instead of watching for ICMP port unreachable messages, protocol scan is on the lookout for ICMP protocol unreachable messages. If <b>nmap</b> receives any response in any protocol from the target host, <b>nmap</b> marks that protocol as <b>open</b>. An ICMP protocol unreachable error (type 3, code 2) causes the protocol to be marked as <b>closed</b>. Other ICMP unreachable errors (type 3, code 1, 3, 9, 10, or 13) cause the protocol to be marked filtered (though they prove that ICMP is open at the same time). If no response is received after retransmissions, the protocol is marked <b>open|filtered</b></p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-b</b> <i>FTP relay host</i></td>
<td>FTP bounce scan.</td>
</tr>
</table>
<p class="tab">An interesting feature of the FTP protocol (RFC 959) is support for so-called "proxy FTP connections." This allows a user to connect to one FTP server, then ask that files be sent to a third-party server. Such a feature is ripe for abuse on many levels, so most servers have ceased supporting it. One of the abuses this feature allows is causing the FTP server to port scan other hosts. Ask the FTP server to send a file to each interesting port of a target host in turn. The error message will describe whether the port is open or not. This is a good way to bypass firewalls because organizational FTP servers are often placed where they have more access to other internal hosts than any old Internet host would. <b>nmap</b> supports FTP bounce scan with the <b>-b</b> option. It takes an argument of the form <b>username:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="56263725252139243216253324203324">[email&#160;protected]</a>:port</b>. Server is the name or IP address of a vulnerable FTP server. As with a standard URL, you may omit <b>username:password</b>, in which case anonymous login credentials (<b>user: anonymous password:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ba97cdcdcdcfc9dfc8fa">[email&#160;protected]</a></b>) are used. The port number (and preceding colon) may be omitted as well, in which case the default FTP port (21) on server is used.</p>
<p class="tab">This vulnerability was widespread in 1997 when <b>nmap</b> was released, but has largely been fixed. Vulnerable servers are still around, so it is worth trying when all else fails. If bypassing a firewall is your goal, scan the target network for port 21 (or even for any FTP services if you scan all ports with version detection) and use the ftp-bounce NSE script. <b>nmap</b> will tell you whether the host is vulnerable or not. If you are trying to cover your tracks, you don't need to (and, in fact, shouldn't) limit yourself to hosts on the target network. Before you go scanning random Internet addresses for vulnerable FTP servers, consider that sysadmins may not appreciate you abusing their servers in this way.</p>
<h3 class="tab">Options: port specification and scan order</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:220px"><b>-p</b> <i>&lt;port ranges&gt;</i></td>
<td>Only scan specified ports.</td>
</tr>
<tr class="tcw">
<td><b>-F</b></td>
<td>Fast mode; Scan fewer ports than the default scan.</td>
</tr>
<tr class="tcw">
<td><b>-r</b></td>
<td>Scan ports consecutively; don't randomize.</td>
</tr>
<tr class="tcw">
<td><b>--top-ports</b> <i>&lt;number&gt;</i></td>
<td>Scan &lt;number&gt; most common ports.</td>
</tr>
<tr class="tcw">
<td><b>--port-ratio</b> <i>&lt;ratio&gt;</i></td>
<td>Scan ports more common than &lt;ratio&gt;.</td>
</tr>
</table>
<p class="tab">In addition to all of the scan methods discussed previously, <b>nmap</b> offers options for specifying which ports are scanned and whether the scan order is randomized or sequential. By default, <b>nmap</b> scans the most common 1,000 ports for each protocol.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-p</b> <i>port ranges</i></td>
<td>Only scan specified ports.</td>
</tr>
</table>
<p class="tab">This option specifies which ports you want to scan and overrides the default. Individual port numbers are OK, as are ranges separated by a hyphen (e.g., <b>1-1023</b>). The beginning and/or end values of a range may be omitted, causing <b>nmap</b> to use <b>1</b> and <b>65535</b>, respectively. So you can specify <b>-p-</b> to scan ports from 1 through 65535. Scanning port zero is allowed if you specify it explicitly. For IP protocol scanning (<b>-sO</b>), this option specifies the protocol numbers you want to scan for (0&ndash;255).</p>
<p class="tab">When scanning both TCP and UDP ports, you can specify a particular protocol by preceding the port numbers by <b>T:</b> or <b>U:</b>. The qualifier lasts until you specify another qualifier. For example, the argument <b>-p U:53,111,137,T:21-25,80,139,8080</b> would scan UDP ports <b>53</b>, <b>111</b>, and <b>137</b>, and the listed TCP ports. Note that to scan both UDP and TCP, you have to specify <b>-sU</b> and at least one TCP scan type (such as <b>-sS</b>, <b>-sF</b>, or <b>-sT</b>). If no protocol qualifier is given, the port numbers are added to all protocol lists. Ports can also be specified by name according to what the port is referred to in the nmap-services. You can even use the wildcards <b>*</b> and <b>?</b> with the names. For example, to scan FTP and all ports whose names begin with "<b>http</b>", use <b>-p ftp,http*</b>. Be careful about shell expansions and quote the argument to <b>-p</b> if unsure. Ranges of ports can be surrounded by square brackets to indicate ports inside that range that appear in nmap-services. For example, the following scans all ports in nmap-services equal to or below 1024: <b>-p [-1024]</b>. Be careful with shell expansions and quote the argument to <b>-p</b> if unsure.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-F</b></td>
<td>Fast (limited port) scan.</td>
</tr>
</table>
<p class="tab">Specifies that you want to scan fewer ports than the default. Normally <b>nmap</b> scans the most common 1,000 ports for each scanned protocol. With <b>-F</b>, this is reduced to 100.</p>
<p class="tab"><b>nmap</b> needs an nmap-services file with frequency information to know which ports are the most common. If port frequency information isn't available, perhaps because of the use of a custom nmap-services file, <b>-F</b> means to scan only ports that are named in the services file (normally <b>nmap</b> scans all named ports plus ports 1&ndash;1024).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-r</b></td>
<td>Don't randomize ports.</td>
</tr>
</table>
<p class="tab">By default, <b>nmap</b> randomizes the scanned port order (except that certain commonly accessible ports are moved near the beginning for efficiency reasons). This randomization is normally desirable, but you can specify <b>-r</b> for sequential (sorted from lowest to highest) port scanning instead.</p>
<h3 class="tab">Options: service/version detection</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:270px"><b>-sV</b></td>
<td>Probe open ports to determine service/version info.</td>
</tr>
<tr class="tcw">
<td><b>--version-intensity</b> <i>&lt;level&gt;</i></td>
<td>Set from 0 (light) to 9 (try all probes).</td>
</tr>
<tr class="tcw">
<td><b>--version-light</b></td>
<td>Limit to most likely probes (intensity 2).</td>
</tr>
<tr class="tcw">
<td><b>--version-all</b></td>
<td>Try every single probe (intensity 9).</td>
</tr>
<tr class="tcw">
<td><b>--version-trace</b></td>
<td>Show detailed version scan activity (for debugging).</td>
</tr>
</table>
<p class="tab">Point <b>nmap</b> at a remote machine and it might tell you that ports 25/tcp, 80/tcp, and 53/udp are open. Using its nmap-services database of about 2,200 well-known services, <b>nmap</b> would report that those ports probably correspond to a mail server (<a href="/jargon/s/smtp.htm">SMTP</a>), web server (<a href="/jargon/h/http.htm">HTTP</a>), and name server (<a href="/jargon/d/dns.htm">DNS</a>) respectively. This look up is usually accurate&mdash;the vast majority of daemons listening on TCP port 25 are, in fact, mail servers. However, you should not bet your security on this. People can and do run services on strange ports.</p>
<p class="tab">Even if <b>nmap</b> is right, and the hypothetical server above is running SMTP, HTTP, and DNS servers, that is not much information. When doing vulnerability assessments (or even simple network inventories) of your companies or clients, you want to know which mail and DNS servers and versions are running. Having an accurate version number helps dramatically in determining the vulnerability of a server. Version detection helps you obtain this information.</p>
<p class="tab">After TCP and/or UDP ports are discovered using one of the other scan methods, version detection interrogates those ports to determine more about what is actually running. The nmap-service-probes database contains probes for querying various services and match <a href="/jargon/e/expressi.htm">expressions</a> to recognize and <a href="/jargon/p/parse.htm">parse</a> responses. <b>nmap</b> tries to determine the service protocol (e.g., FTP, SSH, Telnet, HTTP), the application name (e.g., ISC BIND, <a href="/jargon/a/apache.htm">Apache</a> httpd, Solaris telnetd), the version number, hostname, device type (e.g., <a href="/jargon/p/printer.htm">printer</a>, <a href="/jargon/r/router.htm">router</a>), the OS family (e.g., Windows, Linux). When possible, <b>nmap</b> also gets the CPE (Common Platform Enumeration) representation of this information. Sometimes miscellaneous details like whether an <a href="/jargon/x/xwin.htm">X server</a> is open to connections, the <a href="/jargon/s/ssh.htm">SSH</a> protocol version, or the <a href="/jargon/k/kazaa.htm">KaZaA</a> username, are available. Of course, most services don't provide all of this information. If <b>nmap</b> was compiled with OpenSSL support, it will connect to <a href="/jargon/s/ssl.htm">SSL</a> servers to deduce the service listening behind that encryption layer. Some UDP ports are left in the <b>open|filtered</b> state after a UDP port scan is unable to determine whether the port is <b>open</b> or <b>filtered</b>. Version detection will try to elicit a response from these ports (as it does with open ports), and change the state to open if it succeeds. <b>open|filtered</b> TCP ports are treated the same way. Note that the <b>nmap -A</b> option enables version detection among other things. A paper documenting the workings, usage, and customization of version detection is available at <a href="https://nmap.org/book/vscan.html" class="external">https://nmap.org/book/vscan.html</a>.</p>
<p class="tab">When <a href="/jargon/r/rpc.htm">RPC</a> services are discovered, the <b>nmap</b> RPC grinder is automatically used to determine the RPC program and version numbers. It takes all the TCP/UDP ports detected as RPC and floods them with SunRPC program <a href="/jargon/n/null.htm">NULL</a> commands in an attempt to determine whether they are RPC ports, and if so, what program and version number they serve up. Thus you can effectively obtain the same info as rpcinfo <b>-p</b> even if the target's portmapper is behind a firewall (or protected by TCP wrappers). Decoys do not currently work with RPC scan.</p>
<p class="tab">When <b>nmap</b> receives responses from a service but cannot match them to its database, it prints out a special fingerprint and a URL for you to submit if to if you know for sure what is running on the port. Please take a couple minutes to make the submission so that the find can benefit everyone. Thanks to these submissions, <b>nmap</b> has about 6,500 pattern matches for more than 650 protocols such as SMTP, FTP, HTTP, etc.</p>
<p class="tab">Version detection is enabled and controlled with the following options:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sV</b></td>
<td>Version detection.</td>
</tr>
</table>
<p class="tab">Enables version detection, as discussed above. Alternatively, you can use <b>-A</b>, which enables version detection among other things.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sR</b></td>
<td>an alias for <b>-sV</b>.</td>
</tr>
</table>
<p class="tab">Before March 2011, it was used to active the RPC grinder separately from version detection, but now these options are always combined.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--allports</b></td>
<td>Don't exclude any ports from version detection.</td>
</tr>
</table>
<p class="tab">By default, <b>nmap</b> version detection skips TCP port 9100 because some printers print anything sent to that port, leading to several pages of HTTP GET requests, <a href="/jargon/b/binary.htm">binary</a> SSL session requests, etc. This behavior can be changed by modifying or removing the <i>Exclude</i> directive in nmap-service-probes, or you can specify <b>--allports</b> to scan all ports regardless of any <i>Exclude</i> directive.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--version-intensity</b> <i>intensity</i></td>
<td>Set version scan intensity.</td>
</tr>
</table>
<p class="tab">When performing a version scan (<b>-sV</b>), <b>nmap</b> sends a series of probes that are each assigned a rarity value between one and nine. The lower-numbered probes are effective against a wide variety of common services, while the higher-numbered ones are rarely useful. The intensity level specifies which probes should be applied. The higher the number, the more likely it is the service will be correctly identified. However, high intensity scans take longer. The intensity must be between 0 and 9. The default is 7. When a probe is registered to the target port via the nmap-service-probes ports directive, that probe is tried regardless of intensity level. This ensures that the DNS probes are always be attempted against any open port 53, the SSL probe will be done against 443, etc.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--version-light</b></td>
<td>Enable light mode.</td>
</tr>
</table>
<p class="tab">This is a convenience alias for <b>--version-intensity 2</b>. This light mode makes version scanning much faster, but it is slightly less likely to identify services.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--version-all</b></td>
<td>Try every single probe.</td>
</tr>
</table>
<p class="tab">An alias for <b>--version-intensity 9</b>, ensuring that every single probe is attempted against each port.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--version-trace</b></td>
<td>Trace version scan activity.</td>
</tr>
</table>
<p class="tab">This causes <b>nmap</b> to print out extensive debugging info about what version scanning is doing. It is a subset of what you get with <b>--packet-trace</b>.</p>
<h3 class="tab">Options: script scan</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:340px"><b>-sC</b></td>
<td>Equivalent to --script=default.</td>
</tr>
<tr class="tcw">
<td><b>--script=</b><i>&lt;Lua scripts&gt;</i></td>
<td>&lt;Lua scripts&gt; is a comma separated list of directories, script-files or script-categories.</td>
</tr>
<tr class="tcw">
<td><b>--script-args=</b><i>&lt;n1=v1,[n2=v2,...]&gt;</i></td>
<td>Provide arguments to scripts.</td>
</tr>
<tr class="tcw">
<td><b>--script-args-file=</b><i>filename</i></td>
<td>Provide NSE script args in a file.</td>
</tr>
<tr class="tcw">
<td><b>--script-trace</b></td>
<td>Show all data sent and received.</td>
</tr>
<tr class="tcw">
<td><b>--script-updatedb</b></td>
<td>Update the script database.</td>
</tr>
<tr class="tcw">
<td><b>--script-help=</b><i>&lt;Lua scripts&gt;</i></td>
<td>Show help about scripts. &lt;Lua scripts&gt; is a comma separated list of script-files or script-categories.</td>
</tr>
</table>
<p class="tab">The <b>Nmap Scripting Engine</b> (<b>NSE</b>) is one of <b>nmap</b>'s most powerful and flexible features. It allows users to write (and share) simple scripts using the Lua programming language.</p>
<p class="tab">Tasks we had in mind when creating the system include network discovery, more sophisticated version detection, and vulnerability detection. NSE can even be used for vulnerability exploitation.</p>
<p class="tab">To reflect those different uses and to simplify the choice of which scripts to run, each script contains a field associating it with one or more categories. Currently defined categories are <b>auth</b>, <b>broadcast</b>, <b>default</b>, <b>discovery</b>, <b>dos</b>, <b>exploit</b>, <b>external</b>, <b>fuzzer</b>, <b>intrusive</b>, <b>malware</b>, <b>safe</b>, <b>version</b>, and <b>vuln</b>. These are all described at <a href="https://nmap.org/book/nse-usage.html#nse-categories" class="external">https://nmap.org/book/nse-usage.html#nse-categories</a>.</p>
<p class="tab">Scripts are not run in a <a href="/jargon/s/sandbox.htm">sandbox</a> and thus could accidentally or maliciously damage your system or invade your privacy. Never run scripts from third parties unless you trust the authors or have carefully audited the scripts yourself.</p>
<p class="tab">The <b>nmap</b> Scripting Engine is described in detail at <a href="https://nmap.org/book/nse.html" class="external">https://nmap.org/book/nse.html</a> and is controlled by the following options:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-sC</b></td>
<td>Scan with default scripts.</td>
</tr>
</table>
<p class="tab">Performs a script scan using the default set of scripts. It is equivalent to <b>--script=default</b>. Some of the scripts in this category are considered intrusive and should not run against a target network without permission.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--script</b> <i>filename</i>|<i>category</i>|<i>directory</i>|<i>expression</i>[<b>,</b>...]</td>
<td>Scan with ...</td>
</tr>
</table>
<p class="tab">Runs a script scan using the comma-separated list of file names, script categories, and directories. Each element in the list may also be a Boolean expression describing a more complex set of scripts. Each element is interpreted first as an expression, then as a category, and finally as a file or directory name.</p>
<p class="tab">There are two special features for advanced users only. One is to <a href="/jargon/p/prefix.htm">prefix</a> script names and expressions with <b>+</b> to force them to run even if they normally wouldn't (e.g., the relevant service wasn't detected on the target port). The other is that the argument <b>all</b> may be used to specify every script in <b>nmap</b>'s database. Be cautious with this because NSE contains dangerous scripts, such as <a href="/jargon/e/exploit.htm">exploits</a>, <a href="/jargon/b/brutforc.htm">brute force</a> authentication crackers, and <a href="/jargon/d/dos.htm">denial of service attacks</a>.</p>
<p class="tab">File and directory names may be relative or absolute. Absolute names are used directly. Relative paths are looked for in the scripts of each of the following places until found:</p>
<ul>
<li><b>--datadir</b></li>
<li><b>$NMAPDIR</b>.</li>
<li><b>~/.nmap</b> (not searched on Windows).</li>
<li><b>HOME\AppData\Roaming\nmap</b> (only on Windows).</li>
<li>the directory containing the <b>nmap</b> executable</li>
<li>the directory containing the <b>nmap</b> executable, followed by <b>../share/nmap</b></li>
<li><b>NMAPDATADIR</b>.</li>
<li>the current directory.</li>
</ul>
<p class="tab">When a directory name is given, <b>nmap</b> loads every file in the directory whose name ends with .nse. All other files are ignored and directories are not searched recursively. When a filename is given, it does not have to have the .nse extension; it is added automatically if necessary. <b>nmap</b> scripts are stored in a scripts subdirectory of the <b>nmap</b> data directory by default (see <a href="https://nmap.org/book/data-files.html" class="external">https://nmap.org/book/data-files.html</a>).</p>
<p class="tab">For efficiency, scripts are indexed in a database stored in <b>scripts/script.db</b>, which lists the category or categories where each script belongs. When referring to scripts from <b>script.db</b> by name, you can use a shell-style &lsquo;<b>*</b>&rsquo; wildcard. For instance:</p>
<pre class="tab tcy">nmap --script "http-*"</pre>
<p class="tab">Loads all scripts whose name starts with <b>http-</b>, such as <b>http-auth</b> and <b>http-open-proxy</b>. The argument to <b>--script</b> had to be in quotes to protect the wildcard from the shell.</p>
<p class="tab">More complicated script selection is done using the <b>AND</b>, <b>OR</b>, and <b>NOT</b> operators to build <a href="/jargon/b/boolean.htm">Boolean expressions</a>. The operators have the same precedence as in Lua: <b>NOT</b> is the highest, followed by <b>AND</b> and then <b>OR</b>. You can alter precedence using parentheses. Because expressions contain space characters it is necessary to quote them.</p>
<pre class="tab tcy">nmap --script "not intrusive"</pre>
<p class="tab">Loads every script except for those in the <b>intrusive</b> category.</p>
<pre class="tab tcy">nmap --script "default or safe"</pre>
<p class="tab">This is functionally equivalent to <b>nmap --script "default,safe"</b>. It loads all scripts that are in the <b>default</b> category or the <b>safe</b> category or both.</p>
<pre class="tab tcy">nmap --script "default and safe"</pre>
<p class="tab">Loads those scripts that are in both the <b>default</b> and <b>safe</b> categories.</p>
<pre class="tab tcy">nmap --script "(default or safe or intrusive) and not http-*"</pre>
<p class="tab">Loads scripts in the <b>default</b>, <b>safe</b>, or <b>intrusive</b> categories, except for those whose names start with <b>http-</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--script-args</b> <i>n1</i><b>=</b><i>v1</i><b>,</b><i>n2</i><b>=</b>{<i>n3</i><b>=</b><i>v3</i>}<b>,</b><i>n4</i><b>=</b>{<i>v4</i><b>,</b><i>v5</i>}</td>
<td>NSE script execution with arguments.</td>
</tr>
</table>
<p class="tab">Lets you provide arguments to NSE scripts. Arguments are a comma-separated list of <b>name=value</b> pairs. Names and values may be strings not containing <a href="/jargon/w/whitspac.htm">whitespace</a> or the characters &lsquo;<b>{</b>&rsquo;, &lsquo;<b>}</b>&rsquo;, &lsquo;<b>=</b>&rsquo;, or &lsquo;<b>,</b>&rsquo;. To include one of these characters in a string, enclose the string in single or double quotes. Within a quoted string, &lsquo;<b>\</b>&rsquo; escapes a quote. A backslash is only used to escape quotation marks in this special case; in all other cases a backslash is interpreted literally. Values may also be tables enclosed in <b>{}</b>, as in Lua. A table may contain simple string values or more name-value pairs, including nested tables. Many scripts qualify their arguments with the script name, as in <b>xmpp-info.server_name</b>. You may use that full qualified version to affect the specified script, or you may pass the unqualified version (<b>server_name</b> in this case) to affect all scripts using that argument name. A script will first check for its fully qualified argument name (the name specified in its documentation) before it accepts an unqualified argument name. A complex example of script arguments is <b>--script-args 'user=foo,pass=",{}=bar",whois={whodb=nofollow+ripe},xmpp-info.server_name=localhost'.</b> The online NSE Documentation Portal at <a href="https://nmap.org/nsedoc/" class="external">https://nmap.org/nsedoc/</a> lists the arguments that each script accepts.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--script-args-file</b> <i>filename</i></td>
<td>Execute NSE script with arguments from file <i>filename.</i></td>
</tr>
</table>
<p class="tab">Lets you load arguments to NSE scripts from a file. Any arguments on the command line supersede ones in the file. The file is an absolute path, or a path relative to <b>nmap</b>'s usual search path (<b>NMAPDIR</b>, etc.) Arguments can be comma-separated or newline-separated, but otherwise follow the same rules as for <b>--script-args</b>, without requiring special quoting and escaping since they are not parsed by the shell.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--script-help</b> <i>filename|category|directory|expression|all[,...]</i></td>
<td>Script help.</td>
</tr>
</table>
<p class="tab">Shows help about scripts. For each script matching the given specification, <b>nmap</b> prints the script name, its categories, and its description. The specifications are the same as those accepted by <b>--script</b>; so for example if you want help about the <b>ftp-anon</b> script, you would run <b>nmap --script-help ftp-anon</b>. In addition to getting help for individual scripts, you can use this as a preview of what scripts will run for a specification, for example with <b>nmap --script-help default</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--script-trace</b></td>
<td>Trace packets and data sent and received.</td>
</tr>
</table>
<p class="tab">This option does what <b>--packet-trace</b> does, only one ISO layer higher. If this option is specified all incoming and outgoing communication performed by a script is printed. The displayed information includes the communication protocol, the source, the target and the transmitted data. If more than 5% of all transmitted data is not printable, then the trace output is in a hex dump format. Specifying <b>--packet-trace</b> enables script tracing too.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--script-updatedb</b></td>
<td>Update the Script database.</td>
</tr>
</table>
<p class="tab">This option updates the script database found in <b>scripts/script.db</b> which is used by <b>nmap</b> to determine the available default scripts and categories. It is only necessary to update the database if you have added or removed NSE scripts from the default scripts directory or if you have changed the categories of any script. This option is generally used by itself: <b>nmap --script-updatedb.</b></p>
<h3 class="tab">Options: OS detection</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:160px"><b>-O</b></td>
<td>Enable OS detection.</td>
</tr>
<tr class="tcw">
<td><b>--osscan-limit</b></td>
<td>Limit OS detection to promising targets.</td>
</tr>
<tr class="tcw">
<td><b>--osscan-guess</b></td>
<td>Guess OS more aggressively.</td>
</tr>
</table>
<p class="tab">One of <b>nmap</b>'s best-known features is remote OS detection using TCP/IP stack fingerprinting. <b>nmap</b> sends a series of TCP and UDP packets to the remote host and examines practically every bit in the responses. After performing several tests such as TCP ISN sampling, TCP options support and ordering, IP ID sampling, and the initial window size check, <b>nmap</b> compares the results to its <b>nmap-os-db</b> database of more than 2,600 known OS fingerprints and prints out the OS details if there is a match. Each fingerprint includes a free-form textual description of the OS, and a classification which provides the vendor name (e.g., Sun), underlying OS (e.g., Solaris), OS generation (e.g., 10), and device type (general purpose, <a href="/jargon/r/router.htm">router</a>, <a href="/jargon/s/switch.htm">switch</a>, <a href="/jargon/c/console.htm">game console</a>, etc). Most fingerprints also have a Common Platform Enumeration (CPE) representation, like <b>cpe:/o:linux:kernel:2.6</b>.</p>
<p class="tab">If <b>nmap</b> is unable to guess the OS of a machine, and conditions are good (e.g., at least one open port and one closed port were found), <b>nmap</b> provides a URL you can use to submit the fingerprint if you know (for sure) the OS running on the machine. By doing this, you contribute to the pool of operating systems known to <b>nmap</b> and thus it is more accurate for everyone.</p>
<p class="tab"><b>OS detection</b> enables some other tests which make use of information that is gathered during the process. One of these is TCP Sequence Predictability Classification. This measures approximately how hard it is to establish a forged TCP connection against the remote host. It is useful for exploiting source-IP based trust relationships (<a href="/unix/urlogin.htm">rlogin</a>, firewall filters, etc) or for hiding the source of an attack. This sort of <a href="/jargon/s/spoof.htm">spoofing</a> is rarely performed any more, but many machines are still vulnerable to it. The actual difficulty number is based on statistical sampling and may fluctuate. It is generally better to use the English classification such as "worthy challenge" or "trivial joke". This is only reported in normal output in verbose (<b>-v</b>) mode. When verbose mode is enabled with <b>-O</b>, IP ID sequence generation is also reported. Most machines are in the "incremental" class, indicating they increment the ID field in the IP header for each packet they send. This makes them vulnerable to several advanced information gathering and spoofing attacks.</p>
<p class="tab">Another bit of extra information enabled by OS detection is a guess at a target's uptime. This uses the TCP timestamp option (RFC 1323[10]) to guess when a machine was last <a href="/jargon/r/reboot.htm">rebooted</a>. The guess can be inaccurate due to the timestamp counter not being initialized to zero or the counter overflowing and wrapping around, so it is printed only in verbose mode.</p>
<p class="tab">A paper documenting the workings, usage, and customization of OS detection is available at <a href="https://nmap.org/book/osdetect.html" class="external">https://nmap.org/book/osdetect.html</a>.</p>
<p class="tab">OS detection is enabled and controlled with the following options:</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-O</b></td>
<td>Enable OS detection.</td>
</tr>
</table>
<p class="tab">Enables OS detection, as discussed above. Alternatively, you can use <b>-A</b> to enable OS detection with other things.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--osscan-limit</b></td>
<td>Limit OS detection to promising targets.</td>
</tr>
</table>
<p class="tab">OS detection is far more effective if at least one open and one closed TCP port are found. Set this option and <b>nmap</b> will not even try OS detection against hosts that do not meet this criteria. This can save substantial time, particularly on <b>-Pn</b> scans against many hosts. It only matters when OS detection is requested with <b>-O</b> or <b>-A</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--osscan-guess, --fuzzy</b></td>
<td>Guess OS detection results.</td>
</tr>
</table>
<p class="tab">When <b>nmap</b> is unable to detect a perfect OS match, it sometimes offers up near-matches as possibilities. The match has to be very close for <b>nmap</b> to do this by default. Either of these (equivalent) options make <b>nmap</b> guess more aggressively. <b>nmap</b> still tells you when an imperfect match is printed and display its confidence level (percentage) for each guess.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--max-os-tries</b></td>
<td>Set the maximum number of OS detection tries against a target.</td>
</tr>
</table>
<p class="tab">When <b>nmap</b> performs OS detection against a target and fails to find a perfect match, it usually repeats the attempt. By default, <b>nmap</b> tries five times if conditions are favorable for OS fingerprint submission, and twice when conditions aren't so good. Specifying a lower <b>--max-os-tries</b> value (such as <b>1</b>) speeds <b>nmap</b> up, though you miss out on retries which could potentially identify the OS. Alternatively, a high value may be set to allow even more retries when conditions are favorable. This is rarely done, except to generate better fingerprints for submission and integration into the <b>nmap</b> OS database.</p>
<h3 class="tab" id="timing">Options: timing and performance</h3>
<p class="tab">Options which take <i>&lt;time&gt;</i> are by default in <a href="/jargon/s/second.htm">seconds</a>; for other units, append '<b>ms</b>' (<a href="/jargon/m/millisec.htm">milliseconds</a>), '<b>s</b>' (seconds), '<b>m</b>' (minutes), or '<b>h</b>' (hours) to the value (e.g., <b>30m</b>).</p>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:400px"><b>-T</b><i>&lt;0-5&gt;</i></td>
<td>Set timing template (higher is faster).</td>
</tr>
<tr class="tcw">
<td><b>--min-hostgroup/max-hostgroup</b> <i>&lt;size&gt;</i></td>
<td>Parallel host scan group sizes.</td>
</tr>
<tr class="tcw">
<td><b>--min-parallelism/max-parallelism</b> <i>&lt;numprobes&gt;</i></td>
<td>Probe parallelization.</td>
</tr>
<tr class="tcw">
<td><b>--min-rtt-timeout/max-rtt-timeout/<br>initial-rtt-timeout</b> &lt;time&gt;</td>
<td>Specifies probe round trip time.</td>
</tr>
<tr class="tcw">
<td><b>--max-retries</b> <i>&lt;tries&gt;</i></td>
<td>Caps number of port scan probe retransmissions.</td>
</tr>
<tr class="tcw">
<td><b>--host-timeout</b> <i>&lt;time&gt;</i></td>
<td>Give up on target after this long.</td>
</tr>
<tr class="tcw">
<td><b>--scan-delay/--max-scan-delay</b> <i>&lt;time&gt;</i></td>
<td>Adjust delay between probes.</td>
</tr>
<tr class="tcw">
<td><b>--min-rate</b> <i>&lt;number&gt;</i></td>
<td>Send packets no slower than &lt;number&gt; per second.</td>
</tr>
<tr class="tcw">
<td><b>--max-rate</b> <i>&lt;number&gt;</i></td>
<td>Send packets no faster than &lt;number&gt; per second.</td>
</tr>
</table>
<p class="tab">One of the highest <b>nmap</b> development priorities has always been performance. A default scan (<b>nmap hostname</b>) of a host on my local network takes a fifth of a second. That is barely enough time to blink, but adds up when you are scanning hundreds or thousands of hosts. Moreover, certain scan options such as UDP scanning and version detection can increase scan times substantially. So can certain firewall configurations, particularly response rate limiting. While <b>nmap</b> utilizes parallelism and many advanced algorithms to accelerate these scans, the user has ultimate control over how <b>nmap</b> runs. Expert users carefully craft <b>nmap</b> commands to obtain only the information they care about while meeting their time constraints.</p>
<p class="tab">Techniques for improving scan times include omitting non-critical tests, and upgrading to the latest version of <b>nmap</b> (performance enhancements are made frequently). Optimizing timing parameters can also make a substantial difference. Those options are listed below.</p>
<p class="tab">Some options accept a time parameter. This is specified in seconds by default, though you can append &lsquo;<b>ms</b>&rsquo;, &lsquo;<b>s</b>&rsquo;, &lsquo;<b>m</b>&rsquo;, or &lsquo;<b>h</b>&rsquo; to the value to specify milliseconds, seconds, minutes, or hours. So the <b>--host-timeout</b> arguments <b>900000ms</b>, <b>900</b>, <b>900s</b>, and <b>15m</b> all do the same thing.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--min-hostgroup</b> <i>numhosts</i>, <b>--max-hostgroup</b> <i>numhosts</i></td>
<td>Adjust parallel scan group sizes.</td>
</tr>
</table>
<p class="tab"><b>nmap</b> can port scan or version scan multiple hosts in parallel. <b>nmap</b> does this by dividing the target IP space into groups and then scanning one group at a time. In general, larger groups are more efficient. The downside is that host results can't be provided until the whole group is finished. So if <b>nmap</b> started out with a group size of 50, the user would not receive any reports (except for the updates offered in verbose mode) until the first 50 hosts are completed.</p>
<p class="tab">By default, <b>nmap</b> takes a compromise approach to this conflict. It starts out with a group size as low as five so the first results come quickly and then increases the groupsize to as high as 1024. The exact default numbers depend on the options given. For efficiency reasons, <b>nmap</b> uses larger group sizes for UDP or few-port TCP scans.</p>
<p class="tab">When a maximum group size is specified with <b>--max-hostgroup</b>, <b>nmap</b> never exceeds that size. Specify a minimum size with <b>--min-hostgroup</b> and <b>nmap</b> will try to keep group sizes above that level. <b>nmap</b> may have to use smaller groups than you specify if there are not enough target hosts left on a given interface to fulfill the specified minimum. Both may be set to keep the group size within a specific range, though this is rarely desired.</p>
<p class="tab">These options do not have an effect during the host discovery phase of a scan. This includes plain ping scans (<b>-sn</b>). Host discovery always works in large groups of hosts to improve speed and accuracy.</p>
<p class="tab">The primary use of these options is to specify a large minimum group size so that the full scan runs more quickly. A common choice is 256 to scan a network in Class C sized chunks. For a scan with many ports, exceeding that number is unlikely to help much. For scans of only a few port numbers, host group sizes of 2048 or more may be helpful.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--min-parallelism</b> <i>numprobes</i>, <b>--max-parallelism</b> <i>numprobes</i></td>
<td>Adjust probe parallelization.</td>
</tr>
</table>
<p class="tab">These options control the total number of probes outstanding for a host group. They are used for port scanning and host discovery. By default, <b>nmap</b> calculates an ever-changing ideal parallelism based on network performance. If packets are being dropped, <b>nmap</b> slows down and allows fewer outstanding probes. The ideal probe number slowly rises as the network proves itself worthy. These options place minimum or maximum bounds on that variable. By default, the ideal parallelism can drop to one if the network proves unreliable and rise to several hundred in perfect conditions.</p>
<p class="tab">The most common usage is to set <b>--min-parallelism</b> to a number higher than one to speed up scans of poorly performing hosts or networks. This is a risky option to play with, as setting it too high may affect accuracy. Setting this also reduces <b>nmap</b>'s ability to control parallelism dynamically based on network conditions. A value of <b>10</b> might be reasonable, though most users would only adjust this value as a last resort.</p>
<p class="tab">The <b>--max-parallelism</b> option is sometimes set to one to prevent <b>nmap</b> from sending more than one probe at a time to hosts. The <b>--scan-delay</b> option, discussed later, is another way to do this.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--min-rtt-timeout</b> <i>time</i>, <b>--max-rtt-timeout</b> <i>time</i>, <b>--initial-rtt-timeout</b> <i>time</i></td>
<td>Adjust probe timeouts.</td>
</tr>
</table>
<p class="tab"><b>nmap</b> maintains a running timeout value for determining how long it will wait for a probe response before giving up or retransmitting the probe. This is calculated based on the response times of previous probes.</p>
<p class="tab">If the network <a href="/jargon/l/latency.htm">latency</a> shows itself to be significant and variable, this timeout can grow to several seconds. It also starts at a conservative (high) level and may stay that way for a while when <b>nmap</b> scans unresponsive hosts.</p>
<p class="tab">Specifying a lower <b>--max-rtt-timeout</b> and <b>--initial-rtt-timeout</b> than the defaults can cut scan times significantly. This is particularly true for pingless (<b>-Pn</b>) scans, and those against heavily filtered networks. Don't get too aggressive though. The scan can end up taking longer if you specify such a low value that many probes are timing out and retransmitting while the response is in transit.</p>
<p class="tab">If all the hosts are on a local network, 100 milliseconds (<b>--max-rtt-timeout 100ms</b>) is a reasonable aggressive value. If routing is involved, ping a host on the network first with the ICMP ping utility, or with a custom packet crafter such as <b>nping</b> that is more likely to get through a firewall. Look at the maximum round trip time out of ten packets or so. You might want to double that for the <b>--initial-rtt-timeout</b> and triple or quadruple it for the <b>--max-rtt-timeout</b>. Generally, it is best not to set the maximum RTT below 100 ms no matter what the ping times are, nor exceed 1000 ms.</p>
<p class="tab"><b>--min-rtt-timeout</b> is a rarely used option that could be useful when a network is so unreliable that even <b>nmap</b>'s default is too aggressive. Since <b>nmap</b> only reduces the timeout down to the minimum when the network seems to be reliable, this need is unusual and should be reported as a bug to the nmap-dev mailing list.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--max-retries</b> <i>numtries</i></td>
<td>Specify the maximum number of port scan probe retransmissions.</td>
</tr>
</table>
<p class="tab">When <b>nmap</b> receives no response to a port scan probe, it could mean the port is filtered. Or maybe the probe or response was lost on the network. It is also possible that the target host has rate limiting enabled that temporarily blocked the response. So <b>nmap</b> tries again by retransmitting the initial probe. If <b>nmap</b> detects poor network reliability, it may try many more times before giving up on a port. While this benefits accuracy, it also lengthens scan times. When performance is critical, scans may be sped up by limiting the number of retransmissions allowed. You can even specify <b>--max-retries 0</b> to prevent any retransmissions, though that is only recommended for situations such as informal surveys where occasional missed ports and hosts are acceptable.</p>
<p class="tab">The default (with no <b>-T</b> template) is to allow ten retransmissions. If a network seems reliable and the target hosts aren't rate limiting, <b>nmap</b> usually only does one retransmission. So most target scans aren't even affected by dropping <b>--max-retries</b> to a low value such as three. Such values can substantially speed scans of slow (rate limited) hosts. You usually lose some information when <b>nmap</b> gives up on ports early, though that is preferable to letting the <b>--host-timeout</b> expire and losing all information about the target.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--host-timeout</b> <i>time</i></td>
<td>Give up on slow target hosts.</td>
</tr>
</table>
<p class="tab">Some hosts take a long time to scan. This may be due to poorly performing or unreliable networking hardware or software, packet rate limiting, or a restrictive firewall. The slowest few percent of the scanned hosts can eat up a majority of the scan time. Sometimes it is best to cut your losses and skip those hosts initially. Specify <b>--host-timeout</b> with the maximum amount of time you are willing to wait. For example, specify <b>30m</b> to ensure that <b>nmap</b> doesn't waste more than half an hour on a single host. Note that <b>nmap</b> may be scanning other hosts at the same time during that half an hour, so it isn't a complete loss. A host that times out is skipped. No port table, OS detection, or version detection results are printed for that host.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--scan-delay</b> <i>time</i>, <b>--max-scan-delay</b> <i>time</i></td>
<td>Adjust delay between probes.</td>
</tr>
</table>
<p class="tab">This option causes <b>nmap</b> to wait at least the given amount of time between each probe it sends to a given host. This is particularly useful in the case of rate limiting. Solaris machines (among others) will usually respond to UDP scan probe packets with only one ICMP message per second. Any more than that sent by <b>nmap</b> will be wasteful. A <b>--scan-delay</b> of <b>1s</b> will keep <b>nmap</b> at that slow rate. <b>nmap</b> tries to detect rate limiting and adjust the scan delay accordingly, but it doesn't hurt to specify it explicitly if you already know what rate works best.</p>
<p class="tab">When <b>nmap</b> adjusts the scan delay upward to cope with rate limiting, the scan slows down dramatically. The <b>--max-scan-delay</b> option specifies the largest delay that <b>nmap</b> allows. A low <b>--max-scan-delay</b> can speed up <b>nmap</b>, but it is risky. Setting this value too low can lead to wasteful packet retransmissions and possible missed ports when the target implements strict rate limiting.</p>
<p class="tab">Another use of <b>--scan-delay</b> is to evade threshold based intrusion detection and prevention systems (IDS/IPS).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--min-rate</b> <i>number</i>, <b>--max-rate</b> <i>number</i></td>
<td>Directly control the scanning rate.</td>
</tr>
</table>
<p class="tab"><b>nmap</b>'s dynamic timing does a good job of finding an appropriate speed at which to scan. Sometimes, however, you may happen to know an appropriate scanning rate for a network, or you may have to guarantee that a scan will be finished by a certain time. Or perhaps you must keep <b>nmap</b> from scanning too quickly. The <b>--min-rate</b> and <b>--max-rate</b> options are designed for these situations.</p>
<p class="tab">When the <b>--min-rate</b> option is given <b>nmap</b> will do its best to send packets as fast as or faster than the given rate. The argument is a positive real number representing a packet rate in packets per second. For example, specifying <b>--min-rate 300</b> means that <b>nmap</b> will try to keep the sending rate at or above 300 packets per second. Specifying a minimum rate does not keep <b>nmap</b> from going faster if conditions warrant.</p>
<p class="tab">Likewise, <b>--max-rate</b> limits a scan's sending rate to a given maximum. Use <b>--max-rate 100</b>, for example, to limit sending to 100 packets per second on a fast network. Use <b>--max-rate 0.1</b> for a slow scan of one packet every ten seconds. Use <b>--min-rate</b> and <b>--max-rate</b> together to keep the rate inside a certain range.</p>
<p class="tab">These two options are global, affecting an entire scan, not individual hosts. They only affect port scans and host discovery scans. Other features like OS detection implement their timing.</p>
<p class="tab">There are two conditions when the actual scanning rate may fall below the requested minimum. The first is if the minimum is faster than the fastest rate at which <b>nmap</b> can send, which is dependent on hardware. In this case, <b>nmap</b> sends packets as fast as possible, but be aware that such high rates are likely to cause a loss of accuracy. The second case is when <b>nmap</b> has nothing to send, for example at the end of a scan when the last probes are sent and <b>nmap</b> is waiting for them to time out or be responded to. It's normal to see the scanning rate drop at the end of a scan or between hostgroups. The sending rate may temporarily exceed the maximum to make up for unpredictable delays, but on average the rate stays at or below the maximum. Specifying a minimum rate should be done with care. Scanning faster than a network can support may lead to a loss of accuracy. In some cases, using a faster rate can make a scan take longer than it would with a slower rate. This is because <b>nmap</b>'s adaptive retransmission algorithms detects the network congestion caused by an excessive scanning rate and increase the number of retransmissions to improve accuracy. So even though packets are sent at a higher rate, more packets are sent overall. Cap the number of retransmissions with the <b>--max-retries</b> option if you need to set an upper limit on total scan time.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--defeat-rst-ratelimit</b></td>
<td>Ignore RST rate limiting.</td>
</tr>
</table>
<p class="tab">Many hosts have long used rate limiting. To reduce the number of ICMP error messages (such as port-unreachable errors) they send. Some systems now apply similar rate limits to the RST (reset) packets they generate. This can slow <b>nmap</b> down dramatically as it adjusts its timing to reflect those rate limits. You can tell <b>nmap</b> to ignore those rate limits (for port scans such as SYN scan which don't treat non-responsive ports as open) by specifying <b>--defeat-rst-ratelimit</b>.</p>
<p class="tab">Using this option can reduce accuracy, as some ports appears non-responsive because <b>nmap</b> didn't wait long enough for a rate-limited RST response. With a SYN scan, the non-response results in the port being labeled filtered rather than the closed state we see when RST packets are received. This option is useful when you only care about open ports, and distinguishing between closed and filtered ports isn't worth the extra time.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--nsock-engine</b> <i>epoll|select</i></td>
<td>Use nsock multiplexing.</td>
</tr>
</table>
<p class="tab">Enforce use of a given nsock IO multiplexing engine. Only the <b>select</b>-based fallback engine is guaranteed to be available on your system. Engines are named after the name of the IO management facility they leverage. Engines currently implemented are <b>epoll</b> and <b>select</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-T</b> <i>paranoid|sneaky|polite|normal|aggressive|insane</i></td>
<td>Set a timing template.</td>
</tr>
</table>
<p class="tab">While the fine-grained timing controls discussed in the previous section are powerful and effective, some people find them confusing. Moreover, choosing the appropriate values can sometimes take more time than the scan you are trying to optimize. So <b>nmap</b> offers a simpler approach, with six timing templates. You can specify them with the <b>-T</b> option and their number (<b>0</b>&ndash;<b>5</b>) or their name. The template names are <b>paranoid</b> (<b>0</b>), <b>sneaky</b> (<b>1</b>), <b>polite</b> (<b>2</b>), <b>normal</b> (<b>3</b>), <b>aggressive</b> (<b>4</b>), and <b>insane</b> (<b>5</b>). The first two are for IDS evasion. <b>Polite</b> mode slows down the scan to use less <a href="/jargon/b/bandwidt.htm">bandwidth</a> and target machine resources. <b>Normal</b> mode is the default and so <b>-T3</b> does nothing. <b>Aggressive</b> mode speeds scans up by making the assumption that you are on a reasonably fast and reliable network. Finally, <b>insane</b> mode assumes that you are on an extraordinarily fast network or are willing to sacrifice some accuracy for speed.</p>
<p class="tab">These templates allow the user to specify how aggressive they want to be, while leaving <b>nmap</b> to pick the exact timing values. The templates also make some minor speed adjustments for which fine-grained control options do not currently exist. For example, <b>-T4</b> prohibits the dynamic scan delay from exceeding 10 ms for TCP ports and <b>-T5</b> caps that value at 5 ms. Templates are used in combination with fine-grained controls, and the fine-grained controls you specify take precedence over the timing template default for that parameter. It is recommended to use <b>-T4</b> when scanning reasonably modern and reliable networks. Keep that option even when you add fine-grained controls, so that you benefit from those extra minor optimizations that it enables.</p>
<p class="tab">If you are on a decent broadband or Ethernet connection, use <b>-T4</b>. Some people love <b>-T5</b> though it is too aggressive for many users' tastes. People sometimes specify <b>-T2</b> because they think it is less likely to crash hosts or because they consider themselves to be polite in general. They often don't realize how slow <b>-T polite</b> really is. Their scan may take ten times longer than a default scan. Machine crashes and bandwidth problems are rare with the default timing options (<b>-T3</b>) and so it is normally recommended for cautious scanners. Omitting version detection is far more effective than playing with timing values at reducing these problems.</p>
<p class="tab">While <b>-T0</b> and <b>-T1</b> may be useful for avoiding IDS alerts, they take an extraordinarily long time to scan thousands of machines or ports. For such a long scan, you may prefer to set the exact timing values you need rather than rely on the canned <b>-T0</b> and <b>-T1</b> values.</p>
<p class="tab">The main effects of <b>T0</b> are serializing the scan so only one port is scanned at a time, and waiting five minutes between sending each probe. <b>T1</b> and <b>T2</b> are similar but they only wait 15 seconds and 0.4 seconds, respectively, between probes. <b>T3</b> is <b>nmap</b>'s default behavior, which includes parallelization. <b>-T4</b> does the equivalent of <b>--max-rtt-timeout 1250ms --initial-rtt-timeout 500ms --max-retries 6</b> and sets the maximum TCP scan delay to 10 milliseconds. <b>T5</b> does the equivalent of <b>--max-rtt-timeout 300ms --min-rtt-timeout 50ms --initial-rtt-timeout 250ms --max-retries 2 --host-timeout 15m</b> and setting the maximum TCP scan delay to 5 ms.</p>
<h3 class="tab">Options: firewall/IDS evasion and spoofing</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:330px"><b>-f, --mtu</b> <i>&lt;val&gt;</i></td>
<td>Fragment packets (optionally w/given MTU).</td>
</tr>
<tr class="tcw">
<td><b>-D</b> <i>&lt;decoy1,decoy2[,ME],...&gt;</i></td>
<td>Cloak a scan with decoys.</td>
</tr>
<tr class="tcw">
<td><b>-S</b> <i>&lt;IP_Address&gt;</i></td>
<td>Spoof source address.</td>
</tr>
<tr class="tcw">
<td><b>-e</b> <i>&lt;iface&gt;</i></td>
<td>Use specified interface.</td>
</tr>
<tr class="tcw">
<td><b>-g/--source-port</b> <i>&lt;portnum&gt;</i></td>
<td>Use given port number.</td>
</tr>
<tr class="tcw">
<td><b>--data-length</b> <i>&lt;num&gt;</i></td>
<td>Append random data to sent packets.</td>
</tr>
<tr class="tcw">
<td><b>--ip-options</b> <i>&lt;options&gt;</i></td>
<td>Send packets with specified IP options.</td>
</tr>
<tr class="tcw">
<td><b>--ttl</b> <i>&lt;val&gt;</i></td>
<td>Set IP time-to-live field.</td>
</tr>
<tr class="tcw">
<td><b>--spoof-mac</b> <i>&lt;mac address/prefix/<br>vendor name&gt;</i></td>
<td>Spoof your MAC address.</td>
</tr>
<tr class="tcw">
<td><b>--badsum</b></td>
<td>Send packets with a bogus TCP/UDP/SCTP checksum.</td>
</tr>
</table>
<p class="tab">Many Internet pioneers envisioned a global open network with a universal IP address space allowing virtual connections between any two nodes. This allows hosts to act as true peers, serving and retrieving information from each other. People could access all of their home systems from work, changing the climate control settings or unlocking the doors for early guests. This vision of universal connectivity is stifled by address space shortages and security concerns. In the early 1990s, organizations began deploying firewalls for the express purpose of reducing connectivity. Huge networks were cordoned off from the unfiltered Internet by application <a href="/jargon/p/proxyser.htm">proxies</a>, network address translation, and packet filters. The unrestricted flow of information gave way to tight regulation of approved communication channels and the content that passes over them.</p>
<p class="tab">Network obstructions such as firewalls can make mapping a network exceedingly difficult. It will not get any easier, as stifling casual reconnaissance is often a key goal of implementing the devices. Nevertheless, <b>nmap</b> offers many features to help understand these complex networks, and to verify that filters are working as intended. It even supports mechanisms for bypassing poorly implemented defenses. One of the best methods of understanding your network security posture is to try to defeat it. Place yourself in the mindset of an attacker, and deploy techniques from this section against your networks. Launch an FTP bounce scan, idle scan, fragmentation attack, or try to tunnel through one of your own proxies.</p>
<p class="tab">In addition to restricting network activity, companies are increasingly monitoring traffic with intrusion detection systems (IDS). All of the major IDS ship with rules designed to detect <b>nmap</b> scans because scans are sometimes a precursor to attacks. Many of these products have recently morphed into intrusion prevention systems (IPS) that actively block traffic deemed malicious. Unfortunately, for network administrators and IDS vendors, reliably detecting bad intentions by analyzing packet data is a tough problem. Attackers with patience, skill, and the help of certain <b>nmap</b> options can usually pass by IDS undetected. Meanwhile, administrators must cope with large numbers of false positive results where innocent activity is misdiagnosed and alerted-on or blocked.</p>
<p class="tab">Occasionally people suggest that <b>nmap</b> should not offer features for evading firewall rules or sneaking past IDS. They argue that these features are as likely to be misused by attackers as used by administrators to enhance security. The problem with this logic is that these methods would still be used by attackers, who would find other tools or patch the functionality into <b>nmap</b>. Meanwhile, administrators would find it that much harder to do their jobs. Deploying only modern, patched FTP servers is a far more powerful defense than trying to prevent the distribution of tools implementing the FTP bounce attack.</p>
<p class="tab">There is no magic bullet (or <b>nmap</b> option) for detecting and subverting firewalls and IDS systems. It takes skill and experience. A tutorial is beyond the scope of this reference guide, which only lists the relevant options and describes what they do.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-f</b></td>
<td>Fragment packets.</td>
</tr>
<tr class="tcw">
<td><b>--mtu</b></td>
<td>Fragment packets using the specified <a href="/jargon/m/mtu.htm">MTU.</a></td>
</tr>
</table>
<p class="tab">The <b>-f</b> option causes the requested scan (including ping scans) to use tiny fragmented IP packets. The idea is to split up the TCP header over several packets to make it harder for packet filters, intrusion detection systems, and other annoyances to detect what you are doing. Be careful with this. Some programs have trouble handling these tiny packets. The old-school sniffer named Sniffit segmentation faulted immediately upon receiving the first fragment. Specify this option once, and <b>nmap</b> splits the packets into eight bytes or less after the IP header. So a 20-byte TCP header would be split into three packets. Two with eight bytes of the TCP header, and one with the final four. Of course, each fragment also has an IP header. Specify <b>-f</b> again to use 16 bytes per fragment (reducing the number of fragments); or you can specify your own offset size with the <b>--mtu</b> option. Don't also specify <b>-f</b> if you use <b>--mtu</b>. The offset must be a multiple of eight. While fragmented packets won't get by packet filters and firewalls that queue all IP fragments, such as the <b>CONFIG_IP_ALWAYS_DEFRAG</b> option in the Linux kernel, some networks can't afford the performance hit this causes and thus leave it disabled. Others can't enable this because fragments may take different routes into their networks. Some source systems defragment outgoing packets in the kernel. Linux with the <a href="/jargon/i/iptables.htm">iptables</a> connection tracking module is one such example. Do a scan while a <a href="/jargon/s/sniffing.htm">sniffer</a> such as <a href="/jargon/e/ethereal.htm">Wireshark</a> is running to ensure that sent packets are fragmented. If your host OS is causing problems, try the <b>--send-eth</b> option to bypass the IP layer and send raw Ethernet frames.</p>
<p class="tab">Fragmentation is only supported for <b>nmap</b>'s raw packet features, which includes TCP and UDP port scans (except connect scan and FTP bounce scan) and OS detection. Features such as version detection and the <b>nmap</b> Scripting Engine generally don't support fragmentation because they rely on your host's TCP stack to communicate with target services.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-D</b> <i>decoy1[,decoy2][,ME][,...]</i></td>
<td>Cloak a scan with decoys.</td>
</tr>
</table>
<p class="tab">Causes a decoy scan to be performed, which makes it appear to the remote host that the host(s) you specify as decoys are scanning the target network too. Thus their IDS might report 5&ndash;10 port scans from unique IP addresses, but they won't know which IP was scanning them and which were innocent decoys. While this can be defeated through router path tracing, response-dropping, and other active mechanisms, it is generally an effective technique for hiding your IP address.</p>
<p class="tab">Separate each decoy host with commas, and you can optionally use <b>ME</b> as one of the decoys to represent the position for your real IP address. If you put <b>ME</b> in the sixth position or later, some common port scan detectors (such as Solar Designer's excellent Scanlogd) are unlikely to show your IP address at all. If you don't use <b>ME</b>, <b>nmap</b> puts you in a random position. You can also use <b>RND</b> to generate a random, non-reserved IP address, or <b>RND:number</b> to generate number addresses.</p>
<p class="tab">Note that the hosts you use as decoys should be up or you might accidentally SYN flood your targets. Also, it will be pretty easy to determine which host is scanning if only one is actually up on the network. You might want to use IP addresses instead of names (so the decoy networks don't see you in their nameserver logs).</p>
<p class="tab">Decoys are used both in the initial ping scan (using ICMP, SYN, ACK, or whatever) and during the actual port scanning phase. Decoys are also used during remote OS detection (<b>-O</b>). Decoys do not work with version detection or TCP connect scan. When a scan delay is in effect, the delay is enforced between each batch of spoofed probes, not between each probe. Because decoys are sent as a batch all at once, they may temporarily violate congestion control limits.</p>
<p class="tab">It is worth noting that using too many decoys may slow your scan and potentially even make it less accurate. Also, some <a href="/jargon/i/isp.htm">ISPs</a> will filter out your spoofed packets, but many do not restrict spoofed IP packets at all.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-S</b> <i>IP_Address</i></td>
<td>Spoof source address.</td>
</tr>
</table>
<p class="tab">In some circumstances, <b>nmap</b> may not be able to determine your source address (<b>nmap</b> will tell you if this is the case). In this situation, use <b>-S</b> with the IP address of the interface through which you want to send packets.</p>
<p class="tab">Another possible use of this flag is to spoof the scan to make the targets think someone else is scanning them. Imagine a company being repeatedly port scanned by a competitor. The <b>-e</b> option and <b>-Pn</b> are generally required for this sort of usage. Note that you usually won't receive reply packets back (they are addressed to the IP you are spoofing), so <b>nmap</b> won't produce useful reports.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-e</b> <i>interface</i></td>
<td>Use specified interface.</td>
</tr>
</table>
<p class="tab">Tells <b>nmap</b> what interface on which to send and receive packets. <b>nmap</b> should be able to detect this automatically, but it will tell you if it cannot.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--source-port</b> <i>portnumber</i>, <b>-g</b> <i>portnumber</i></td>
<td>Spoof source port number.</td>
</tr>
</table>
<p class="tab">One surprisingly common misconfiguration is to trust traffic based only on the source port number. It is easy to understand how this works. An administrator sets up a shiny new firewall, only to be flooded with complaints from ungrateful users whose applications stopped working. In particular, DNS may be broken because the UDP DNS replies from external servers can no longer enter the network. FTP is another common example. In active FTP transfers, the remote server tries to establish a connection back to the client to transfer the requested file.</p>
<p class="tab">Secure solutions to these problems exist, often in the form of application-level proxies or protocol-parsing firewall modules. Unfortunately, there are also easier, insecure solutions. Noting that DNS replies come from port 53 and active FTP from port 20, many administrators have fallen into the trap of allowing incoming traffic from those ports. They often assume that no attacker would notice and exploit such firewall holes. In other cases, administrators consider this a short-term stop-gap measure until they can implement a more secure solution. Then they forget the security upgrade.</p>
<p class="tab">Overworked network administrators are not the only ones to fall into this trap. Numerous products have shipped with these insecure rules. Even Microsoft is guilty. The <a href="/jargon/i/ipsec.htm">IPsec</a> filters that shipped with <a href="/jargon/w/win2000.htm">Windows 2000</a> and <a href="/jargon/w/winxp.htm">Windows XP</a> contain an implicit rule that allows all TCP or UDP traffic from port 88 (<a href="/jargon/k/kerberos.htm">Kerberos</a>). In another well-known case, versions of the Zone Alarm personal firewall up to 2.1.25 allowed any incoming UDP packets with the source port 53 (DNS) or 67 (DHCP).</p>
<p class="tab"><b>nmap</b> offers the <b>-g</b> and <b>--source-port</b> options (they are equivalent) to exploit these weaknesses. Provide a port number and <b>nmap</b> sends packets from that port where possible. Most scanning operations that use raw sockets, including SYN and UDP scans, support the option completely. The option notably doesn't have an effect for any operations that use normal operating system sockets, including DNS requests, TCP connect scan, version detection, and script scanning. Setting the source port also doesn't work for OS detection, because <b>nmap</b> must use different port numbers for certain OS detection tests to work properly.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--data-length</b> <i>number</i></td>
<td>Append random data to sent packets.</td>
</tr>
</table>
<p class="tab">Normally <b>nmap</b> sends minimalist packets containing only a header. So its TCP packets are generally 40 bytes and ICMP echo requests are 28. Some UDP ports and IP protocols get a custom payload by default. This option tells <b>nmap</b> to append the given number of random bytes to most of the packets it sends, and not to use any protocol-specific payloads. Use <b>--data-length 0</b> for no random or protocol-specific payloads. OS detection (<b>-O</b>) packets are not affected because their accuracy requires probe consistency, but most pinging and portscan packets support this. It slows things down a little, but can make a scan slightly less conspicuous.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--ip-options</b> <i>S|R [route]|L [route]|T|U ...</i>,<br><b>--ip-options</b> <i>hex string</i></td>
<td>Send packets with specified IP options.</td>
</tr>
</table>
<p class="tab">The <b>IP protocol</b>[13] offers several options which may be placed in packet headers. Unlike the ubiquitous TCP options, IP options are rarely seen due to practicality and security concerns. In fact, many Internet routers block the most dangerous options such as source routing. Yet options can still be useful in some cases for determining and manipulating the network route to target machines. For example, you can use the record route option to determine a path to a target even when more traditional traceroute-style approaches fail. Or if your packets are being dropped by a certain firewall, you can specify a different route with the strict or loose source routing options.</p>
<p class="tab">The most powerful way to specify IP options is to pass in values as the argument to <b>--ip-options</b>. Precede each hex number with <b>\x</b> then the two digits. You may repeat certain characters by following them with an asterisk and then the number of times you want them to repeat. For example, <b>\x01\x07\x04\x00*36\x01</b> is a hex string containing 36 NUL bytes.</p>
<p class="tab"><b>nmap</b> also offers a shortcut mechanism for specifying options. Pass the letter <b>R</b>, <b>T</b>, or <b>U</b> to request record-route, record-timestamp, or both options together, respectively. Loose or strict source routing may be specified with an <b>L</b> or <b>S</b> followed by a space and then a space-separated list of IP addresses.</p>
<p class="tab">If you want to see the options in packets sent and received, specify <b>--packet-trace</b>. For more information and examples of using IP options with <b>nmap</b>, see <a href="http://seclists.org/nmap-dev/2006/q3/52" class="external">http://seclists.org/nmap-dev/2006/q3/52</a>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--ttl</b> <i>value</i></td>
<td>Set IP time-to-live field.</td>
</tr>
</table>
<p class="tab">Sets the IPv4 time-to-live field in sent packets to the given value.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--randomize-hosts</b></td>
<td>Randomize target host order.</td>
</tr>
</table>
<p class="tab">Tells <b>nmap</b> to shuffle each group of up to 16384 hosts before it scans them. This can make the scans less obvious to various network monitoring systems, especially when you combine it with slow timing options. If you want to randomize over larger group sizes, increase <b>PING_GROUP_SZ</b> in <b>nmap.h</b> and recompile. An alternative solution is to generate the target IP list with a list scan (<b>-sL -n -oN filename</b>), randomize it with a <a href="/jargon/p/perl.htm">Perl</a> script, then provide the whole list to <b>nmap</b> with <b>-iL</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--spoof-mac</b> <i>MAC address, prefix, or vendor name</i></td>
<td>Spoof MAC address.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to use the given MAC address for all of the raw Ethernet frames it sends. This option implies <b>--send-eth</b> to ensure that <b>nmap</b> actually sends Ethernet-level packets. The MAC given can take several formats. If it is the number <b>0</b>, <b>nmap</b> chooses a completely random MAC address for the session. If the given string is an even number of hex digits (with the pairs optionally separated by a colon), <b>nmap</b> uses those as the MAC. If fewer than 12 hex digits are provided, <b>nmap</b> fills in the remainder of the six bytes with random values. If the argument isn't a zero or hex string, <b>nmap</b> looks through <b>nmap-mac-prefixes</b> to find a vendor name containing the given string (it is case insensitive). If a match is found, <b>nmap</b> uses the vendor's OUI (three-byte prefix) and fills out the remaining three bytes randomly. Valid <b>--spoof-mac</b> argument examples are <b>Apple</b>, <b>0</b>, <b>01:02:03:04:05:06</b>, <b>deadbeefcafe</b>, <b>0020F2</b>, and <b>Cisco</b>. This option only affects raw packet scans such as SYN scan or OS detection, not connection-oriented features such as version detection or the Nmap Scripting Engine.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--badsum</b></td>
<td>Send packets with bogus TCP/UDP checksums.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to use an invalid TCP, UDP or SCTP checksum for packets sent to target hosts. Since virtually all host IP stacks properly drop these packets, any responses received are likely coming from a firewall or IDS that didn't bother to verify the checksum. For more details on this technique, see <a href="https://nmap.org/p60-12.html" class="external">https://nmap.org/p60-12.html</a>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--adler32</b></td>
<td>Use deprecated Adler32 instead of CRC32C for SCTP checksums.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to use the deprecated Adler32 algorithm for calculating the SCTP checksum. If <b>--adler32</b> is not given, CRC-32C (Castagnoli) is used. RFC 2960[14] originally defined Adler32 as checksum algorithm for SCTP; RFC 4960 later redefined the SCTP checksums to use CRC-32C. Current SCTP implementations should be using CRC-32C, but to elicit responses from old, legacy SCTP implementations, it may be preferable to use Adler32.</p>
<h3 class="tab">Options: output</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:260px"><b>-oN/-oX/-oS/-oG</b> <i>&lt;file&gt;</i></td>
<td>Output scan in normal, XML, s|&lt;rIpt kIddi3, and <a href="/unix/ugrep.htm">Grep</a>-able format, respectively, to the given filename.</td>
</tr>
<tr class="tcw">
<td><b>-oA</b> <i>&lt;basename&gt;</i></td>
<td>Output in the three major formats at once.</td>
</tr>
<tr class="tcw">
<td><b>-v</b></td>
<td>Increase verbosity level (use <b>-vv</b> or more for greater effect).</td>
</tr>
<tr class="tcw">
<td><b>-d</b></td>
<td>Increase debugging level (use <b>-dd</b> or more for greater effect).</td>
</tr>
<tr class="tcw">
<td><b>--reason</b></td>
<td>Display the reason a port is in a particular state.</td>
</tr>
<tr class="tcw">
<td><b>--open</b></td>
<td>Only show open (or possibly open) ports.</td>
</tr>
<tr class="tcw">
<td><b>--packet-trace</b></td>
<td>Show all packets sent and received.</td>
</tr>
<tr class="tcw">
<td><b>--iflist</b></td>
<td>Print host interfaces and routes (for debugging).</td>
</tr>
<tr class="tcw">
<td><b>--log-errors</b></td>
<td>Log errors/warnings to the normal-format output file.</td>
</tr>
<tr class="tcw">
<td><b>--append-output</b></td>
<td>Append to rather than clobber specified output files.</td>
</tr>
<tr class="tcw">
<td><b>--resume</b> <i>&lt;filename&gt;</i></td>
<td>Resume an aborted scan.</td>
</tr>
<tr class="tcw">
<td><b>--stylesheet</b> <i>&lt;path/URL&gt;</i></td>
<td>XSL stylesheet to transform <a href="/jargon/x/xml.htm">XML</a> output to HTML.</td>
</tr>
<tr class="tcw">
<td><b>--webxml</b></td>
<td>Reference stylesheet from <a href="https://nmap.org/" class="external">nmap.org</a> for more portable XML.</td>
</tr>
<tr class="tcw">
<td><b>--no-stylesheet</b></td>
<td>Prevent associating of XSL stylesheet w/XML output.</td>
</tr>
</table>
<p class="tab">Any security tool is only as useful as the output it generates. Complex tests and algorithms are of little value if they aren't presented in an organized and comprehensible fashion. Given the number of ways <b>nmap</b> is used by people and other software, no single format can please everyone. So <b>nmap</b> offers several formats, including the interactive mode for humans to read directly and XML for easy parsing by software.</p>
<p class="tab">In addition to offering different output formats, <b>nmap</b> provides options for controlling the verbosity of output and debugging messages. Output types may be sent to standard output or named files, which <b>nmap</b> can append to or clobber. Output files may also be used to resume aborted scans.</p>
<p class="tab"><b>nmap</b> makes output available in five different formats. The default is called interactive output, and it is sent to standard output (stdout). There is also normal output, which is similar to interactive except that it displays less runtime information and warnings since it is expected to be analyzed after the scan completes rather than interactively.</p>
<p class="tab">XML output is one of the most important output types, as it can be converted to HTML, easily parsed by programs such as <b>nmap</b> graphical user interfaces, or imported into databases.</p>
<p class="tab">The two remaining output types are the simple grepable output which includes most information for a target host on a single line, and <a href="/jargon/s/scriptki.htm">sCRiPt KiDDi3</a> 0utPUt (for users who consider themselves |&lt;-r4d).</p>
<p class="tab">While interactive output is the default and has no associated command-line options, the other four format options use the same syntax. They take one argument, which is the filename in which the results should be stored. Multiple formats may be specified, but each format may only be specified once. For example, you may want to save the standard output for your review while saving XML of the same scan for programmatic analysis. You might do this with the options <b>-oX myscan.xml -oN myscan.nmap</b>. While this chapter uses the simple names like <b>myscan.xml</b> for brevity, more descriptive names are generally recommended. The names chosen are a matter of personal preference, though I use long ones that incorporate the scan date and a word or two describing the scan, placed in a directory named after the company I'm scanning.</p>
<p class="tab">While these options save results to files, <b>nmap</b> still prints interactive output to stdout as usual. For example, the command <b>nmap -oX myscan.xml target</b> prints XML to <b>myscan.xml</b> and fills standard output with the same interactive results it would have printed if <b>-oX</b> wasn't specified at all. You can change this by passing a hyphen character as the argument to one of the format types. This causes <b>nmap</b> to deactivate interactive output, and instead print results in the format you specified to the standard output stream. So the command <b>nmap -oX - target</b> sends only XML output to stdout. Serious errors may still be printed to the normal error stream (stderr).</p>
<p class="tab">Unlike some <b>nmap</b> arguments, the space between the logfile option flag (such as <b>-oX</b>) and the filename or hyphen is mandatory. If you omit the flags and give arguments such as <b>-oG-</b> or <b>-oXscan.xml</b>, a <a href="/jargon/b/backcomp.htm">backward compatibility</a> feature of <b>nmap</b> causes the creation of normal format output files named <b>G-</b> and <b>Xscan.xml</b> respectively.</p>
<p class="tab">All of these arguments support <a href="/unix/strftime.htm">strftime</a>-like conversions in the filename. <b>%H</b>, <b>%M</b>, <b>%S</b>, <b>%m</b>, <b>%d</b>, <b>%y</b>, and <b>%Y</b> are all the same as in <b>strftime</b>. <b>%T</b> is the same as <b>%H%M%S</b>, <b>%R</b> is the same as <b>%H%M</b>, and <b>%D</b> is the same as <b>%m%d%y</b>. A <b>%</b> followed by any other character yields that character (<b>%%</b> gives you a percent symbol). So <b>-oX 'scan-%T-%D.xml'</b> uses an XML file with a name in the form of <b>scan-144840-121307.xml</b>.</p>
<p class="tab"><b>nmap</b> also offers options to control scan verbosity and to append to output files rather than clobbering them. All of these options are described below.</p>
<h2><a href="nmap">Nmap output formats:</a></h2>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-oN</b> <i>filespec</i></td>
<td>Normal output.</td>
</tr>
</table>
<p class="tab">Requests that normal output be directed to the given filename. As discussed above, this differs slightly from interactive output.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-oX</b> <i>filespec</i></td>
<td>XML output.</td>
</tr>
</table>
<p class="tab">Requests that XML output be directed to the given filename. <b>nmap</b> includes a document type definition (DTD) which allows XML parsers to validate <b>nmap</b> XML output. While it is primarily intended for programmatic use, it can also help humans interpret <b>nmap</b> XML output. The DTD defines the legal elements of the format and often enumerates the attributes and values they can take on. The latest version is always available from <a href="https://svn.nmap.org/nmap/docs/nmap.dtd" class="external">https://svn.nmap.org/nmap/docs/nmap.dtd</a>.</p>
<p class="tab">XML offers a stable format that is easily parsed by software. Free XML parsers are available for all major computer languages, including <a href="/jargon/c/c.htm">C/C++</a>, <a href="/jargon/p/perl.htm">Perl</a>, <a href="/jargon/p/python.htm">Python</a>, and <a href="/jargon/j/java.htm">Java</a>. People have even written bindings for most of these languages to handle <b>nmap</b> output and execution specifically. Examples are <b>Nmap::Scanner</b>[15] and <b>Nmap::Parser</b> in Perl <a href="/jargon/c/cpan.htm">CPAN</a>. In most cases that a non-trivial application interfaces with <b>nmap</b>, XML is the preferred format.</p>
<p class="tab">The XML output references an XSL <a href="/jargon/s/styleshe.htm">stylesheet</a> that can format the results as HTML. The easiest way to use this is to load the XML output in a web browser such as <a href="/jargon/f/firefox.htm">Firefox</a> or <a href="/jargon/m/msie.htm">IE</a>. By default, this only works on the machine you ran <b>nmap</b> on (or a similarly configured one) due to the hard-coded <b>nmap.xsl</b> filesystem path. Use the <b>--webxml</b> or <b>--stylesheet</b> options to create portable XML files that render as HTML on any web-connected machine.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-oS</b> <i>filespec</i></td>
<td>ScRipT KIdd|3 oUTpuT.</td>
</tr>
</table>
<p class="tab">Script kiddie output is like interactive output, except that it is post-processed to better suit the <a href="/jargon/e/elite.htm">l33t</a> <a href="/jargon/h/hacker.htm">HaXXorZ</a> who previously looked down on <b>nmap</b> due to its consistent capitalization and spelling. Humor impaired people should note that this option was added as a joke.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-oG</b> <i>filespec</i></td>
<td>Grepable output.</td>
</tr>
</table>
<p class="tab">This output format is covered last because it is deprecated. The XML output format is far more powerful, and is nearly as convenient for experienced users. XML is a standard for which several excellent parsers are available, while grepable output is essentially the author's personal, simple hack. XML is extensible to support new <b>nmap</b> features as they are released, while those features must often be omitted from grepable output for lack of a place to put them.</p>
<p class="tab">Nevertheless, grepable output is still quite popular. It is a simple format that lists each host on one line and can be trivially searched and parsed with standard Unix tools such as <a href="/unix/ugrep.htm">grep</a>, <a href="/unix/uawk.htm">awk</a>, <b>cut</b>, <a href="/unix/used.htm">sed</a>, <a href="/jargon/d/diff.htm">diff</a>, and <a href="/jargon/p/perl.htm">Perl</a>. Finding all the hosts with the SSH port open or that are running Solaris takes only a simple grep to identify the hosts, <a href="/jargon/p/pipe.htm">piped</a> to an <b>awk</b> or <b>cut</b> command to print the desired fields.</p>
<p class="tab">Grepable output consists of comments (lines starting with a pound (<b>#</b>)) and target lines. A target line includes a combination of six labeled fields, separated by tabs and followed with a colon. The fields are <b>Host</b>, <b>Ports</b>, <b>Protocols</b>, <b>Ignored State</b>, <b>OS</b>, <b>Seq Index</b>, <b>IP ID</b>, and <b>Status</b>.</p>
<p class="tab">The most important of these fields is generally <b>Ports</b>, which gives details on each interesting port. It is a comma separated list of port entries. Each port entry represents one interesting port, and takes the form of seven slash (<b>/</b>) separated subfields. Those subfields are: <b>Port number</b>, <b>State</b>, <b>Protocol</b>, <b>Owner</b>, <b>Service</b>, <b>SunRPC info</b>, and <b>Version info</b>.</p>
<p class="tab">As with XML output, this page does not allow for documenting the entire format. A more detailed look at the <b>nmap</b> grepable output format is available from <a href="https://nmap.org/book/output-formats-grepable-output.html" class="external">https://nmap.org/book/output-formats-grepable-output.html</a>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-oA</b> <i>basename</i></td>
<td>Output to all formats.</td>
</tr>
</table>
<p class="tab">As a convenience, you may specify <b>-oA</b> basename to store scan results in <b>normal</b>, <b>XML</b>, and <b>grepable</b> formats at once. They are stored in <b>basename.nmap</b>, <b>basename.xml</b>, and <b>basename.gnmap</b>, respectively. As with most programs, you can prefix the file names with a directory path, such as <b>~/nmaplogs/myvictim/</b> on Unix or <b>c:\hacking\whoimscanning</b> on Windows.</p>
<h3 class="tab">Verbosity and debugging options</h3>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-v</b></td>
<td>Increase verbosity level.</td>
</tr>
</table>
<p class="tab">Increases the <a href="/jargon/v/verbose.htm">verbosity</a> level, causing <b>nmap</b> to print more information about the scan in progress. Open ports are shown as they are found and completion time estimates are provided when <b>nmap</b> thinks a scan takes more than a few minutes. Use it twice or more for even greater verbosity: <b>-vv</b>, or give a verbosity level directly, for example <b>-v3</b>.</p>
<p class="tab">Most changes only affect interactive output, and some also affect normal and script kiddie output. The other output types are meant to be processed by machines, so <b>nmap</b> can give substantial detail by default in those formats without fatiguing a human user. However, there are a few changes in other modes where output size can be reduced substantially by omitting some detail. For example, a comment line in the grepable output that provides a list of all ports scanned is only printed in verbose mode because it can be quite long.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-d</b></td>
<td>Increase debugging level.</td>
</tr>
</table>
<p class="tab">When even verbose mode doesn't provide sufficient data for you, <a href="/jargon/d/debug.htm">debugging</a> is available to flood you with much more. As with the verbosity option (<b>-v</b>), debugging is enabled with a command-line flag (<b>-d</b>) and the debug level can be increased by specifying it multiple times, as in <b>-dd</b>, or by setting a level directly. For example, <b>-d9</b> sets level nine. That is the highest effective level and produces thousands of lines unless you run a very simple scan with very few ports and targets.</p>
<p class="tab">Debugging output is useful when a bug is suspected in <b>nmap</b>, or if you are confused as to what <b>nmap</b> is doing and why. As this feature is mostly intended for developers, debug lines aren't always self-explanatory. You may get something like: <b>Timeout vals: srtt: -1 rttvar: -1 to: 1000000 delta 14987 ==&gt; srtt: 14987 rttvar: 14987 to: 100000</b>. If you don't understand a line, your only recourses are to ignore it, look it up in the <a href="/jargon/s/source.htm">source code</a>, or request help from the development list (<b>nmap-dev</b>). Some lines are self explanatory, but the messages become more obscure as the debug level is increased.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--reason</b></td>
<td>Host and port state reasons.</td>
</tr>
</table>
<p class="tab">Shows the reason each port is set to a specific state and the reason each host is up or down. This option displays the type of the packet that determined a port or hosts state. For example, A RST packet from a closed port or an echo reply from an alive host. The information <b>nmap</b> can provide is determined by the type of scan or ping. The SYN scan and SYN ping (<b>-sS</b> and <b>-PS</b>) are very detailed, but the TCP connect scan (<b>-sT</b>) is limited by the implementation of the connect system call. This feature is automatically enabled by the debug option (<b>-d</b>) and the results are stored in XML log files even if this option is not specified.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--stats-every</b> <i>time</i></td>
<td>Print periodic timing stats.</td>
</tr>
</table>
<p class="tab">Periodically prints a timing status message after each interval of time. The time is a specification of the kind described in the section called "<a href="#timing">Timing and Performance</a>"; so for example, use <b>--stats-every 10s</b> to get a status update every 10 seconds. Updates are printed to interactive output (the screen) and XML output.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--packet-trace</b></td>
<td>Trace packets and data sent and received.</td>
</tr>
</table>
<p class="tab">Causes <b>nmap</b> to print a summary of every packet sent or received. This is often used for debugging, but is also a valuable way for new users to understand exactly what <b>nmap</b> is doing under the covers. To avoid printing thousands of lines, you may want to specify a limited number of ports to scan, such as <b>-p20-30</b>. If you only care about the goings-on of the version detection subsystem, use <b>--version-trace</b> instead. If you only care about script tracing, specify <b>--script-trace</b>. With <b>--packet-trace</b>, you get all the above.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--open</b></td>
<td>Show only open (or possibly open) ports.</td>
</tr>
</table>
<p class="tab">Sometimes you only care about ports you can actually connect to (<b>open</b> ones), and don't want results cluttered with <b>closed</b>, <b>filtered</b>, and <b>closed|filtered</b> ports. Output customization is normally done after the scan using tools such as <b>grep</b>, <b>awk</b>, and <b>Perl</b>, but this feature was added due to overwhelming requests. Specify <b>--open</b> to only see hosts with at least one <b>open</b>, <b>open|filtered</b>, or <b>unfiltered</b> port, and only see ports in those states. These three states are treated as they normally are, which means that <b>open|filtered</b> and <b>unfiltered</b> may be condensed into counts if there are an overwhelming number of them.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--iflist</b></td>
<td>List interfaces and routes.</td>
</tr>
</table>
<p class="tab">Prints the interface list and system routes as detected by <b>nmap</b>. This is useful for debugging routing problems or device mischaracterization (such as <b>nmap</b> treating a PPP connection as Ethernet).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--log-errors</b></td>
<td>Log errors/warnings to normal mode output file.</td>
</tr>
</table>
<p class="tab">Warnings and errors printed by <b>nmap</b> usually go only to the screen (interactive output), leaving any normal-format output files (usually specified with <b>-oN</b>) uncluttered. When you do want to see those messages in the normal output file you specified, add this option. It is useful when you aren't watching the interactive output or when you want to record errors while debugging a problem. The error and warning messages will still appear in interactive mode too. This won't work for most errors related to bad command-line arguments because <b>nmap</b> may not have initialized its output files yet. Also, some <b>nmap</b> error and warning messages use a different system which does not yet support this option.</p>
<p class="tab">An alternative to <b>--log-errors</b> is redirecting interactive output (including the standard error stream) to a file. Most Unix shells make this approach easy, though it can be difficult on Windows.</p>
<h3 class="tab">Miscellaneous output options</h3>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--append-output</b></td>
<td>Append to rather than clobber output files.</td>
</tr>
</table>
<p class="tab">When you specify a filename to an output format flag such as <b>-oX</b> or <b>-oN</b>, that file is overwritten by default. If you prefer to keep the existing content of the file and append the new results, specify the <b>--append-output</b> option. All output file names specified in that <b>nmap</b> execution are appended to rather than clobbered. This doesn't work well for XML (<b>-oX</b>) scan data as the resultant file generally won't parse properly until you fix it up by hand.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--resume</b> <i>filename</i></td>
<td>Resume aborted scan.</td>
</tr>
</table>
<p class="tab">Some extensive <b>nmap</b> runs take a very long time&mdash;on the order of days. Such scans don't always run to completion. Restrictions may prevent <b>nmap</b> from being run during working hours, the network could go down, the machine <b>nmap</b> is running on might suffer a planned or unplanned reboot, or <b>nmap</b> itself could crash. The administrator running <b>nmap</b> could cancel it for any other reason as well, by pressing <a href="/jargon/c/ctrlc.htm"><kbd>Ctrl</kbd>+<kbd>C</kbd></a>. Restarting the whole scan from the beginning may be undesirable. Fortunately, if normal (<b>-oN</b>) or grepable (<b>-oG</b>) logs were kept, the user can ask <b>nmap</b> to resume scanning with the target it was working on when execution ceased. Specify the <b>--resume</b> option and pass the normal/grepable output file as its argument. No other arguments are permitted, as <b>nmap</b> parses the output file to use the same ones specified previously. Call <b>nmap</b> as <b>nmap --resume logfilename</b>. <b>nmap</b> will append new results to the data files specified in the previous execution. Resumption does not support the XML output format because combining the two runs into one valid XML file would be difficult.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--stylesheet</b> <i>path or URL</i></td>
<td>Set XSL stylesheet to transform XML output.</td>
</tr>
</table>
<p class="tab"><b>nmap</b> ships with an XSL stylesheet named nmap.xsl for viewing or translating XML output to HTML. The XML output includes an <b>xml-stylesheet</b> directive which points to <b>nmap.xml</b> where it was initially installed by <b>nmap</b>. Run the XML file through an <a href="/jargon/x/xslt.htm">XSLT</a> processor such as <b>xsltproc</b>[17] to produce an HTML file. Directly opening the XML file in a browser no longer works well because modern browsers limit the locations from which a stylesheet may be loaded. If you want to use a different stylesheet, specify the argument to <b>--stylesheet</b>. You must pass the full pathname or URL. One common invocation is <b>--stylesheet https://svn.nmap.org/nmap/docs/nmap.xsl</b>. This tells an XSLT processor to load the latest version of the stylesheet from <a href="https://svn.nmap.org/nmap/docs/nmap.xsl">nmap.org</a>. The <b>--webxml</b> option does the same thing with less typing and memorization. Loading the XSL from nmap.org makes it easier to view results on a machine that doesn't have <b>nmap</b> (and thus <b>nmap.xsl</b>) installed. So the URL is often more useful, but the local filesystem location of <b>nmap.xsl</b> is used by default for privacy reasons.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--webxml</b></td>
<td>Load stylesheet from nmap.org.</td>
</tr>
</table>
<p class="tab">This is a convenience option, nothing more than an alias for <b>--stylesheet https://svn.nmap.org/nmap/docs/nmap.xsl</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--no-stylesheet</b></td>
<td>Omit XSL stylesheet declaration from XML.</td>
</tr>
</table>
<p class="tab">Specify this option to prevent <b>nmap</b> from associating any XSL stylesheet with its XML output. The <b>xml-stylesheet</b> directive is omitted.</p>
<h3 class="tab">Options: miscellaneous</h3>
<table class="mtable4 tab">
<tr class="tcw">
<td style="width:230px"><b>-6</b></td>
<td>Enable IPv6 scanning.</td>
</tr>
<tr class="tcw">
<td><b>-A</b></td>
<td>Enable OS detection, version detection, script scanning, and traceroute.</td>
</tr>
<tr class="tcw">
<td><b>--datadir</b> <i>&lt;dirname&gt;</i></td>
<td>Specify custom Nmap data file location.</td>
</tr>
<tr class="tcw">
<td><b>--send-eth/--send-ip</b></td>
<td>Send using raw Ethernet frames or IP packets.</td>
</tr>
<tr class="tcw">
<td><b>--privileged</b></td>
<td>Assume that the user is fully privileged.</td>
</tr>
<tr class="tcw">
<td><b>--unprivileged</b></td>
<td>Assume the user lacks raw socket privileges.</td>
</tr>
<tr class="tcw">
<td><b>-V</b></td>
<td>Print version number.</td>
</tr>
<tr class="tcw">
<td><b>-h</b></td>
<td>Print this help summary page.</td>
</tr>
</table>
<p class="tab">This section describes some important (and not-so-important) options that don't really fit anywhere else.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td>-6</td>
<td>Enable IPv6 scanning.</td>
</tr>
</table>
<p class="tab"><b>nmap</b> has IPv6 support for its most popular features. Ping scanning, port scanning, version detection, and the <b>nmap</b> Scripting Engine all support IPv6. The command syntax is the same as usual except that you also add the <b>-6</b> option. Of course, you must use IPv6 syntax if you specify an address rather than a hostname. An address might look like <b>3ffe:7501:4819:2000:210:f3ff:fe03:14d0</b>, so hostnames are recommended. The output looks the same as usual, with the IPv6 address on the "interesting ports" line being the only IPv6 giveaway.</p>
<p class="tab">While IPv6 hasn't exactly taken the world by storm, it gets significant use in some (usually Asian) countries and most modern operating systems support it. To use <b>nmap</b> with IPv6, both the source and target of your scan must be configured for IPv6. If your ISP (like most of them) does not allocate IPv6 addresses to you, free tunnel brokers are widely available and work fine with <b>nmap</b>. I use the free IPv6 tunnel broker service at <a href="https://www.tunnelbroker.net/" class="external">https://www.tunnelbroker.net/</a>. Other tunnel brokers are listed at <a href="https://en.wikipedia.org/wiki/Tunnel_broker" class="external">Wikipedia</a>. "6to4" tunnels are another popular, free approach.</p>
<p class="tab">On Windows, raw-socket IPv6 scans are supported only on Ethernet devices (not tunnels), and only on Windows Vista and later. Use the <b>--unprivileged</b> option in other situations.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-A</b></td>
<td>Aggressive scan options.</td>
</tr>
</table>
<p class="tab">This option enables additional advanced and aggressive options. Presently this enables OS detection (<b>-O</b>), version scanning (<b>-sV</b>), script scanning (<b>-sC</b>) and traceroute (<b>--traceroute</b>). More features may be added in the future. The point is to enable a comprehensive set of scan options without people having to remember a large set of flags. However, because script scanning with the default set is considered intrusive, you should not use <b>-A</b> against target networks without permission. This option only enables features, and not timing options (such as <b>-T4</b>) or verbosity options (<b>-v</b>) that you might want as well.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--datadir</b> <i>directoryname</i></td>
<td>Specify custom <b>nmap</b> data file location.</td>
</tr>
</table>
<p class="tab"><b>nmap</b> obtains some special data at runtime in files named <b>nmap-service-probes</b>, <b>nmap-services</b>, <b>nmap-protocols</b>, <b>nmap-rpc</b>, <b>nmap-mac-prefixes</b>, and <b>nmap-os-db</b>. If the location of any of these files are specified (using the <b>--servicedb</b> or <b>--versiondb</b> options), that location is used for that file. After that, <b>nmap</b> searches these files in the directory specified with the <b>--datadir</b> option (if any). Any files not found there, are searched for in the directory specified by the <b>NMAPDIR</b> environment variable. Next comes <b>~/.nmap</b> for real and effective UIDs; or on Windows, <b>HOME\AppData\Roaming\nmap</b> (where <b>HOME</b> is the user's home directory, like <b>C:\Users\user</b>). This is followed by the location of the <b>nmap</b> executable and the same location with <b>../share/nmap</b> appended. Then a compiled-in location such as <b>/usr/local/share/nmap</b> or <b>/usr/share/nmap</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--servicedb</b> <i>services file</i></td>
<td>Specify custom services file.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to use the specified services file rather than the <b>nmap-services</b> data file that comes with <b>nmap</b>. Using this option also causes a fast scan (<b>-F</b>) to be used. See the description for <b>--datadir</b> for more information on <b>nmap</b>'s data files.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--versiondb</b> <i>service probes file</i></td>
<td>Specify custom service probes file.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to use the specified service probes file rather than the <b>nmap-service-probes</b> data file that comes with <b>nmap</b>. See the description for <b>--datadir</b> for more information on <b>nmap</b>'s data files.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--send-eth</b></td>
<td>Use raw Ethernet sending.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to send packets at the raw Ethernet (data link) layer rather than the higher IP (network) layer. By default, <b>nmap</b> chooses the one that is generally best for the platform it is running on. Raw sockets (IP layer) are generally most efficient for Unix machines, while Ethernet frames are required for Windows operation since Microsoft disabled raw socket support. <b>nmap</b> still uses raw IP packets on Unix despite this option when there is no other choice (such as non-Ethernet connections).</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--send-ip</b></td>
<td>Send at raw IP level.</td>
</tr>
</table>
<p class="tab">Asks <b>nmap</b> to send packets via raw IP sockets rather than sending lower level Ethernet frames. It is the complement to the <b>--send-eth</b> option discussed previously.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--privileged</b></td>
<td>Assume that the user is fully privileged.</td>
</tr>
</table>
<p class="tab">Tells <b>nmap</b> to assume that it is privileged enough to perform raw socket sends, packet sniffing, and similar operations that usually require root privileges on Unix systems. By default, <b>nmap</b> quits if such operations are requested but geteuid is not zero. <b>--privileged</b> is useful with Linux kernel capabilities and similar systems that are configured to allow unprivileged users to perform raw-packet scans. Be sure to provide this option flag before any flags for options that require privileges (SYN scan, OS detection, etc.) The <b>NMAP_PRIVILEGED</b> environment variable may be set as an equivalent alternative to <b>--privileged</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--unprivileged</b></td>
<td>Assume that the user lacks raw socket privileges.</td>
</tr>
</table>
<p class="tab">This option is the opposite of <b>--privileged</b>. It tells <b>nmap</b> to treat the user as lacking network raw socket and sniffing privileges. This is useful for testing, debugging, or when the raw network functionality of your operating system is somehow broken. The <b>NMAP_UNPRIVILEGED</b> environment variable may be set as an equivalent alternative to <b>--unprivileged</b>.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>--release-memory</b></td>
<td>Release memory before quitting.</td>
</tr>
</table>
<p class="tab">This option is only useful for memory-leak debugging. It causes <b>nmap</b> to release allocated memory before it quits so that actual memory leaks are easier to spot. Normally <b>nmap</b> skips this as the OS does this upon process termination.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-V</b>, <b>--version</b></td>
<td>Print version number.</td>
</tr>
</table>
<p class="tab">Prints the <b>nmap</b> version number and exits.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td><b>-h</b>, <b>--help</b></td>
<td>Print help summary page.</td>
</tr>
</table>
<p class="tab">Prints a short help screen with the most common command flags. Running <b>nmap</b> without any arguments does the same thing.</p>
<h2><a href="runtime">Runtime interaction</a></h2>
<p class="tab">During the execution of <b>nmap</b>, all key presses are captured. This allows you to interact with the program without aborting and restarting it. Certain special keys change options, while any other keys print out a status message telling you about the scan. The convention is that <a href="/jargon/l/lowercas.htm">lowercase</a> letters increase the amount of printing, and uppercase letters decrease the printing. You may also press &lsquo;<b>?</b>&rsquo; for help.</p>
<table class="mtable3 tab">
<tr class="tcw">
<td style="width:70px"><b>v</b> / <b>V</b></td>
<td>Increase / decrease the verbosity level.</td>
</tr>
<tr class="tcw">
<td><b>d</b> / <b>D</b></td>
<td>Increase / decrease the debugging level.</td>
</tr>
<tr class="tcw">
<td><b>p</b> / <b>P</b></td>
<td>Turn on / off packet tracing.</td>
</tr>
<tr class="tcw">
<td><b>?</b></td>
<td>Print a runtime interaction help screen.</td>
</tr>
</table>
<p class="tab">Anything else prints out a status message like this:</p>
<pre class="tab">Stats: 0:00:07 elapsed; 20 hosts completed (1 up), 1 undergoing Service Scan Service scan Timing: About 33.33% done; ETC: 20:57 (0:00:12 remaining)</pre>
<h2><a href="typical">A typical nmap scan</a></h2>
<pre class="tcy tab">nmap -A -T4 scanme.nmap.org</pre>
<p class="tab">output:</p>
<pre class="tab">Nmap scan report for scanme.nmap.org (74.207.244.221)
Host is up (0.029s latency).
rDNS record for 74.207.244.221: li86-221.members.linode.com
Not shown: 995 closed ports
PORT     STATE    SERVICE     VERSION
22/tcp   open     ssh         OpenSSH 5.3p1 Debian 3ubuntu7 (protocol 2.0)
| ssh-hostkey: 1024 8d:60:f1:7c:ca:b7:3d:0a:d6:67:54:9d:69:d9:b9:dd (DSA)
|_2048 79:f8:09:ac:d4:e2:32:42:10:49:d3:bd:20:82:85:ec (RSA)
80/tcp   open     http        Apache httpd 2.2.14 ((Ubuntu))
|_http-title: Go ahead and ScanMe!
646/tcp  filtered ldp
1720/tcp filtered H.323/Q.931
9929/tcp open     nping-echo  Nping echo
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:kernel:2.6.39
OS details: Linux 2.6.39
Network Distance: 11 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:kernel
TRACEROUTE (using port 53/tcp)
HOP RTT      ADDRESS
[Cut first 10 hops for brevity]
11  17.65 ms li86-221.members.linode.com (74.207.244.221)
Nmap done: 1 IP address (1 host up) scanned in 14.40 seconds
</pre>
<h2 id="examples">Examples</h2>
<p class="tab">Here are some <b>nmap</b> usage examples, from the simple and routine to a little more complex and esoteric. Some actual IP addresses and domain names are used to make things more concrete. In their place, you should substitute addresses/names from your own network. While I don't think port scanning other networks is or should be illegal, some network administrators don't appreciate unsolicited scanning of their networks and may complain. Getting permission first is the best approach. For testing purposes, you have permission to scan the host <b>scanme.nmap.org</b>. This permission only includes scanning via <b>nmap</b> and not testing exploits or denial of service attacks. To conserve bandwidth, please do not initiate more than a dozen scans against that host per day. If this free scanning target service is abused, it will be taken down and <b>nmap</b> will report <b>Failed to resolve given hostname/IP: scanme.nmap.org</b>. These permissions also apply to the hosts <b>scanme2.nmap.org</b>, <b>scanme3.nmap.org</b>, and so on, though those hosts do not currently exist.</p>
<pre class="tcy tab">nmap -v scanme.nmap.org</pre>
<p class="tab">This option scans all reserved TCP ports on the machine <b>scanme.nmap.org</b>. The <b>-v</b> option enables verbose mode.</p>
<pre class="tcy tab">nmap -sS -O scanme.nmap.org/24</pre>
<p class="tab">Launches a stealth SYN scan against each machine that is up out of the 256 IPs on the class C sized network where <b>Scanme</b> resides. It also tries to determine what operating system is running on each host that is up and running. This requires root privileges because of the SYN scan and OS detection.</p>
<pre class="tcy tab">nmap -sV -p 22,53,110,143,4564 198.116.0-255.1-127</pre>
<p class="tab">Launches host enumeration and a TCP scan at the first half of each of the 255 possible eight-bit subnets in the 198.116 class B address space. This tests whether the systems run <a href="/jargon/s/ssh.htm">SSH</a>, <a href="/jargon/d/dns.htm">DNS</a>, <a href="/jargon/p/pop.htm">POP3</a>, or <a href="/jargon/i/imap.htm">IMAP</a> on their standard ports, or anything on port <b>4564</b>. For any of these ports found open, version detection is used to determine what application is running.</p>
<pre class="tcy tab">nmap -v -iR 100000 -Pn -p 80</pre>
<p class="tab">Asks <b>nmap</b> to choose 100,000 hosts at random and scan them for web servers (port <b>80</b>). Host enumeration is disabled with <b>-Pn</b> since first sending a couple probes to determine whether a host is up is wasteful when you are only probing one port on each target host.</p>
<pre class="tcy tab">nmap -Pn -p80 -oX logs/pb-port80scan.xml -oG 
     logs/pb-port80scan.gnmap 216.163.128.20/20</pre>
<p class="tab">This scans 4096 IPs for any web servers (without pinging them) and saves the output in grepable and XML formats.</p>
<h2 id="related">Related commands</h2>
<p class="tab"><a href="/unix/unice.htm"><b>nice</b></a> &mdash; Invoke a command with an altered scheduling priority.</p>
</article>
<div class="bottomad" aria-hidden="true">
<ins class="adsbygoogle" data-ad-client="ca-pub-3999293766533555" data-ad-format="auto" data-ad-slot="6514780129" style="display:block"></ins>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<aside><div id="meta_wrap" class="cf"><ul class="options cf"><li class="useful-page"><span class="nolink">Was this page useful?</span><a href="/cgi-bin/feedback.cgi?yes" class="first-child" rel="nofollow">Yes</a><a href="/cgi-bin/feedback.cgi?no" rel="nofollow">No</a></li><li><ul><li class="feedback"><a href="/feedback/" rel="nofollow" title="Give us your feedback about this page">Feedback</a></li><li class="email"><a href="/contact/" rel="nofollow" title="E-mail Computer Hope">E-mail</a></li><li class="share"><a href="/share/" rel="nofollow" title="Share this page with friends and social networks">Share</a></li><li class="first-child print"><a href="#" onclick="window.print();return false;" rel="nofollow" title="Print a copy of this page">Print</a></li></ul></li></ul></div></aside>
</div>
<footer><form action="https://www.computerhope.com/cgi-bin/search.cgi" role="search" method="post" class="cf"><input class="sbar" name="q" aria-label="search" type="text" /><button type="Submit">Search</button></form><div role="navigation" aria-label="footer"><ul class="cf"><li class="recent-pages"><ol><li class="ftitle">Recently added pages</li><li id="ra1"></li><li id="ra2"></li><li id="ra3"></li><li id="ra4"></li><li id="ra5"></li><li><a href="/whatnew.htm">View all recent updates</a></li></ol></li><li class="useful-links"><ol><li class="ftitle">Useful links</li><li><a href="/more.htm">About Computer Hope</a></li><li><a href="/sindex.htm">Site Map</a></li><li><a href="/forum/">Forum</a></li><li><a href="/contact/">Contact Us</a></li><li><a href="/issues/ch000586.htm">How to Help</a></li><li><a href="/chtop10.htm">Top 10 pages</a></li></ol></li><li class="social-networks"><ol><li class="ftitle">Follow us</li><li><a href="https://www.facebook.com/computerhope/" class="facebook">Facebook</a></li><li><a href="https://twitter.com/computerhope/" class="twitter">Twitter</a></li><li><a href="https://www.pinterest.com/computerhope/" class="pinterest">Pinterest</a></li><li><a href="https://www.youtube.com/user/Computerhope/" class="youtube">YouTube</a></li><li><a href="/rss.htm" class="rss">RSS</a></li></ol></li></ul></div><div class="copyright"><a href="/"><span class="blogo" title="Computer Hope home page" aria-hidden="true"></span><span class="sr">Computer Hope home page</span></a>&copy; 2022 Computer Hope<br><a href="/legal.htm" class="legal">Legal Disclaimer - Privacy Statement</a></div></footer>
</div>
<script async src="https://www.computerhope.com/ch.js"></script>
<div id="tt" aria-hidden="true"></div>
<script>(function(){var js = "window['__CF$cv$params']={r:'740a832699eec410',m:'btgQVuMiYPVDlG7xnt4RodaWuWs0yUsRJ.GrHAJmW1g-1661495358-0-AYGfe2FjXywIBK+sD5Q+qZ9vo4aO+gDrytia3r/RmZJ43znknyz0FvsAR8b99c1Rlr4or9tcptaj434AUE9LpVXpmbD9nPjMB9f9I4DEbvg23uQBlQnfQhhJTJmwkEKRuQ==',s:[0xc9aed9269e,0xc892c62560],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>